bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  m,  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  m  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  m,  denominatorDegreesOfFreedom);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  m,  denominatorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  m	99	None	replace
2	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(m,  p,  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  m  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(m,  p,  denominatorDegreesOfFreedom);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(m,  p,  denominatorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  m	99	None	replace
3	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  n,  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  n  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  n,  denominatorDegreesOfFreedom);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  n,  denominatorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  n	99	None	replace
4	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  x,  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  x  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  x,  denominatorDegreesOfFreedom);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  x,  denominatorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  x	99	None	replace
5	[BUG]  [BUGGY]  return(p  >=  0.0)?  0.0  :  0.0;  (p  >=  0.0)?  0.0  :  0.0;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >=  0.0)?  0.0  :  0.0;  (p  >=  0.0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >=    0.0)?    0.0    :    0.0;    (p  >=  0.0)?  0.0  :  0.0;	  	non-compiled	[CE]  not  a  statement	53	None	add
6	[BUG]  [BUGGY]  return(p  >=  0.0)?  0.0  :  0.0;  if(p  >=  0.0)?  0.0  :  0.0;  if(m  ==  numeratorDegreesOfFreedom)  {  return(p  >=  0.0)?  0.0  :  0.0;  }  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >=  0.0)?  0.0  :  0.0;  if(p  >=  0.0)?  0.0  :  0.0;  if(m  ==  numeratorDegreesOfFreedom)  {  return(p  >=  0.0)?  0.0  :  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >=    0.0)?    0.0    :    0.0;    if(p  >=  0.0)?  0.0  :  0.0;  if(m  ==  numeratorDegreesOfFreedom)  {  return(p  >=  0.0)?  0.0  :  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
7	[BUG]  [BUGGY]  return(p  >=  0.0)?  0.0  :  0.0;  if(p  >=  0.0)?  0.0  :  0.0;  if(m!=  numeratorDegreesOfFreedom)  {  return(p  >=  0.0)?  0.0  :  0.0;  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >=  0.0)?  0.0  :  0.0;  if(p  >=  0.0)?  0.0  :  0.0;  if(m!=  numeratorDegreesOfFreedom)  {  return(p  >=  0.0)?  0.0  :  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >=    0.0)?    0.0    :    0.0;    if(p  >=  0.0)?  0.0  :  0.0;  if(m!=  numeratorDegreesOfFreedom)  {  return(p  >=  0.0)?  0.0  :  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
8	[BUG]  [BUGGY]  return(p  >=  0.0)?  0.0  :  0.0;  if(p  >=  0.0)?  0.0  :  0.0;  if(m  ==  numeratorDegreesOfFreedom)  {  return(p  >>  0.0)?  0.0  :  0.0;  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >=  0.0)?  0.0  :  0.0;  if(p  >=  0.0)?  0.0  :  0.0;  if(m  ==  numeratorDegreesOfFreedom)  {  return(p  >>  0.0)?  0.0  :  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >=    0.0)?    0.0    :    0.0;    if(p  >=  0.0)?  0.0  :  0.0;  if(m  ==  numeratorDegreesOfFreedom)  {  return(p  >>  0.0)?  0.0  :  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
9	[BUG]  [BUGGY]  return(p  >=  0.0)?  0.0  :  0.0;  double  p  =(p  >=  0.0)?  0.0  :  0.0;  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >=  0.0)?  0.0  :  0.0;  double  p  =(p  >=  0.0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >=    0.0)?    0.0    :    0.0;    double  p  =(p  >=  0.0)?  0.0  :  0.0;	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	53	None	add
10	[BUG]  [BUGGY]  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  p  =  getDomainLowerBound(p);  [CE]  unreachable  statement  [FE]              StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  p  =  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  p  =  getDomainLowerBound(p);	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    p    =    getDomainLowerBound(p);    	non-compiled	[CE]  unreachable  statement	69	None	replace
11	[BUG]  [BUGGY]  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  p  =  getDomainLowerBound(p);  [CE]  unreachable  statement  [FE]                StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  p  =  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  p  =  getDomainLowerBound(p);	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    p    =    getDomainLowerBound(p);    	non-compiled	[CE]  unreachable  statement	69	None	replace
12	[BUG]  [BUGGY]  return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  p  =  getDomainLowerBound(p);  [CE]  unreachable  statement  [FE]                  StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  p  =  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  p  =  getDomainLowerBound(p);	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    p    =    getDomainLowerBound(p);    	non-compiled	[CE]  unreachable  statement	69	None	replace
13	[BUG]  [BUGGY]  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  (p  >=  0.0)?  getDomainLowerBound(p):  0.0;  [CE]  not  a  statement  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  (p  >=  0.0)?  getDomainLowerBound(p):  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >=    0.0)?    getDomainLowerBound(p):    0.0;    (p  >=  0.0)?  getDomainLowerBound(p):  0.0;	  	non-compiled	[CE]  not  a  statement	48	None	add
14	[BUG]  [BUGGY]  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  double  p  =  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  double  p  =  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >=    0.0)?    getDomainLowerBound(p):    0.0;    double  p  =  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	48	None	add
15	[BUG]  [BUGGY]  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  if(p  <  0.0)?  getDomainLowerBound(p):  0.0;  [CE]  illegal  start  of  expression  [FE]        StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  if(p  <  0.0)?  getDomainLowerBound(p):  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >=    0.0)?    getDomainLowerBound(p):    0.0;    if(p  <  0.0)?  getDomainLowerBound(p):  0.0;	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
16	[BUG]  [BUGGY]  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  Double  p  =  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]          StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  Double  p  =  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >=    0.0)?    getDomainLowerBound(p):    0.0;    Double  p  =  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	48	None	add
17	[BUG]  [BUGGY]  return(p  <  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;	  return(p    <    0.0)?    0.0    :    0.0;    if(p    <    0.0)?    0.0    :    0.0;    if(p    <    0.0)?    0.0    :    0.0;    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
18	[BUG]  [BUGGY]  return(p  <  =  0.0)?  0.0  :  0.0;  if(p  <  0.0)?  0.0  :  0.0;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  =  0.0)?  0.0  :  0.0;  if(p  <  0.0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  =  0.0)?  0.0  :  0.0;  if(p  <  0.0)?  0.0  :  0.0;	  return(p    <    0.0)?    0.0    :    0.0;    if(p    <    0.0)?    0.0    :    0.0;    if(p    <    0.0)?    0.0    :    0.0;    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
19	[BUG]  [BUGGY]  return(p  >  0.0)?  0.0  :  0.0;  if(p  <  0.0)?  0.0  :  0.0;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0.0)?  0.0  :  0.0;  if(p  <  0.0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >  0.0)?  0.0  :  0.0;  if(p  <  0.0)?  0.0  :  0.0;	  return(p    <    0.0)?    0.0    :    0.0;    if(p    <    0.0)?    0.0    :    0.0;    if(p    <    0.0)?    0.0    :    0.0;    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
20	[BUG]  [BUGGY]  Double  p  =  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  p  =  getDomainLowerBound(p);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  p  =  getDomainLowerBound(p);	          Double    m    =    getDomainLowerBound(p);    double    p    =    getDomainLowerBound(p);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	40	None	replace
21	[BUG]  [BUGGY]  double  p  =  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]              StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  p  =  getDomainLowerBound(p);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  p  =  getDomainLowerBound(p);	          Double    m    =    getDomainLowerBound(p);    double    p    =    getDomainLowerBound(p);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	40	None	replace
22	[BUG]  [BUGGY]  return(p  <  0.0)?  0.0  :  0.0;  p  >  0.0)?  0.0  :  0.0;  [CE]  not  a  statement  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  0.0)?  0.0  :  0.0;  p  >  0.0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  0.0)?  0.0  :  0.0;  p  >  0.0)?  0.0  :  0.0;	  return(p    >    0.0)?    0.0    :    0.0;    p    >    0.0)?    0.0    :    0.0;    	non-compiled	[CE]  not  a  statement	81	None	replace
23	[BUG]  [BUGGY]  return(p  >  0.0)?  0.0  :  0.0;  p  <  =  0.0)?  0.0  :  0.0;  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0.0)?  0.0  :  0.0;  p  <  =  0.0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >  0.0)?  0.0  :  0.0;  p  <  =  0.0)?  0.0  :  0.0;	  return(p    >    0.0)?    0.0    :    0.0;    p    >    0.0)?    0.0    :    0.0;    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
24	[BUG]  [BUGGY]  return(p  <  =  0.0)?  0.0  :  0.0;  p  >  0.0)?  0.0  :  0.0;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  =  0.0)?  0.0  :  0.0;  p  >  0.0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  =  0.0)?  0.0  :  0.0;  p  >  0.0)?  0.0  :  0.0;	  return(p    >    0.0)?    0.0    :    0.0;    p    >    0.0)?    0.0    :    0.0;    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
25	[BUG]  [BUGGY]  return(p  <  0.0)?  getDomainLowerBound()  :  Double.POSITIVE_INFINITY;  [CE]  no  suitable  method  found  for  getDomainLowerBound()  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  0.0)?  getDomainLowerBound()  :  Double.POSITIVE_INFINITY;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  0.0)?  getDomainLowerBound()  :  Double.POSITIVE_INFINITY;	  return(p    <    0.0)?    getDomainLowerBound()    :    0.0;    	non-compiled	[CE]  no  suitable  method  found  for  getDomainLowerBound()	9	None	replace
26	[BUG]  [BUGGY]  return(p  <  =  0.0)?  getDomainLowerBound()  :  0.0;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  =  0.0)?  getDomainLowerBound()  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  =  0.0)?  getDomainLowerBound()  :  0.0;	  return(p    <    0.0)?    getDomainLowerBound()    :    0.0;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
27	[BUG]  [BUGGY]  return(p  <  0.0)?  getDomainLowerBound()  :  Double.MIN_VALUE;  [CE]  no  suitable  method  found  for  getDomainLowerBound()  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  0.0)?  getDomainLowerBound()  :  Double.MIN_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  0.0)?  getDomainLowerBound()  :  Double.MIN_VALUE;	  return(p    <    0.0)?    getDomainLowerBound()    :    0.0;    	non-compiled	[CE]  no  suitable  method  found  for  getDomainLowerBound()	9	None	replace
28	[BUG]  [BUGGY]  Math.min(numeratorDegreesOfFreedom,  getDomainLowerBound());  [CE]  no  suitable  method  found  for  getDomainLowerBound()  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Math.min(numeratorDegreesOfFreedom,  getDomainLowerBound());  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Math.min(numeratorDegreesOfFreedom,  getDomainLowerBound());	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,    getNumeratorDegreesOfFreedom());    	non-compiled	[CE]  no  suitable  method  found  for  getDomainLowerBound()	33	None	replace
29	[BUG]  [BUGGY]  Math.min(numeratorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  [CE]  missing  return  statement  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Math.min(numeratorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Math.min(numeratorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,    getNumeratorDegreesOfFreedom());    	non-compiled	[CE]  missing  return  statement	33	None	replace
30	[BUG]  [BUGGY]  Math.min(denominatorDegreesOfFreedom,  getNumberDegreesOfFreedom());  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Math.min(denominatorDegreesOfFreedom,  getNumberDegreesOfFreedom());  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Math.min(denominatorDegreesOfFreedom,  getNumberDegreesOfFreedom());	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,    getNumeratorDegreesOfFreedom());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
31	[BUG]  [BUGGY]  Math.min(numeratorDegreesOfFreedom,  getNumberDegreesOfFreedom());  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Math.min(numeratorDegreesOfFreedom,  getNumberDegreesOfFreedom());  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Math.min(numeratorDegreesOfFreedom,  getNumberDegreesOfFreedom());	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,    getNumeratorDegreesOfFreedom());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
32	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  m,  numeratorDegreesOfFreedom);  [CE]  cannot  find  symbol  m  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  m,  numeratorDegreesOfFreedom);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  m,  numeratorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  m	25	None	replace
33	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(m,  p,  numeratorDegreesOfFreedom);  [CE]  cannot  find  symbol  m  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(m,  p,  numeratorDegreesOfFreedom);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(m,  p,  numeratorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  m	25	None	replace
34	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  n,  numeratorDegreesOfFreedom);  [CE]  cannot  find  symbol  n  [FE]                      IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  n,  numeratorDegreesOfFreedom);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  n,  numeratorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  n	25	None	replace
35	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  x,  numeratorDegreesOfFreedom);  [CE]  cannot  find  symbol  x  [FE]                        IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  x,  numeratorDegreesOfFreedom);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  x,  numeratorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  x	25	None	replace
36	[BUG]  [BUGGY]  double  p  =  getDomainLowerBound();  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  p  =  getDomainLowerBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  p  =  getDomainLowerBound();	  return    1.0;    double    p    =    getDomainLowerBound();    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	18	None	replace
37	[BUG]  [BUGGY]  p  =  getDomainLowerBound();  [CE]  no  suitable  method  found  for  getDomainLowerBound()  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  p  =  getDomainLowerBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	p  =  getDomainLowerBound();	  return    1.0;    double    p    =    getDomainLowerBound();    	non-compiled	[CE]  no  suitable  method  found  for  getDomainLowerBound()	18	None	replace
38	[BUG]  [BUGGY]  n  =  getDomainLowerBound();  [CE]  cannot  find  symbol  n  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  n  =  getDomainLowerBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	n  =  getDomainLowerBound();	  return    1.0;    double    p    =    getDomainLowerBound();    	non-compiled	[CE]  cannot  find  symbol  n	18	None	replace
39	[BUG]  [BUGGY]  timeout  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  0.0)  {  return  1.0;  }  else  {  return  1.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	if(p  <  0.0)  {  return  1.0;  }  else  {  return  1.0;  }	  return    1.0;    if(p    <    0.0)    {    return    1.0;    }    else    {    return    1.0;    }    	compilable	timeout	121	1	replace
40	[BUG]  [BUGGY]  if(p  <  0.0)  {  return  1.0;  }  else  {  return  1.0;  }  timeout  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  0.0)  {  return  1.0;  }  else  {  return  1.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  <  0.0)  {  return  1.0;  }  else  {  return  1.0;  }	  return    1.0;    if(p    <    0.0)    {    return    1.0;    }    else    {    return    1.0;    }    	compilable	timeout	121	1	replace
41	[BUG]  [BUGGY]  ||  p  <  0.0)  {  return  1.0;  }  else  {  return  1.0;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  ||  p  <  0.0)  {  return  1.0;  }  else  {  return  1.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	||  p  <  0.0)  {  return  1.0;  }  else  {  return  1.0;  }	  return    1.0;    if(p    <    0.0)    {    return    1.0;    }    else    {    return    1.0;    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
42	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  n);  [CE]  cannot  find  symbol  n  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  n);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  n);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p,    d);    	non-compiled	[CE]  cannot  find  symbol  n	100	None	replace
43	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return(p  >  0)?  0.0  :  0.0;	  return(p    >    0.0)?    0.0    :    0.0;    if(p    >    0.0)?    0.0    :    0.0;    if(p    >    0.0)    {    return(p    >    0.0)?    0.0    :    0.0;    }    	compilable	  [FE]  IllegalArgumentException  	84	1	replace
44	[BUG]  [BUGGY]  return(p  >  0)?  0.0  :  0.0;  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >  0)?  0.0  :  0.0;	  return(p    >    0.0)?    0.0    :    0.0;    if(p    >    0.0)?    0.0    :    0.0;    if(p    >    0.0)    {    return(p    >    0.0)?    0.0    :    0.0;    }    	compilable	  [FE]  IllegalArgumentException  	84	1	replace
45	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  p);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  p);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  p);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(m,    p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	35	None	replace
46	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  p  >  0.0?  getDomainLowerBound(p):  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return  p  >  0.0?  getDomainLowerBound(p):  0.0;	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    if(p    >    0.0)?    getDomainLowerBound(p):    0.0;    else    return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    }    	compilable	  [FE]  StackOverflowError  	125	3	replace
47	[BUG]  [BUGGY]  return  p  >  0.0?  getDomainLowerBound(p):  0.0;  [FE]  StackOverflowError  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  p  >  0.0?  getDomainLowerBound(p):  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return  p  >  0.0?  getDomainLowerBound(p):  0.0;	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    if(p    >    0.0)?    getDomainLowerBound(p):    0.0;    else    return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    }    	compilable	  [FE]  StackOverflowError  	125	3	replace
48	[BUG]  [BUGGY]  return(p  <  =  0.0)?  getDomainLowerBound(p):  0.0;  [CE]  illegal  start  of  expression  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  =  0.0)?  getDomainLowerBound(p):  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  =  0.0)?  getDomainLowerBound(p):  0.0;	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    if(p    >    0.0)?    getDomainLowerBound(p):    0.0;    else    return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
49	[BUG]  [BUGGY]  Double  m  =  getDomainLowerBound(p  +  2);  [CE]  missing  return  statement  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  m  =  getDomainLowerBound(p  +  2);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  m  =  getDomainLowerBound(p  +  2);	  Double    m    =    getDomainLowerBound(p    +    1);    	non-compiled	[CE]  missing  return  statement	51	None	replace
50	[BUG]  [BUGGY]  Double  m  =  getDomainUpperBound(p  +  1);  [CE]  missing  return  statement  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  m  =  getDomainUpperBound(p  +  1);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  m  =  getDomainUpperBound(p  +  1);	  Double    m    =    getDomainLowerBound(p    +    1);    	non-compiled	[CE]  missing  return  statement	51	None	replace
51	[BUG]  [BUGGY]  return(p  >  0.0)?  1.0  :  1.0;  (p  >  0.0)?  1.0  :  1.0;  [CE]  not  a  statement  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0.0)?  1.0  :  1.0;  (p  >  0.0)?  1.0  :  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >    0.0)?    1.0    :    1.0;    (p  >  0.0)?  1.0  :  1.0;	  timeout    	non-compiled	[CE]  not  a  statement	78	None	add
52	[BUG]  [BUGGY]  return(p  >  0.0)?  1.0  :  1.0;  p  >  0.0)?  1.0  :  1.0;  [CE]  not  a  statement  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0.0)?  1.0  :  1.0;  p  >  0.0)?  1.0  :  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >    0.0)?    1.0    :    1.0;    p  >  0.0)?  1.0  :  1.0;	  timeout    	non-compiled	[CE]  not  a  statement	78	None	add
53	[BUG]  [BUGGY]  return(p  >  0.0)?  1.0  :  1.0;  double  p  =(p  >  0.0)?  1.0  :  1.0;  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0.0)?  1.0  :  1.0;  double  p  =(p  >  0.0)?  1.0  :  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >    0.0)?    1.0    :    1.0;    double  p  =(p  >  0.0)?  1.0  :  1.0;	  timeout    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	78	None	add
54	[BUG]  [BUGGY]  return(p  >  0.0)?  1.0  :  1.0;  double  p  =  getDomainLowerBound();  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0.0)?  1.0  :  1.0;  double  p  =  getDomainLowerBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >    0.0)?    1.0    :    1.0;    double  p  =  getDomainLowerBound();	  timeout    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	78	None	add
55	[BUG]  [BUGGY]  Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  missing  return  statement  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  missing  return  statement	27	None	replace
56	[BUG]  [BUGGY]  int  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  possible  loss  of  precision  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  int  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	int  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  possible  loss  of  precision	27	None	replace
57	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p  +  1,  numeratorDegreesOfFreedom);  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p  +  1,  numeratorDegreesOfFreedom);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p  +  1,  numeratorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getDestinatorDegreesOfFreedom(p    +    1);    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
58	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p  /  1);  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p  /  1);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p  /  1);	  double    denominatorDegreesOfFreedom    =    getDestinatorDegreesOfFreedom(p    +    1);    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
59	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  p);  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  p);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  p);	  double    denominatorDegreesOfFreedom    =    getDestinatorDegreesOfFreedom(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
60	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  this.numeratorDegreesOfFreedom);  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  this.numeratorDegreesOfFreedom);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  this.numeratorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getDestinatorDegreesOfFreedom(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
61	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  n);  [CE]  cannot  find  symbol  n  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  n);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  n);	  double    denominatorDegreesOfFreedom    =    getDestinatorDegreesOfFreedom(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  n	11	None	replace
62	[BUG]  [BUGGY]  return(p  <  =  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  =  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  =  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;	  return(p    >    0.0)?    0.0    :    0.0;    if(p    >    0.0)?    0.0    :    0.0;    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
63	[BUG]  [BUGGY]  return(p  >=  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >=  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >=  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;	  return(p    >    0.0)?    0.0    :    0.0;    if(p    >    0.0)?    0.0    :    0.0;    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
64	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        double    deseratorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)	123	None	add
65	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        double    deseratorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)	123	None	add
66	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  variable  deseratorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        double    deseratorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  deseratorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)	123	None	add
67	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  variable  deseratorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        double    deseratorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  deseratorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)	123	None	add
68	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  variable  deseratorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        double    deseratorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  deseratorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)	123	None	add
69	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  m,  numeratorDegreesOfFreedom);  [CE]  cannot  find  symbol  m  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  m,  numeratorDegreesOfFreedom);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  m,  numeratorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  m	36	None	replace
70	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(m,  p,  numeratorDegreesOfFreedom);  [CE]  cannot  find  symbol  m  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(m,  p,  numeratorDegreesOfFreedom);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(m,  p,  numeratorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  m	36	None	replace
71	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  n,  numeratorDegreesOfFreedom);  [CE]  cannot  find  symbol  n  [FE]                      IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  n,  numeratorDegreesOfFreedom);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  n,  numeratorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  n	36	None	replace
72	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  x,  numeratorDegreesOfFreedom);  [CE]  cannot  find  symbol  x  [FE]                        IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  x,  numeratorDegreesOfFreedom);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  x,  numeratorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  x	36	None	replace
73	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0)?  getDomainLowerBound(p):  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return(p  >  0)?  getDomainLowerBound(p):  0.0;	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    if(p    >    0.0)?    getDomainLowerBound(p):    0.0;    else    {    return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    }    	compilable	  [FE]  StackOverflowError  	126	3	replace
74	[BUG]  [BUGGY]  return(p  >  0)?  getDomainLowerBound(p):  0.0;  [FE]  StackOverflowError  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0)?  getDomainLowerBound(p):  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >  0)?  getDomainLowerBound(p):  0.0;	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    if(p    >    0.0)?    getDomainLowerBound(p):    0.0;    else    {    return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    }    	compilable	  [FE]  StackOverflowError  	126	3	replace
75	[BUG]  [BUGGY]  Double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
76	[BUG]  [BUGGY]  p  =  getDomainLowerBound(p);  [CE]  missing  return  statement  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  p  =  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	p  =  getDomainLowerBound(p);	  return    0.0    +    getDomainLowerBound(p);    if(p    >    0.0)    {    return    0.0    +    getDomainLowerBound(p);    }    	non-compiled	[CE]  missing  return  statement	114	None	replace
77	[BUG]  [BUGGY]  return  0.0  +  getDenominatorBound(p);  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.0  +  getDenominatorBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return  0.0  +  getDenominatorBound(p);	  return    0.0    +    getDomainLowerBound(p);    if(p    >    0.0)    {    return    0.0    +    getDomainLowerBound(p);    }    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
78	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p):  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return(p  >  0.0)?  getDomainLowerBound(p):  1.0;	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    double    p    =    getDomainLowerBound(p);    	compilable	  [FE]  StackOverflowError  	68	3	replace
79	[BUG]  [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p):  1.0;  [FE]  StackOverflowError  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p):  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >  0.0)?  getDomainLowerBound(p):  1.0;	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    double    p    =    getDomainLowerBound(p);    	compilable	  [FE]  StackOverflowError  	68	3	replace
80	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom()  +  1;  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom()  +  1;  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom()  +  1;	  double    denominatorDegreesOfFreedom    =    getNumberDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
81	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom(p);  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom(p);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom(p);	  double    denominatorDegreesOfFreedom    =    getNumberDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
82	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom()  /  2;  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom()  /  2;  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom()  /  2;	  double    denominatorDegreesOfFreedom    =    getNumberDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
83	[BUG]  [BUGGY]  if(p  <  0.0)return  0.0;  if(p  >  0.0)return  0.0;  if(p  >  0.0)return  0.0;  [CE]  missing  return  statement  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  0.0)return  0.0;  if(p  >  0.0)return  0.0;  if(p  >  0.0)return  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  <  0.0)return  0.0;  if(p  >  0.0)return  0.0;  if(p  >  0.0)return  0.0;	  return(p    >    0.0)?    0.0    :    0.0;    if(p    >    0.0)?    0.0    :    0.0;    if(p    >    0.0)?    0.0    :    0.0;    	non-compiled	[CE]  missing  return  statement	112	None	replace
84	[BUG]  [BUGGY]  return(p  <  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;  }	  return(p    <    0.0)?    0.0    :    0.0;    if(p    <    0.0)?    0.0    :    0.0;    if(p    <    0.0)?    0.0    :    0.0;    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
85	[BUG]  [BUGGY]  Double  m  =  getDomainLowerBound(p,  denominatorDegreesOfFreedom.doubleValue());  [CE]  double  cannot  be  dereferenced  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  m  =  getDomainLowerBound(p,  denominatorDegreesOfFreedom.doubleValue());  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  m  =  getDomainLowerBound(p,  denominatorDegreesOfFreedom.doubleValue());	  Double    m    =    getDomainLowerBound(p.doubleValue());    	non-compiled	[CE]  double  cannot  be  dereferenced	52	None	replace
86	[BUG]  [BUGGY]  Double  m  =  getDomainLowerBound(p.doubleValue(),  denominatorDegreesOfFreedom);  [CE]  double  cannot  be  dereferenced  [FE]              StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  m  =  getDomainLowerBound(p.doubleValue(),  denominatorDegreesOfFreedom);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  m  =  getDomainLowerBound(p.doubleValue(),  denominatorDegreesOfFreedom);	  Double    m    =    getDomainLowerBound(p.doubleValue());    	non-compiled	[CE]  double  cannot  be  dereferenced	52	None	replace
87	[BUG]  [BUGGY]  Double  m  =  getDomainLowerBound(p,  denominatorDegrees.doubleValue());  [CE]  cannot  find  symbol  denominatorDegrees  [FE]                StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  m  =  getDomainLowerBound(p,  denominatorDegrees.doubleValue());  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  m  =  getDomainLowerBound(p,  denominatorDegrees.doubleValue());	  Double    m    =    getDomainLowerBound(p.doubleValue());    	non-compiled	[CE]  cannot  find  symbol  denominatorDegrees	52	None	replace
88	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumberDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double    deseratorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
89	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  x);  [CE]  cannot  find  symbol  x  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  x);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  x);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    m);    	non-compiled	[CE]  cannot  find  symbol  x	34	None	replace
90	[BUG]  [BUGGY]  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  n);  [CE]  cannot  find  symbol  n  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  n);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  n);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    m);    	non-compiled	[CE]  cannot  find  symbol  n	34	None	replace
91	[BUG]  [BUGGY]  return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  (p  ==  0.0)?  getDomainLowerBound(p):  0.0;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  (p  ==  0.0)?  getDomainLowerBound(p):  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    ==    0.0)?    getDomainLowerBound(p):    0.0;    (p  ==  0.0)?  getDomainLowerBound(p):  0.0;	  	non-compiled	[CE]  not  a  statement	46	None	add
92	[BUG]  [BUGGY]  return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  p  =(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  [CE]  unreachable  statement  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  p  =(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    ==    0.0)?    getDomainLowerBound(p):    0.0;    p  =(p  ==  0.0)?  getDomainLowerBound(p):  0.0;	  	non-compiled	[CE]  unreachable  statement	46	None	add
93	[BUG]  [BUGGY]  return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  double  p  =  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  double  p  =  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    ==    0.0)?    getDomainLowerBound(p):    0.0;    double  p  =  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	46	None	add
94	[BUG]  [BUGGY]  return(p  ==  0.0)?  0.0  :  0.0;  (p  ==  0.0)?  0.0  :  0.0;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  ==  0.0)?  0.0  :  0.0;  (p  ==  0.0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    ==    0.0)?    0.0    :    0.0;    (p  ==  0.0)?  0.0  :  0.0;	  	non-compiled	[CE]  not  a  statement	21	None	add
95	[BUG]  [BUGGY]  return(p  ==  0.0)?  0.0  :  0.0;  p  =(p  ==  0.0)?  0.0  :  0.0;  [CE]  unreachable  statement  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  ==  0.0)?  0.0  :  0.0;  p  =(p  ==  0.0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    ==    0.0)?    0.0    :    0.0;    p  =(p  ==  0.0)?  0.0  :  0.0;	  	non-compiled	[CE]  unreachable  statement	21	None	add
96	[BUG]  [BUGGY]  return(p  ==  0.0)?  0.0  :  0.0;  if(p  ==  0.0)?  0.0  :  0.0;  if(m!=  numeratorDegreesOfFreedom)  {  return(p  ==  0.0)?  0.0  :  0.0;  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  ==  0.0)?  0.0  :  0.0;  if(p  ==  0.0)?  0.0  :  0.0;  if(m!=  numeratorDegreesOfFreedom)  {  return(p  ==  0.0)?  0.0  :  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    ==    0.0)?    0.0    :    0.0;    if(p  ==  0.0)?  0.0  :  0.0;  if(m!=  numeratorDegreesOfFreedom)  {  return(p  ==  0.0)?  0.0  :  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
97	[BUG]  [BUGGY]  return(p  ==  0.0)?  0.0  :  0.0;  if(p  ==  0.0)?  0.0  :  0.0;  if(p  ==  0.0)  {  return(p  ==  0.0)?  0.0  :  0.0;  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  ==  0.0)?  0.0  :  0.0;  if(p  ==  0.0)?  0.0  :  0.0;  if(p  ==  0.0)  {  return(p  ==  0.0)?  0.0  :  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    ==    0.0)?    0.0    :    0.0;    if(p  ==  0.0)?  0.0  :  0.0;  if(p  ==  0.0)  {  return(p  ==  0.0)?  0.0  :  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
98	[BUG]  [BUGGY]  return(p  ==  0.0)?  0.0  :  0.0;  double  p  =(p  ==  0.0)?  0.0  :  0.0;  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  ==  0.0)?  0.0  :  0.0;  double  p  =(p  ==  0.0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    ==    0.0)?    0.0    :    0.0;    double  p  =(p  ==  0.0)?  0.0  :  0.0;	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	21	None	add
99	[BUG]  [BUGGY]  double  m  =  getDomainLowerBound(p);  [CE]  missing  return  statement  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  m  =  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  m  =  getDomainLowerBound(p);	  return    1.0;    double    m    =    getDomainLower(p);    	non-compiled	[CE]  missing  return  statement	19	None	replace
100	[BUG]  [BUGGY]  double  m  =  getDomainLower(p);  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  m  =  getDomainLower(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  m  =  getDomainLower(p);	  return    1.0;    double    m    =    getDomainLower(p);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
101	[BUG]  [BUGGY]  n  =  getDomainLower(p);  [CE]  cannot  find  symbol  n  [FE]                      IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  n  =  getDomainLower(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	n  =  getDomainLower(p);	  return    1.0;    double    m    =    getDomainLower(p);    	non-compiled	[CE]  cannot  find  symbol  n	19	None	replace
102	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        double    desnominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)	29	None	add
103	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        double    desnominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)	29	None	add
104	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  variable  desnominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        double    desnominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  desnominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)	29	None	add
105	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  variable  desnominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        double    desnominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  desnominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)	29	None	add
106	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  variable  desnominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        double    desnominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  desnominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)	29	None	add
107	[BUG]  [BUGGY]  return(p  <  =  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;  else  return(p  >  0.0)?  0.0  :  0.0;  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  =  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;  else  return(p  >  0.0)?  0.0  :  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  =  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;  else  return(p  >  0.0)?  0.0  :  0.0;  }	  return(p    >    0.0)?    0.0    :    0.0;    if(p    >    0.0)?    0.0    :    0.0;    else    return(p    >    0.0)?    0.0    :    0.0;    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
108	[BUG]  [BUGGY]  return(p  <  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;  else  return(p  >  0.0)?  0.0  :  0.0;  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;  else  return(p  >  0.0)?  0.0  :  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;  else  return(p  >  0.0)?  0.0  :  0.0;  }	  return(p    >    0.0)?    0.0    :    0.0;    if(p    >    0.0)?    0.0    :    0.0;    else    return(p    >    0.0)?    0.0    :    0.0;    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
109	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  1.0  *  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return  1.0  *  getDomainLowerBound(p);	  return    1.0    +    getDomainLowerBound(p);    	compilable	  [FE]  StackOverflowError  	61	3	replace
110	[BUG]  [BUGGY]  return  1.0  *  getDomainLowerBound(p);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  1.0  *  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return  1.0  *  getDomainLowerBound(p);	  return    1.0    +    getDomainLowerBound(p);    	compilable	  [FE]  StackOverflowError  	61	3	replace
111	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  1.0  +  getDomainLowerBound(p)+  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return  1.0  +  getDomainLowerBound(p)+  1;	  return    1.0    +    getDomainLowerBound(p);    	compilable	  [FE]  StackOverflowError  	61	3	replace
112	[BUG]  [BUGGY]  return  1.0  +  getDomainLowerBound(p)+  1;  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  1.0  +  getDomainLowerBound(p)+  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return  1.0  +  getDomainLowerBound(p)+  1;	  return    1.0    +    getDomainLowerBound(p);    	compilable	  [FE]  StackOverflowError  	61	3	replace
113	[BUG]  [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p)/  2.0;  [CE]  :  expected  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p)/  2.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >  0.0)?  getDomainLowerBound(p)/  2.0;	  return(p    >    0.0)?    getDomainLowerBound(p)/    0.0;    	non-compiled	[CE]  :  expected	135	None	replace
114	[BUG]  [BUGGY]  return(p  <  0.0)?  getDomainLowerBound(p)/  0.0;  [CE]  :  expected  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  0.0)?  getDomainLowerBound(p)/  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  0.0)?  getDomainLowerBound(p)/  0.0;	  return(p    >    0.0)?    getDomainLowerBound(p)/    0.0;    	non-compiled	[CE]  :  expected	135	None	replace
115	[BUG]  [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p)/  20.0;  [CE]  :  expected  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p)/  20.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >  0.0)?  getDomainLowerBound(p)/  20.0;	  return(p    >    0.0)?    getDomainLowerBound(p)/    0.0;    	non-compiled	[CE]  :  expected	135	None	replace
116	[BUG]  [BUGGY]  return(p  >=  0.0)?  getDomainLowerBound(p)/  0.0;  [CE]  :  expected  [FE]              StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >=  0.0)?  getDomainLowerBound(p)/  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >=  0.0)?  getDomainLowerBound(p)/  0.0;	  return(p    >    0.0)?    getDomainLowerBound(p)/    0.0;    	non-compiled	[CE]  :  expected	135	None	replace
117	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  *  p.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  *  p.doubleValue();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  *  p.doubleValue();	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom()    -    p.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	85	None	replace
118	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  /  p.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  /  p.doubleValue();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  /  p.doubleValue();	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom()    -    p.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	85	None	replace
119	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  -  p.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  -  p.doubleValue();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  -  p.doubleValue();	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom()    -    p.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	85	None	replace
120	[BUG]  [BUGGY]  return(p  <  =  0.0)?  0.0  :  0.0;  p  <  =  0.0)?  0.0  :  0.0;  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  =  0.0)?  0.0  :  0.0;  p  <  =  0.0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  =  0.0)?  0.0  :  0.0;  p  <  =  0.0)?  0.0  :  0.0;	  return(p    <    0.0)?    0.0    :    0.0;    p    <    0.0)?    0.0    :    0.0;    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
121	[BUG]  [BUGGY]  return(p  >  0.0)?  0.0  :  0.0;  p  <  0.0)?  0.0  :  0.0;  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0.0)?  0.0  :  0.0;  p  <  0.0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >  0.0)?  0.0  :  0.0;  p  <  0.0)?  0.0  :  0.0;	  return(p    <    0.0)?    0.0    :    0.0;    p    <    0.0)?    0.0    :    0.0;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
122	[BUG]  [BUGGY]  return(p  >=  0.0)?  0.0  :  0.0;  p  <  0.0)?  0.0  :  0.0;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >=  0.0)?  0.0  :  0.0;  p  <  0.0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >=  0.0)?  0.0  :  0.0;  p  <  0.0)?  0.0  :  0.0;	  return(p    <    0.0)?    0.0    :    0.0;    p    <    0.0)?    0.0    :    0.0;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
123	[BUG]  [BUGGY]  Double  m  =  getDomainBound(p);  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  m  =  getDomainBound(p);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  m  =  getDomainBound(p);	  Double    m    =    getDomain(p);    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
124	[BUG]  [BUGGY]  Double  m  =  getDomain(p,  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  m  =  getDomain(p,  denominatorDegreesOfFreedom);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  m  =  getDomain(p,  denominatorDegreesOfFreedom);	  Double    m    =    getDomain(p);    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
125	[BUG]  [BUGGY]  return(p  <  0.0)?  getDomainLowerBound()  :  1.0;  [CE]  no  suitable  method  found  for  getDomainLowerBound()  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  0.0)?  getDomainLowerBound()  :  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  0.0)?  getDomainLowerBound()  :  1.0;	  return(p    >    0.0)?    getDomainLowerBound()    :    1.0;    	non-compiled	[CE]  no  suitable  method  found  for  getDomainLowerBound()	10	None	replace
126	[BUG]  [BUGGY]  return(p  ==  0.0)?  getDomainLowerBound()  :  1.0;  [CE]  no  suitable  method  found  for  getDomainLowerBound()  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  ==  0.0)?  getDomainLowerBound()  :  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  ==  0.0)?  getDomainLowerBound()  :  1.0;	  return(p    >    0.0)?    getDomainLowerBound()    :    1.0;    	non-compiled	[CE]  no  suitable  method  found  for  getDomainLowerBound()	10	None	replace
127	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  p);  [CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  p);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  p);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(m,    p);    	non-compiled	[CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	24	None	replace
128	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  +  p.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  +  p.doubleValue();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  +  p.doubleValue();	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom()    +    p.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	86	None	replace
129	[BUG]  [BUGGY]  return(p  ==  0.0)?  getDomainLowerBound()  :  Double.POSITIVE_INFINITY;  [CE]  no  suitable  method  found  for  getDomainLowerBound()  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  ==  0.0)?  getDomainLowerBound()  :  Double.POSITIVE_INFINITY;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  ==  0.0)?  getDomainLowerBound()  :  Double.POSITIVE_INFINITY;	  return(p    >    0.0)?    getDomainLowerBound()    :    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  no  suitable  method  found  for  getDomainLowerBound()	8	None	replace
130	[BUG]  [BUGGY]  return(p  >=  0.0)?  getDomainLowerBound()  :  Double.POSITIVE_INFINITY;  [CE]  no  suitable  method  found  for  getDomainLowerBound()  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >=  0.0)?  getDomainLowerBound()  :  Double.POSITIVE_INFINITY;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >=  0.0)?  getDomainLowerBound()  :  Double.POSITIVE_INFINITY;	  return(p    >    0.0)?    getDomainLowerBound()    :    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  no  suitable  method  found  for  getDomainLowerBound()	8	None	replace
131	[BUG]  [BUGGY]  if(p  <  0.0)return  0.0;  if(p  >  0.0)return  0.0;  else  return  0.0;  }  [CE]  class,  interface,  or  enum  expected  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  0.0)return  0.0;  if(p  >  0.0)return  0.0;  else  return  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  <  0.0)return  0.0;  if(p  >  0.0)return  0.0;  else  return  0.0;  }	  return(p    <    0.0)?    0.0    :    0.0;    if(p    <    0.0)?    0.0    :    0.0;    else    return(p    <    0.0)?    0.0    :    0.0;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	133	None	replace
132	[BUG]  [BUGGY]  if(p  <  0.0)return  0.0;  if(p  <  0.0)return  0.0;  else  return  0.0;  }  [CE]  class,  interface,  or  enum  expected  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  0.0)return  0.0;  if(p  <  0.0)return  0.0;  else  return  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  <  0.0)return  0.0;  if(p  <  0.0)return  0.0;  else  return  0.0;  }	  return(p    <    0.0)?    0.0    :    0.0;    if(p    <    0.0)?    0.0    :    0.0;    else    return(p    <    0.0)?    0.0    :    0.0;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	133	None	replace
133	[BUG]  [BUGGY]  p  =  getNumberLowerBound(p);  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  p  =  getNumberLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	p  =  getNumberLowerBound(p);	  return    1.0;    p    =    getDomainLowerBound(p);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
134	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDomainLowerBound(p);  [CE]  missing  return  statement  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDomainLowerBound(p);	  return    1.0;    if(p    <    0.0)    {    if(denominatorDegreesOfFreedom    >    0.0)    {    return    1.0;    }    	non-compiled	[CE]  missing  return  statement	106	None	replace
135	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDomainLowerBound();  [CE]  no  suitable  method  found  for  getDomainLowerBound()  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDomainLowerBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDomainLowerBound();	  return    1.0;    if(p    <    0.0)    {    if(denominatorDegreesOfFreedom    >    0.0)    {    return    1.0;    }    	non-compiled	[CE]  no  suitable  method  found  for  getDomainLowerBound()	106	None	replace
136	[BUG]  [BUGGY]  double  numeratorDegreesOfFreedom  =  1.0;  [CE]  missing  return  statement  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  numeratorDegreesOfFreedom  =  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  numeratorDegreesOfFreedom  =  1.0;	  return    1.0;    if(p    <    0.0)    {    if(denominatorDegreesOfFreedom    >    0.0)    {    return    1.0;    }    	non-compiled	[CE]  missing  return  statement	106	None	replace
137	[BUG]  [BUGGY]  double  numeratorDegreesOfFreedom  =  getNumberMask();  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  numeratorDegreesOfFreedom  =  getNumberMask();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  numeratorDegreesOfFreedom  =  getNumberMask();	  return    1.0;    if(p    <    0.0)    {    if(denominatorDegreesOfFreedom    >=    0.0)    {    return    1.0;    }    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
138	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  1.0;  [CE]  missing  return  statement  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  1.0;	  return    1.0;    if(p    <    0.0)    {    if(denominatorDegreesOfFreedom    >=    0.0)    {    return    1.0;    }    	non-compiled	[CE]  missing  return  statement	109	None	replace
139	[BUG]  [BUGGY]  return  0.0  *  getDomainLowerBound(p);  double  p  =  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.0  *  getDomainLowerBound(p);  double  p  =  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    0.0    *    getDomainLowerBound(p);    double  p  =  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	62	None	add
140	[BUG]  [BUGGY]  return  0.0  *  getDomainLowerBound(p);  Double  p  =  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.0  *  getDomainLowerBound(p);  Double  p  =  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    0.0    *    getDomainLowerBound(p);    Double  p  =  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	62	None	add
141	[BUG]  [BUGGY]  return  0.0  *  getDomainLowerBound(p);  Double  p  =  getDomainLowerBound(p).doubleValue();  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]        StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.0  *  getDomainLowerBound(p);  Double  p  =  getDomainLowerBound(p).doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    0.0    *    getDomainLowerBound(p);    Double  p  =  getDomainLowerBound(p).doubleValue();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	62	None	add
142	[BUG]  [BUGGY]  return  0.0  *  getDomainLowerBound(p);  double  p  =  getDomainLowerBound(p).doubleValue();  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]          StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.0  *  getDomainLowerBound(p);  double  p  =  getDomainLowerBound(p).doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    0.0    *    getDomainLowerBound(p);    double  p  =  getDomainLowerBound(p).doubleValue();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	62	None	add
143	[BUG]  [BUGGY]  return  0.0  *  getDomainLowerBound(p);  double  p  =  getDomainLowerBound();  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]            StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.0  *  getDomainLowerBound(p);  double  p  =  getDomainLowerBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    0.0    *    getDomainLowerBound(p);    double  p  =  getDomainLowerBound();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	62	None	add
144	[BUG]  [BUGGY]  Double  m  =  getDomainLowerBound(p,  denominatorDegreesOfFreedom);  [CE]  no  suitable  method  found  for  getDomainLowerBound(double,double)  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  m  =  getDomainLowerBound(p,  denominatorDegreesOfFreedom);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  m  =  getDomainLowerBound(p,  denominatorDegreesOfFreedom);	          Double    m    =    getDomainLowerBound(p);    Double    m    =    getDomainLowerBound(p);    	non-compiled	[CE]  no  suitable  method  found  for  getDomainLowerBound(double,double)	39	None	replace
145	[BUG]  [BUGGY]  Double  m  =  getDomainLowerBound(p)+  1;  [CE]  missing  return  statement  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  m  =  getDomainLowerBound(p)+  1;  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  m  =  getDomainLowerBound(p)+  1;	          Double    m    =    getDomainLowerBound(p);    Double    m    =    getDomainLowerBound(p);    	non-compiled	[CE]  missing  return  statement	39	None	replace
146	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.0  +  getDomainLowerBound(p)/  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return  0.0  +  getDomainLowerBound(p)/  1;	  return    0.0    +    getDomainLowerBound(p)+    1;    	compilable	  [FE]  StackOverflowError  	65	3	replace
147	[BUG]  [BUGGY]  return  0.0  +  getDomainLowerBound(p)/  1;  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.0  +  getDomainLowerBound(p)/  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return  0.0  +  getDomainLowerBound(p)/  1;	  return    0.0    +    getDomainLowerBound(p)+    1;    	compilable	  [FE]  StackOverflowError  	65	3	replace
148	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.0  *  getDomainLowerBound(p)+  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return  0.0  *  getDomainLowerBound(p)+  1;	  return    0.0    +    getDomainLowerBound(p)+    1;    	compilable	  [FE]  StackOverflowError  	65	3	replace
149	[BUG]  [BUGGY]  return  0.0  *  getDomainLowerBound(p)+  1;  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.0  *  getDomainLowerBound(p)+  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return  0.0  *  getDomainLowerBound(p)+  1;	  return    0.0    +    getDomainLowerBound(p)+    1;    	compilable	  [FE]  StackOverflowError  	65	3	replace
150	[BUG]  [BUGGY]  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  (p  >  0.0)?  getDomainLowerBound(p):  0.0;  [CE]  not  a  statement  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  (p  >  0.0)?  getDomainLowerBound(p):  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  (p  >  0.0)?  getDomainLowerBound(p):  0.0;	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    (p    >    0.0)?    getDomainLowerBound(p):    0.0;    	non-compiled	[CE]  not  a  statement	66	None	replace
151	[BUG]  [BUGGY]  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  (p  >  0.0)?  getDomainLowerBound(p):  0.0;  [CE]  not  a  statement  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  (p  >  0.0)?  getDomainLowerBound(p):  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  (p  >  0.0)?  getDomainLowerBound(p):  0.0;	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    (p    >    0.0)?    getDomainLowerBound(p):    0.0;    	non-compiled	[CE]  not  a  statement	66	None	replace
152	[BUG]  [BUGGY]  n  =  getDomainLowerBound(p);  [CE]  cannot  find  symbol  n  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  n  =  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	n  =  getDomainLowerBound(p);	  return    1.0;    double    m    =    getDomainLowerBound(p);    	non-compiled	[CE]  cannot  find  symbol  n	16	None	replace
153	[BUG]  [BUGGY]  n  =  getDenominatorDegreesOfFreedom();  [CE]  cannot  find  symbol  n  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  n  =  getDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	n  =  getDenominatorDegreesOfFreedom();	  return    1.0;    double    m    =    getDomainLowerBound(p);    	non-compiled	[CE]  cannot  find  symbol  n	16	None	replace
154	[BUG]  [BUGGY]  n  =  getDenominatorDegreesOfFreedom(p);  [CE]  cannot  find  symbol  n  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  n  =  getDenominatorDegreesOfFreedom(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	n  =  getDenominatorDegreesOfFreedom(p);	  return    1.0;    double    m    =    getDomainLowerBound(p);    	non-compiled	[CE]  cannot  find  symbol  n	16	None	replace
155	[BUG]  [BUGGY]  timeout  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  ==  0.0)?  1.0  :  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return(p  ==  0.0)?  1.0  :  1.0;	  return(p    <    =    0.0)?    1.0    :    1.0;    	compilable	timeout	110	1	replace
156	[BUG]  [BUGGY]  return(p  ==  0.0)?  1.0  :  1.0;  timeout  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  ==  0.0)?  1.0  :  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  ==  0.0)?  1.0  :  1.0;	  return(p    <    =    0.0)?    1.0    :    1.0;    	compilable	timeout	110	1	replace
157	[BUG]  [BUGGY]  timeout  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >=  0.0)?  1.0  :  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return(p  >=  0.0)?  1.0  :  1.0;	  return(p    <    =    0.0)?    1.0    :    1.0;    	compilable	timeout	110	1	replace
158	[BUG]  [BUGGY]  return(p  >=  0.0)?  1.0  :  1.0;  timeout  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >=  0.0)?  1.0  :  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >=  0.0)?  1.0  :  1.0;	  return(p    <    =    0.0)?    1.0    :    1.0;    	compilable	timeout	110	1	replace
159	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  ret);  [CE]  cannot  find  symbol  ret  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  ret);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  ret);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p,    x);    	non-compiled	[CE]  cannot  find  symbol  ret	26	None	replace
160	[BUG]  [BUGGY]  if(p  <  0.0)return  0.0;  if(p  <  0.0)return  0.0;  if(p  >  0.0)  {  return  0.0;  }  [CE]  missing  return  statement  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  0.0)return  0.0;  if(p  <  0.0)return  0.0;  if(p  >  0.0)  {  return  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  <  0.0)return  0.0;  if(p  <  0.0)return  0.0;  if(p  >  0.0)  {  return  0.0;  }	  return(p    <    0.0)?    0.0    :    0.0;    if(p    <    0.0)?    0.0    :    0.0;    if(p    >    0.0)    {    return(p    <    0.0)?    0.0    :    0.0;    }    	non-compiled	[CE]  missing  return  statement	75	None	replace
161	[BUG]  [BUGGY]  if(p  <  0.0)return  0.0;  if(p  >  0.0)  {  return  0.0;  }  [CE]  missing  return  statement  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  0.0)return  0.0;  if(p  >  0.0)  {  return  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  <  0.0)return  0.0;  if(p  >  0.0)  {  return  0.0;  }	  return(p    <    0.0)?    0.0    :    0.0;    if(p    <    0.0)?    0.0    :    0.0;    if(p    >    0.0)    {    return(p    <    0.0)?    0.0    :    0.0;    }    	non-compiled	[CE]  missing  return  statement	75	None	replace
162	[BUG]  [BUGGY]  int  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  possible  loss  of  precision  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  int  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	int  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    int    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  possible  loss  of  precision	59	None	replace
163	[BUG]  [BUGGY]  Integer  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  incompatible  types  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Integer  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Integer  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    int    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  incompatible  types	59	None	replace
164	[BUG]  [BUGGY]  double  p  =  getDomainLowerBound(p.doubleValue());  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  p  =  getDomainLowerBound(p.doubleValue());  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  p  =  getDomainLowerBound(p.doubleValue());	  return    1.0;    double    p    =    getDomainLowerBound(p);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	17	None	replace
165	[BUG]  [BUGGY]  Double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  missing  return  statement  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  missing  return  statement	55	None	replace
166	[BUG]  [BUGGY]  if(p  <  0.0)  {  return  1.0;  }  [CE]  missing  return  statement  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  0.0)  {  return  1.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  <  0.0)  {  return  1.0;  }	  return    1.0;    if(p    >    0.0)    {    return    1.0;    }    	non-compiled	[CE]  missing  return  statement	118	None	replace
167	[BUG]  [BUGGY]  if(p  >  0.0)  {  return  1.0;  }  [CE]  missing  return  statement  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  >  0.0)  {  return  1.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  >  0.0)  {  return  1.0;  }	  return    1.0;    if(p    >    0.0)    {    return    1.0;    }    	non-compiled	[CE]  missing  return  statement	118	None	replace
168	[BUG]  [BUGGY]  if(p  <  =  0.0)  {  return  1.0;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  =  0.0)  {  return  1.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  <  =  0.0)  {  return  1.0;  }	  return    1.0;    if(p    >    0.0)    {    return    1.0;    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
169	[BUG]  [BUGGY]  double  m  =  getDomainLowerBound(p);  p  =  getDomainLowerBound(p);  [CE]  missing  return  statement  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  m  =  getDomainLowerBound(p);  p  =  getDomainLowerBound(p);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  m  =  getDomainLowerBound(p);  p  =  getDomainLowerBound(p);	          Double    m    =    getDomainLowerBound(p);    p    =    getDomainLowerBound(p);    	non-compiled	[CE]  missing  return  statement	43	None	replace
170	[BUG]  [BUGGY]  Double  m  =  getDomainUpperBound(p);  p  =  getDomainUpperBound(p);  [CE]  missing  return  statement  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  m  =  getDomainUpperBound(p);  p  =  getDomainUpperBound(p);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  m  =  getDomainUpperBound(p);  p  =  getDomainUpperBound(p);	          Double    m    =    getDomainLowerBound(p);    p    =    getDomainLowerBound(p);    	non-compiled	[CE]  missing  return  statement	43	None	replace
171	[BUG]  [BUGGY]  Double  m  =  getDomainUpperBound(p);  p  =  getDomainLowerBound(p);  [CE]  missing  return  statement  [FE]        StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  m  =  getDomainUpperBound(p);  p  =  getDomainLowerBound(p);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  m  =  getDomainUpperBound(p);  p  =  getDomainLowerBound(p);	          Double    m    =    getDomainLowerBound(p);    p    =    getDomainLowerBound(p);    	non-compiled	[CE]  missing  return  statement	43	None	replace
172	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  *  p;  [CE]  missing  return  statement  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  *  p;  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  *  p;	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom()    +    p;    	non-compiled	[CE]  missing  return  statement	132	None	replace
173	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  /  p;  [CE]  missing  return  statement  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  /  p;  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  /  p;	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom()    +    p;    	non-compiled	[CE]  missing  return  statement	132	None	replace
174	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  +  p  +  1;  [CE]  missing  return  statement  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  +  p  +  1;  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  +  p  +  1;	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom()    +    p;    	non-compiled	[CE]  missing  return  statement	132	None	replace
175	[BUG]  [BUGGY]  double  p  =  getDomainLowerBound(p);  return  0.0  +  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  p  =  getDomainLowerBound(p);  return  0.0  +  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  p  =  getDomainLowerBound(p);  return  0.0  +  getDomainLowerBound(p);	  return    0.0    +    getDomainLowerBound(p);    double    p    =    getDomainLowerBound(p);    return    0.0    +    getDomainLowerBound(p);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	115	None	replace
176	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  p  =  getDomainLowerBound(p);  return  0.0  +  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	p  =  getDomainLowerBound(p);  return  0.0  +  getDomainLowerBound(p);	  return    0.0    +    getDomainLowerBound(p);    double    p    =    getDomainLowerBound(p);    return    0.0    +    getDomainLowerBound(p);    	compilable	  [FE]  StackOverflowError  	115	3	replace
177	[BUG]  [BUGGY]  p  =  getDomainLowerBound(p);  return  0.0  +  getDomainLowerBound(p);  [FE]  StackOverflowError  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  p  =  getDomainLowerBound(p);  return  0.0  +  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	p  =  getDomainLowerBound(p);  return  0.0  +  getDomainLowerBound(p);	  return    0.0    +    getDomainLowerBound(p);    double    p    =    getDomainLowerBound(p);    return    0.0    +    getDomainLowerBound(p);    	compilable	  [FE]  StackOverflowError  	115	3	replace
178	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  0,  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  0,  denominatorDegreesOfFreedom);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  0,  denominatorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getDestinatorDegreesOfFreedom(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
179	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return(p  <  0)?  0.0  :  0.0;	  return(p    <    0.0)?    0.0    :    0.0;    if(p    <    0.0)?    0.0    :    0.0;    if(m    ==    numeratorDegreesOfFreedom)    {    return(p    <    0.0)?    0.0    :    0.0;    }    	compilable	  [FE]  IllegalArgumentException  	73	1	replace
180	[BUG]  [BUGGY]  return(p  <  0)?  0.0  :  0.0;  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  0)?  0.0  :  0.0;	  return(p    <    0.0)?    0.0    :    0.0;    if(p    <    0.0)?    0.0    :    0.0;    if(m    ==    numeratorDegreesOfFreedom)    {    return(p    <    0.0)?    0.0    :    0.0;    }    	compilable	  [FE]  IllegalArgumentException  	73	1	replace
181	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  *.doubleValue();  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  *.doubleValue();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  *.doubleValue();	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom()    /.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
182	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom()  /.doubleValue();  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom()  /.doubleValue();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom()  /.doubleValue();	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom()    /.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
183	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  /.doubleValue();  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  /.doubleValue();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  /.doubleValue();	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom()    /.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
184	[BUG]  [BUGGY]  double  p  =  getDomainLowerBound(p).doubleValue();  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  p  =  getDomainLowerBound(p).doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  p  =  getDomainLowerBound(p).doubleValue();	  return    0.0    +    getDomainLowerBound(p);    Double    p    =    getDomainLowerBound(p).doubleValue();    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	102	None	replace
185	[BUG]  [BUGGY]  Double  p  =  getDomainLowerBound(p).doubleValue();  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  p  =  getDomainLowerBound(p).doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  p  =  getDomainLowerBound(p).doubleValue();	  return    0.0    +    getDomainLowerBound(p);    Double    p    =    getDomainLowerBound(p).doubleValue();    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	102	None	replace
186	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom().doubleValue()  /  1;  [CE]  double  cannot  be  dereferenced  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom().doubleValue()  /  1;  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom().doubleValue()  /  1;	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom().doubleValue()    +    1;    	non-compiled	[CE]  double  cannot  be  dereferenced	15	None	replace
187	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  /.doubleValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  /.doubleValue()  +  1;  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  /.doubleValue()  +  1;	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom().doubleValue()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
188	[BUG]  [BUGGY]  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  Double  p  =  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]                StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  Double  p  =  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  Double  p  =  getDomainLowerBound(p);	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    Double    p    =    getDomainLowerBound(p);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	70	None	replace
189	[BUG]  [BUGGY]  return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  Double  p  =  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]                  StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  Double  p  =  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  Double  p  =  getDomainLowerBound(p);	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    Double    p    =    getDomainLowerBound(p);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	70	None	replace
190	[BUG]  [BUGGY]  return(p  <  0.0)?  getDomainLowerBound()  :  0.5;  [CE]  no  suitable  method  found  for  getDomainLowerBound()  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  0.0)?  getDomainLowerBound()  :  0.5;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  0.0)?  getDomainLowerBound()  :  0.5;	  return(p    >    0.0)?    getDomainLowerBound()    :    0.5;    	non-compiled	[CE]  no  suitable  method  found  for  getDomainLowerBound()	129	None	replace
191	[BUG]  [BUGGY]  return(p  ==  0.0)?  getDomainLowerBound()  :  0.5;  [CE]  no  suitable  method  found  for  getDomainLowerBound()  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  ==  0.0)?  getDomainLowerBound()  :  0.5;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  ==  0.0)?  getDomainLowerBound()  :  0.5;	  return(p    >    0.0)?    getDomainLowerBound()    :    0.5;    	non-compiled	[CE]  no  suitable  method  found  for  getDomainLowerBound()	129	None	replace
192	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	                double        denominatorDegreesOfFreedom        =        getDenominatorDegreesOfFreedom();        double    desnominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)	57	None	add
193	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	                double        denominatorDegreesOfFreedom        =        getDenominatorDegreesOfFreedom();        double    desnominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)	57	None	add
194	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  Double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  Double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	                double        denominatorDegreesOfFreedom        =        getDenominatorDegreesOfFreedom();        double    desnominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    Double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)	57	None	add
195	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  variable  desnominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	                double        denominatorDegreesOfFreedom        =        getDenominatorDegreesOfFreedom();        double    desnominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  variable  desnominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)	57	None	add
196	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	                double        denominatorDegreesOfFreedom        =        getDenominatorDegreesOfFreedom();        double    desnominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)	57	None	add
197	[BUG]  [BUGGY]  NumeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  cannot  find  symbol  NumeratorDegreesOfFreedom  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  NumeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	NumeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    NumeratorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol  NumeratorDegreesOfFreedom	96	None	replace
198	[BUG]  [BUGGY]  NumeratorDegreesOfFreedom  =  getNumberDegreesOfFreedom();  [CE]  cannot  find  symbol  NumeratorDegreesOfFreedom  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  NumeratorDegreesOfFreedom  =  getNumberDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	NumeratorDegreesOfFreedom  =  getNumberDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    NumeratorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol  NumeratorDegreesOfFreedom	96	None	replace
199	[BUG]  [BUGGY]  NumberDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  cannot  find  symbol  NumberDegreesOfFreedom  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  NumberDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	NumberDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    NumeratorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol  NumberDegreesOfFreedom	96	None	replace
200	[BUG]  [BUGGY]  return(p  <  0.0)?  0.0  :  0.0;  (p  >  0.0)?  0.0  :  0.0;  [CE]  not  a  statement  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  0.0)?  0.0  :  0.0;  (p  >  0.0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  0.0)?  0.0  :  0.0;  (p  >  0.0)?  0.0  :  0.0;	  return(p    >    0.0)?    0.0    :    0.0;    (p    >    0.0)?    0.0    :    0.0;    	non-compiled	[CE]  not  a  statement	80	None	replace
201	[BUG]  [BUGGY]  return(p  >  0.0)?  0.0  :  0.0;  (p  <  0.0)?  0.0  :  0.0;  [CE]  not  a  statement  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0.0)?  0.0  :  0.0;  (p  <  0.0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >  0.0)?  0.0  :  0.0;  (p  <  0.0)?  0.0  :  0.0;	  return(p    >    0.0)?    0.0    :    0.0;    (p    >    0.0)?    0.0    :    0.0;    	non-compiled	[CE]  not  a  statement	80	None	replace
202	[BUG]  [BUGGY]  return(p  <  =  0.0)?  0.0  :  0.0;  (p  >  0.0)?  0.0  :  0.0;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  =  0.0)?  0.0  :  0.0;  (p  >  0.0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  =  0.0)?  0.0  :  0.0;  (p  >  0.0)?  0.0  :  0.0;	  return(p    >    0.0)?    0.0    :    0.0;    (p    >    0.0)?    0.0    :    0.0;    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
203	[BUG]  [BUGGY]  return  1.0  +  getDomainLowerBound(p);  double  p  =  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  1.0  +  getDomainLowerBound(p);  double  p  =  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    1.0    +    getDomainLowerBound(p);    double  p  =  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	60	None	add
204	[BUG]  [BUGGY]  return  1.0  +  getDomainLowerBound(p);  Double  p  =  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  1.0  +  getDomainLowerBound(p);  Double  p  =  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    1.0    +    getDomainLowerBound(p);    Double  p  =  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	60	None	add
205	[BUG]  [BUGGY]  return  1.0  +  getDomainLowerBound(p);  p  =  getDomainLowerBound(p);  [CE]  unreachable  statement  [FE]        StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  1.0  +  getDomainLowerBound(p);  p  =  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    1.0    +    getDomainLowerBound(p);    p  =  getDomainLowerBound(p);	  	non-compiled	[CE]  unreachable  statement	60	None	add
206	[BUG]  [BUGGY]  return  1.0  +  getDomainLowerBound(p);  double  p  =  getDomainLowerBound(p).doubleValue();  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]          StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  1.0  +  getDomainLowerBound(p);  double  p  =  getDomainLowerBound(p).doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    1.0    +    getDomainLowerBound(p);    double  p  =  getDomainLowerBound(p).doubleValue();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	60	None	add
207	[BUG]  [BUGGY]  return  1.0  +  getDomainLowerBound(p);  Double  p  =  getDomainLowerBound(p).doubleValue();  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]            StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  1.0  +  getDomainLowerBound(p);  Double  p  =  getDomainLowerBound(p).doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    1.0    +    getDomainLowerBound(p);    Double  p  =  getDomainLowerBound(p).doubleValue();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	60	None	add
208	[BUG]  [BUGGY]  Double  p  =  getDomainLowerBound(p);  return  0.0  +  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  p  =  getDomainLowerBound(p);  return  0.0  +  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  p  =  getDomainLowerBound(p);  return  0.0  +  getDomainLowerBound(p);	  return    0.0    +    getDomainLowerBound(p);    Double    p    =    getDomainLowerBound(p);    return    0.0    +    getDomainLowerBound(p);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	116	None	replace
209	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        Math.min(denominatorDegreesOfFreedom,    getNumeratorDegreesOfFreedom());    double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)	32	None	add
210	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        Math.min(denominatorDegreesOfFreedom,    getNumeratorDegreesOfFreedom());    Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)	32	None	add
211	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        Math.min(denominatorDegreesOfFreedom,    getNumeratorDegreesOfFreedom());    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());	  	compilable	  [FE]  IllegalArgumentException  	32	1	add
212	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        Math.min(denominatorDegreesOfFreedom,    getNumeratorDegreesOfFreedom());    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());	  	compilable	  [FE]  IllegalArgumentException  	32	1	add
213	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  Math.min(numeratorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        Math.min(denominatorDegreesOfFreedom,    getNumeratorDegreesOfFreedom());    Math.min(numeratorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());	  	compilable	  [FE]  IllegalArgumentException  	32	1	add
214	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  Math.min(numeratorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  Math.min(numeratorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        Math.min(denominatorDegreesOfFreedom,    getNumeratorDegreesOfFreedom());    Math.min(numeratorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());	  	compilable	  [FE]  IllegalArgumentException  	32	1	add
215	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  Math.min(denominatorDegreesOfFreedom,  getNumberDegreesOfFreedom());  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  Math.min(denominatorDegreesOfFreedom,  getNumberDegreesOfFreedom());  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        Math.min(denominatorDegreesOfFreedom,    getNumeratorDegreesOfFreedom());    Math.min(denominatorDegreesOfFreedom,  getNumberDegreesOfFreedom());	  	non-compiled	[CE]  cannot  find  symbol	32	None	add
216	[BUG]  [BUGGY]  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  (p  <  0.0)?  getDomainLowerBound(p):  0.0;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  (p  <  0.0)?  getDomainLowerBound(p):  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    <    0.0)?    getDomainLowerBound(p):    0.0;    (p  <  0.0)?  getDomainLowerBound(p):  0.0;	  	non-compiled	[CE]  not  a  statement	44	None	add
217	[BUG]  [BUGGY]  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  double  p  =  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  double  p  =  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    <    0.0)?    getDomainLowerBound(p):    0.0;    double  p  =  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	44	None	add
218	[BUG]  [BUGGY]  Double  m  =  getDenominatorDegreesOfFreedom(p,  denominatorDegreesOfFreedom);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  m  =  getDenominatorDegreesOfFreedom(p,  denominatorDegreesOfFreedom);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  m  =  getDenominatorDegreesOfFreedom(p,  denominatorDegreesOfFreedom);	  Double    m    =    getDenominatorDegreesOfFreedom(p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	91	None	replace
219	[BUG]  [BUGGY]  Double  m  =  getDenominatorDegreesOfFreedom(p,  numeratorDegreesOfFreedom);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  m  =  getDenominatorDegreesOfFreedom(p,  numeratorDegreesOfFreedom);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  m  =  getDenominatorDegreesOfFreedom(p,  numeratorDegreesOfFreedom);	  Double    m    =    getDenominatorDegreesOfFreedom(p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	91	None	replace
220	[BUG]  [BUGGY]  Double  m  =  getDenominatorDegreesOfFreedom(n,  p);  [CE]  cannot  find  symbol  n  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  m  =  getDenominatorDegreesOfFreedom(n,  p);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  m  =  getDenominatorDegreesOfFreedom(n,  p);	  Double    m    =    getDenominatorDegreesOfFreedom(p);    	non-compiled	[CE]  cannot  find  symbol  n	91	None	replace
221	[BUG]  [BUGGY]  Double  m  =  getDenominatorDegreesOfFreedom(p,  n);  [CE]  cannot  find  symbol  n  [FE]              StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  m  =  getDenominatorDegreesOfFreedom(p,  n);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  m  =  getDenominatorDegreesOfFreedom(p,  n);	  Double    m    =    getDenominatorDegreesOfFreedom(p);    	non-compiled	[CE]  cannot  find  symbol  n	91	None	replace
222	[BUG]  [BUGGY]          Double    m    =    getDomainLowerBound(p);    p  =  getDomainLowerBound(p);  Double  p  =  getDomainLowerBound(p);  p  =  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]          Double    m    =    getDomainLowerBound(p);    p  =  getDomainLowerBound(p);  Double  p  =  getDomainLowerBound(p);  p  =  getDomainLowerBound(p);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	                Double        m        =        getDomainLowerBound(p);        p    =    getDomainLowerBound(p);    Double  p  =  getDomainLowerBound(p);  p  =  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	42	None	add
223	[BUG]  [BUGGY]          Double    m    =    getDomainLowerBound(p);    p  =  getDomainLowerBound(p);  Double  m  =  getDomainLowerBound(p);  p  =  getDomainLowerBound(p);  [CE]  variable  m  is  already  defined  in  method  getDomainLowerBound(double)  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]          Double    m    =    getDomainLowerBound(p);    p  =  getDomainLowerBound(p);  Double  m  =  getDomainLowerBound(p);  p  =  getDomainLowerBound(p);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	                Double        m        =        getDomainLowerBound(p);        p    =    getDomainLowerBound(p);    Double  m  =  getDomainLowerBound(p);  p  =  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  getDomainLowerBound(double)	42	None	add
224	[BUG]  [BUGGY]          Double    m    =    getDomainLowerBound(p);    p  =  getDomainLowerBound(p);  double  p  =  getDomainLowerBound(p);  p  =  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]        StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]          Double    m    =    getDomainLowerBound(p);    p  =  getDomainLowerBound(p);  double  p  =  getDomainLowerBound(p);  p  =  getDomainLowerBound(p);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	                Double        m        =        getDomainLowerBound(p);        p    =    getDomainLowerBound(p);    double  p  =  getDomainLowerBound(p);  p  =  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	42	None	add
225	[BUG]  [BUGGY]          Double    m    =    getDomainLowerBound(p);    p  =  getDomainLowerBound(p);  double  m  =  getDomainLowerBound(p);  p  =  getDomainLowerBound(p);  [CE]  variable  m  is  already  defined  in  method  getDomainLowerBound(double)  [FE]          StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]          Double    m    =    getDomainLowerBound(p);    p  =  getDomainLowerBound(p);  double  m  =  getDomainLowerBound(p);  p  =  getDomainLowerBound(p);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	                Double        m        =        getDomainLowerBound(p);        p    =    getDomainLowerBound(p);    double  m  =  getDomainLowerBound(p);  p  =  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  getDomainLowerBound(double)	42	None	add
226	[BUG]  [BUGGY]          Double    m    =    getDomainLowerBound(p);    p  =  getDomainLowerBound(p);  Double  p  =  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]            StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]          Double    m    =    getDomainLowerBound(p);    p  =  getDomainLowerBound(p);  Double  p  =  getDomainLowerBound(p);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	                Double        m        =        getDomainLowerBound(p);        p    =    getDomainLowerBound(p);    Double  p  =  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	42	None	add
227	[BUG]  [BUGGY]  NumeratorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  cannot  find  symbol  NumeratorDegreesOfFreedom  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  NumeratorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	NumeratorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    NumeratorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol  NumeratorDegreesOfFreedom	90	None	replace
228	[BUG]  [BUGGY]  DenominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  cannot  find  symbol  DenominatorDegreesOfFreedom  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  DenominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	DenominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    NumeratorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol  DenominatorDegreesOfFreedom	90	None	replace
229	[BUG]  [BUGGY]  NumberDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  cannot  find  symbol  NumberDegreesOfFreedom  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  NumberDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	NumberDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    NumeratorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol  NumberDegreesOfFreedom	90	None	replace
230	[BUG]  [BUGGY]  return  0.0  +  getDenominatorDegreesOfFreedom(p,  denominatorDegreesOfFreedom);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.0  +  getDenominatorDegreesOfFreedom(p,  denominatorDegreesOfFreedom);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return  0.0  +  getDenominatorDegreesOfFreedom(p,  denominatorDegreesOfFreedom);	  return    0.0    +    getDenominatorDegreesOfFreedom(p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	103	None	replace
231	[BUG]  [BUGGY]  return  0.0  +  getDenominatorDegreesOfFreedom(m,  p);  [CE]  cannot  find  symbol  m  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.0  +  getDenominatorDegreesOfFreedom(m,  p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return  0.0  +  getDenominatorDegreesOfFreedom(m,  p);	  return    0.0    +    getDenominatorDegreesOfFreedom(p);    	non-compiled	[CE]  cannot  find  symbol  m	103	None	replace
232	[BUG]  [BUGGY]  return  0.0  +  getDenominatorDegreesOfFreedom(p,  numeratorDegreesOfFreedom);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.0  +  getDenominatorDegreesOfFreedom(p,  numeratorDegreesOfFreedom);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return  0.0  +  getDenominatorDegreesOfFreedom(p,  numeratorDegreesOfFreedom);	  return    0.0    +    getDenominatorDegreesOfFreedom(p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	103	None	replace
233	[BUG]  [BUGGY]  return  0.0  +  getDenominatorDegreesOfFreedom(n,  p);  [CE]  cannot  find  symbol  n  [FE]              StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.0  +  getDenominatorDegreesOfFreedom(n,  p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return  0.0  +  getDenominatorDegreesOfFreedom(n,  p);	  return    0.0    +    getDenominatorDegreesOfFreedom(p);    	non-compiled	[CE]  cannot  find  symbol  n	103	None	replace
234	[BUG]  [BUGGY]  return(p  >=  0.0)?  0.0  :  0.0;  if(p  <  0.0)?  0.0  :  0.0;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >=  0.0)?  0.0  :  0.0;  if(p  <  0.0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >=  0.0)?  0.0  :  0.0;  if(p  <  0.0)?  0.0  :  0.0;	  return(p    <    0.0)?    0.0    :    0.0;    if(p    <    0.0)?    0.0    :    0.0;    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
235	[BUG]  [BUGGY]  int  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  possible  loss  of  precision  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  int  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	int  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    int    numeratorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  possible  loss  of  precision	136	None	replace
236	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  missing  return  statement  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    int    numeratorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  missing  return  statement	136	None	replace
237	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  x);  [CE]  cannot  find  symbol  x  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  x);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  x);	  double    denominatorDegreesOfFreedom    =    getDestinatorDegreesOfFreedom(p,    m);    	non-compiled	[CE]  cannot  find  symbol  x	12	None	replace
238	[BUG]  [BUGGY]  double  deseratorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  n);  [CE]  cannot  find  symbol  n  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  deseratorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  n);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  deseratorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  n);	  double    denominatorDegreesOfFreedom    =    getDestinatorDegreesOfFreedom(p,    m);    	non-compiled	[CE]  cannot  find  symbol  n	12	None	replace
239	[BUG]  [BUGGY]  long  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  possible  loss  of  precision  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  long  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	long  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    int    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  possible  loss  of  precision	31	None	replace
240	[BUG]  [BUGGY]  null  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  not  a  statement  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  null  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	null  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    int    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  not  a  statement	31	None	replace
241	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.5  *  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return  0.5  *  getDomainLowerBound(p);	  return    0.0    *    getDomainLowerBound(p);    	compilable	  [FE]  StackOverflowError  	63	3	replace
242	[BUG]  [BUGGY]  return  0.5  *  getDomainLowerBound(p);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.5  *  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return  0.5  *  getDomainLowerBound(p);	  return    0.0    *    getDomainLowerBound(p);    	compilable	  [FE]  StackOverflowError  	63	3	replace
243	[BUG]  [BUGGY]  Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p);  [CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p);	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p);    	non-compiled	[CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	97	None	replace
244	[BUG]  [BUGGY]  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >  0.0)?  getDomainLowerBound(p):  0.0;  [CE]  illegal  start  of  expression  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >  0.0)?  getDomainLowerBound(p):  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >  0.0)?  getDomainLowerBound(p):  0.0;	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    if(p    >    0.0)?    getDomainLowerBound(p):    0.0;    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
245	[BUG]  [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p):  0.0;  if(p  <  0.0)?  getDomainLowerBound(p):  0.0;  [CE]  illegal  start  of  expression  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p):  0.0;  if(p  <  0.0)?  getDomainLowerBound(p):  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >  0.0)?  getDomainLowerBound(p):  0.0;  if(p  <  0.0)?  getDomainLowerBound(p):  0.0;	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    if(p    >    0.0)?    getDomainLowerBound(p):    0.0;    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
246	[BUG]  [BUGGY]  return(p  <  =  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >  0.0)?  getDomainLowerBound(p):  0.0;  [CE]  illegal  start  of  expression  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  =  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >  0.0)?  getDomainLowerBound(p):  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  =  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >  0.0)?  getDomainLowerBound(p):  0.0;	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    if(p    >    0.0)?    getDomainLowerBound(p):    0.0;    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
247	[BUG]  [BUGGY]  timeout  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  ==  0.0)?  getDomainLowerBound(p):  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return(p  ==  0.0)?  getDomainLowerBound(p):  1.0;	  return(p    ==    0.0)?    getDomainLowerBound(p):    0.0;    	compilable	timeout	47	1	replace
248	[BUG]  [BUGGY]  return(p  ==  0.0)?  getDomainLowerBound(p):  1.0;  timeout  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  ==  0.0)?  getDomainLowerBound(p):  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  ==  0.0)?  getDomainLowerBound(p):  1.0;	  return(p    ==    0.0)?    getDomainLowerBound(p):    0.0;    	compilable	timeout	47	1	replace
249	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  0,  0);  [CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  0,  0);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  0,  0);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p,    m);    	non-compiled	[CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	23	None	replace
250	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom(),  p.doubleValue();  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom(),  p.doubleValue();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom(),  p.doubleValue();	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(),    p.doubleValue();    	non-compiled	[CE]  ';'  expected	14	None	replace
251	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(),  p.doubleValue();  [CE]  ';'  expected  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(),  p.doubleValue();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(),  p.doubleValue();	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(),    p.doubleValue();    	non-compiled	[CE]  ';'  expected	14	None	replace
252	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(),  p.doubleValue()  +  1;  [CE]  ';'  expected  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(),  p.doubleValue()  +  1;  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(),  p.doubleValue()  +  1;	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(),    p.doubleValue();    	non-compiled	[CE]  ';'  expected	14	None	replace
253	[BUG]  [BUGGY]  double  m  =  getDomainLowerBound();  [CE]  no  suitable  method  found  for  getDomainLowerBound()  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  m  =  getDomainLowerBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  m  =  getDomainLowerBound();	  return    1.0;    double    m    =    getDomainLowerBound();    	non-compiled	[CE]  no  suitable  method  found  for  getDomainLowerBound()	20	None	replace
254	[BUG]  [BUGGY]  double  m  =  getDomainLowerBound()  +  denominatorDegreesOfFreedom;  [CE]  no  suitable  method  found  for  getDomainLowerBound()  [FE]                      IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  m  =  getDomainLowerBound()  +  denominatorDegreesOfFreedom;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  m  =  getDomainLowerBound()  +  denominatorDegreesOfFreedom;	  return    1.0;    double    m    =    getDomainLowerBound();    	non-compiled	[CE]  no  suitable  method  found  for  getDomainLowerBound()	20	None	replace
255	[BUG]  [BUGGY]  return(p  <  0.0)?  1.0  :  1.0;  (p  <  0.0)?  1.0  :  1.0;  [CE]  not  a  statement  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  0.0)?  1.0  :  1.0;  (p  <  0.0)?  1.0  :  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    <    0.0)?    1.0    :    1.0;    (p  <  0.0)?  1.0  :  1.0;	  timeout    	non-compiled	[CE]  not  a  statement	76	None	add
256	[BUG]  [BUGGY]  return(p  <  0.0)?  1.0  :  1.0;  p  <  0.0)?  1.0  :  1.0;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  0.0)?  1.0  :  1.0;  p  <  0.0)?  1.0  :  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    <    0.0)?    1.0    :    1.0;    p  <  0.0)?  1.0  :  1.0;	  timeout    	non-compiled	[CE]  illegal  start  of  type	76	None	add
257	[BUG]  [BUGGY]  return(p  <  0.0)?  1.0  :  1.0;  double  p  =(p  <  0.0)?  1.0  :  1.0;  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  0.0)?  1.0  :  1.0;  double  p  =(p  <  0.0)?  1.0  :  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    <    0.0)?    1.0    :    1.0;    double  p  =(p  <  0.0)?  1.0  :  1.0;	  timeout    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	76	None	add
258	[BUG]  [BUGGY]  return(p  <  0.0)?  1.0  :  1.0;  double  p  =  getDomainLowerBound();  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  0.0)?  1.0  :  1.0;  double  p  =  getDomainLowerBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    <    0.0)?    1.0    :    1.0;    double  p  =  getDomainLowerBound();	  timeout    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	76	None	add
259	[BUG]  [BUGGY]  double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]                StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  p  =  getDomainUpperBound(p);	  return    0.0    +    getDomainLowerBound(p);    double    p    =    getDomainUpperBound(p);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	7	None	replace
260	[BUG]  [BUGGY]  return  0.0  +  getDomainLowerBound(p,  denominatorDegreesOfFreedom);  [CE]  no  suitable  method  found  for  getDomainLowerBound(double,double)  [FE]                  StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.0  +  getDomainLowerBound(p,  denominatorDegreesOfFreedom);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return  0.0  +  getDomainLowerBound(p,  denominatorDegreesOfFreedom);	  return    0.0    +    getDomainLowerBound(p);    double    p    =    getDomainUpperBound(p);    	non-compiled	[CE]  no  suitable  method  found  for  getDomainLowerBound(double,double)	7	None	replace
261	[BUG]  [BUGGY]  Double  m  =  getDenominatorLowerBound(p);  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  m  =  getDenominatorLowerBound(p);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  m  =  getDenominatorLowerBound(p);	  Double    m    =    getDomainUpperBound(p);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
262	[BUG]  [BUGGY]  Double  m  =  getDenominatorBound(p);  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  m  =  getDenominatorBound(p);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  m  =  getDenominatorBound(p);	  Double    m    =    getDomainUpperBound(p);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
263	[BUG]  [BUGGY]  if(p  <  0)  {  return  1.0;  }  [CE]  missing  return  statement  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  0)  {  return  1.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  <  0)  {  return  1.0;  }	  return    1.0;    if(p    <    0)    {    return    1.0;    }    	non-compiled	[CE]  missing  return  statement	120	None	replace
264	[BUG]  [BUGGY]  if(p  <  0)  {  return  0.0;  }  [CE]  missing  return  statement  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  0)  {  return  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  <  0)  {  return  0.0;  }	  return    1.0;    if(p    <    0)    {    return    1.0;    }    	non-compiled	[CE]  missing  return  statement	120	None	replace
265	[BUG]  [BUGGY]  ||  p  <  0)  {  return  1.0;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  ||  p  <  0)  {  return  1.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	||  p  <  0)  {  return  1.0;  }	  return    1.0;    if(p    <    0)    {    return    1.0;    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
266	[BUG]  [BUGGY]  ||  p  <  0)  {  return  0.0;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  ||  p  <  0)  {  return  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	||  p  <  0)  {  return  0.0;  }	  return    1.0;    if(p    <    0)    {    return    1.0;    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
267	[BUG]  [BUGGY]  p  =(p  >  0.0)?  getDomainLowerBound(p):  0.0;  [CE]  missing  return  statement  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  p  =(p  >  0.0)?  getDomainLowerBound(p):  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	p  =(p  >  0.0)?  getDomainLowerBound(p):  0.0;	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    p    =(p    >    0.0)?    getDomainLowerBound(p):    0.0;    	non-compiled	[CE]  missing  return  statement	67	None	replace
268	[BUG]  [BUGGY]  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  p  =(p  >  0.0)?  getDomainLowerBound(p):  0.0;  [CE]  unreachable  statement  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  p  =(p  >  0.0)?  getDomainLowerBound(p):  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  p  =(p  >  0.0)?  getDomainLowerBound(p):  0.0;	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    p    =(p    >    0.0)?    getDomainLowerBound(p):    0.0;    	non-compiled	[CE]  unreachable  statement	67	None	replace
269	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  /  1;  [CE]  missing  return  statement  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  /  1;  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  /  1;	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom()    +    1;    	non-compiled	[CE]  missing  return  statement	131	None	replace
270	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  1.0,  0.0);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  1.0,  0.0);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  1.0,  0.0);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    0.0);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	89	None	replace
271	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0.0,  numeratorDegreesOfFreedom);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0.0,  numeratorDegreesOfFreedom);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0.0,  numeratorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    0.0);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	89	None	replace
272	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0,  0.0);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0,  0.0);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0,  0.0);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    0.0);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	89	None	replace
273	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0.0,  p);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0.0,  p);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0.0,  p);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    0.0);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	89	None	replace
274	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDegreesOfFreedom(p);  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDegreesOfFreedom(p);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumberDegreesOfFreedom(p);	  double    denominatorDegreesOfFreedom    =    getNumberDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
275	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDegreesOfFreedom()  +  1;  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDegreesOfFreedom()  +  1;  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumberDegreesOfFreedom()  +  1;	  double    denominatorDegreesOfFreedom    =    getNumberDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
276	[BUG]  [BUGGY]  return  0.5  +  getDomainLowerBound(p);  double  p  =  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.5  +  getDomainLowerBound(p);  double  p  =  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    0.5    +    getDomainLowerBound(p);    double  p  =  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	104	None	add
277	[BUG]  [BUGGY]  return  0.5  +  getDomainLowerBound(p);  Double  p  =  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.5  +  getDomainLowerBound(p);  Double  p  =  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    0.5    +    getDomainLowerBound(p);    Double  p  =  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	104	None	add
278	[BUG]  [BUGGY]  return  0.5  +  getDomainLowerBound(p);  double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]        StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.5  +  getDomainLowerBound(p);  double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    0.5    +    getDomainLowerBound(p);    double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	104	None	add
279	[BUG]  [BUGGY]  return  0.5  +  getDomainLowerBound(p);  double  p  =  getDomainLowerBound(p).doubleValue();  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]          StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.5  +  getDomainLowerBound(p);  double  p  =  getDomainLowerBound(p).doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    0.5    +    getDomainLowerBound(p);    double  p  =  getDomainLowerBound(p).doubleValue();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	104	None	add
280	[BUG]  [BUGGY]  return  0.5  +  getDomainLowerBound(p);  Double  p  =  getDomainLowerBound(p).doubleValue();  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]            StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.5  +  getDomainLowerBound(p);  Double  p  =  getDomainLowerBound(p).doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    0.5    +    getDomainLowerBound(p);    Double  p  =  getDomainLowerBound(p).doubleValue();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	104	None	add
281	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  m,  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  m  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  m,  denominatorDegreesOfFreedom);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  m,  denominatorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  m	130	None	replace
282	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(m,  p,  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  m  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(m,  p,  denominatorDegreesOfFreedom);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(m,  p,  denominatorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  m	130	None	replace
283	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  n,  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  n  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  n,  denominatorDegreesOfFreedom);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  n,  denominatorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  n	130	None	replace
284	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  numeratorDegreesOfFreedom,  denominatorDegreesOfFreedom);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  numeratorDegreesOfFreedom,  denominatorDegreesOfFreedom);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  numeratorDegreesOfFreedom,  denominatorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	130	None	replace
285	[BUG]  [BUGGY]  return  0.5  +  getNumberLowerBound(p);  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.5  +  getNumberLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return  0.5  +  getNumberLowerBound(p);	  return    0.5    +    getDomainLowerBound(p);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
286	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.5  +  getDomainLowerBound(p)+  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return  0.5  +  getDomainLowerBound(p)+  1;	  return    0.5    +    getDomainLowerBound(p);    	compilable	  [FE]  StackOverflowError  	105	3	replace
287	[BUG]  [BUGGY]  return  0.5  +  getDomainLowerBound(p)+  1;  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.5  +  getDomainLowerBound(p)+  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return  0.5  +  getDomainLowerBound(p)+  1;	  return    0.5    +    getDomainLowerBound(p);    	compilable	  [FE]  StackOverflowError  	105	3	replace
288	[BUG]  [BUGGY]  return(p  <  =  0.0)?  0.0  :  0.0;  (p  <  0.0)?  0.0  :  0.0;  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  =  0.0)?  0.0  :  0.0;  (p  <  0.0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  =  0.0)?  0.0  :  0.0;  (p  <  0.0)?  0.0  :  0.0;	  return(p    <    0.0)?    0.0    :    0.0;    (p    <    0.0)?    0.0    :    0.0;    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
289	[BUG]  [BUGGY]  return  0.0  +  getDomainLowerBound(p)+  1;  double  p  =  getDomainLowerBound(p)+  1;  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.0  +  getDomainLowerBound(p)+  1;  double  p  =  getDomainLowerBound(p)+  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    0.0    +    getDomainLowerBound(p)+    1;    double  p  =  getDomainLowerBound(p)+  1;	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	64	None	add
290	[BUG]  [BUGGY]  return  0.0  +  getDomainLowerBound(p)+  1;  Double  p  =  getDomainLowerBound(p)+  1;  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.0  +  getDomainLowerBound(p)+  1;  Double  p  =  getDomainLowerBound(p)+  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    0.0    +    getDomainLowerBound(p)+    1;    Double  p  =  getDomainLowerBound(p)+  1;	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	64	None	add
291	[BUG]  [BUGGY]  return  0.0  +  getDomainLowerBound(p)+  1;  Double  p  =  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]        StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.0  +  getDomainLowerBound(p)+  1;  Double  p  =  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    0.0    +    getDomainLowerBound(p)+    1;    Double  p  =  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	64	None	add
292	[BUG]  [BUGGY]  return  0.0  +  getDomainLowerBound(p)+  1;  double  p  =  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]          StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.0  +  getDomainLowerBound(p)+  1;  double  p  =  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    0.0    +    getDomainLowerBound(p)+    1;    double  p  =  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	64	None	add
293	[BUG]  [BUGGY]  return  0.0  +  getDomainLowerBound(p)+  1;  double  p  =  getDomainLowerBound(p)+  2;  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]            StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.0  +  getDomainLowerBound(p)+  1;  double  p  =  getDomainLowerBound(p)+  2;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    0.0    +    getDomainLowerBound(p)+    1;    double  p  =  getDomainLowerBound(p)+  2;	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	64	None	add
294	[BUG]  [BUGGY]  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  p  >  0.0)?  getDomainLowerBound(p):  0.0;  [CE]  not  a  statement  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  p  >  0.0)?  getDomainLowerBound(p):  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  p  >  0.0)?  getDomainLowerBound(p):  0.0;	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    p    >    0.0)?    getDomainLowerBound(p):    0.0;    	non-compiled	[CE]  not  a  statement	127	None	replace
295	[BUG]  [BUGGY]  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  p  >  0.0)?  getDomainLowerBound(p):  0.0;  [CE]  not  a  statement  [FE]              StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  p  >  0.0)?  getDomainLowerBound(p):  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  p  >  0.0)?  getDomainLowerBound(p):  0.0;	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    p    >    0.0)?    getDomainLowerBound(p):    0.0;    	non-compiled	[CE]  not  a  statement	127	None	replace
296	[BUG]  [BUGGY]  return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  p  >  0.0)?  getDomainLowerBound(p):  0.0;  [CE]  not  a  statement  [FE]                StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  p  >  0.0)?  getDomainLowerBound(p):  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  p  >  0.0)?  getDomainLowerBound(p):  0.0;	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    p    >    0.0)?    getDomainLowerBound(p):    0.0;    	non-compiled	[CE]  not  a  statement	127	None	replace
297	[BUG]  [BUGGY]  Double  m  =  getDomainDegreesOfFreedom(p,  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  m  =  getDomainDegreesOfFreedom(p,  denominatorDegreesOfFreedom);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  m  =  getDomainDegreesOfFreedom(p,  denominatorDegreesOfFreedom);	  Double    m    =    getDomainDegreesOfFreedom(p);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
298	[BUG]  [BUGGY]  Double  m  =  getDomainDegreesOfFreedom(p,  numeratorDegreesOfFreedom);  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  m  =  getDomainDegreesOfFreedom(p,  numeratorDegreesOfFreedom);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  m  =  getDomainDegreesOfFreedom(p,  numeratorDegreesOfFreedom);	  Double    m    =    getDomainDegreesOfFreedom(p);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
299	[BUG]  [BUGGY]  if(p  >  0.0)  {  return  1.0;  p  =  getDomainLowerBound();  }  [CE]  no  suitable  method  found  for  getDomainLowerBound()  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  >  0.0)  {  return  1.0;  p  =  getDomainLowerBound();  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  >  0.0)  {  return  1.0;  p  =  getDomainLowerBound();  }	  return    1.0;    double    p    =    getDomainLowerBound();    	non-compiled	[CE]  no  suitable  method  found  for  getDomainLowerBound()	18	None	replace
300	[BUG]  [BUGGY]  if(p  >  0.0)  {  return  1.0;  p  =  getDomainLowerBound();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  no  suitable  method  found  for  getDomainLowerBound()  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  >  0.0)  {  return  1.0;  p  =  getDomainLowerBound();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  >  0.0)  {  return  1.0;  p  =  getDomainLowerBound();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    1.0;    double    p    =    getDomainLowerBound();    	non-compiled	[CE]  no  suitable  method  found  for  getDomainLowerBound()	18	None	replace
301	[BUG]  [BUGGY]  if(p  >  0.0)  {  return  1.0;  double  m  =  getDomainLower(p);  }  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  >  0.0)  {  return  1.0;  double  m  =  getDomainLower(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  >  0.0)  {  return  1.0;  double  m  =  getDomainLower(p);  }	  return    1.0;    double    m    =    getDomainLower(p);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
302	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  *.doubleValue();  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  *.doubleValue();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  *.doubleValue();	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom()    /.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
303	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  numeratorDegrees);  [CE]  cannot  find  symbol  numeratorDegrees  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  numeratorDegrees);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  numeratorDegrees);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p,    m);    	non-compiled	[CE]  cannot  find  symbol  numeratorDegrees	23	None	replace
304	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  deseratorDegreesOfFreedom);  [CE]  cannot  find  symbol  deseratorDegreesOfFreedom  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  deseratorDegreesOfFreedom);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  deseratorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    m);    	non-compiled	[CE]  cannot  find  symbol  deseratorDegreesOfFreedom	34	None	replace
305	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0,  0);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0,  0);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0,  0);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    m);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	34	None	replace
306	[BUG]  [BUGGY]  if(p  >  0.0)  {  return  1.0;  double  m  =  getDomainLowerBound();  }  [CE]  no  suitable  method  found  for  getDomainLowerBound()  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  >  0.0)  {  return  1.0;  double  m  =  getDomainLowerBound();  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  >  0.0)  {  return  1.0;  double  m  =  getDomainLowerBound();  }	  return    1.0;    double    m    =    getDomainLowerBound();    	non-compiled	[CE]  no  suitable  method  found  for  getDomainLowerBound()	20	None	replace
307	[BUG]  [BUGGY]  if(p  >  0.0)  {  return  1.0;  double  m  =  getDomainLowerBound();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  no  suitable  method  found  for  getDomainLowerBound()  [FE]                      IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  >  0.0)  {  return  1.0;  double  m  =  getDomainLowerBound();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  >  0.0)  {  return  1.0;  double  m  =  getDomainLowerBound();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    1.0;    double    m    =    getDomainLowerBound();    	non-compiled	[CE]  no  suitable  method  found  for  getDomainLowerBound()	20	None	replace
308	[BUG]  [BUGGY]  if(p  <  0.0)  {  return  1.0;  double  m  =  getDomainLowerBound();  }  [CE]  no  suitable  method  found  for  getDomainLowerBound()  [FE]                        IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  0.0)  {  return  1.0;  double  m  =  getDomainLowerBound();  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  <  0.0)  {  return  1.0;  double  m  =  getDomainLowerBound();  }	  return    1.0;    double    m    =    getDomainLowerBound();    	non-compiled	[CE]  no  suitable  method  found  for  getDomainLowerBound()	20	None	replace
309	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  c,  numeratorDegreesOfFreedom);  [CE]  cannot  find  symbol  c  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  c,  numeratorDegreesOfFreedom);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  c,  numeratorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  c	36	None	replace
310	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        double    desnominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)	29	None	add
311	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  Double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  variable  desnominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  Double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	                double        denominatorDegreesOfFreedom        =        getDenominatorDegreesOfFreedom();        double    desnominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    Double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  variable  desnominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)	57	None	add
312	[BUG]  [BUGGY]  if(p  <  0.0)  {  if(denominatorDegreesOfFreedom  ==  0.0)  {  return  1.0;  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  0.0)  {  if(denominatorDegreesOfFreedom  ==  0.0)  {  return  1.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  <  0.0)  {  if(denominatorDegreesOfFreedom  ==  0.0)  {  return  1.0;  }	  return    1.0;    if(p    <    0.0)    {    if(denominatorDegreesOfFreedom    ==    0.0)    {    return    1.0;    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
313	[BUG]  [BUGGY]  if(p  <  0.0)  {  if(denominatorDegreesOfFreedom  ==  1.0)  {  return  1.0;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  0.0)  {  if(denominatorDegreesOfFreedom  ==  1.0)  {  return  1.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  <  0.0)  {  if(denominatorDegreesOfFreedom  ==  1.0)  {  return  1.0;  }	  return    1.0;    if(p    <    0.0)    {    if(denominatorDegreesOfFreedom    ==    0.0)    {    return    1.0;    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
314	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  p  *  denominatorDegreesOfFreedom.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  p  *  denominatorDegreesOfFreedom.doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  p  *  denominatorDegreesOfFreedom.doubleValue();	  return    1.0;    if(p    <    0.0)    {    if(denominatorDegreesOfFreedom    ==    0.0)    {    return    1.0;    }    	non-compiled	[CE]  double  cannot  be  dereferenced	108	None	replace
315	[BUG]  [BUGGY]  if(p  <  =  0.0)  {  return  1.0;  m  =  getDomainLowerBound(p);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  =  0.0)  {  return  1.0;  m  =  getDomainLowerBound(p);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  <  =  0.0)  {  return  1.0;  m  =  getDomainLowerBound(p);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    1.0;    double    m    =    getDomainLowerBound(p);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
316	[BUG]  [BUGGY]  if(p  <  0.0)  {  return  1.0;  }  else  {  double  m  =  getDomainLowerBound(p);  if(m  >  0.0)  {  return  0.0;  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  0.0)  {  return  1.0;  }  else  {  double  m  =  getDomainLowerBound(p);  if(m  >  0.0)  {  return  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  <  0.0)  {  return  1.0;  }  else  {  double  m  =  getDomainLowerBound(p);  if(m  >  0.0)  {  return  0.0;  }	  return    1.0;    double    m    =    getDomainLowerBound(p);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
317	[BUG]  [BUGGY]  if(p  <  =  0.0)  {  return  1.0;  m  =  getDomainLowerBound(p);  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  =  0.0)  {  return  1.0;  m  =  getDomainLowerBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  <  =  0.0)  {  return  1.0;  m  =  getDomainLowerBound(p);  }	  return    1.0;    double    m    =    getDomainLowerBound(p);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
318	[BUG]  [BUGGY]  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  [CE]  illegal  start  of  expression  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >=    0.0)?    getDomainLowerBound(p):    0.0;    if(p  >=  0.0)?  getDomainLowerBound(p):  0.0;	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
319	[BUG]  [BUGGY]  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >=  0.0)  {  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  }  [CE]  illegal  start  of  expression  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >=  0.0)  {  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >=    0.0)?    getDomainLowerBound(p):    0.0;    if(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >=  0.0)  {  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
320	[BUG]  [BUGGY]  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  if(p  <  0.0)  {  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  }  [CE]  illegal  start  of  expression  [FE]        StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  if(p  <  0.0)  {  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >=    0.0)?    getDomainLowerBound(p):    0.0;    if(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  if(p  <  0.0)  {  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
321	[BUG]  [BUGGY]  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  if(p  ==  0.0)  {  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  }  [CE]  illegal  start  of  expression  [FE]          StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  if(p  ==  0.0)  {  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >=    0.0)?    getDomainLowerBound(p):    0.0;    if(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  if(p  ==  0.0)  {  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
322	[BUG]  [BUGGY]  return(p  >  0)?  0.0  :  0.0;  if(p  <  0)?  0.0  :  0.0;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0)?  0.0  :  0.0;  if(p  <  0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >  0)?  0.0  :  0.0;  if(p  <  0)?  0.0  :  0.0;	  return(p    >    0.0)?    0.0    :    0.0;    if(p    >    0.0)?    0.0    :    0.0;    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
323	[BUG]  [BUGGY]  return(p  >=  0.0)?  0.0  :  0.0;  if(p  >=  0.0)?  0.0  :  0.0;  if(p  >=  0.0)  {  return(p  >=  0.0)?  0.0  :  0.0;  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >=  0.0)?  0.0  :  0.0;  if(p  >=  0.0)?  0.0  :  0.0;  if(p  >=  0.0)  {  return(p  >=  0.0)?  0.0  :  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >=    0.0)?    0.0    :    0.0;    if(p  >=  0.0)?  0.0  :  0.0;  if(p  >=  0.0)  {  return(p  >=  0.0)?  0.0  :  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
324	[BUG]  [BUGGY]  return(p  >=  0.0)?  0.0  :  0.0;  if(p  >=  0.0)?  0.0  :  0.0;  if(p  >=  0.0)  {  return(p  >>  0.0)?  0.0  :  0.0;  }  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >=  0.0)?  0.0  :  0.0;  if(p  >=  0.0)?  0.0  :  0.0;  if(p  >=  0.0)  {  return(p  >>  0.0)?  0.0  :  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >=    0.0)?    0.0    :    0.0;    if(p  >=  0.0)?  0.0  :  0.0;  if(p  >=  0.0)  {  return(p  >>  0.0)?  0.0  :  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
325	[BUG]  [BUGGY]  return(p  >=  0.0)?  0.0  :  0.0;  if(p  >=  0.0)?  0.0  :  0.0;  if(p  ==  0.0)  {  return(p  >=  0.0)?  0.0  :  0.0;  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >=  0.0)?  0.0  :  0.0;  if(p  >=  0.0)?  0.0  :  0.0;  if(p  ==  0.0)  {  return(p  >=  0.0)?  0.0  :  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >=    0.0)?    0.0    :    0.0;    if(p  >=  0.0)?  0.0  :  0.0;  if(p  ==  0.0)  {  return(p  >=  0.0)?  0.0  :  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
326	[BUG]  [BUGGY]  return(p  >=  0.0)?  0.0  :  0.0;  if(p  >=  0.0)?  0.0  :  0.0;  if(p  >=  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >=  0.0)?  0.0  :  0.0;  if(p  >=  0.0)?  0.0  :  0.0;  if(p  >=  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >=    0.0)?    0.0    :    0.0;    if(p  >=  0.0)?  0.0  :  0.0;  if(p  >=  0.0)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
327	[BUG]  [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p):  1.0;  p  >  0.0)?  getDomainLowerBound(p):  0.0;  [CE]  not  a  statement  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p):  1.0;  p  >  0.0)?  getDomainLowerBound(p):  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >  0.0)?  getDomainLowerBound(p):  1.0;  p  >  0.0)?  getDomainLowerBound(p):  0.0;	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    p    >    0.0)?    getDomainLowerBound(p):    0.0;    	non-compiled	[CE]  not  a  statement	127	None	replace
328	[BUG]  [BUGGY]  Math.min(denominatorDegreesOfFreedom,  getDomainLowerBound());  [CE]  no  suitable  method  found  for  getDomainLowerBound()  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Math.min(denominatorDegreesOfFreedom,  getDomainLowerBound());  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Math.min(denominatorDegreesOfFreedom,  getDomainLowerBound());	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,    getNumeratorDegreesOfFreedom());    	non-compiled	[CE]  no  suitable  method  found  for  getDomainLowerBound()	33	None	replace
329	[BUG]  [BUGGY]  Math.min(p,  getNumeratorDegreesOfFreedom());  [CE]  missing  return  statement  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Math.min(p,  getNumeratorDegreesOfFreedom());  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Math.min(p,  getNumeratorDegreesOfFreedom());	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,    getNumeratorDegreesOfFreedom());    	non-compiled	[CE]  missing  return  statement	33	None	replace
330	[BUG]  [BUGGY]  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  if(p  <  0.0)?  getDomainLowerBound(p):  0.0;  if(p  <  0.0)  {  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  if(p  <  0.0)?  getDomainLowerBound(p):  0.0;  if(p  <  0.0)  {  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    <    0.0)?    getDomainLowerBound(p):    0.0;    if(p  <  0.0)?  getDomainLowerBound(p):  0.0;  if(p  <  0.0)  {  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
331	[BUG]  [BUGGY]  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  if(p  <  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >  0.0)  {  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  }  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  if(p  <  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >  0.0)  {  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    <    0.0)?    getDomainLowerBound(p):    0.0;    if(p  <  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >  0.0)  {  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
332	[BUG]  [BUGGY]  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  if(p  <  0.0)?  getDomainLowerBound(p):  0.0;  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  if(p  <  0.0)?  getDomainLowerBound(p):  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    <    0.0)?    getDomainLowerBound(p):    0.0;    if(p  <  0.0)?  getDomainLowerBound(p):  0.0;	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
333	[BUG]  [BUGGY]  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  if(p  <  0.0)?  getDomainLowerBound(p):  0.0;  else  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  if(p  <  0.0)?  getDomainLowerBound(p):  0.0;  else  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    <    0.0)?    getDomainLowerBound(p):    0.0;    if(p  <  0.0)?  getDomainLowerBound(p):  0.0;  else  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
334	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  t);  [CE]  cannot  find  symbol  t  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  t);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  t);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p,    x);    	non-compiled	[CE]  cannot  find  symbol  t	26	None	replace
335	[BUG]  [BUGGY]  if(p  <  0.0)  {  if(denominatorDegreesOfFreedom  >=  0.0)  {  return  1.0;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  0.0)  {  if(denominatorDegreesOfFreedom  >=  0.0)  {  return  1.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  <  0.0)  {  if(denominatorDegreesOfFreedom  >=  0.0)  {  return  1.0;  }	  return    1.0;    if(p    <    0.0)    {    if(denominatorDegreesOfFreedom    >=    0.0)    {    return    1.0;    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
336	[BUG]  [BUGGY]  if(p  <  0.0)  {  if(denominatorDegreesOfFreedom  >=  1.0)  {  return  1.0;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  0.0)  {  if(denominatorDegreesOfFreedom  >=  1.0)  {  return  1.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  <  0.0)  {  if(denominatorDegreesOfFreedom  >=  1.0)  {  return  1.0;  }	  return    1.0;    if(p    <    0.0)    {    if(denominatorDegreesOfFreedom    >=    0.0)    {    return    1.0;    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
337	[BUG]  [BUGGY]  if(p  >  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  >  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  >  0.0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;	  return(p    >    0.0)?    0.0    :    0.0;    if(p    >    0.0)?    0.0    :    0.0;    if(p    >    0.0)?    0.0    :    0.0;    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
338	[BUG]  [BUGGY]  if(p  >  0.0)return  0.0;  if(p  >  0.0)?  0.0  :  0.0;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  >  0.0)return  0.0;  if(p  >  0.0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  >  0.0)return  0.0;  if(p  >  0.0)?  0.0  :  0.0;	  return(p    >    0.0)?    0.0    :    0.0;    if(p    >    0.0)?    0.0    :    0.0;    if(p    >    0.0)?    0.0    :    0.0;    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
339	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  /  0.doubleValue()  +  1;  [CE]  ';'  expected  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  /  0.doubleValue()  +  1;  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  /  0.doubleValue()  +  1;	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom().doubleValue()    +    1;    	non-compiled	[CE]  ';'  expected	15	None	replace
340	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom().doubleValue()  *  1;  [CE]  double  cannot  be  dereferenced  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom().doubleValue()  *  1;  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom().doubleValue()  *  1;	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom().doubleValue()    +    1;    	non-compiled	[CE]  double  cannot  be  dereferenced	15	None	replace
341	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return  getDomainLowerBound(p);	  return(p    <    0.0)?    0.0    :    0.0;    if(p    <    0.0)?    0.0    :    0.0;    if(p    >    0.0)    {    return(p    <    0.0)?    0.0    :    0.0;    }    	compilable	  [FE]  StackOverflowError  	75	3	replace
342	[BUG]  [BUGGY]  return  getDomainLowerBound(p);  [FE]  StackOverflowError  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return  getDomainLowerBound(p);	  return(p    <    0.0)?    0.0    :    0.0;    if(p    <    0.0)?    0.0    :    0.0;    if(p    >    0.0)    {    return(p    <    0.0)?    0.0    :    0.0;    }    	compilable	  [FE]  StackOverflowError  	75	3	replace
343	[BUG]  [BUGGY]  return  0.0  *  getDenominatorDegreesOfFreedom(p);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.0  *  getDenominatorDegreesOfFreedom(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return  0.0  *  getDenominatorDegreesOfFreedom(p);	  return    0.0    *    getDomainLowerBound(p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	63	None	replace
344	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  deseratorDegreesOfFreedom);  [CE]  cannot  find  symbol  deseratorDegreesOfFreedom  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  deseratorDegreesOfFreedom);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  deseratorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getDestinatorDegreesOfFreedom(p,    m);    	non-compiled	[CE]  cannot  find  symbol  deseratorDegreesOfFreedom	12	None	replace
345	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  0,  0);  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  0,  0);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  0,  0);	  double    denominatorDegreesOfFreedom    =    getDestinatorDegreesOfFreedom(p,    m);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
346	[BUG]  [BUGGY]  if(p  >  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >  0.0)?  getDomainLowerBound(p):  0.0;  [CE]  illegal  start  of  expression  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  >  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >  0.0)?  getDomainLowerBound(p):  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  >  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >  0.0)?  getDomainLowerBound(p):  0.0;	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    (p    >    0.0)?    getDomainLowerBound(p):    0.0;    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
347	[BUG]  [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p):  1.0;  (p  >  0.0)?  getDomainLowerBound(p):  0.0;  [CE]  not  a  statement  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p):  1.0;  (p  >  0.0)?  getDomainLowerBound(p):  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >  0.0)?  getDomainLowerBound(p):  1.0;  (p  >  0.0)?  getDomainLowerBound(p):  0.0;	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    (p    >    0.0)?    getDomainLowerBound(p):    0.0;    	non-compiled	[CE]  not  a  statement	66	None	replace
348	[BUG]  [BUGGY]  return  0.5  +  getDenominatorDegreesOfFreedom(p);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.5  +  getDenominatorDegreesOfFreedom(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return  0.5  +  getDenominatorDegreesOfFreedom(p);	  return    0.5    +    getDomainLowerBound(p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	105	None	replace
349	[BUG]  [BUGGY]  return  0.5  +  getDomainDegreesOfFreedom(p);  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.5  +  getDomainDegreesOfFreedom(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return  0.5  +  getDomainDegreesOfFreedom(p);	  return    0.5    +    getDomainLowerBound(p);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
350	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  v);  [CE]  cannot  find  symbol  v  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  v);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  v);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    n);    	non-compiled	[CE]  cannot  find  symbol  v	37	None	replace
351	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  Math.max(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        Math.min(denominatorDegreesOfFreedom,    getNumeratorDegreesOfFreedom());    Math.max(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());	  	compilable	  [FE]  IllegalArgumentException  	32	1	add
352	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  Math.max(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  Math.max(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        Math.min(denominatorDegreesOfFreedom,    getNumeratorDegreesOfFreedom());    Math.max(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());	  	compilable	  [FE]  IllegalArgumentException  	32	1	add
353	[BUG]  [BUGGY]  return(p  <  0.0)?  1.0  :  1.0;  if(p  <  0.0)?  1.0  :  1.0;  if(p  <  0.0)?  1.0  :  1.0;  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  0.0)?  1.0  :  1.0;  if(p  <  0.0)?  1.0  :  1.0;  if(p  <  0.0)?  1.0  :  1.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    <    0.0)?    1.0    :    1.0;    if(p  <  0.0)?  1.0  :  1.0;  if(p  <  0.0)?  1.0  :  1.0;  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	76	None	add
354	[BUG]  [BUGGY]  return(p  <  0.0)?  1.0  :  1.0;  if(p  <  0.0)?  1.0  :  1.0;  if(p  <  0.0)?  0.0  :  1.0;  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  0.0)?  1.0  :  1.0;  if(p  <  0.0)?  1.0  :  1.0;  if(p  <  0.0)?  0.0  :  1.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    <    0.0)?    1.0    :    1.0;    if(p  <  0.0)?  1.0  :  1.0;  if(p  <  0.0)?  0.0  :  1.0;  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	76	None	add
355	[BUG]  [BUGGY]  return(p  <  0.0)?  1.0  :  1.0;  if(p  <  0.0)?  1.0  :  1.0;  if(p  <  0.0)?  1.0  :  1.0;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  0.0)?  1.0  :  1.0;  if(p  <  0.0)?  1.0  :  1.0;  if(p  <  0.0)?  1.0  :  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    <    0.0)?    1.0    :    1.0;    if(p  <  0.0)?  1.0  :  1.0;  if(p  <  0.0)?  1.0  :  1.0;	  timeout    	non-compiled	[CE]  illegal  start  of  expression	76	None	add
356	[BUG]  [BUGGY]  if(p  >  0.0)  {  return  1.0;  }  else  {  double  p  =  getDomainLowerBound(p);  if(p  >=  0.0)  {  return  0.0;  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  >  0.0)  {  return  1.0;  }  else  {  double  p  =  getDomainLowerBound(p);  if(p  >=  0.0)  {  return  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  >  0.0)  {  return  1.0;  }  else  {  double  p  =  getDomainLowerBound(p);  if(p  >=  0.0)  {  return  0.0;  }	  return    1.0;    double    p    =    getDomainLowerBound(p);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
357	[BUG]  [BUGGY]  Double  m  =  getDomainLowerBound(p)+  denominatorDegreesOfFreedom;  [CE]  missing  return  statement  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  m  =  getDomainLowerBound(p)+  denominatorDegreesOfFreedom;  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  m  =  getDomainLowerBound(p)+  denominatorDegreesOfFreedom;	          Double    m    =    getDomainLowerBound(p);    Double    m    =    getDomainLowerBound(p);    	non-compiled	[CE]  missing  return  statement	39	None	replace
358	[BUG]  [BUGGY]  if(p  <  0.0)  {  return  1.0;  p  =  getDomainLowerBound(p);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  0.0)  {  return  1.0;  p  =  getDomainLowerBound(p);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  <  0.0)  {  return  1.0;  p  =  getDomainLowerBound(p);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    1.0;    p    =    getDomainLowerBound(p);    	non-compiled	[CE]  unreachable  statement	107	None	replace
359	[BUG]  [BUGGY]  if(p  <  0.0)  {  return  1.0;  p  =  getDomainLowerBound(p);  }  [CE]  unreachable  statement  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  0.0)  {  return  1.0;  p  =  getDomainLowerBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  <  0.0)  {  return  1.0;  p  =  getDomainLowerBound(p);  }	  return    1.0;    p    =    getDomainLowerBound(p);    	non-compiled	[CE]  unreachable  statement	107	None	replace
360	[BUG]  [BUGGY]  return  1.0  +  getDenominatorDegreesOfFreedom(p);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  1.0  +  getDenominatorDegreesOfFreedom(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return  1.0  +  getDenominatorDegreesOfFreedom(p);	  return    1.0    +    getDomainLowerBound(p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	61	None	replace
361	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  1.0  /  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return  1.0  /  getDomainLowerBound(p);	  return    1.0    +    getDomainLowerBound(p);    	compilable	  [FE]  StackOverflowError  	61	3	replace
362	[BUG]  [BUGGY]  return  1.0  /  getDomainLowerBound(p);  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  1.0  /  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return  1.0  /  getDomainLowerBound(p);	  return    1.0    +    getDomainLowerBound(p);    	compilable	  [FE]  StackOverflowError  	61	3	replace
363	[BUG]  [BUGGY]  if(p  >  0.0)return  0.0;  if(p  >  0.0)?  0.0  :  0.0;  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  >  0.0)return  0.0;  if(p  >  0.0)?  0.0  :  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  >  0.0)return  0.0;  if(p  >  0.0)?  0.0  :  0.0;  }	  return(p    >    0.0)?    0.0    :    0.0;    if(p    >    0.0)?    0.0    :    0.0;    if(p    >    0.0)?    0.0    :    0.0;    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
364	[BUG]  [BUGGY]  if(p  >  0.0)return  0.0;  if(p  <  0.0)?  0.0  :  0.0;  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  >  0.0)return  0.0;  if(p  <  0.0)?  0.0  :  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  >  0.0)return  0.0;  if(p  <  0.0)?  0.0  :  0.0;  }	  return(p    >    0.0)?    0.0    :    0.0;    if(p    >    0.0)?    0.0    :    0.0;    if(p    >    0.0)?    0.0    :    0.0;    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
365	[BUG]  [BUGGY]  Double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  NumeratorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  cannot  find  symbol  NumeratorDegreesOfFreedom  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  NumeratorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  NumeratorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    NumeratorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol  NumeratorDegreesOfFreedom	90	None	replace
366	[BUG]  [BUGGY]  p  =  getDomainLowerBound(p).doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  p  =  getDomainLowerBound(p).doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	p  =  getDomainLowerBound(p).doubleValue();	  return    0.0    +    getDomainLowerBound(p);    double    p    =    getDomainLowerBound(p).doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	101	None	replace
367	[BUG]  [BUGGY]  return  0.0  +  getNumeratorDegreesOfFreedom(p,  denominatorDegreesOfFreedom);  [CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.0  +  getNumeratorDegreesOfFreedom(p,  denominatorDegreesOfFreedom);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return  0.0  +  getNumeratorDegreesOfFreedom(p,  denominatorDegreesOfFreedom);	  return    0.0    +    getDenominatorDegreesOfFreedom(p);    	non-compiled	[CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	103	None	replace
368	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0.5,  0.0);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0.5,  0.0);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0.5,  0.0);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    0.0);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	89	None	replace
369	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  x,  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  x  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  x,  denominatorDegreesOfFreedom);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  x,  denominatorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  x	130	None	replace
370	[BUG]  [BUGGY]  return(p  >=  0.0)?  getDomainLowerBound()  :  1.0;  [CE]  no  suitable  method  found  for  getDomainLowerBound()  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >=  0.0)?  getDomainLowerBound()  :  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >=  0.0)?  getDomainLowerBound()  :  1.0;	  return(p    >    0.0)?    getDomainLowerBound()    :    1.0;    	non-compiled	[CE]  no  suitable  method  found  for  getDomainLowerBound()	10	None	replace
371	[BUG]  [BUGGY]  return(p  >  0.0)?  getDomainLowerBound()  :  Double.NaN;  [CE]  no  suitable  method  found  for  getDomainLowerBound()  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0.0)?  getDomainLowerBound()  :  Double.NaN;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >  0.0)?  getDomainLowerBound()  :  Double.NaN;	  return(p    >    0.0)?    getDomainLowerBound()    :    1.0;    	non-compiled	[CE]  no  suitable  method  found  for  getDomainLowerBound()	10	None	replace
372	[BUG]  [BUGGY]  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  missing  return  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double    desnominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  missing  return  statement	30	None	replace
373	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.0  +  getDomainLowerBound(p)+  2;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return  0.0  +  getDomainLowerBound(p)+  2;	  return    0.0    +    getDomainLowerBound(p)+    1;    	compilable	  [FE]  StackOverflowError  	65	3	replace
374	[BUG]  [BUGGY]  return  0.0  +  getDomainLowerBound(p)+  2;  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.0  +  getDomainLowerBound(p)+  2;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return  0.0  +  getDomainLowerBound(p)+  2;	  return    0.0    +    getDomainLowerBound(p)+    1;    	compilable	  [FE]  StackOverflowError  	65	3	replace
375	[BUG]  [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  return  1.0;  }  [CE]  missing  return  statement  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  return  1.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  <  0.0  ||  p  >  1.0)  {  return  1.0;  }	  return    1.0;    if(p    <    0.0)    {    return    1.0;    }    	non-compiled	[CE]  missing  return  statement	117	None	replace
376	[BUG]  [BUGGY]          Double    m    =    getDomainLowerBound(p);    p  =  getDomainLowerBound(p);  Double  m  =  getDomainLowerBound(p);  [CE]  variable  m  is  already  defined  in  method  getDomainLowerBound(double)  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]          Double    m    =    getDomainLowerBound(p);    p  =  getDomainLowerBound(p);  Double  m  =  getDomainLowerBound(p);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	                Double        m        =        getDomainLowerBound(p);        p    =    getDomainLowerBound(p);    Double  m  =  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  getDomainLowerBound(double)	42	None	add
377	[BUG]  [BUGGY]  if(p  <  =  0)  {  return  1.0;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  =  0)  {  return  1.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  <  =  0)  {  return  1.0;  }	  return    1.0;    if(p    <    0)    {    return    1.0;    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
378	[BUG]  [BUGGY]  if(p  <  0  ||  p  >  0.0)  {  return  1.0;  }  [CE]  missing  return  statement  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  0  ||  p  >  0.0)  {  return  1.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  <  0  ||  p  >  0.0)  {  return  1.0;  }	  return    1.0;    if(p    <    0)    {    return    1.0;    }    	non-compiled	[CE]  missing  return  statement	120	None	replace
379	[BUG]  [BUGGY]  NumeratorDegreesOfFreedom  p  =  getNumeratorDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  NumeratorDegreesOfFreedom  p  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	NumeratorDegreesOfFreedom  p  =  getNumeratorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
380	[BUG]  [BUGGY]  if(p  <  0.0)  {  if(denominatorDegreesOfFreedom  >  0.0)  {  return  1.0;  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  0.0)  {  if(denominatorDegreesOfFreedom  >  0.0)  {  return  1.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  <  0.0)  {  if(denominatorDegreesOfFreedom  >  0.0)  {  return  1.0;  }	  return    1.0;    if(p    <    0.0)    {    if(denominatorDegreesOfFreedom    >    0.0)    {    return    1.0;    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
381	[BUG]  [BUGGY]  if(p  <  0.0)  {  if(denominatorDegreesOfFreedom  >  1.0)  {  return  1.0;  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  0.0)  {  if(denominatorDegreesOfFreedom  >  1.0)  {  return  1.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  <  0.0)  {  if(denominatorDegreesOfFreedom  >  1.0)  {  return  1.0;  }	  return    1.0;    if(p    <    0.0)    {    if(denominatorDegreesOfFreedom    >    0.0)    {    return    1.0;    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
382	[BUG]  [BUGGY]  return(p  >=  0.0)?  0.0  :  0.0;  p  >  0.0)?  0.0  :  0.0;  [CE]  not  a  statement  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >=  0.0)?  0.0  :  0.0;  p  >  0.0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >=  0.0)?  0.0  :  0.0;  p  >  0.0)?  0.0  :  0.0;	  return(p    >    0.0)?    0.0    :    0.0;    p    >    0.0)?    0.0    :    0.0;    	non-compiled	[CE]  not  a  statement	81	None	replace
383	[BUG]  [BUGGY]  return(p  ==  0.0)?  getDomainLowerBound(p)/  0.0;  [CE]  :  expected  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  ==  0.0)?  getDomainLowerBound(p)/  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  ==  0.0)?  getDomainLowerBound(p)/  0.0;	  return(p    >    0.0)?    getDomainLowerBound(p)/    0.0;    	non-compiled	[CE]  :  expected	135	None	replace
384	[BUG]  [BUGGY]  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >  0.0)?  getDomainLowerBound(p):  0.0;  [CE]  illegal  start  of  expression  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >  0.0)?  getDomainLowerBound(p):  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >  0.0)?  getDomainLowerBound(p):  0.0;	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    if(p    >    0.0)?    getDomainLowerBound(p):    0.0;    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
385	[BUG]  [BUGGY]  return(p  >  0)?  getDomainLowerBound(p):  0.0;  if(p  >  0)?  getDomainLowerBound(p):  0.0;  [CE]  illegal  start  of  expression  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0)?  getDomainLowerBound(p):  0.0;  if(p  >  0)?  getDomainLowerBound(p):  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >  0)?  getDomainLowerBound(p):  0.0;  if(p  >  0)?  getDomainLowerBound(p):  0.0;	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    if(p    >    0.0)?    getDomainLowerBound(p):    0.0;    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
386	[BUG]  [BUGGY]  return(p  ==  0.0)?  0.0  :  0.0;  if(p  ==  0.0)?  0.0  :  0.0;  if(p  ==  0.0)?  0.0  :  0.0;  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  ==  0.0)?  0.0  :  0.0;  if(p  ==  0.0)?  0.0  :  0.0;  if(p  ==  0.0)?  0.0  :  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    ==    0.0)?    0.0    :    0.0;    if(p  ==  0.0)?  0.0  :  0.0;  if(p  ==  0.0)?  0.0  :  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
387	[BUG]  [BUGGY]  return(p  ==  0.0)?  0.0  :  0.0;  if(p  ==  0.0)?  0.0  :  0.0;  if(p  ==  0.0)?  0.0  :  0.0;  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  ==  0.0)?  0.0  :  0.0;  if(p  ==  0.0)?  0.0  :  0.0;  if(p  ==  0.0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    ==    0.0)?    0.0    :    0.0;    if(p  ==  0.0)?  0.0  :  0.0;  if(p  ==  0.0)?  0.0  :  0.0;	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
388	[BUG]  [BUGGY]  return(p  ==  0.0)?  0.0  :  0.0;  if(p  ==  0.0)?  0.0  :  0.0;  if(p  >  0.0)  {  return(p  ==  0.0)?  0.0  :  0.0;  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  ==  0.0)?  0.0  :  0.0;  if(p  ==  0.0)?  0.0  :  0.0;  if(p  >  0.0)  {  return(p  ==  0.0)?  0.0  :  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    ==    0.0)?    0.0    :    0.0;    if(p  ==  0.0)?  0.0  :  0.0;  if(p  >  0.0)  {  return(p  ==  0.0)?  0.0  :  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
389	[BUG]  [BUGGY]  if(p  <  0.0)return  0.0;  if(p  >  0.0)?  0.0  :  0.0;  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  0.0)return  0.0;  if(p  >  0.0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  <  0.0)return  0.0;  if(p  >  0.0)?  0.0  :  0.0;	  return(p    <    0.0)?    0.0    :    0.0;    if(p    <    0.0)?    0.0    :    0.0;    if(p    <    0.0)?    0.0    :    0.0;    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
390	[BUG]  [BUGGY]  return(p  <  0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  0)?  0.0  :  0.0;  if(p  >  0.0)?  0.0  :  0.0;	  return(p    <    0.0)?    0.0    :    0.0;    if(p    <    0.0)?    0.0    :    0.0;    if(p    <    0.0)?    0.0    :    0.0;    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
391	[BUG]  [BUGGY]  return  0.0  +  getDenominatorDegreesOfFreedom(p);  p  =  getDomainLowerBound(p);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]              StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.0  +  getDenominatorDegreesOfFreedom(p);  p  =  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return  0.0  +  getDenominatorDegreesOfFreedom(p);  p  =  getDomainLowerBound(p);	  return    0.0    +    getDomainLowerBound(p);    p    =    getDomainLowerBound(p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	6	None	replace
392	[BUG]  [BUGGY]  Double  m  =  getNumeratorDegreesOfFreedom(p);  [CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  m  =  getNumeratorDegreesOfFreedom(p);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  m  =  getNumeratorDegreesOfFreedom(p);	  Double    m    =    getDomainDegreesOfFreedom(p);    	non-compiled	[CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	92	None	replace
393	[BUG]  [BUGGY]  Double  m  =  getDomainDegreesOfFreedom(p)+  denominatorDegreesOfFreedom;  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  m  =  getDomainDegreesOfFreedom(p)+  denominatorDegreesOfFreedom;  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  m  =  getDomainDegreesOfFreedom(p)+  denominatorDegreesOfFreedom;	  Double    m    =    getDomainDegreesOfFreedom(p);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
394	[BUG]  [BUGGY]  Double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]                StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  p  =  getDomainUpperBound(p);	  return    0.0    +    getDomainLowerBound(p);    double    p    =    getDomainUpperBound(p);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	7	None	replace
395	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  *  1;  [CE]  missing  return  statement  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  *  1;  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  *  1;	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom()    +    1;    	non-compiled	[CE]  missing  return  statement	131	None	replace
396	[BUG]  [BUGGY]  if(p  <  =  0.0)  {  return  1.0;  }  else  {  return  1.0;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  =  0.0)  {  return  1.0;  }  else  {  return  1.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  <  =  0.0)  {  return  1.0;  }  else  {  return  1.0;  }	  return    1.0;    if(p    <    0.0)    {    return    1.0;    }    else    {    return    1.0;    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
397	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  c,  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  c  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  c,  denominatorDegreesOfFreedom);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  c,  denominatorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  c	99	None	replace
398	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  NumeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  cannot  find  symbol  NumeratorDegreesOfFreedom  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  NumeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  NumeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    NumeratorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol  NumeratorDegreesOfFreedom	96	None	replace
399	[BUG]  [BUGGY]  return(p  >=  0.0)?  0.0  :  0.0;  (p  <  0.0)?  0.0  :  0.0;  [CE]  not  a  statement  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >=  0.0)?  0.0  :  0.0;  (p  <  0.0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >=  0.0)?  0.0  :  0.0;  (p  <  0.0)?  0.0  :  0.0;	  return(p    <    0.0)?    0.0    :    0.0;    (p    <    0.0)?    0.0    :    0.0;    	non-compiled	[CE]  not  a  statement	71	None	replace
400	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        double    deseratorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)	123	None	add
401	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  _denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  _denominatorDegreesOfFreedom  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  _denominatorDegreesOfFreedom);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  _denominatorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getDestinatorDegreesOfFreedom(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  _denominatorDegreesOfFreedom	87	None	replace
402	[BUG]  [BUGGY]  return  0.0  *  getDomainLowerBound(p);  if(p  >  0.0)  {  if(p  <  =  0.0)  {  return  0.0;  }  [CE]  illegal  start  of  expression  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.0  *  getDomainLowerBound(p);  if(p  >  0.0)  {  if(p  <  =  0.0)  {  return  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    0.0    *    getDomainLowerBound(p);    if(p  >  0.0)  {  if(p  <  =  0.0)  {  return  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
403	[BUG]  [BUGGY]  return  0.0  *  getDomainLowerBound(p);  if(p  >  0.0)  {  if(p  <  0.0)  {  return  0.0;  }  [CE]  illegal  start  of  expression  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.0  *  getDomainLowerBound(p);  if(p  >  0.0)  {  if(p  <  0.0)  {  return  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    0.0    *    getDomainLowerBound(p);    if(p  >  0.0)  {  if(p  <  0.0)  {  return  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
404	[BUG]  [BUGGY]  return(p  >  0.0)?  1.0  :  1.0;  if(p  >  0.0)?  1.0  :  1.0;  if(p  >  0.0)?  1.0  :  1.0;  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0.0)?  1.0  :  1.0;  if(p  >  0.0)?  1.0  :  1.0;  if(p  >  0.0)?  1.0  :  1.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >    0.0)?    1.0    :    1.0;    if(p  >  0.0)?  1.0  :  1.0;  if(p  >  0.0)?  1.0  :  1.0;  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	78	None	add
405	[BUG]  [BUGGY]  return(p  >  0.0)?  1.0  :  1.0;  if(p  >  0.0)?  1.0  :  1.0;  if(p  >  0.0)?  0.0  :  1.0;  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0.0)?  1.0  :  1.0;  if(p  >  0.0)?  1.0  :  1.0;  if(p  >  0.0)?  0.0  :  1.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >    0.0)?    1.0    :    1.0;    if(p  >  0.0)?  1.0  :  1.0;  if(p  >  0.0)?  0.0  :  1.0;  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	78	None	add
406	[BUG]  [BUGGY]  return(p  >  0.0)?  1.0  :  1.0;  if(p  >  0.0)?  1.0  :  1.0;  if(p  >  0.0)?  1.0  :  1.0;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0.0)?  1.0  :  1.0;  if(p  >  0.0)?  1.0  :  1.0;  if(p  >  0.0)?  1.0  :  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >    0.0)?    1.0    :    1.0;    if(p  >  0.0)?  1.0  :  1.0;  if(p  >  0.0)?  1.0  :  1.0;	  timeout    	non-compiled	[CE]  illegal  start  of  expression	78	None	add
407	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  p,  numeratorDegreesOfFreedom);  [CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  p,  numeratorDegreesOfFreedom);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  p,  numeratorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	25	None	replace
408	[BUG]  [BUGGY]  return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  if(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >=  0.0)  {  return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  if(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >=  0.0)  {  return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    ==    0.0)?    getDomainLowerBound(p):    0.0;    if(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >=  0.0)  {  return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
409	[BUG]  [BUGGY]  return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  if(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  if(p  ==  0.0)  {  return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  }  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  if(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  if(p  ==  0.0)  {  return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    ==    0.0)?    getDomainLowerBound(p):    0.0;    if(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  if(p  ==  0.0)  {  return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
410	[BUG]  [BUGGY]  return  0.0  +  getDomainLowerBound(p)+  1;  p  =  getDomainLowerBound(p);  [CE]  unreachable  statement  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.0  +  getDomainLowerBound(p)+  1;  p  =  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    0.0    +    getDomainLowerBound(p)+    1;    p  =  getDomainLowerBound(p);	  	non-compiled	[CE]  unreachable  statement	64	None	add
411	[BUG]  [BUGGY]  Double  m  =  getDenominatorDegreesOfFreedom(p);  p  =  getDomainLowerBound(p);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  m  =  getDenominatorDegreesOfFreedom(p);  p  =  getDomainLowerBound(p);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  m  =  getDenominatorDegreesOfFreedom(p);  p  =  getDomainLowerBound(p);	          Double    m    =    getDomainLowerBound(p);    p    =    getDomainLowerBound(p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	43	None	replace
412	[BUG]  [BUGGY]  Double  m  =  getDomainLowerBound(p);  p  =  getDomainUpperBound(p);  [CE]  missing  return  statement  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  m  =  getDomainLowerBound(p);  p  =  getDomainUpperBound(p);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  m  =  getDomainLowerBound(p);  p  =  getDomainUpperBound(p);	          Double    m    =    getDomainLowerBound(p);    p    =    getDomainLowerBound(p);    	non-compiled	[CE]  missing  return  statement	43	None	replace
413	[BUG]  [BUGGY]  return(p  >=  0.0)?  getDomainLowerBound()  :  0.5;  [CE]  no  suitable  method  found  for  getDomainLowerBound()  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >=  0.0)?  getDomainLowerBound()  :  0.5;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >=  0.0)?  getDomainLowerBound()  :  0.5;	  return(p    >    0.0)?    getDomainLowerBound()    :    0.5;    	non-compiled	[CE]  no  suitable  method  found  for  getDomainLowerBound()	129	None	replace
414	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p  +  1,  p);  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p  +  1,  p);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p  +  1,  p);	  double    denominatorDegreesOfFreedom    =    getDestinatorDegreesOfFreedom(p    +    1);    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
415	[BUG]  [BUGGY]  return  0.5  +  getDomainLowerBound(p);  p  =  getDomainLowerBound(p);  [CE]  unreachable  statement  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.5  +  getDomainLowerBound(p);  p  =  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    0.5    +    getDomainLowerBound(p);    p  =  getDomainLowerBound(p);	  	non-compiled	[CE]  unreachable  statement	104	None	add
416	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  DEMINE_DECEMBER);  [CE]  cannot  find  symbol  DEMINE_DECEMBER  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  DEMINE_DECEMBER);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  DEMINE_DECEMBER);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p,    m);    	non-compiled	[CE]  cannot  find  symbol  DEMINE_DECEMBER	23	None	replace
417	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0)?  getDomainLowerBound(p):  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return(p  >  0)?  getDomainLowerBound(p):  1.0;	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    if(p    >    0.0)?    getDomainLowerBound(p):    0.0;    else    {    return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    }    	compilable	  [FE]  StackOverflowError  	126	3	replace
418	[BUG]  [BUGGY]  return(p  >  0)?  getDomainLowerBound(p):  1.0;  [FE]  StackOverflowError  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0)?  getDomainLowerBound(p):  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >  0)?  getDomainLowerBound(p):  1.0;	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    if(p    >    0.0)?    getDomainLowerBound(p):    0.0;    else    {    return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    }    	compilable	  [FE]  StackOverflowError  	126	3	replace
419	[BUG]  [BUGGY]  Double  m  =  getDomain(p);  p  =  getDomainLowerBound(p);  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  m  =  getDomain(p);  p  =  getDomainLowerBound(p);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  m  =  getDomain(p);  p  =  getDomainLowerBound(p);	          Double    m    =    getDomainLowerBound(p);    p    =    getDomainLowerBound(p);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
420	[BUG]  [BUGGY]  if(p  <  0  ||  p  >  1.0)  {  return  1.0;  }  [CE]  missing  return  statement  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  0  ||  p  >  1.0)  {  return  1.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  <  0  ||  p  >  1.0)  {  return  1.0;  }	  return    1.0;    if(p    <    0)    {    return    1.0;    }    	non-compiled	[CE]  missing  return  statement	120	None	replace
421	[BUG]  [BUGGY]  if(p  >  0.0)return  0.0;  if(p  <  0.0)?  0.0  :  0.0;  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  >  0.0)return  0.0;  if(p  <  0.0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  >  0.0)return  0.0;  if(p  <  0.0)?  0.0  :  0.0;	  return(p    >    0.0)?    0.0    :    0.0;    if(p    >    0.0)?    0.0    :    0.0;    if(p    >    0.0)?    0.0    :    0.0;    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
422	[BUG]  [BUGGY]  timeout  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  >  0.0)  {  return  1.0;  }  else  {  return  getDomainLowerBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	if(p  >  0.0)  {  return  1.0;  }  else  {  return  getDomainLowerBound(p);  }	  return    1.0;    double    m    =    getDomainLowerBound(p);    	compilable	timeout	16	1	replace
423	[BUG]  [BUGGY]  if(p  >  0.0)  {  return  1.0;  }  else  {  return  getDomainLowerBound(p);  }  timeout  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  >  0.0)  {  return  1.0;  }  else  {  return  getDomainLowerBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  >  0.0)  {  return  1.0;  }  else  {  return  getDomainLowerBound(p);  }	  return    1.0;    double    m    =    getDomainLowerBound(p);    	compilable	timeout	16	1	replace
424	[BUG]  [BUGGY]  timeout  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  >  0)  {  return  1.0;  }  else  {  return  getDomainLowerBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	if(p  >  0)  {  return  1.0;  }  else  {  return  getDomainLowerBound(p);  }	  return    1.0;    double    m    =    getDomainLowerBound(p);    	compilable	timeout	16	1	replace
425	[BUG]  [BUGGY]  if(p  >  0)  {  return  1.0;  }  else  {  return  getDomainLowerBound(p);  }  timeout  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  >  0)  {  return  1.0;  }  else  {  return  getDomainLowerBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  >  0)  {  return  1.0;  }  else  {  return  getDomainLowerBound(p);  }	  return    1.0;    double    m    =    getDomainLowerBound(p);    	compilable	timeout	16	1	replace
426	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  0.0)  {  return  1.0;  }  else  {  return  getDomainLowerBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	if(p  <  0.0)  {  return  1.0;  }  else  {  return  getDomainLowerBound(p);  }	  return    1.0;    double    m    =    getDomainLowerBound(p);    	compilable	  [FE]  StackOverflowError  	16	3	replace
427	[BUG]  [BUGGY]  if(p  <  0.0)  {  return  1.0;  }  else  {  return  getDomainLowerBound(p);  }  [FE]  StackOverflowError  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  0.0)  {  return  1.0;  }  else  {  return  getDomainLowerBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  <  0.0)  {  return  1.0;  }  else  {  return  getDomainLowerBound(p);  }	  return    1.0;    double    m    =    getDomainLowerBound(p);    	compilable	  [FE]  StackOverflowError  	16	3	replace
428	[BUG]  [BUGGY]  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  missing  return  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double    deseratorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  missing  return  statement	124	None	replace
429	[BUG]  [BUGGY]  return(p  >  0.0)?  1.0  :  1.0;  return(p  >  0.0)?  1.0  :  1.0;  [CE]  unreachable  statement  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0.0)?  1.0  :  1.0;  return(p  >  0.0)?  1.0  :  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >    0.0)?    1.0    :    1.0;    return(p  >  0.0)?  1.0  :  1.0;	  timeout    	non-compiled	[CE]  unreachable  statement	78	None	add
430	[BUG]  [BUGGY]  return(p  >  0.0)?  1.0  :  1.0;  if(p  >  0.0)?  1.0  :  1.0;  else  return(p  >  0.0)?  1.0  :  1.0;  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0.0)?  1.0  :  1.0;  if(p  >  0.0)?  1.0  :  1.0;  else  return(p  >  0.0)?  1.0  :  1.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >    0.0)?    1.0    :    1.0;    if(p  >  0.0)?  1.0  :  1.0;  else  return(p  >  0.0)?  1.0  :  1.0;  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	78	None	add
431	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0)?  0.0  :  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return(p  >  0)?  0.0  :  1.0;	  return(p    >    0.0)?    0.0    :    0.0;    if(p    >    0.0)?    0.0    :    0.0;    if(m!=    numeratorDegreesOfFreedom)    {    return(p    >    0.0)?    0.0    :    0.0;    }    	compilable	  [FE]  IllegalArgumentException  	83	1	replace
432	[BUG]  [BUGGY]  return(p  >  0)?  0.0  :  1.0;  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0)?  0.0  :  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >  0)?  0.0  :  1.0;	  return(p    >    0.0)?    0.0    :    0.0;    if(p    >    0.0)?    0.0    :    0.0;    if(m!=    numeratorDegreesOfFreedom)    {    return(p    >    0.0)?    0.0    :    0.0;    }    	compilable	  [FE]  IllegalArgumentException  	83	1	replace
433	[BUG]  [BUGGY]  return(p  <  =  0.0)?  getDomainLowerBound(p)/  0.0;  [CE]  illegal  start  of  expression  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  =  0.0)?  getDomainLowerBound(p)/  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  =  0.0)?  getDomainLowerBound(p)/  0.0;	  return(p    >    0.0)?    getDomainLowerBound(p)/    0.0;    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
434	[BUG]  [BUGGY]  if(p  >  0.0)?  0.0  :  0.0;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  >  0.0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  >  0.0)?  0.0  :  0.0;	  return(p    >    0.0)?    0.0    :    0.0;    if(p    >    0.0)?    0.0    :    0.0;    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
435	[BUG]  [BUGGY]  if(p  <  0.0)?  0.0  :  0.0;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  0.0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  <  0.0)?  0.0  :  0.0;	  return(p    <    0.0)?    0.0    :    0.0;    if(p    <    0.0)?    0.0    :    0.0;    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
436	[BUG]  [BUGGY]  Integer  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  incompatible  types  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Integer  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Integer  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    int    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  incompatible  types	31	None	replace
437	[BUG]  [BUGGY]  if(m  >  denominatorDegreesOfFreedom)  {  return(p  <  0.0)?  0.0  :  0.0;  }  [CE]  cannot  find  symbol  m  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(m  >  denominatorDegreesOfFreedom)  {  return(p  <  0.0)?  0.0  :  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(m  >  denominatorDegreesOfFreedom)  {  return(p  <  0.0)?  0.0  :  0.0;  }	  return(p    <    0.0)?    0.0    :    0.0;    if(p    <    0.0)?    0.0    :    0.0;    if(m    ==    numeratorDegreesOfFreedom)    {    return(p    <    0.0)?    0.0    :    0.0;    }    	non-compiled	[CE]  cannot  find  symbol  m	73	None	replace
438	[BUG]  [BUGGY]  if(m  >  denominatorDegreesOfFreedom)  {  return  p  <  0.0?  0.0  :  0.0;  }  [CE]  cannot  find  symbol  m  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(m  >  denominatorDegreesOfFreedom)  {  return  p  <  0.0?  0.0  :  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(m  >  denominatorDegreesOfFreedom)  {  return  p  <  0.0?  0.0  :  0.0;  }	  return(p    <    0.0)?    0.0    :    0.0;    if(p    <    0.0)?    0.0    :    0.0;    if(m    ==    numeratorDegreesOfFreedom)    {    return(p    <    0.0)?    0.0    :    0.0;    }    	non-compiled	[CE]  cannot  find  symbol  m	73	None	replace
439	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  0,  denominatorDegreesOfFreedom);  [CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  0,  denominatorDegreesOfFreedom);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  0,  denominatorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	99	None	replace
440	[BUG]  [BUGGY]  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  else  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  }  [CE]  illegal  start  of  expression  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  else  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >=    0.0)?    getDomainLowerBound(p):    0.0;    if(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  else  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
441	[BUG]  [BUGGY]  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  else  {  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  }  [CE]  illegal  start  of  expression  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  else  {  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >=    0.0)?    getDomainLowerBound(p):    0.0;    if(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  else  {  return(p  >=  0.0)?  getDomainLowerBound(p):  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
442	[BUG]  [BUGGY]  Double  m  =  getDenominatorDegreesOfFreedom(numeratorDegreesOfFreedom,  p);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  m  =  getDenominatorDegreesOfFreedom(numeratorDegreesOfFreedom,  p);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  m  =  getDenominatorDegreesOfFreedom(numeratorDegreesOfFreedom,  p);	  Double    m    =    getDenominatorDegreesOfFreedom(p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	91	None	replace
443	[BUG]  [BUGGY]  if(p  <  =  0.0  ||  p  >  1.0)  {  return  1.0;  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  =  0.0  ||  p  >  1.0)  {  return  1.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  <  =  0.0  ||  p  >  1.0)  {  return  1.0;  }	  return    1.0;    if(p    <    0.0)    {    return    1.0;    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
444	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  +  p  *.doubleValue();  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  +  p  *.doubleValue();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  +  p  *.doubleValue();	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom()    +    p.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
445	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  d);  [CE]  cannot  find  symbol  d  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  d);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  d);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    m);    	non-compiled	[CE]  cannot  find  symbol  d	34	None	replace
446	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0,  p);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0,  p);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0,  p);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    m);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	34	None	replace
447	[BUG]  [BUGGY]  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  if(p  <  0.0)?  getDomainLowerBound(p):  0.0;  if(p  <  0.0)?  getDomainLowerBound(p):  0.0;  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  if(p  <  0.0)?  getDomainLowerBound(p):  0.0;  if(p  <  0.0)?  getDomainLowerBound(p):  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    <    0.0)?    getDomainLowerBound(p):    0.0;    if(p  <  0.0)?  getDomainLowerBound(p):  0.0;  if(p  <  0.0)?  getDomainLowerBound(p):  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
448	[BUG]  [BUGGY]  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  if(p  <  0.0)?  getDomainLowerBound(p):  0.0;  else  {  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  }  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  if(p  <  0.0)?  getDomainLowerBound(p):  0.0;  else  {  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    <    0.0)?    getDomainLowerBound(p):    0.0;    if(p  <  0.0)?  getDomainLowerBound(p):  0.0;  else  {  return(p  <  0.0)?  getDomainLowerBound(p):  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
449	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom,  p);  [CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom,  p);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom,  p);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	25	None	replace
450	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(null,  p);  [CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(null,  p);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(null,  p);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	25	None	replace
451	[BUG]  [BUGGY]  return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  if(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  else  return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  if(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  else  return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    ==    0.0)?    getDomainLowerBound(p):    0.0;    if(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  else  return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
452	[BUG]  [BUGGY]  return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  if(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  if(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    ==    0.0)?    getDomainLowerBound(p):    0.0;    if(p  ==  0.0)?  getDomainLowerBound(p):  0.0;	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
453	[BUG]  [BUGGY]  return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  if(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  else  {  return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  if(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  else  {  return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    ==    0.0)?    getDomainLowerBound(p):    0.0;    if(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  else  {  return(p  ==  0.0)?  getDomainLowerBound(p):  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
454	[BUG]  [BUGGY]  Math.min(numeratorDegreesOfFreedom,  p);  [CE]  missing  return  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Math.min(numeratorDegreesOfFreedom,  p);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Math.min(numeratorDegreesOfFreedom,  p);	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,    getNumeratorDegreesOfFreedom());    	non-compiled	[CE]  missing  return  statement	33	None	replace
455	[BUG]  [BUGGY]  return(p  <  0)?  0.0  :  0.0;  p  >  0.0)?  0.0  :  0.0;  [CE]  not  a  statement  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  0)?  0.0  :  0.0;  p  >  0.0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  0)?  0.0  :  0.0;  p  >  0.0)?  0.0  :  0.0;	  return(p    <    0.0)?    0.0    :    0.0;    p    <    0.0)?    0.0    :    0.0;    	non-compiled	[CE]  not  a  statement	72	None	replace
456	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p  +  1):  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return(p  >  0.0)?  getDomainLowerBound(p  +  1):  0.0;	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    double    p    =    getDomainLowerBound(p);    	compilable	  [FE]  StackOverflowError  	68	3	replace
457	[BUG]  [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p  +  1):  0.0;  [FE]  StackOverflowError  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p  +  1):  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >  0.0)?  getDomainLowerBound(p  +  1):  0.0;	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    double    p    =    getDomainLowerBound(p);    	compilable	  [FE]  StackOverflowError  	68	3	replace
458	[BUG]  [BUGGY]  if(p  <  0.0)return  0.0;  if(p  >  0.0)?  0.0  :  0.0;  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  0.0)return  0.0;  if(p  >  0.0)?  0.0  :  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  <  0.0)return  0.0;  if(p  >  0.0)?  0.0  :  0.0;  }	  return(p    <    0.0)?    0.0    :    0.0;    if(p    <    0.0)?    0.0    :    0.0;    if(p    <    0.0)?    0.0    :    0.0;    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
459	[BUG]  [BUGGY]  return(p  <  =  0.0)?  0.0  :  0.0;  if(p  <  0.0)?  0.0  :  0.0;  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  =  0.0)?  0.0  :  0.0;  if(p  <  0.0)?  0.0  :  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  =  0.0)?  0.0  :  0.0;  if(p  <  0.0)?  0.0  :  0.0;  }	  return(p    <    0.0)?    0.0    :    0.0;    if(p    <    0.0)?    0.0    :    0.0;    if(p    <    0.0)?    0.0    :    0.0;    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
460	[BUG]  [BUGGY]  if(p  <  =  0.0  ||  p  >  0.0)  {  return  1.0;  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  =  0.0  ||  p  >  0.0)  {  return  1.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  <  =  0.0  ||  p  >  0.0)  {  return  1.0;  }	  return    1.0;    if(p    >    0.0)    {    return    1.0;    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
461	[BUG]  [BUGGY]  if(p  <  0.0  ||  p  >  0.0)  {  return  1.0;  }  [CE]  missing  return  statement  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  0.0  ||  p  >  0.0)  {  return  1.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  <  0.0  ||  p  >  0.0)  {  return  1.0;  }	  return    1.0;    if(p    >    0.0)    {    return    1.0;    }    	non-compiled	[CE]  missing  return  statement	118	None	replace
462	[BUG]  [BUGGY]  return  0.5  +  getDomainLowerBound(p);  if(p  >  0.0)  {  if(p  <  =  0.0)  {  return  0.5  +  getDomainLowerBound(p);  }  [CE]  illegal  start  of  expression  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.5  +  getDomainLowerBound(p);  if(p  >  0.0)  {  if(p  <  =  0.0)  {  return  0.5  +  getDomainLowerBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    0.5    +    getDomainLowerBound(p);    if(p  >  0.0)  {  if(p  <  =  0.0)  {  return  0.5  +  getDomainLowerBound(p);  }	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
463	[BUG]  [BUGGY]  return  0.5  +  getDomainLowerBound(p);  double  p  =  getDomainLowerBound(p);  return  0.5  +  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.5  +  getDomainLowerBound(p);  double  p  =  getDomainLowerBound(p);  return  0.5  +  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    0.5    +    getDomainLowerBound(p);    double  p  =  getDomainLowerBound(p);  return  0.5  +  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	104	None	add
464	[BUG]  [BUGGY]  return  0.5  +  getDomainLowerBound(p);  if(p  >  0)  {  if(p  <  =  0.0)  {  return  0.5  +  getDomainLowerBound(p);  }  [CE]  illegal  start  of  expression  [FE]        StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.5  +  getDomainLowerBound(p);  if(p  >  0)  {  if(p  <  =  0.0)  {  return  0.5  +  getDomainLowerBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    0.5    +    getDomainLowerBound(p);    if(p  >  0)  {  if(p  <  =  0.0)  {  return  0.5  +  getDomainLowerBound(p);  }	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
465	[BUG]  [BUGGY]  if(p  >  0.0)return  0.0;  if(p  >  0.0)?  0.0  :  0.0;  else  return(p  >  0.0)?  0.0  :  0.0;  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  >  0.0)return  0.0;  if(p  >  0.0)?  0.0  :  0.0;  else  return(p  >  0.0)?  0.0  :  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  >  0.0)return  0.0;  if(p  >  0.0)?  0.0  :  0.0;  else  return(p  >  0.0)?  0.0  :  0.0;  }	  return(p    >    0.0)?    0.0    :    0.0;    if(p    >    0.0)?    0.0    :    0.0;    else    return(p    >    0.0)?    0.0    :    0.0;    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
466	[BUG]  [BUGGY]  if(p  >  0.0)return  0.0;  if(p  <  0.0)?  0.0  :  0.0;  else  return(p  >  0.0)?  0.0  :  0.0;  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  >  0.0)return  0.0;  if(p  <  0.0)?  0.0  :  0.0;  else  return(p  >  0.0)?  0.0  :  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  >  0.0)return  0.0;  if(p  <  0.0)?  0.0  :  0.0;  else  return(p  >  0.0)?  0.0  :  0.0;  }	  return(p    >    0.0)?    0.0    :    0.0;    if(p    >    0.0)?    0.0    :    0.0;    else    return(p    >    0.0)?    0.0    :    0.0;    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
467	[BUG]  [BUGGY]  Double  m  =  getDomainLowerBound(p,  Math.min(denominatorDegreesOfFreedom,  p.doubleValue()));  [CE]  double  cannot  be  dereferenced  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  m  =  getDomainLowerBound(p,  Math.min(denominatorDegreesOfFreedom,  p.doubleValue()));  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  m  =  getDomainLowerBound(p,  Math.min(denominatorDegreesOfFreedom,  p.doubleValue()));	  Double    m    =    getDomainLowerBound(p.doubleValue());    	non-compiled	[CE]  double  cannot  be  dereferenced	52	None	replace
468	[BUG]  [BUGGY]  Double  m  =  getDomainLowerBound(p,  d.doubleValue());  [CE]  cannot  find  symbol  d  [FE]              StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  m  =  getDomainLowerBound(p,  d.doubleValue());  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  m  =  getDomainLowerBound(p,  d.doubleValue());	  Double    m    =    getDomainLowerBound(p.doubleValue());    	non-compiled	[CE]  cannot  find  symbol  d	52	None	replace
469	[BUG]  [BUGGY]  if(p  >  0.0)  {  return  0.0  +  getDomainLowerBound(p);  Double  m  =  getDomainLowerBound(p);  }  [CE]  unreachable  statement  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  >  0.0)  {  return  0.0  +  getDomainLowerBound(p);  Double  m  =  getDomainLowerBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  >  0.0)  {  return  0.0  +  getDomainLowerBound(p);  Double  m  =  getDomainLowerBound(p);  }	  return    0.0    +    getDomainLowerBound(p);    Double    m    =    getDomainLowerBound(p);    	non-compiled	[CE]  unreachable  statement	5	None	replace
470	[BUG]  [BUGGY]  return(p  <  0.0)?  1.0  :  1.0;  if(p  <  0.0)?  1.0  :  1.0;  else  return(p  <  0.0)?  1.0  :  1.0;  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  0.0)?  1.0  :  1.0;  if(p  <  0.0)?  1.0  :  1.0;  else  return(p  <  0.0)?  1.0  :  1.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    <    0.0)?    1.0    :    1.0;    if(p  <  0.0)?  1.0  :  1.0;  else  return(p  <  0.0)?  1.0  :  1.0;  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	76	None	add
471	[BUG]  [BUGGY]  return(p  <  0.0)?  1.0  :  1.0;  return(p  <  0.0)?  1.0  :  1.0;  [CE]  unreachable  statement  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  0.0)?  1.0  :  1.0;  return(p  <  0.0)?  1.0  :  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    <    0.0)?    1.0    :    1.0;    return(p  <  0.0)?  1.0  :  1.0;	  timeout    	non-compiled	[CE]  unreachable  statement	76	None	add
472	[BUG]  [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  return  1.0;  p  =  getDomainLowerBound(p);  }  [CE]  unreachable  statement  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  return  1.0;  p  =  getDomainLowerBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  <  0.0  ||  p  >  1.0)  {  return  1.0;  p  =  getDomainLowerBound(p);  }	  return    1.0;    p    =    getDomainLowerBound(p);    	non-compiled	[CE]  unreachable  statement	107	None	replace
473	[BUG]  [BUGGY]  if(p  >  0.0)  {  return  1.0;  p  =  getDomainLowerBound(p);  }  [CE]  unreachable  statement  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  >  0.0)  {  return  1.0;  p  =  getDomainLowerBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  >  0.0)  {  return  1.0;  p  =  getDomainLowerBound(p);  }	  return    1.0;    p    =    getDomainLowerBound(p);    	non-compiled	[CE]  unreachable  statement	107	None	replace
474	[BUG]  [BUGGY]  if(p  >  0.0)?  getDomainLowerBound(p):  0.0;  [CE]  illegal  start  of  expression  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  >  0.0)?  getDomainLowerBound(p):  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  >  0.0)?  getDomainLowerBound(p):  0.0;	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    if(p    >    0.0)?    getDomainLowerBound(p):    0.0;    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
475	[BUG]  [BUGGY]  return(p  ==  0.0)?  0.0  :  0.0;  if(p  ==  0.0)?  0.0  :  0.0;  else  return(p  ==  0.0)?  0.0  :  0.0;  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  ==  0.0)?  0.0  :  0.0;  if(p  ==  0.0)?  0.0  :  0.0;  else  return(p  ==  0.0)?  0.0  :  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    ==    0.0)?    0.0    :    0.0;    if(p  ==  0.0)?  0.0  :  0.0;  else  return(p  ==  0.0)?  0.0  :  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
476	[BUG]  [BUGGY]  return(p  ==  0.0)?  0.0  :  0.0;  if(p  ==  0.0)?  0.0  :  0.0;  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  ==  0.0)?  0.0  :  0.0;  if(p  ==  0.0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    ==    0.0)?    0.0    :    0.0;    if(p  ==  0.0)?  0.0  :  0.0;	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
477	[BUG]  [BUGGY]  if(p  >  0.0)  {  return  1.0;  double  p  =  getDomainLowerBound();  }  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  >  0.0)  {  return  1.0;  double  p  =  getDomainLowerBound();  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  >  0.0)  {  return  1.0;  double  p  =  getDomainLowerBound();  }	  return    1.0;    double    p    =    getDomainLowerBound();    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	18	None	replace
478	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  variable  desnominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	                double        denominatorDegreesOfFreedom        =        getDenominatorDegreesOfFreedom();        double    desnominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  variable  desnominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)	57	None	add
479	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  >  0.0)  {  return  0.0  +  getDomainLowerBound(p);  }  else  {  return  0.0  +  getDomainLowerBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	if(p  >  0.0)  {  return  0.0  +  getDomainLowerBound(p);  }  else  {  return  0.0  +  getDomainLowerBound(p);  }	  return    0.0    +    getDomainLowerBound(p);    double    p    =    getDomainLowerBound(p);    return    0.0    +    getDomainLowerBound(p);    	compilable	  [FE]  StackOverflowError  	115	3	replace
480	[BUG]  [BUGGY]  if(p  >  0.0)  {  return  0.0  +  getDomainLowerBound(p);  }  else  {  return  0.0  +  getDomainLowerBound(p);  }  [FE]  StackOverflowError  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  >  0.0)  {  return  0.0  +  getDomainLowerBound(p);  }  else  {  return  0.0  +  getDomainLowerBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  >  0.0)  {  return  0.0  +  getDomainLowerBound(p);  }  else  {  return  0.0  +  getDomainLowerBound(p);  }	  return    0.0    +    getDomainLowerBound(p);    double    p    =    getDomainLowerBound(p);    return    0.0    +    getDomainLowerBound(p);    	compilable	  [FE]  StackOverflowError  	115	3	replace
481	[BUG]  [BUGGY]  return  0.0  +  getDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom,  p);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.0  +  getDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom,  p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return  0.0  +  getDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom,  p);	  return    0.0    +    getDenominatorDegreesOfFreedom(p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	103	None	replace
482	[BUG]  [BUGGY]  return(p  >=  0.0)?  0.0  :  0.0;  if(p  >=  0.0)?  0.0  :  0.0;  else  return(p  >=  0.0)?  0.0  :  0.0;  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >=  0.0)?  0.0  :  0.0;  if(p  >=  0.0)?  0.0  :  0.0;  else  return(p  >=  0.0)?  0.0  :  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >=    0.0)?    0.0    :    0.0;    if(p  >=  0.0)?  0.0  :  0.0;  else  return(p  >=  0.0)?  0.0  :  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
483	[BUG]  [BUGGY]  return(p  >=  0.0)?  0.0  :  0.0;  if(p  >=  0.0)?  0.0  :  0.0;  if(p  >=  0.0)  return(p  >=  0.0)?  0.0  :  0.0;  }  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >=  0.0)?  0.0  :  0.0;  if(p  >=  0.0)?  0.0  :  0.0;  if(p  >=  0.0)  return(p  >=  0.0)?  0.0  :  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >=    0.0)?    0.0    :    0.0;    if(p  >=  0.0)?  0.0  :  0.0;  if(p  >=  0.0)  return(p  >=  0.0)?  0.0  :  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
484	[BUG]  [BUGGY]  return(p  >=  0.0)?  0.0  :  0.0;  if(p  >=  0.0)?  0.0  :  0.0;  if(p  >=  0.0)?  0.0  :  0.0;  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >=  0.0)?  0.0  :  0.0;  if(p  >=  0.0)?  0.0  :  0.0;  if(p  >=  0.0)?  0.0  :  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p    >=    0.0)?    0.0    :    0.0;    if(p  >=  0.0)?  0.0  :  0.0;  if(p  >=  0.0)?  0.0  :  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
485	[BUG]  [BUGGY]  if(p  <  0.0)return  0.0;  if(p  >  0.0)?  0.0  :  0.0;  else  return  0.0;  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  0.0)return  0.0;  if(p  >  0.0)?  0.0  :  0.0;  else  return  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  <  0.0)return  0.0;  if(p  >  0.0)?  0.0  :  0.0;  else  return  0.0;  }	  return(p    <    0.0)?    0.0    :    0.0;    if(p    <    0.0)?    0.0    :    0.0;    else    return(p    <    0.0)?    0.0    :    0.0;    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
486	[BUG]  [BUGGY]  if(p  <  0.0)return  0.0;  if(p  >  0.0)?  0.0  :  0.0;  else  return  1.0;  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  0.0)return  0.0;  if(p  >  0.0)?  0.0  :  0.0;  else  return  1.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  <  0.0)return  0.0;  if(p  >  0.0)?  0.0  :  0.0;  else  return  1.0;  }	  return(p    <    0.0)?    0.0    :    0.0;    if(p    <    0.0)?    0.0    :    0.0;    else    return(p    <    0.0)?    0.0    :    0.0;    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
487	[BUG]  [BUGGY]  return(p  >  0.0)?  getDomainLowerBound()  :  Double.POSITIVE_INFINITY,  denominatorDegreesOfFreedom;  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0.0)?  getDomainLowerBound()  :  Double.POSITIVE_INFINITY,  denominatorDegreesOfFreedom;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >  0.0)?  getDomainLowerBound()  :  Double.POSITIVE_INFINITY,  denominatorDegreesOfFreedom;	  return(p    >    0.0)?    getDomainLowerBound()    :    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  ';'  expected	8	None	replace
488	[BUG]  [BUGGY]  return  1.0  +  getDomainLowerBound(p);  double  p  =  getDomainLowerBound(p);  return  1.0  +  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  1.0  +  getDomainLowerBound(p);  double  p  =  getDomainLowerBound(p);  return  1.0  +  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    1.0    +    getDomainLowerBound(p);    double  p  =  getDomainLowerBound(p);  return  1.0  +  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	60	None	add
489	[BUG]  [BUGGY]  return  1.0  +  getDomainLowerBound(p);  Double  p  =  getDomainLowerBound(p);  return  1.0  +  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  1.0  +  getDomainLowerBound(p);  Double  p  =  getDomainLowerBound(p);  return  1.0  +  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    1.0    +    getDomainLowerBound(p);    Double  p  =  getDomainLowerBound(p);  return  1.0  +  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	60	None	add
490	[BUG]  [BUGGY]  return  1.0  +  getDomainLowerBound(p);  if(p  >  0.0)  {  if(p  <  =  0.0)  {  return  1.0  +  getDomainLowerBound(p);  }  [CE]  illegal  start  of  expression  [FE]        StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  1.0  +  getDomainLowerBound(p);  if(p  >  0.0)  {  if(p  <  =  0.0)  {  return  1.0  +  getDomainLowerBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    1.0    +    getDomainLowerBound(p);    if(p  >  0.0)  {  if(p  <  =  0.0)  {  return  1.0  +  getDomainLowerBound(p);  }	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
491	[BUG]  [BUGGY]  if(p  >  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >  0.0)?  getDomainLowerBound(p):  0.0;  }  [CE]  illegal  start  of  expression  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  >  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >  0.0)?  getDomainLowerBound(p):  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  >  0.0)?  getDomainLowerBound(p):  0.0;  if(p  >  0.0)?  getDomainLowerBound(p):  0.0;  }	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    (p    >    0.0)?    getDomainLowerBound(p):    0.0;    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
492	[BUG]  [BUGGY]  return  0.0  *  getDomainLowerBound(p);  double  p  =  getDomainLowerBound(p);  return  0.0  *  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.0  *  getDomainLowerBound(p);  double  p  =  getDomainLowerBound(p);  return  0.0  *  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    0.0    *    getDomainLowerBound(p);    double  p  =  getDomainLowerBound(p);  return  0.0  *  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	62	None	add
493	[BUG]  [BUGGY]  return  0.0  *  getDomainLowerBound(p);  if(p  >  0.0)  {  if(p  <  =  0.0)  {  return  0.0  *  getDomainLowerBound(p);  }  [CE]  illegal  start  of  expression  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.0  *  getDomainLowerBound(p);  if(p  >  0.0)  {  if(p  <  =  0.0)  {  return  0.0  *  getDomainLowerBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    0.0    *    getDomainLowerBound(p);    if(p  >  0.0)  {  if(p  <  =  0.0)  {  return  0.0  *  getDomainLowerBound(p);  }	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
494	[BUG]  [BUGGY]  return  0.0  *  getDomainLowerBound(p);  Double  p  =  getDomainLowerBound(p);  return  0.0  *  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]        StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.0  *  getDomainLowerBound(p);  Double  p  =  getDomainLowerBound(p);  return  0.0  *  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return    0.0    *    getDomainLowerBound(p);    Double  p  =  getDomainLowerBound(p);  return  0.0  *  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	62	None	add
495	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.0  /  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return  0.0  /  getDomainLowerBound(p);	  return    0.0    *    getDomainLowerBound(p);    	compilable	  [FE]  StackOverflowError  	63	3	replace
496	[BUG]  [BUGGY]  return  0.0  /  getDomainLowerBound(p);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return  0.0  /  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return  0.0  /  getDomainLowerBound(p);	  return    0.0    *    getDomainLowerBound(p);    	compilable	  [FE]  StackOverflowError  	63	3	replace
497	[BUG]  [BUGGY]  if(p  >  0.0)  {  return  0.0  +  getDomainLowerBound(p);  }  [CE]  missing  return  statement  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  >  0.0)  {  return  0.0  +  getDomainLowerBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  >  0.0)  {  return  0.0  +  getDomainLowerBound(p);  }	  return    0.0    +    getDomainLowerBound(p);    if(p    >    0.0)    {    return    0.0    +    getDomainLowerBound(p);    }    	non-compiled	[CE]  missing  return  statement	114	None	replace
498	[BUG]  [BUGGY]  Double  m  =  getDomainLower(p);  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  m  =  getDomainLower(p);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  m  =  getDomainLower(p);	  Double    m    =    getDomain(p);    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
499	[BUG]  [BUGGY]  Double  m  =  getDomainDegreesOfFreedom(p.doubleValue());  [CE]  double  cannot  be  dereferenced  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  m  =  getDomainDegreesOfFreedom(p.doubleValue());  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  m  =  getDomainDegreesOfFreedom(p.doubleValue());	  Double    m    =    getDomainDegreesOfFreedom(p);    	non-compiled	[CE]  double  cannot  be  dereferenced	92	None	replace
500	[BUG]  [BUGGY]  Double  m  =  getDomainDegreesOfFreedom(p  +  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  Double  m  =  getDomainDegreesOfFreedom(p  +  denominatorDegreesOfFreedom);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	Double  m  =  getDomainDegreesOfFreedom(p  +  denominatorDegreesOfFreedom);	  Double    m    =    getDomainDegreesOfFreedom(p);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
501	[BUG]  [BUGGY]  return(p  <  =  0.0)?  0.0  :  0.0;  (p  <  =  0.0)?  0.0  :  0.0;  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  =  0.0)?  0.0  :  0.0;  (p  <  =  0.0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  =  0.0)?  0.0  :  0.0;  (p  <  =  0.0)?  0.0  :  0.0;	  return(p    <    0.0)?    0.0    :    0.0;    (p    <    0.0)?    0.0    :    0.0;    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
502	[BUG]  [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p):  1.0;  p  =  getDomainLowerBound(p);  [CE]  unreachable  statement  [FE]              StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p):  1.0;  p  =  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >  0.0)?  getDomainLowerBound(p):  1.0;  p  =  getDomainLowerBound(p);	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    p    =    getDomainLowerBound(p);    	non-compiled	[CE]  unreachable  statement	69	None	replace
503	[BUG]  [BUGGY]  return(p  >  0.0)?  0.0  :  1.0;  p  >  0.0)?  0.0  :  0.0;  [CE]  not  a  statement  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0.0)?  0.0  :  1.0;  p  >  0.0)?  0.0  :  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >  0.0)?  0.0  :  1.0;  p  >  0.0)?  0.0  :  0.0;	  return(p    >    0.0)?    0.0    :    0.0;    p    >    0.0)?    0.0    :    0.0;    	non-compiled	[CE]  not  a  statement	81	None	replace
504	[BUG]  [BUGGY]          Double    m    =    getDomainLowerBound(p);    p  =  getDomainLowerBound(p);  Double  m  =  getDomainUpperBound(p);  p  =  getDomainLowerBound(p);  [CE]  variable  m  is  already  defined  in  method  getDomainLowerBound(double)  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]          Double    m    =    getDomainLowerBound(p);    p  =  getDomainLowerBound(p);  Double  m  =  getDomainUpperBound(p);  p  =  getDomainLowerBound(p);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	                Double        m        =        getDomainLowerBound(p);        p    =    getDomainLowerBound(p);    Double  m  =  getDomainUpperBound(p);  p  =  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  getDomainLowerBound(double)	42	None	add
505	[BUG]  [BUGGY]  return(p  >  0.0)?  getDomainLowerBound()  *  0.5  :  0.5;  [CE]  no  suitable  method  found  for  getDomainLowerBound()  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0.0)?  getDomainLowerBound()  *  0.5  :  0.5;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >  0.0)?  getDomainLowerBound()  *  0.5  :  0.5;	  return(p    >    0.0)?    getDomainLowerBound()    :    0.5;    	non-compiled	[CE]  no  suitable  method  found  for  getDomainLowerBound()	129	None	replace
506	[BUG]  [BUGGY]  return(p  >  0.0)?  getDomainLowerBound()  :  2.0;  [CE]  no  suitable  method  found  for  getDomainLowerBound()  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0.0)?  getDomainLowerBound()  :  2.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >  0.0)?  getDomainLowerBound()  :  2.0;	  return(p    >    0.0)?    getDomainLowerBound()    :    0.5;    	non-compiled	[CE]  no  suitable  method  found  for  getDomainLowerBound()	129	None	replace
507	[BUG]  [BUGGY]  if(p  >  0.0)  {  return  1.0;  double  p  =  getDomainLowerBound(p);  }  [CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  >  0.0)  {  return  1.0;  double  p  =  getDomainLowerBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  >  0.0)  {  return  1.0;  double  p  =  getDomainLowerBound(p);  }	  return    1.0;    double    p    =    getDomainLowerBound(p);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainLowerBound(double)	17	None	replace
508	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDenominatorDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDenominatorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDenominatorDegreesOfFreedom();	  double    denominatorDegreesOfFreedom    =    getNumberDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
509	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom()  -  1;  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom()  -  1;  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom()  -  1;	  double    denominatorDegreesOfFreedom    =    getNumberDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
510	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(null,  p);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(null,  p);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(null,  p);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	36	None	replace
511	[BUG]  [BUGGY]  if(p  >  1.0)  {  return  1.0;  double  m  =  getDomainLower(p);  }  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  >  1.0)  {  return  1.0;  double  m  =  getDomainLower(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  >  1.0)  {  return  1.0;  double  m  =  getDomainLower(p);  }	  return    1.0;    double    m    =    getDomainLower(p);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
512	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  -  p,  numeratorDegreesOfFreedom.doubleValue();  [CE]  ';'  expected  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  -  p,  numeratorDegreesOfFreedom.doubleValue();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  -  p,  numeratorDegreesOfFreedom.doubleValue();	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom()    -    p.doubleValue();    	non-compiled	[CE]  ';'  expected	85	None	replace
513	[BUG]  [BUGGY]  return(p  <  0.0)?  0.0  :  1.0;  if(p  <  0.0)?  0.0  :  1.0;  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  0.0)?  0.0  :  1.0;  if(p  <  0.0)?  0.0  :  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  0.0)?  0.0  :  1.0;  if(p  <  0.0)?  0.0  :  1.0;	  return(p    <    0.0)?    0.0    :    0.0;    if(p    <    0.0)?    0.0    :    0.0;    if(p    <    0.0)?    0.0    :    0.0;    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
514	[BUG]  [BUGGY]  return(p  >  0.0)?  getDomainLowerBound()  *  1.0  :  1.0;  [CE]  no  suitable  method  found  for  getDomainLowerBound()  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0.0)?  getDomainLowerBound()  *  1.0  :  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >  0.0)?  getDomainLowerBound()  *  1.0  :  1.0;	  return(p    >    0.0)?    getDomainLowerBound()    :    1.0;    	non-compiled	[CE]  no  suitable  method  found  for  getDomainLowerBound()	10	None	replace
515	[BUG]  [BUGGY]  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  p);  [CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  p);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  p);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(m,    p);    	non-compiled	[CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	24	None	replace
516	[BUG]  [BUGGY]  return(p  >  0)?  getDomainLowerBound(p):  0.0;  p  =(p  >  0.0)?  getDomainLowerBound(p):  0.0;  [CE]  unreachable  statement  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  >  0)?  getDomainLowerBound(p):  0.0;  p  =(p  >  0.0)?  getDomainLowerBound(p):  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >  0)?  getDomainLowerBound(p):  0.0;  p  =(p  >  0.0)?  getDomainLowerBound(p):  0.0;	  return(p    >    0.0)?    getDomainLowerBound(p):    0.0;    p    =(p    >    0.0)?    getDomainLowerBound(p):    0.0;    	non-compiled	[CE]  unreachable  statement	67	None	replace
517	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getMeanorDegreesOfFreedom(p);  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getMeanorDegreesOfFreedom(p);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getMeanorDegreesOfFreedom(p);	  double    denominatorDegreesOfFreedom    =    getMeanorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
518	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        double    desnominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)	29	None	add
519	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  0,  p);  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  0,  p);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  0,  p);	  double    denominatorDegreesOfFreedom    =    getDestinatorDegreesOfFreedom(p,    m);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
520	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  numerator);  [CE]  cannot  find  symbol  numerator  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  numerator);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  numerator);	  double    denominatorDegreesOfFreedom    =    getDestinatorDegreesOfFreedom(p,    m);    	non-compiled	[CE]  cannot  find  symbol  numerator	12	None	replace
521	[BUG]  [BUGGY]  if(p  >  0.5)  {  return  1.0;  double  m  =  getDomainLowerBound();  }  [CE]  no  suitable  method  found  for  getDomainLowerBound()  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  >  0.5)  {  return  1.0;  double  m  =  getDomainLowerBound();  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  >  0.5)  {  return  1.0;  double  m  =  getDomainLowerBound();  }	  return    1.0;    double    m    =    getDomainLowerBound();    	non-compiled	[CE]  no  suitable  method  found  for  getDomainLowerBound()	20	None	replace
522	[BUG]  [BUGGY]  timeout  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  1.0)?  1.0  :  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return(p  <  1.0)?  1.0  :  1.0;	  return(p    <    =    0.0)?    1.0    :    1.0;    	compilable	timeout	110	1	replace
523	[BUG]  [BUGGY]  return(p  <  1.0)?  1.0  :  1.0;  timeout  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  return(p  <  1.0)?  1.0  :  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  1.0)?  1.0  :  1.0;	  return(p    <    =    0.0)?    1.0    :    1.0;    	compilable	timeout	110	1	replace
524	[BUG]  [BUGGY]  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  p);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  p);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  p);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(m,    p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	35	None	replace
525	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0,  denominatorDegreesOfFreedom);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0,  denominatorDegreesOfFreedom);  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0,  denominatorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	130	None	replace
526	[BUG]  [BUGGY]  if(p  <  0.0)  {  return  0.0;  }  [CE]  missing  return  statement  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]  if(p  <  0.0)  {  return  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	if(p  <  0.0)  {  return  0.0;  }	  return(p    <    0.0)?    0.0    :    0.0;    if(p    <    0.0)?    0.0    :    0.0;    if(p    >    0.0)    {    return(p    <    0.0)?    0.0    :    0.0;    }    	non-compiled	[CE]  missing  return  statement	75	None	replace
527	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Math.min(denominatorDegreesOfFreedom,  getNumberDegreesOfFreedom());  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainLowerBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Math.min(denominatorDegreesOfFreedom,  getNumberDegreesOfFreedom());  [BUGGY]      return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        Math.min(denominatorDegreesOfFreedom,    getNumeratorDegreesOfFreedom());    double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Math.min(denominatorDegreesOfFreedom,  getNumberDegreesOfFreedom());	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainLowerBound(double)	32	None	add
