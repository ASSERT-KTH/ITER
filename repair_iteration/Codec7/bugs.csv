bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] return StringUtils.newStringUtf8(encodeBase64(binaryData, true)); [FE] ComparisonFailure [CONTEXT] public static String encodeBase64String(byte[] binaryData) { [BUGGY] return StringUtils.newStringUtf8(encodeBase64(binaryData, true)); [BUGGY] } [CLASS] Base64 [METHOD] encodeBase64String [RETURN_TYPE] String  byte[] binaryData [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b binaryData buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD b octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos result x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	670	670	2	replace	
2	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public static String encodeBase64String(byte[] binaryData) { [BUGGY] [BUGGY] return StringUtils.newStringUtf8(encodeBase64(binaryData, true)); } [CLASS] Base64 [METHOD] encodeBase64String [RETURN_TYPE] String  byte[] binaryData [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b binaryData buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD b octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos result x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	670	670	2	add	
3	[BUG] [BUGGY] return StringUtils.newStringUtf8(encode(pArray)); [FE] ComparisonFailure [CONTEXT] public String encodeToString(byte[] pArray) { [BUGGY] return StringUtils.newStringUtf8(encode(pArray)); [BUGGY] } [CLASS] Base64 [METHOD] encodeToString [RETURN_TYPE] String  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result boolean eof isChunked urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	
4	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public String encodeToString(byte[] pArray) { [BUGGY] [BUGGY] return StringUtils.newStringUtf8(encode(pArray)); } [CLASS] Base64 [METHOD] encodeToString [RETURN_TYPE] String  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result boolean eof isChunked urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	add	
5	[BUG] [BUGGY] this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe); [FE] ComparisonFailure [CONTEXT] public Base64(boolean urlSafe) { [BUGGY] this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe); [BUGGY] } [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(boolean)  boolean urlSafe [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buffer encodeTable lineSeparator boolean eof urlSafe byte PAD int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.5	256	256	2	replace	
6	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public Base64(boolean urlSafe) { [BUGGY] [BUGGY] this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe); } [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(boolean)  boolean urlSafe [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buffer encodeTable lineSeparator boolean eof urlSafe byte PAD int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.5	256	256	2	add	
7	[BUG] [BUGGY] } [FE] ComparisonFailure [CONTEXT] public Base64(boolean urlSafe) { this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe); [BUGGY] } [BUGGY]  [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(boolean)  boolean urlSafe [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buffer encodeTable lineSeparator boolean eof urlSafe byte PAD int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.5	257	257	2	replace	
8	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public Base64(boolean urlSafe) { this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe); [BUGGY] [BUGGY] } [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(boolean)  boolean urlSafe [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buffer encodeTable lineSeparator boolean eof urlSafe byte PAD int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.5	257	257	2	add	
9	[BUG] [BUGGY] System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); [FE] ComparisonFailure [CONTEXT] buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; } break; } if (lineLength > 0 && pos > 0) { [BUGGY] System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); [BUGGY] pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.47140452079103173	497	497	2	replace	
10	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; } break; } if (lineLength > 0 && pos > 0) { [BUGGY] [BUGGY] System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.47140452079103173	497	497	2	add	
11	[BUG] [BUGGY] pos += lineSeparator.length; [FE] ComparisonFailure [CONTEXT] buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; } break; } if (lineLength > 0 && pos > 0) { System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); [BUGGY] pos += lineSeparator.length; [BUGGY] } } else { for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.47140452079103173	498	498	2	replace	
12	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; } break; } if (lineLength > 0 && pos > 0) { System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); [BUGGY] [BUGGY] pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.47140452079103173	498	498	2	add	
13	[BUG] [BUGGY] this.encodeSize = 4 + lineSeparator.length; [FE] ComparisonFailure [CONTEXT] public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) { if (lineSeparator == null) { lineLength = 0;// disable chunk-separating lineSeparator = CHUNK_SEPARATOR;// this just gets ignored } this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0; this.lineSeparator = new byte[lineSeparator.length]; System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); if (lineLength > 0) { [BUGGY] this.encodeSize = 4 + lineSeparator.length; [BUGGY] } else { this.encodeSize = 4; } this.decodeSize = this.encodeSize - 1; if (containsBase64Byte(lineSeparator)) { String sep = StringUtils.newStringUtf8(lineSeparator); throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]"); } this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE; } [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buffer encodeTable lineSeparator boolean eof urlSafe String sep byte PAD int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	
14	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) { if (lineSeparator == null) { lineLength = 0;// disable chunk-separating lineSeparator = CHUNK_SEPARATOR;// this just gets ignored } this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0; this.lineSeparator = new byte[lineSeparator.length]; System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); if (lineLength > 0) { [BUGGY] [BUGGY] this.encodeSize = 4 + lineSeparator.length; } else { this.encodeSize = 4; } this.decodeSize = this.encodeSize - 1; if (containsBase64Byte(lineSeparator)) { String sep = StringUtils.newStringUtf8(lineSeparator); throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]"); } this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE; } [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buffer encodeTable lineSeparator boolean eof urlSafe String sep byte PAD int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	add	
15	[BUG] [BUGGY] len += 4 - mod; [FE] ComparisonFailure [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { [BUGGY] len += 4 - mod; [BUGGY] } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } } return len; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.3086066999241838	986	986	2	replace	
16	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { [BUGGY] [BUGGY] len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } } return len; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.3086066999241838	986	986	2	add	
17	[BUG] [BUGGY] Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe); [FE] ComparisonFailure [CONTEXT] } long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR); if (len > maxResultSize) { throw new IllegalArgumentException("Input array too big, the output array would be bigger (" + len + ") than the specified maxium size of " + maxResultSize); } [BUGGY] Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe); [BUGGY] return b64.encode(binaryData); } [CLASS] Base64 [METHOD] encodeBase64 [RETURN_TYPE] byte[]  byte[] binaryData boolean isChunked boolean urlSafe int maxResultSize [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b binaryData buf buffer encodeTable in lineSeparator out pArray result boolean eof isChunked urlSafe Base64 b64 byte PAD b octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	833	833	2	replace	
18	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] } long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR); if (len > maxResultSize) { throw new IllegalArgumentException("Input array too big, the output array would be bigger (" + len + ") than the specified maxium size of " + maxResultSize); } [BUGGY] [BUGGY] Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe); return b64.encode(binaryData); } [CLASS] Base64 [METHOD] encodeBase64 [RETURN_TYPE] byte[]  byte[] binaryData boolean isChunked boolean urlSafe int maxResultSize [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b binaryData buf buffer encodeTable in lineSeparator out pArray result boolean eof isChunked urlSafe Base64 b64 byte PAD b octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	833	833	2	add	
19	[BUG] [BUGGY] return b64.encode(binaryData); [FE] ComparisonFailure [CONTEXT] long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR); if (len > maxResultSize) { throw new IllegalArgumentException("Input array too big, the output array would be bigger (" + len + ") than the specified maxium size of " + maxResultSize); } Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe); [BUGGY] return b64.encode(binaryData); [BUGGY] } [CLASS] Base64 [METHOD] encodeBase64 [RETURN_TYPE] byte[]  byte[] binaryData boolean isChunked boolean urlSafe int maxResultSize [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b binaryData buf buffer encodeTable in lineSeparator out pArray result boolean eof isChunked urlSafe Base64 b64 byte PAD b octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	834	834	2	replace	
20	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR); if (len > maxResultSize) { throw new IllegalArgumentException("Input array too big, the output array would be bigger (" + len + ") than the specified maxium size of " + maxResultSize); } Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe); [BUGGY] [BUGGY] return b64.encode(binaryData); } [CLASS] Base64 [METHOD] encodeBase64 [RETURN_TYPE] byte[]  byte[] binaryData boolean isChunked boolean urlSafe int maxResultSize [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b binaryData buf buffer encodeTable in lineSeparator out pArray result boolean eof isChunked urlSafe Base64 b64 byte PAD b octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	834	834	2	add	
21	[BUG] [BUGGY] return encodeBase64(binaryData, isChunked, false); [FE] ComparisonFailure [CONTEXT] public static byte[] encodeBase64(byte[] binaryData, boolean isChunked) { [BUGGY] return encodeBase64(binaryData, isChunked, false); [BUGGY] } [CLASS] Base64 [METHOD] encodeBase64 [RETURN_TYPE] byte[]  byte[] binaryData boolean isChunked [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b binaryData buf buffer encodeTable in lineSeparator out pArray result boolean eof isChunked urlSafe byte PAD b octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos result x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.29488391230979427	783	783	2	replace	
22	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public static byte[] encodeBase64(byte[] binaryData, boolean isChunked) { [BUGGY] [BUGGY] return encodeBase64(binaryData, isChunked, false); } [CLASS] Base64 [METHOD] encodeBase64 [RETURN_TYPE] byte[]  byte[] binaryData boolean isChunked [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b binaryData buf buffer encodeTable in lineSeparator out pArray result boolean eof isChunked urlSafe byte PAD b octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos result x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.29488391230979427	783	783	2	add	
23	[BUG] [BUGGY] long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR); [FE] ComparisonFailure [CONTEXT] public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) { if (binaryData == null || binaryData.length == 0) { return binaryData; } [BUGGY] long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR); [BUGGY] if (len > maxResultSize) { throw new IllegalArgumentException("Input array too big, the output array would be bigger (" + len + ") than the specified maxium size of " + maxResultSize); } Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe); return b64.encode(binaryData); } [CLASS] Base64 [METHOD] encodeBase64 [RETURN_TYPE] byte[]  byte[] binaryData boolean isChunked boolean urlSafe int maxResultSize [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b binaryData buf buffer encodeTable in lineSeparator out pArray result boolean eof isChunked urlSafe Base64 b64 byte PAD b octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.29488391230979427	825	825	2	replace	
24	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) { if (binaryData == null || binaryData.length == 0) { return binaryData; } [BUGGY] [BUGGY] long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR); if (len > maxResultSize) { throw new IllegalArgumentException("Input array too big, the output array would be bigger (" + len + ") than the specified maxium size of " + maxResultSize); } Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe); return b64.encode(binaryData); } [CLASS] Base64 [METHOD] encodeBase64 [RETURN_TYPE] byte[]  byte[] binaryData boolean isChunked boolean urlSafe int maxResultSize [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b binaryData buf buffer encodeTable in lineSeparator out pArray result boolean eof isChunked urlSafe Base64 b64 byte PAD b octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.29488391230979427	825	825	2	add	
25	[BUG] [BUGGY] if (len > maxResultSize) { [FE] ComparisonFailure [CONTEXT] public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) { if (binaryData == null || binaryData.length == 0) { return binaryData; } long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR); [BUGGY] if (len > maxResultSize) { [BUGGY] throw new IllegalArgumentException("Input array too big, the output array would be bigger (" + len + ") than the specified maxium size of " + maxResultSize); } Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe); return b64.encode(binaryData); } [CLASS] Base64 [METHOD] encodeBase64 [RETURN_TYPE] byte[]  byte[] binaryData boolean isChunked boolean urlSafe int maxResultSize [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b binaryData buf buffer encodeTable in lineSeparator out pArray result boolean eof isChunked urlSafe Base64 b64 byte PAD b octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.29488391230979427	826	826	2	replace	
26	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) { if (binaryData == null || binaryData.length == 0) { return binaryData; } long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR); [BUGGY] [BUGGY] if (len > maxResultSize) { throw new IllegalArgumentException("Input array too big, the output array would be bigger (" + len + ") than the specified maxium size of " + maxResultSize); } Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe); return b64.encode(binaryData); } [CLASS] Base64 [METHOD] encodeBase64 [RETURN_TYPE] byte[]  byte[] binaryData boolean isChunked boolean urlSafe int maxResultSize [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b binaryData buf buffer encodeTable in lineSeparator out pArray result boolean eof isChunked urlSafe Base64 b64 byte PAD b octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.29488391230979427	826	826	2	add	
27	[BUG] [BUGGY] len += chunkSeparator.length; [FE] ComparisonFailure [CONTEXT] long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { [BUGGY] len += chunkSeparator.length; [BUGGY] } } return len; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.29488391230979427	992	992	2	replace	
28	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { [BUGGY] [BUGGY] len += chunkSeparator.length; } } return len; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.29488391230979427	992	992	2	add	
29	[BUG] [BUGGY] return encodeBase64(binaryData, isChunked, urlSafe, Integer.MAX_VALUE); [FE] ComparisonFailure [CONTEXT] public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe) { [BUGGY] return encodeBase64(binaryData, isChunked, urlSafe, Integer.MAX_VALUE); [BUGGY] } [CLASS] Base64 [METHOD] encodeBase64 [RETURN_TYPE] byte[]  byte[] binaryData boolean isChunked boolean urlSafe [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b binaryData buf buffer encodeTable in lineSeparator out pArray result boolean eof isChunked urlSafe byte PAD b octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos result x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	801	801	2	replace	
30	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe) { [BUGGY] [BUGGY] return encodeBase64(binaryData, isChunked, urlSafe, Integer.MAX_VALUE); } [CLASS] Base64 [METHOD] encodeBase64 [RETURN_TYPE] byte[]  byte[] binaryData boolean isChunked boolean urlSafe [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b binaryData buf buffer encodeTable in lineSeparator out pArray result boolean eof isChunked urlSafe byte PAD b octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos result x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	801	801	2	add	
31	[BUG] [BUGGY] return binaryData; [FE] ComparisonFailure [CONTEXT] public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) { if (binaryData == null || binaryData.length == 0) { [BUGGY] return binaryData; [BUGGY] } long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR); if (len > maxResultSize) { throw new IllegalArgumentException("Input array too big, the output array would be bigger (" + len + ") than the specified maxium size of " + maxResultSize); }  [CLASS] Base64 [METHOD] encodeBase64 [RETURN_TYPE] byte[]  byte[] binaryData boolean isChunked boolean urlSafe int maxResultSize [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b binaryData buf buffer encodeTable in lineSeparator out pArray result boolean eof isChunked urlSafe Base64 b64 byte PAD b octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	822	822	2	replace	
32	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) { if (binaryData == null || binaryData.length == 0) { [BUGGY] [BUGGY] return binaryData; } long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR); if (len > maxResultSize) { throw new IllegalArgumentException("Input array too big, the output array would be bigger (" + len + ") than the specified maxium size of " + maxResultSize); }  [CLASS] Base64 [METHOD] encodeBase64 [RETURN_TYPE] byte[]  byte[] binaryData boolean isChunked boolean urlSafe int maxResultSize [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b binaryData buf buffer encodeTable in lineSeparator out pArray result boolean eof isChunked urlSafe Base64 b64 byte PAD b octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	822	822	2	add	
33	[BUG] [BUGGY] if (binaryData == null || binaryData.length == 0) { [FE] ComparisonFailure [CONTEXT] public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) { [BUGGY] if (binaryData == null || binaryData.length == 0) { [BUGGY] return binaryData; } long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR); if (len > maxResultSize) { throw new IllegalArgumentException("Input array too big, the output array would be bigger (" + len + ") than the specified maxium size of " + maxResultSize); } [CLASS] Base64 [METHOD] encodeBase64 [RETURN_TYPE] byte[]  byte[] binaryData boolean isChunked boolean urlSafe int maxResultSize [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b binaryData buf buffer encodeTable in lineSeparator out pArray result boolean eof isChunked urlSafe Base64 b64 byte PAD b octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.282842712474619	821	821	2	replace	
34	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) { [BUGGY] [BUGGY] if (binaryData == null || binaryData.length == 0) { return binaryData; } long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR); if (len > maxResultSize) { throw new IllegalArgumentException("Input array too big, the output array would be bigger (" + len + ") than the specified maxium size of " + maxResultSize); } [CLASS] Base64 [METHOD] encodeBase64 [RETURN_TYPE] byte[]  byte[] binaryData boolean isChunked boolean urlSafe int maxResultSize [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b binaryData buf buffer encodeTable in lineSeparator out pArray result boolean eof isChunked urlSafe Base64 b64 byte PAD b octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.282842712474619	821	821	2	add	
35	[BUG] [BUGGY] boolean lenChunksPerfectly = len % chunkSize == 0; [FE] ComparisonFailure [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { [BUGGY] boolean lenChunksPerfectly = len % chunkSize == 0; [BUGGY] len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } } return len; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.282842712474619	989	989	2	replace	
36	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { [BUGGY] [BUGGY] boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } } return len; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.282842712474619	989	989	2	add	
37	[BUG] [BUGGY] len += (len / chunkSize) * chunkSeparator.length; [FE] ComparisonFailure [CONTEXT]  chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; [BUGGY] len += (len / chunkSize) * chunkSeparator.length; [BUGGY] if (!lenChunksPerfectly) { len += chunkSeparator.length; } } return len; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.282842712474619	990	990	2	replace	
38	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT]  chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; [BUGGY] [BUGGY] len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } } return len; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.282842712474619	990	990	2	add	
39	[BUG] [BUGGY] if (!lenChunksPerfectly) { [FE] ComparisonFailure [CONTEXT] chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; [BUGGY] if (!lenChunksPerfectly) { [BUGGY] len += chunkSeparator.length; } } return len; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.282842712474619	991	991	2	replace	
40	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; [BUGGY] [BUGGY] if (!lenChunksPerfectly) { len += chunkSeparator.length; } } return len; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.282842712474619	991	991	2	add	
41	[BUG] [BUGGY] if (eof) { [FE] ComparisonFailure [CONTEXT] void encode(byte[] in, int inPos, int inAvail) { [BUGGY] if (eof) { [BUGGY] return; }   if (inAvail < 0) { eof = true; if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } switch (modulus) { [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	465	465	2	replace	
42	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] void encode(byte[] in, int inPos, int inAvail) { [BUGGY] [BUGGY] if (eof) { return; }   if (inAvail < 0) { eof = true; if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } switch (modulus) { [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	465	465	2	add	
43	[BUG] [BUGGY] if (inAvail < 0) { [FE] ComparisonFailure [CONTEXT] void encode(byte[] in, int inPos, int inAvail) { if (eof) { return; }   [BUGGY] if (inAvail < 0) { [BUGGY] eof = true; if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } switch (modulus) { case 1 : buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	470	470	2	replace	
44	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] void encode(byte[] in, int inPos, int inAvail) { if (eof) { return; }   [BUGGY] [BUGGY] if (inAvail < 0) { eof = true; if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } switch (modulus) { case 1 : buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	470	470	2	add	
45	[BUG] [BUGGY] eof = true; [FE] ComparisonFailure [CONTEXT] void encode(byte[] in, int inPos, int inAvail) { if (eof) { return; }   if (inAvail < 0) { [BUGGY] eof = true; [BUGGY] if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } switch (modulus) { case 1 : buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	471	471	2	replace	
46	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] void encode(byte[] in, int inPos, int inAvail) { if (eof) { return; }   if (inAvail < 0) { [BUGGY] [BUGGY] eof = true; if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } switch (modulus) { case 1 : buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	471	471	2	add	
47	[BUG] [BUGGY] if (buffer == null || buffer.length - pos < encodeSize) { [FE] ComparisonFailure [CONTEXT] void encode(byte[] in, int inPos, int inAvail) { if (eof) { return; }   if (inAvail < 0) { eof = true; [BUGGY] if (buffer == null || buffer.length - pos < encodeSize) { [BUGGY] resizeBuffer(); } switch (modulus) { case 1 : buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; buffer[pos++] = PAD; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	472	472	2	replace	
48	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] void encode(byte[] in, int inPos, int inAvail) { if (eof) { return; }   if (inAvail < 0) { eof = true; [BUGGY] [BUGGY] if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } switch (modulus) { case 1 : buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; buffer[pos++] = PAD; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	472	472	2	add	
49	[BUG] [BUGGY] switch (modulus) { [FE] ComparisonFailure [CONTEXT] if (eof) { return; }   if (inAvail < 0) { eof = true; if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } [BUGGY] switch (modulus) { [BUGGY] case 1 : buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; buffer[pos++] = PAD; } break;  [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	475	475	2	replace	
50	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (eof) { return; }   if (inAvail < 0) { eof = true; if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } [BUGGY] [BUGGY] switch (modulus) { case 1 : buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; buffer[pos++] = PAD; } break;  [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	475	475	2	add	
51	[BUG] [BUGGY] if (lineLength > 0 && pos > 0) { [FE] ComparisonFailure [CONTEXT] case 2 : buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; } break; } [BUGGY] if (lineLength > 0 && pos > 0) { [BUGGY] System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } modulus = (++modulus) % 3; int b = in[inPos++]; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	496	496	2	replace	
52	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] case 2 : buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; } break; } [BUGGY] [BUGGY] if (lineLength > 0 && pos > 0) { System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } modulus = (++modulus) % 3; int b = in[inPos++]; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	496	496	2	add	
53	[BUG] [BUGGY] for (int i = 0; i < inAvail; i++) { [FE] ComparisonFailure [CONTEXT] if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; } break; } if (lineLength > 0 && pos > 0) { System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); pos += lineSeparator.length; } } else { [BUGGY] for (int i = 0; i < inAvail; i++) { [BUGGY] if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; } x = (x << 8) + b; if (0 == modulus) { [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	501	501	2	replace	
54	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; } break; } if (lineLength > 0 && pos > 0) { System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); pos += lineSeparator.length; } } else { [BUGGY] [BUGGY] for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; } x = (x << 8) + b; if (0 == modulus) { [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	501	501	2	add	
55	[BUG] [BUGGY] if (buffer == null || buffer.length - pos < encodeSize) { [FE] ComparisonFailure [CONTEXT] buffer[pos++] = PAD; } break; } if (lineLength > 0 && pos > 0) { System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { [BUGGY] if (buffer == null || buffer.length - pos < encodeSize) { [BUGGY] resizeBuffer(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; } x = (x << 8) + b; if (0 == modulus) { buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	502	502	2	replace	
56	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] buffer[pos++] = PAD; } break; } if (lineLength > 0 && pos > 0) { System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { [BUGGY] [BUGGY] if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; } x = (x << 8) + b; if (0 == modulus) { buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	502	502	2	add	
57	[BUG] [BUGGY] modulus = (++modulus) % 3; [FE] ComparisonFailure [CONTEXT] } if (lineLength > 0 && pos > 0) { System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } [BUGGY] modulus = (++modulus) % 3; [BUGGY] int b = in[inPos++]; if (b < 0) { b += 256; } x = (x << 8) + b; if (0 == modulus) { buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS]; buffer[pos++] = encodeTable[x & MASK_6BITS]; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	505	505	2	replace	
58	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] } if (lineLength > 0 && pos > 0) { System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } [BUGGY] [BUGGY] modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; } x = (x << 8) + b; if (0 == modulus) { buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS]; buffer[pos++] = encodeTable[x & MASK_6BITS]; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	505	505	2	add	
59	[BUG] [BUGGY] int b = in[inPos++]; [FE] ComparisonFailure [CONTEXT] if (lineLength > 0 && pos > 0) { System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } modulus = (++modulus) % 3; [BUGGY] int b = in[inPos++]; [BUGGY] if (b < 0) { b += 256; } x = (x << 8) + b; if (0 == modulus) { buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS]; buffer[pos++] = encodeTable[x & MASK_6BITS]; currentLinePos += 4; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	506	506	2	replace	
60	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (lineLength > 0 && pos > 0) { System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } modulus = (++modulus) % 3; [BUGGY] [BUGGY] int b = in[inPos++]; if (b < 0) { b += 256; } x = (x << 8) + b; if (0 == modulus) { buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS]; buffer[pos++] = encodeTable[x & MASK_6BITS]; currentLinePos += 4; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	506	506	2	add	
61	[BUG] [BUGGY] if (b < 0) { [FE] ComparisonFailure [CONTEXT] System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } modulus = (++modulus) % 3; int b = in[inPos++]; [BUGGY] if (b < 0) { [BUGGY] b += 256; } x = (x << 8) + b; if (0 == modulus) { buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS]; buffer[pos++] = encodeTable[x & MASK_6BITS]; currentLinePos += 4; if (lineLength > 0 && lineLength <= currentLinePos) { [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	507	507	2	replace	
62	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } modulus = (++modulus) % 3; int b = in[inPos++]; [BUGGY] [BUGGY] if (b < 0) { b += 256; } x = (x << 8) + b; if (0 == modulus) { buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS]; buffer[pos++] = encodeTable[x & MASK_6BITS]; currentLinePos += 4; if (lineLength > 0 && lineLength <= currentLinePos) { [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	507	507	2	add	
63	[BUG] [BUGGY] x = (x << 8) + b; [FE] ComparisonFailure [CONTEXT] } else { for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; } [BUGGY] x = (x << 8) + b; [BUGGY] if (0 == modulus) { buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS]; buffer[pos++] = encodeTable[x & MASK_6BITS]; currentLinePos += 4; if (lineLength > 0 && lineLength <= currentLinePos) { System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); pos += lineSeparator.length; currentLinePos = 0; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	510	510	2	replace	
64	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] } else { for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; } [BUGGY] [BUGGY] x = (x << 8) + b; if (0 == modulus) { buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS]; buffer[pos++] = encodeTable[x & MASK_6BITS]; currentLinePos += 4; if (lineLength > 0 && lineLength <= currentLinePos) { System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); pos += lineSeparator.length; currentLinePos = 0; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	510	510	2	add	
65	[BUG] [BUGGY] if (0 == modulus) { [FE] ComparisonFailure [CONTEXT] for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; } x = (x << 8) + b; [BUGGY] if (0 == modulus) { [BUGGY] buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS]; buffer[pos++] = encodeTable[x & MASK_6BITS]; currentLinePos += 4; if (lineLength > 0 && lineLength <= currentLinePos) { System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); pos += lineSeparator.length; currentLinePos = 0; } [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	511	511	2	replace	
66	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; } x = (x << 8) + b; [BUGGY] [BUGGY] if (0 == modulus) { buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS]; buffer[pos++] = encodeTable[x & MASK_6BITS]; currentLinePos += 4; if (lineLength > 0 && lineLength <= currentLinePos) { System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); pos += lineSeparator.length; currentLinePos = 0; } [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	511	511	2	add	
68	[BUG] [BUGGY] reset(); [FE] ComparisonFailure [CONTEXT] public byte[] encode(byte[] pArray) { [BUGGY] reset(); [BUGGY] if (pArray == null || pArray.length == 0) { return pArray; } long len = getEncodeLength(pArray, lineLength, lineSeparator); byte[] buf = new byte[(int) len]; setInitialBuffer(buf, 0, buf.length); encode(pArray, 0, pArray.length); encode(pArray, 0, -1); // Notify encoder of EOF.  if (buffer != buf) { [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	945	945	2	replace	
69	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public byte[] encode(byte[] pArray) { [BUGGY] [BUGGY] reset(); if (pArray == null || pArray.length == 0) { return pArray; } long len = getEncodeLength(pArray, lineLength, lineSeparator); byte[] buf = new byte[(int) len]; setInitialBuffer(buf, 0, buf.length); encode(pArray, 0, pArray.length); encode(pArray, 0, -1); // Notify encoder of EOF.  if (buffer != buf) { [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	945	945	2	add	
70	[BUG] [BUGGY] if (pArray == null || pArray.length == 0) { [FE] ComparisonFailure [CONTEXT] public byte[] encode(byte[] pArray) { reset(); [BUGGY] if (pArray == null || pArray.length == 0) { [BUGGY] return pArray; } long len = getEncodeLength(pArray, lineLength, lineSeparator); byte[] buf = new byte[(int) len]; setInitialBuffer(buf, 0, buf.length); encode(pArray, 0, pArray.length); encode(pArray, 0, -1); // Notify encoder of EOF.  if (buffer != buf) { readResults(buf, 0, buf.length); [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	946	946	2	replace	
71	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public byte[] encode(byte[] pArray) { reset(); [BUGGY] [BUGGY] if (pArray == null || pArray.length == 0) { return pArray; } long len = getEncodeLength(pArray, lineLength, lineSeparator); byte[] buf = new byte[(int) len]; setInitialBuffer(buf, 0, buf.length); encode(pArray, 0, pArray.length); encode(pArray, 0, -1); // Notify encoder of EOF.  if (buffer != buf) { readResults(buf, 0, buf.length); [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	946	946	2	add	
72	[BUG] [BUGGY] long len = getEncodeLength(pArray, lineLength, lineSeparator); [FE] ComparisonFailure [CONTEXT] public byte[] encode(byte[] pArray) { reset(); if (pArray == null || pArray.length == 0) { return pArray; } [BUGGY] long len = getEncodeLength(pArray, lineLength, lineSeparator); [BUGGY] byte[] buf = new byte[(int) len]; setInitialBuffer(buf, 0, buf.length); encode(pArray, 0, pArray.length); encode(pArray, 0, -1); // Notify encoder of EOF.  if (buffer != buf) { readResults(buf, 0, buf.length); }   [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	949	949	2	replace	
73	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public byte[] encode(byte[] pArray) { reset(); if (pArray == null || pArray.length == 0) { return pArray; } [BUGGY] [BUGGY] long len = getEncodeLength(pArray, lineLength, lineSeparator); byte[] buf = new byte[(int) len]; setInitialBuffer(buf, 0, buf.length); encode(pArray, 0, pArray.length); encode(pArray, 0, -1); // Notify encoder of EOF.  if (buffer != buf) { readResults(buf, 0, buf.length); }   [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	949	949	2	add	
74	[BUG] [BUGGY] byte[] buf = new byte[(int) len]; [FE] ComparisonFailure [CONTEXT] public byte[] encode(byte[] pArray) { reset(); if (pArray == null || pArray.length == 0) { return pArray; } long len = getEncodeLength(pArray, lineLength, lineSeparator); [BUGGY] byte[] buf = new byte[(int) len]; [BUGGY] setInitialBuffer(buf, 0, buf.length); encode(pArray, 0, pArray.length); encode(pArray, 0, -1); // Notify encoder of EOF.  if (buffer != buf) { readResults(buf, 0, buf.length); }   if (isUrlSafe() && pos < buf.length) { [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	950	950	2	replace	
75	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public byte[] encode(byte[] pArray) { reset(); if (pArray == null || pArray.length == 0) { return pArray; } long len = getEncodeLength(pArray, lineLength, lineSeparator); [BUGGY] [BUGGY] byte[] buf = new byte[(int) len]; setInitialBuffer(buf, 0, buf.length); encode(pArray, 0, pArray.length); encode(pArray, 0, -1); // Notify encoder of EOF.  if (buffer != buf) { readResults(buf, 0, buf.length); }   if (isUrlSafe() && pos < buf.length) { [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	950	950	2	add	
76	[BUG] [BUGGY] setInitialBuffer(buf, 0, buf.length); [FE] ComparisonFailure [CONTEXT] public byte[] encode(byte[] pArray) { reset(); if (pArray == null || pArray.length == 0) { return pArray; } long len = getEncodeLength(pArray, lineLength, lineSeparator); byte[] buf = new byte[(int) len]; [BUGGY] setInitialBuffer(buf, 0, buf.length); [BUGGY] encode(pArray, 0, pArray.length); encode(pArray, 0, -1); // Notify encoder of EOF.  if (buffer != buf) { readResults(buf, 0, buf.length); }   if (isUrlSafe() && pos < buf.length) { byte[] smallerBuf = new byte[pos]; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	951	951	2	replace	
77	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public byte[] encode(byte[] pArray) { reset(); if (pArray == null || pArray.length == 0) { return pArray; } long len = getEncodeLength(pArray, lineLength, lineSeparator); byte[] buf = new byte[(int) len]; [BUGGY] [BUGGY] setInitialBuffer(buf, 0, buf.length); encode(pArray, 0, pArray.length); encode(pArray, 0, -1); // Notify encoder of EOF.  if (buffer != buf) { readResults(buf, 0, buf.length); }   if (isUrlSafe() && pos < buf.length) { byte[] smallerBuf = new byte[pos]; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	951	951	2	add	
78	[BUG] [BUGGY] encode(pArray, 0, pArray.length); [FE] ComparisonFailure [CONTEXT] public byte[] encode(byte[] pArray) { reset(); if (pArray == null || pArray.length == 0) { return pArray; } long len = getEncodeLength(pArray, lineLength, lineSeparator); byte[] buf = new byte[(int) len]; setInitialBuffer(buf, 0, buf.length); [BUGGY] encode(pArray, 0, pArray.length); [BUGGY] encode(pArray, 0, -1); // Notify encoder of EOF.  if (buffer != buf) { readResults(buf, 0, buf.length); }   if (isUrlSafe() && pos < buf.length) { byte[] smallerBuf = new byte[pos]; System.arraycopy(buf, 0, smallerBuf, 0, pos); [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	952	952	2	replace	
79	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public byte[] encode(byte[] pArray) { reset(); if (pArray == null || pArray.length == 0) { return pArray; } long len = getEncodeLength(pArray, lineLength, lineSeparator); byte[] buf = new byte[(int) len]; setInitialBuffer(buf, 0, buf.length); [BUGGY] [BUGGY] encode(pArray, 0, pArray.length); encode(pArray, 0, -1); // Notify encoder of EOF.  if (buffer != buf) { readResults(buf, 0, buf.length); }   if (isUrlSafe() && pos < buf.length) { byte[] smallerBuf = new byte[pos]; System.arraycopy(buf, 0, smallerBuf, 0, pos); [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	952	952	2	add	
80	[BUG] [BUGGY] encode(pArray, 0, -1); // Notify encoder of EOF. // Encoder might have resized, even though it was unnecessary. if (buffer != buf) { [FE] ComparisonFailure [CONTEXT] public byte[] encode(byte[] pArray) { reset(); if (pArray == null || pArray.length == 0) { return pArray; } long len = getEncodeLength(pArray, lineLength, lineSeparator); byte[] buf = new byte[(int) len]; setInitialBuffer(buf, 0, buf.length); encode(pArray, 0, pArray.length); [BUGGY] encode(pArray, 0, -1); // Notify encoder of EOF.  // Encoder might have resized, even though it was unnecessary.    if (buffer != buf) { [BUGGY]  if (buffer != buf) { readResults(buf, 0, buf.length); }   if (isUrlSafe() && pos < buf.length) { byte[] smallerBuf = new byte[pos]; System.arraycopy(buf, 0, smallerBuf, 0, pos); buf = smallerBuf; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	953	955	2	replace	
81	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public byte[] encode(byte[] pArray) { reset(); if (pArray == null || pArray.length == 0) { return pArray; } long len = getEncodeLength(pArray, lineLength, lineSeparator); byte[] buf = new byte[(int) len]; setInitialBuffer(buf, 0, buf.length); encode(pArray, 0, pArray.length); [BUGGY] [BUGGY] encode(pArray, 0, -1); // Notify encoder of EOF.  // Encoder might have resized, even though it was unnecessary.    if (buffer != buf) {  if (buffer != buf) { readResults(buf, 0, buf.length); }   if (isUrlSafe() && pos < buf.length) { byte[] smallerBuf = new byte[pos]; System.arraycopy(buf, 0, smallerBuf, 0, pos); buf = smallerBuf; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	953	955	2	add	
82	[BUG] [BUGGY] if (buffer != buf) { [FE] ComparisonFailure [CONTEXT] reset(); if (pArray == null || pArray.length == 0) { return pArray; } long len = getEncodeLength(pArray, lineLength, lineSeparator); byte[] buf = new byte[(int) len]; setInitialBuffer(buf, 0, buf.length); encode(pArray, 0, pArray.length); encode(pArray, 0, -1); // Notify encoder of EOF.  [BUGGY] if (buffer != buf) { [BUGGY] readResults(buf, 0, buf.length); }   if (isUrlSafe() && pos < buf.length) { byte[] smallerBuf = new byte[pos]; System.arraycopy(buf, 0, smallerBuf, 0, pos); buf = smallerBuf; } return buf; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	955	955	2	replace	
83	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] reset(); if (pArray == null || pArray.length == 0) { return pArray; } long len = getEncodeLength(pArray, lineLength, lineSeparator); byte[] buf = new byte[(int) len]; setInitialBuffer(buf, 0, buf.length); encode(pArray, 0, pArray.length); encode(pArray, 0, -1); // Notify encoder of EOF.  [BUGGY] [BUGGY] if (buffer != buf) { readResults(buf, 0, buf.length); }   if (isUrlSafe() && pos < buf.length) { byte[] smallerBuf = new byte[pos]; System.arraycopy(buf, 0, smallerBuf, 0, pos); buf = smallerBuf; } return buf; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	955	955	2	add	
84	[BUG] [BUGGY] if (isUrlSafe() && pos < buf.length) { [FE] ComparisonFailure [CONTEXT] byte[] buf = new byte[(int) len]; setInitialBuffer(buf, 0, buf.length); encode(pArray, 0, pArray.length); encode(pArray, 0, -1); // Notify encoder of EOF.  if (buffer != buf) { readResults(buf, 0, buf.length); }   [BUGGY] if (isUrlSafe() && pos < buf.length) { [BUGGY] byte[] smallerBuf = new byte[pos]; System.arraycopy(buf, 0, smallerBuf, 0, pos); buf = smallerBuf; } return buf; } [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	960	960	2	replace	
85	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] byte[] buf = new byte[(int) len]; setInitialBuffer(buf, 0, buf.length); encode(pArray, 0, pArray.length); encode(pArray, 0, -1); // Notify encoder of EOF.  if (buffer != buf) { readResults(buf, 0, buf.length); }   [BUGGY] [BUGGY] if (isUrlSafe() && pos < buf.length) { byte[] smallerBuf = new byte[pos]; System.arraycopy(buf, 0, smallerBuf, 0, pos); buf = smallerBuf; } return buf; } [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	960	960	2	add	
86	[BUG] [BUGGY] return buf; [FE] ComparisonFailure [CONTEXT] if (buffer != buf) { readResults(buf, 0, buf.length); }   if (isUrlSafe() && pos < buf.length) { byte[] smallerBuf = new byte[pos]; System.arraycopy(buf, 0, smallerBuf, 0, pos); buf = smallerBuf; } [BUGGY] return buf; [BUGGY] } [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	965	965	2	replace	
87	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (buffer != buf) { readResults(buf, 0, buf.length); }   if (isUrlSafe() && pos < buf.length) { byte[] smallerBuf = new byte[pos]; System.arraycopy(buf, 0, smallerBuf, 0, pos); buf = smallerBuf; } [BUGGY] [BUGGY] return buf; } [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2773500981126146	965	965	2	add	
88	[BUG] [BUGGY] return this.encodeTable == URL_SAFE_ENCODE_TABLE; [FE] ComparisonFailure [CONTEXT] public boolean isUrlSafe() { [BUGGY] return this.encodeTable == URL_SAFE_ENCODE_TABLE; [BUGGY] } [CLASS] Base64 [METHOD] isUrlSafe [RETURN_TYPE] boolean  [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buffer encodeTable lineSeparator boolean eof urlSafe byte PAD int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2721655269759087	360	360	2	replace	
89	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public boolean isUrlSafe() { [BUGGY] [BUGGY] return this.encodeTable == URL_SAFE_ENCODE_TABLE; } [CLASS] Base64 [METHOD] isUrlSafe [RETURN_TYPE] boolean  [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buffer encodeTable lineSeparator boolean eof urlSafe byte PAD int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2721655269759087	360	360	2	add	
90	[BUG] [BUGGY] chunkSize = (chunkSize / 4) * 4; [FE] ComparisonFailure [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  [BUGGY] chunkSize = (chunkSize / 4) * 4; [BUGGY]  long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2721655269759087	981	981	2	replace	
91	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  [BUGGY] [BUGGY] chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2721655269759087	981	981	2	add	
92	[BUG] [BUGGY] long len = (pArray.length * 4) / 3; [FE] ComparisonFailure [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  chunkSize = (chunkSize / 4) * 4; [BUGGY] long len = (pArray.length * 4) / 3; [BUGGY] long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2721655269759087	983	983	2	replace	
93	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  chunkSize = (chunkSize / 4) * 4; [BUGGY] [BUGGY] long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2721655269759087	983	983	2	add	
94	[BUG] [BUGGY] long mod = len % 4; [FE] ComparisonFailure [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; [BUGGY] long mod = len % 4; [BUGGY] if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2721655269759087	984	984	2	replace	
95	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; [BUGGY] [BUGGY] long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2721655269759087	984	984	2	add	
96	[BUG] [BUGGY] if (mod != 0) { [FE] ComparisonFailure [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; long mod = len % 4; [BUGGY] if (mod != 0) { [BUGGY] len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } } return len; [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2721655269759087	985	985	2	replace	
97	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; long mod = len % 4; [BUGGY] [BUGGY] if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } } return len; [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2721655269759087	985	985	2	add	
98	[BUG] [BUGGY] if (chunkSize > 0) { [FE] ComparisonFailure [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } [BUGGY] if (chunkSize > 0) { [BUGGY] boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } } return len; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2721655269759087	988	988	2	replace	
99	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } [BUGGY] [BUGGY] if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } } return len; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.2721655269759087	988	988	2	add	
