bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  [CE]  ';'  expected  [FE]    ComparisonFailure  [CONTEXT]  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.47140452079103173	497	497	2	replace	    buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];		non-compiled	[CE]  ';'  expected	10	None	add
2	[BUG]  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  [CE]  ';'  expected  [FE]      ComparisonFailure  [CONTEXT]  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.47140452079103173	497	497	2	replace	    buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];		non-compiled	[CE]  ';'  expected	10	None	add
3	[BUG]  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  [CE]  ';'  expected  [FE]        ComparisonFailure  [CONTEXT]  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.47140452079103173	497	497	2	replace	    buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];		non-compiled	[CE]  ';'  expected	10	None	add
4	[BUG]  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  [CE]  ';'  expected  [FE]          ComparisonFailure  [CONTEXT]  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.47140452079103173	497	497	2	replace	    buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];		non-compiled	[CE]  ';'  expected	10	None	add
5	[BUG]  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <  <  5)&  MASK_6BITS];  [CE]  ';'  expected  [FE]            ComparisonFailure  [CONTEXT]  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <  <  5)&  MASK_6BITS];  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.47140452079103173	497	497	2	replace	    buffer[pos++]  =  encodeTable[(x  <  <  5)&  MASK_6BITS];		non-compiled	[CE]  ';'  expected	10	None	add
6	[BUG]  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <  <  2)&  MASK_6BITS];  [CE]  ';'  expected  [FE]              ComparisonFailure  [CONTEXT]  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <  <  2)&  MASK_6BITS];  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.47140452079103173	497	497	2	replace	    buffer[pos++]  =  encodeTable[(x  <  <  2)&  MASK_6BITS];		non-compiled	[CE]  ';'  expected	10	None	add
7	[BUG]  [BUGGY]    System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineLength);  [CE]  ';'  expected  [FE]                ComparisonFailure  [CONTEXT]  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  [BUGGY]    System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineLength);  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.47140452079103173	497	497	2	replace	    System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineLength);		non-compiled	[CE]  ';'  expected	10	None	add
8	[BUG]  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <  <  1)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                  ComparisonFailure  [CONTEXT]  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <  <  1)&  MASK_6BITS];  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.47140452079103173	497	497	2	replace	    buffer[pos++]  =  encodeTable[(x  <  <  1)&  MASK_6BITS];		non-compiled	[CE]  ';'  expected	10	None	add
9	[BUG]  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                    ComparisonFailure  [CONTEXT]  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.47140452079103173	497	497	2	replace	    buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];		non-compiled	[CE]  ';'  expected	10	None	add
10	[BUG]  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <  <  )&  MASK_6BITS];  [CE]  ';'  expected  [FE]                      ComparisonFailure  [CONTEXT]  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <  <  )&  MASK_6BITS];  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.47140452079103173	497	497	2	replace	    buffer[pos++]  =  encodeTable[(x  <  <  )&  MASK_6BITS];		non-compiled	[CE]  ';'  expected	10	None	add
11	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]    ComparisonFailure  [CONTEXT]  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.47140452079103173	497	497	2	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length);	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  	non-compiled	[CE]  ';'  expected	9	None	replace
12	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]      ComparisonFailure  [CONTEXT]  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  1);  [BUGGY]  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.47140452079103173	497	497	2	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  1);	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  	non-compiled	[CE]  ';'  expected	9	None	replace
13	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]        ComparisonFailure  [CONTEXT]  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.47140452079103173	497	497	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineSeparator.length);	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  	non-compiled	[CE]  ';'  expected	9	None	replace
14	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineLength);  [CE]  ';'  expected  [FE]          ComparisonFailure  [CONTEXT]  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineLength);  [BUGGY]  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.47140452079103173	497	497	2	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineLength);	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  	non-compiled	[CE]  ';'  expected	9	None	replace
15	[BUG]  [BUGGY]  System.arraycopy(chunkSeparator,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]            ComparisonFailure  [CONTEXT]  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  [BUGGY]  System.arraycopy(chunkSeparator,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.47140452079103173	497	497	2	replace	System.arraycopy(chunkSeparator,  0,  buffer,  pos,  lineSeparator.length);	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  	non-compiled	[CE]  ';'  expected	9	None	replace
16	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  fileSeparator.length);  [CE]  ';'  expected  [FE]              ComparisonFailure  [CONTEXT]  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  fileSeparator.length);  [BUGGY]  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.47140452079103173	497	497	2	replace	System.arraycopy(buffer,  0,  buffer,  pos,  fileSeparator.length);	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  	non-compiled	[CE]  ';'  expected	9	None	replace
17	[BUG]  [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                ComparisonFailure  [CONTEXT]  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.47140452079103173	497	497	2	replace	System.arraycopy(chunks,  0,  buffer,  pos,  lineSeparator.length);	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  	non-compiled	[CE]  ';'  expected	9	None	replace
18	[BUG]  [BUGGY]  System.arraycopy(frameBuffer,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                  ComparisonFailure  [CONTEXT]  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  [BUGGY]  System.arraycopy(frameBuffer,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.47140452079103173	497	497	2	replace	System.arraycopy(frameBuffer,  0,  buffer,  pos,  lineSeparator.length);	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  	non-compiled	[CE]  ';'  expected	9	None	replace
19	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  2);  [CE]  ';'  expected  [FE]                    ComparisonFailure  [CONTEXT]  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  2);  [BUGGY]  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.47140452079103173	497	497	2	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  2);	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  	non-compiled	[CE]  ';'  expected	9	None	replace
20	[BUG]  [BUGGY]    buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_6BITS];  [CE]  ';'  expected  [FE]    ComparisonFailure  [CONTEXT]  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  [BUGGY]    buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_6BITS];  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.47140452079103173	497	497	2	replace	    buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_6BITS];		non-compiled	[CE]  ';'  expected	10	None	add
21	[BUG]  [BUGGY]    System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail);  [CE]  ';'  expected  [FE]      ComparisonFailure  [CONTEXT]  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  [BUGGY]    System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail);  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.47140452079103173	497	497	2	replace	    System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail);		non-compiled	[CE]  ';'  expected	10	None	add
22	[BUG]  [BUGGY]    buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  [CE]  ';'  expected  [FE]        ComparisonFailure  [CONTEXT]  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  [BUGGY]    buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.47140452079103173	497	497	2	replace	    buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];		non-compiled	[CE]  ';'  expected	10	None	add
23	[BUG]  [BUGGY]    buffer[pos++]  =  encodeTable[(x  >>  4)&  MASK_8BITS];  [CE]  ';'  expected  [FE]          ComparisonFailure  [CONTEXT]  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  [BUGGY]    buffer[pos++]  =  encodeTable[(x  >>  4)&  MASK_8BITS];  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.47140452079103173	497	497	2	replace	    buffer[pos++]  =  encodeTable[(x  >>  4)&  MASK_8BITS];		non-compiled	[CE]  ';'  expected	10	None	add
24	[BUG]  [BUGGY]    buffer[pos++]  =  encodeTable[(x  >>  4)&  MASK_6BITS];  [CE]  ';'  expected  [FE]            ComparisonFailure  [CONTEXT]  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  [BUGGY]    buffer[pos++]  =  encodeTable[(x  >>  4)&  MASK_6BITS];  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.47140452079103173	497	497	2	replace	    buffer[pos++]  =  encodeTable[(x  >>  4)&  MASK_6BITS];		non-compiled	[CE]  ';'  expected	10	None	add
25	[BUG]  [BUGGY]    buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_8BITS];  [CE]  ';'  expected  [FE]              ComparisonFailure  [CONTEXT]  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  [BUGGY]    buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_8BITS];  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.47140452079103173	497	497	2	replace	    buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_8BITS];		non-compiled	[CE]  ';'  expected	10	None	add
26	[BUG]  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <  <  6)&  0x7F];  [CE]  ';'  expected  [FE]                ComparisonFailure  [CONTEXT]  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <  <  6)&  0x7F];  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.47140452079103173	497	497	2	replace	    buffer[pos++]  =  encodeTable[(x  <  <  6)&  0x7F];		non-compiled	[CE]  ';'  expected	10	None	add
27	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineLength);  [CE]  ';'  expected  [FE]    ComparisonFailure  [CONTEXT]  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineLength);  [BUGGY]  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.47140452079103173	497	497	2	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineLength);	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  	non-compiled	[CE]  ';'  expected	9	None	replace
28	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  4);  [CE]  ';'  expected  [FE]      ComparisonFailure  [CONTEXT]  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  4);  [BUGGY]  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.47140452079103173	497	497	2	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  4);	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  	non-compiled	[CE]  ';'  expected	9	None	replace
29	[BUG]  [BUGGY]    System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  lineLength);  [CE]  ';'  expected  [FE]    ComparisonFailure  [CONTEXT]  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  [BUGGY]    System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  lineLength);  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.47140452079103173	497	497	2	replace	    System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  lineLength);		non-compiled	[CE]  ';'  expected	10	None	add
30	[BUG]  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <  <  6)&  0x3f);  [CE]  ';'  expected  [FE]      ComparisonFailure  [CONTEXT]  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <  <  6)&  0x3f);  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.47140452079103173	497	497	2	replace	    buffer[pos++]  =  encodeTable[(x  <  <  6)&  0x3f);		non-compiled	[CE]  ';'  expected	10	None	add
31	[BUG]  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <  <  6)&  0x3f;  [CE]  ';'  expected  [FE]        ComparisonFailure  [CONTEXT]  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <  <  6)&  0x3f;  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.47140452079103173	497	497	2	replace	    buffer[pos++]  =  encodeTable[(x  <  <  6)&  0x3f;		non-compiled	[CE]  ';'  expected	10	None	add
32	[BUG]  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <  <  8)&  1];  [CE]  ';'  expected  [FE]          ComparisonFailure  [CONTEXT]  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <  <  8)&  1];  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.47140452079103173	497	497	2	replace	    buffer[pos++]  =  encodeTable[(x  <  <  8)&  1];		non-compiled	[CE]  ';'  expected	10	None	add
33	[BUG]  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <  <  6)&  0x7f);  [CE]  ';'  expected  [FE]            ComparisonFailure  [CONTEXT]  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <  <  6)&  0x7f);  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.47140452079103173	497	497	2	replace	    buffer[pos++]  =  encodeTable[(x  <  <  6)&  0x7f);		non-compiled	[CE]  ';'  expected	10	None	add
