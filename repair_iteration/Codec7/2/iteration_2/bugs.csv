bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(pArray!=  null)  {  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }	      StringUtils.newStringUtf8(encode(pArray));    	non-compiled	[CE]  ';'  expected	10	None	replace
2	[BUG]  [BUGGY]  if(pArray  ==  null)  {  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }	      StringUtils.newStringUtf8(encode(pArray));    	non-compiled	[CE]  ';'  expected	10	None	replace
3	[BUG]  [BUGGY]  if(pArray!=  null)  {  StringUtils.newStringUtf8(encode(pArray));  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  StringUtils.newStringUtf8(encode(pArray));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  StringUtils.newStringUtf8(encode(pArray));  }	      StringUtils.newStringUtf8(encode(pArray));    	non-compiled	[CE]  ';'  expected	10	None	replace
4	[BUG]  [BUGGY]  if(pArray  ==  null)  {  StringUtils.newStringUtf8(encode(pArray));  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  StringUtils.newStringUtf8(encode(pArray));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  StringUtils.newStringUtf8(encode(pArray));  }	      StringUtils.newStringUtf8(encode(pArray));    	non-compiled	[CE]  ';'  expected	10	None	replace
5	[BUG]  [BUGGY]  StringUtils.newStringUtf8(encode(pArray,  0));  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  StringUtils.newStringUtf8(encode(pArray,  0));  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	StringUtils.newStringUtf8(encode(pArray,  0));	      StringUtils.newStringUtf8(encode(pArray));    	non-compiled	[CE]  ';'  expected	10	None	replace
6	[BUG]  [BUGGY]  StringUtils.newStringUtf8(encode(pArray)+  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  StringUtils.newStringUtf8(encode(pArray)+  1);  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	StringUtils.newStringUtf8(encode(pArray)+  1);	      StringUtils.newStringUtf8(encode(pArray));    	non-compiled	[CE]  ';'  expected	10	None	replace
7	[BUG]  [BUGGY]  if(pArray!=  null)  {  StringUtils.newStringUtf8(encode(pArray));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  StringUtils.newStringUtf8(encode(pArray));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  StringUtils.newStringUtf8(encode(pArray));  }  else  {  throw  new  IllegalArgumentException( " ");  }	      StringUtils.newStringUtf8(encode(pArray));    	non-compiled	[CE]  ';'  expected	10	None	replace
8	[BUG]  [BUGGY]  if(pArray  ==  null)  {  StringUtils.newStringUtf8(encode(pArray));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  StringUtils.newStringUtf8(encode(pArray));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  StringUtils.newStringUtf8(encode(pArray));  }  else  {  throw  new  IllegalArgumentException( " ");  }	      StringUtils.newStringUtf8(encode(pArray));    	non-compiled	[CE]  ';'  expected	10	None	replace
9	[BUG]  [BUGGY]  return  encodeToString(pArray,  null);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  encodeToString(pArray,  null);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  encodeToString(pArray,  null);	      	non-compiled	[CE]  ';'  expected	9	None	replace
10	[BUG]  [BUGGY]  return  encodeToString(pArray);  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  encodeToString(pArray);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  encodeToString(pArray);	      	non-compiled	[CE]  ';'  expected	9	None	replace
11	[BUG]  [BUGGY]  return  encodeToString(pArray.length,  pArray.length);  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  encodeToString(pArray.length,  pArray.length);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  encodeToString(pArray.length,  pArray.length);	      	non-compiled	[CE]  ';'  expected	9	None	replace
12	[BUG]  [BUGGY]  return  pArray.toString();  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  pArray.toString();  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  pArray.toString();	      	non-compiled	[CE]  ';'  expected	9	None	replace
13	[BUG]  [BUGGY]  return  encodeToString(pArray.length);  [CE]  ';'  expected  [FE]                                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  encodeToString(pArray.length);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  encodeToString(pArray.length);	      	non-compiled	[CE]  ';'  expected	9	None	replace
14	[BUG]  [BUGGY]  return  encodeToString(pArray,  0,  pArray.length);  [CE]  ';'  expected  [FE]                                  ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  encodeToString(pArray,  0,  pArray.length);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  encodeToString(pArray,  0,  pArray.length);	      	non-compiled	[CE]  ';'  expected	9	None	replace
15	[BUG]  [BUGGY]  return  super.encodeToString(pArray);  [CE]  ';'  expected  [FE]                                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  super.encodeToString(pArray);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  super.encodeToString(pArray);	      	non-compiled	[CE]  ';'  expected	9	None	replace
16	[BUG]  [BUGGY]  return  String.valueOf(pArray.length);  [CE]  ';'  expected  [FE]                                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  String.valueOf(pArray.length);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  String.valueOf(pArray.length);	      	non-compiled	[CE]  ';'  expected	9	None	replace
17	[BUG]  [BUGGY]  return  encodeToString(pArray.length,  null);  [CE]  ';'  expected  [FE]                                        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  encodeToString(pArray.length,  null);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  encodeToString(pArray.length,  null);	      	non-compiled	[CE]  ';'  expected	9	None	replace
18	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  0,  pArray.length)+  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  0,  pArray.length)+  1);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  0,  pArray.length)+  1);	  return    StringUtils.newStringUtf8(encode(pArray,    0,    pArray.length));    	non-compiled	[CE]  ';'  expected	8	None	replace
19	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  0,  pArray.length  +  1));  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  0,  pArray.length  +  1));  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  0,  pArray.length  +  1));	  return    StringUtils.newStringUtf8(encode(pArray,    0,    pArray.length));    	non-compiled	[CE]  ';'  expected	8	None	replace
20	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  0,  pArray.length)+  2);  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  0,  pArray.length)+  2);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  0,  pArray.length)+  2);	  return    StringUtils.newStringUtf8(encode(pArray,    0,    pArray.length));    	non-compiled	[CE]  ';'  expected	8	None	replace
21	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  0,  pArray.length)+  4);  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  0,  pArray.length)+  4);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  0,  pArray.length)+  4);	  return    StringUtils.newStringUtf8(encode(pArray,    0,    pArray.length));    	non-compiled	[CE]  ';'  expected	8	None	replace
22	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  0,  pArray.length  +  2));  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  0,  pArray.length  +  2));  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  0,  pArray.length  +  2));	  return    StringUtils.newStringUtf8(encode(pArray,    0,    pArray.length));    	non-compiled	[CE]  ';'  expected	8	None	replace
23	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  0,  pArray.length)+  3);  [CE]  ';'  expected  [FE]                                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  0,  pArray.length)+  3);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  0,  pArray.length)+  3);	  return    StringUtils.newStringUtf8(encode(pArray,    0,    pArray.length));    	non-compiled	[CE]  ';'  expected	8	None	replace
24	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  0,  pArray.length  -  1));  [CE]  ';'  expected  [FE]                                  ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  0,  pArray.length  -  1));  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  0,  pArray.length  -  1));	  return    StringUtils.newStringUtf8(encode(pArray,    0,    pArray.length));    	non-compiled	[CE]  ';'  expected	8	None	replace
25	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  0,  pArray.length)+  1));  [CE]  ';'  expected  [FE]                                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  0,  pArray.length)+  1));  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  0,  pArray.length)+  1));	  return    StringUtils.newStringUtf8(encode(pArray,    0,    pArray.length));    	non-compiled	[CE]  ';'  expected	8	None	replace
26	[BUG]  [BUGGY]  return  StringUtils.newStringUtf9(encode(pArray,  0));  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf9(encode(pArray,  0));  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf9(encode(pArray,  0));	  return    StringUtils.newStringUtf9(encode(pArray));    	non-compiled	[CE]  ';'  expected	22	None	replace
27	[BUG]  [BUGGY]  return  StringUtils.newStringUtf9(encode(pArray)+  1);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf9(encode(pArray)+  1);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf9(encode(pArray)+  1);	  return    StringUtils.newStringUtf9(encode(pArray));    	non-compiled	[CE]  ';'  expected	22	None	replace
28	[BUG]  [BUGGY]  return  StringUtils.newStringUtf9(encode(pArray),  0);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf9(encode(pArray),  0);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf9(encode(pArray),  0);	  return    StringUtils.newStringUtf9(encode(pArray));    	non-compiled	[CE]  ';'  expected	22	None	replace
29	[BUG]  [BUGGY]  return  StringUtils.newStringUtf9(encode(pArray,  null));  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf9(encode(pArray,  null));  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf9(encode(pArray,  null));	  return    StringUtils.newStringUtf9(encode(pArray));    	non-compiled	[CE]  ';'  expected	22	None	replace
30	[BUG]  [BUGGY]  return  StringUtils.newStringUtf9(encode(pArray)+  ';');  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf9(encode(pArray)+  ';');  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf9(encode(pArray)+  ';');	  return    StringUtils.newStringUtf9(encode(pArray));    	non-compiled	[CE]  ';'  expected	22	None	replace
31	[BUG]  [BUGGY]  return  StringUtils.newStringUtf9(encode(pArray)+  '0');  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf9(encode(pArray)+  '0');  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf9(encode(pArray)+  '0');	  return    StringUtils.newStringUtf9(encode(pArray));    	non-compiled	[CE]  ';'  expected	22	None	replace
32	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  1,  pArray.length  +  1);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  1,  pArray.length  +  1);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray)+  1,  pArray.length  +  1);	  return    StringUtils.newStringUtf8(encode(pArray)+    1,    pArray.length);    	non-compiled	[CE]  ';'  expected	39	None	replace
33	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  1,  pArray.length  -  1);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  1,  pArray.length  -  1);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray)+  1,  pArray.length  -  1);	  return    StringUtils.newStringUtf8(encode(pArray)+    1,    pArray.length);    	non-compiled	[CE]  ';'  expected	39	None	replace
34	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  1,  pArray.length,  pArray.length);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  1,  pArray.length,  pArray.length);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray)+  1,  pArray.length,  pArray.length);	  return    StringUtils.newStringUtf8(encode(pArray)+    1,    pArray.length);    	non-compiled	[CE]  ';'  expected	39	None	replace
35	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  1,  pArray.length  +  2);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  1,  pArray.length  +  2);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray)+  1,  pArray.length  +  2);	  return    StringUtils.newStringUtf8(encode(pArray)+    1,    pArray.length);    	non-compiled	[CE]  ';'  expected	39	None	replace
36	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  1,  pArray.length  +  4);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  1,  pArray.length  +  4);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray)+  1,  pArray.length  +  4);	  return    StringUtils.newStringUtf8(encode(pArray)+    1,    pArray.length);    	non-compiled	[CE]  ';'  expected	39	None	replace
37	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  1,  pArray.length,  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  1,  pArray.length,  1);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray)+  1,  pArray.length,  1);	  return    StringUtils.newStringUtf8(encode(pArray)+    1,    pArray.length);    	non-compiled	[CE]  ';'  expected	39	None	replace
38	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  2,  pArray.length);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  2,  pArray.length);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray)+  2,  pArray.length);	  return    StringUtils.newStringUtf8(encode(pArray)+    1,    pArray.length);    	non-compiled	[CE]  ';'  expected	39	None	replace
39	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  1,  pArray.length,  2);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  1,  pArray.length,  2);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray)+  1,  pArray.length,  2);	  return    StringUtils.newStringUtf8(encode(pArray)+    1,    pArray.length);    	non-compiled	[CE]  ';'  expected	39	None	replace
40	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  0,  1));  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  0,  1));  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  0,  1));	  return    StringUtils.newStringUtf8(encode(pArray,    0,    0));    	non-compiled	[CE]  ';'  expected	5	None	replace
41	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  0,  2));  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  0,  2));  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  0,  2));	  return    StringUtils.newStringUtf8(encode(pArray,    0,    0));    	non-compiled	[CE]  ';'  expected	5	None	replace
42	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  0,  0)+  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  0,  0)+  1);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  0,  0)+  1);	  return    StringUtils.newStringUtf8(encode(pArray,    0,    0));    	non-compiled	[CE]  ';'  expected	5	None	replace
43	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  0,  4));  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  0,  4));  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  0,  4));	  return    StringUtils.newStringUtf8(encode(pArray,    0,    0));    	non-compiled	[CE]  ';'  expected	5	None	replace
44	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  0,  8));  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  0,  8));  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  0,  8));	  return    StringUtils.newStringUtf8(encode(pArray,    0,    0));    	non-compiled	[CE]  ';'  expected	5	None	replace
45	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringUtf8(encode(pArray));  }	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	28	None	replace
46	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingException( " ");  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  aughtExceptionHandler.handleMissingException( " ");  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	aughtExceptionHandler.handleMissingException( " ");	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	28	None	replace
47	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(pArray))  {  return  new  String(EncoderUtils.newStringUtf8(encode(pArray));  }  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  parent  ==  null  ||!parent.equals(pArray))  {  return  new  String(EncoderUtils.newStringUtf8(encode(pArray));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	parent  ==  null  ||!parent.equals(pArray))  {  return  new  String(EncoderUtils.newStringUtf8(encode(pArray));  }	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	28	None	replace
48	[BUG]  [BUGGY]  aughtExceptionHandler.handleMoreGuaranteed();  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  aughtExceptionHandler.handleMoreGuaranteed();  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	aughtExceptionHandler.handleMoreGuaranteed();	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	28	None	replace
49	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(pArray))  {  return  new  String(encode(pArray));  }  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  parent  ==  null  ||!parent.equals(pArray))  {  return  new  String(encode(pArray));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	parent  ==  null  ||!parent.equals(pArray))  {  return  new  String(encode(pArray));  }	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	28	None	replace
50	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray));  }  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray));  }	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	28	None	replace
51	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringUtf8(encode(pArray));  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringUtf8(encode(pArray));  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringUtf8(encode(pArray));	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	28	None	replace
52	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringutf8(encode(pArray));  }  [CE]  ';'  expected  [FE]                                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringutf8(encode(pArray));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringutf8(encode(pArray));  }	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	28	None	replace
53	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  pArray[i];  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(c  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  pArray[i];  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(c  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  pArray[i];  }	      if(pArray    ==    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char    c    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	13	None	replace
54	[BUG]  [BUGGY]  if(pArray.length  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  pArray[i];  }  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray.length  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  pArray[i];  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray.length  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  pArray[i];  }	      if(pArray    ==    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char    c    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	13	None	replace
55	[BUG]  [BUGGY]  if(pArray.length!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  pArray[i];  }  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray.length!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  pArray[i];  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray.length!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  pArray[i];  }	      if(pArray    ==    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char    c    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	13	None	replace
56	[BUG]  [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  String  c  =  pArray[i];  }  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  String  c  =  pArray[i];  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  String  c  =  pArray[i];  }	      if(pArray    ==    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char    c    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	13	None	replace
57	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  String  c  =  pArray[i];  }  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  String  c  =  pArray[i];  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  String  c  =  pArray[i];  }	      if(pArray    ==    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char    c    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	13	None	replace
58	[BUG]  [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  pArray[0];  }  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  pArray[0];  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  pArray[0];  }	      if(pArray    ==    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char    c    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	13	None	replace
59	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  pArray[0];  }  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  pArray[0];  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  pArray[0];  }	      if(pArray    ==    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char    c    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	13	None	replace
60	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  16));  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  16));  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  16));	  return    StringUtils.newStringUtf8(encode(pArray,    base64));    	non-compiled	[CE]  ';'  expected	21	None	replace
61	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  1));  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  1));  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  1));	  return    StringUtils.newStringUtf8(encode(pArray,    base64));    	non-compiled	[CE]  ';'  expected	21	None	replace
62	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  4096));  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  4096));  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  4096));	  return    StringUtils.newStringUtf8(encode(pArray,    base64));    	non-compiled	[CE]  ';'  expected	21	None	replace
63	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  base64)+  1);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  base64)+  1);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  base64)+  1);	  return    StringUtils.newStringUtf8(encode(pArray,    base64));    	non-compiled	[CE]  ';'  expected	21	None	replace
64	[BUG]  [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  pArray,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  pArray,  0,  pArray.length);  }	      if(pArray    ==    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char[]    p    =    new    char[len    +    1];    System.arraycopy(p,    0,    p,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	19	None	replace
65	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  pArray,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  pArray,  0,  pArray.length);  }	      if(pArray    ==    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char[]    p    =    new    char[len    +    1];    System.arraycopy(p,    0,    p,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	19	None	replace
66	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  pArray,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  pArray,  0,  pArray.length);  }	      if(pArray    ==    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char[]    p    =    new    char[len    +    1];    System.arraycopy(p,    0,    p,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	19	None	replace
67	[BUG]  [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  p  [CE]  ';'  expected  [FE]                                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  p  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  p	      if(pArray    ==    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char[]    p    =    new    char[len    +    1];    System.arraycopy(p,    0,    p,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	19	None	replace
68	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  p  [CE]  ';'  expected  [FE]                                  ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  p  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  p	      if(pArray    ==    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char[]    p    =    new    char[len    +    1];    System.arraycopy(p,    0,    p,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	19	None	replace
69	[BUG]  [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  pArray,  0,  p  [CE]  ';'  expected  [FE]                                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  pArray,  0,  p  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  pArray,  0,  p	      if(pArray    ==    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char[]    p    =    new    char[len    +    1];    System.arraycopy(p,    0,    p,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	19	None	replace
70	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  pArray,  0,  p  [CE]  ';'  expected  [FE]                                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  pArray,  0,  p  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  pArray,  0,  p	      if(pArray    ==    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char[]    p    =    new    char[len    +    1];    System.arraycopy(p,    0,    p,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	19	None	replace
71	[BUG]  [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  [CE]  ';'  expected  [FE]                                        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,	      if(pArray    ==    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char[]    p    =    new    char[len    +    1];    System.arraycopy(p,    0,    p,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	19	None	replace
72	[BUG]  [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(p,  0,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                                          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(p,  0,  pArray,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(p,  0,  pArray,  0,  pArray.length);  }	      if(pArray    ==    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char[]    p    =    new    char[len    +    1];    System.arraycopy(p,    0,    p,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	19	None	replace
73	[BUG]  [BUGGY]  byte[]  pArray  =  System.getProperty( "base64.separator ");  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  byte[]  pArray  =  System.getProperty( "base64.separator ");  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	byte[]  pArray  =  System.getProperty( "base64.separator ");	      byte[]    pArray    =    System.getProperty(   "line.separator   ");    	non-compiled	[CE]  ';'  expected	34	None	replace
74	[BUG]  [BUGGY]  byte[]  pArray  =  System.getProperty( "file.separator ");  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  byte[]  pArray  =  System.getProperty( "file.separator ");  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	byte[]  pArray  =  System.getProperty( "file.separator ");	      byte[]    pArray    =    System.getProperty(   "line.separator   ");    	non-compiled	[CE]  ';'  expected	34	None	replace
75	[BUG]  [BUGGY]  byte[]  pArray  =  System.getProperty( "line.separator ").toLowerCase();  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  byte[]  pArray  =  System.getProperty( "line.separator ").toLowerCase();  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	byte[]  pArray  =  System.getProperty( "line.separator ").toLowerCase();	      byte[]    pArray    =    System.getProperty(   "line.separator   ");    	non-compiled	[CE]  ';'  expected	34	None	replace
76	[BUG]  [BUGGY]  byte[]  pArray  =  System.getProperty( "line.separator ",  pArray.length);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  byte[]  pArray  =  System.getProperty( "line.separator ",  pArray.length);  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	byte[]  pArray  =  System.getProperty( "line.separator ",  pArray.length);	      byte[]    pArray    =    System.getProperty(   "line.separator   ");    	non-compiled	[CE]  ';'  expected	34	None	replace
77	[BUG]  [BUGGY]  byte[]  pArray  =  System.getProperty( "line.separator ").toCharArray();  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  byte[]  pArray  =  System.getProperty( "line.separator ").toCharArray();  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	byte[]  pArray  =  System.getProperty( "line.separator ").toCharArray();	      byte[]    pArray    =    System.getProperty(   "line.separator   ");    	non-compiled	[CE]  ';'  expected	34	None	replace
78	[BUG]  [BUGGY]  byte[]  pArray  =  System.getProperty( "string.separator ");  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  byte[]  pArray  =  System.getProperty( "string.separator ");  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	byte[]  pArray  =  System.getProperty( "string.separator ");	      byte[]    pArray    =    System.getProperty(   "line.separator   ");    	non-compiled	[CE]  ';'  expected	34	None	replace
79	[BUG]  [BUGGY]  byte[]  pArray  =  System.getProperty( "line.separator ").toString();  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  byte[]  pArray  =  System.getProperty( "line.separator ").toString();  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	byte[]  pArray  =  System.getProperty( "line.separator ").toString();	      byte[]    pArray    =    System.getProperty(   "line.separator   ");    	non-compiled	[CE]  ';'  expected	34	None	replace
80	[BUG]  [BUGGY]  if(pArray!=  null)  {  if(pArray.length  ==  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  if(pArray.length  ==  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  if(pArray.length  ==  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }	      if(pArray!=    null)    {    if(pArray.length    >    0)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	12	None	replace
81	[BUG]  [BUGGY]  if(pArray  ==  null)  {  if(pArray.length!=  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  if(pArray.length!=  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  if(pArray.length!=  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }	      if(pArray!=    null)    {    if(pArray.length    >    0)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	12	None	replace
82	[BUG]  [BUGGY]  if(pArray!=  null)  {  if(pArray.length  >=  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  if(pArray.length  >=  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  if(pArray.length  >=  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }	      if(pArray!=    null)    {    if(pArray.length    >    0)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	12	None	replace
83	[BUG]  [BUGGY]  if(pArray  ==  null)  {  if(pArray.length  >=  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  if(pArray.length  >=  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  if(pArray.length  >=  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }	      if(pArray!=    null)    {    if(pArray.length    >    0)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	12	None	replace
84	[BUG]  [BUGGY]  readPos(pArray,  0,  pArray.length)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  readPos(pArray,  0,  pArray.length)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	readPos(pArray,  0,  pArray.length)  {  return  StringUtils.newStringUtf8(encode(pArray));  }	      if(pArray!=    null)    {    if(pArray.length    >    0)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	12	None	replace
85	[BUG]  [BUGGY]  if(pArray!=  null)  {  if(pArray.length  >  0)  {  return  StringUtils.newStringUtf8(encode(pArray[0]));  }  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  if(pArray.length  >  0)  {  return  StringUtils.newStringUtf8(encode(pArray[0]));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  if(pArray.length  >  0)  {  return  StringUtils.newStringUtf8(encode(pArray[0]));  }	      if(pArray!=    null)    {    if(pArray.length    >    0)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	12	None	replace
86	[BUG]  [BUGGY]  if(pArray  ==  null)  {  if(pArray.length  <  =  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  if(pArray.length  <  =  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  if(pArray.length  <  =  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }	      if(pArray    ==    null)    {    if(pArray.length    >    0)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	11	None	replace
87	[BUG]  [BUGGY]  if(pArray  ==  null)  {  if(pArray.length  <  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  if(pArray.length  <  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  if(pArray.length  <  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }	      if(pArray    ==    null)    {    if(pArray.length    >    0)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	11	None	replace
88	[BUG]  [BUGGY]  if(pArray  ==  null)  {  if(pArray.length  >  0)  {  return  StringUtils.newStringUtf8(encode(pArray[0]));  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  if(pArray.length  >  0)  {  return  StringUtils.newStringUtf8(encode(pArray[0]));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  if(pArray.length  >  0)  {  return  StringUtils.newStringUtf8(encode(pArray[0]));  }	      if(pArray    ==    null)    {    if(pArray.length    >    0)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	11	None	replace
89	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray),  0,  pArray.length);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray),  0,  pArray.length);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray),  0,  pArray.length);	  return    StringUtils.newStringUtf8(encode(pArray),    0);    	non-compiled	[CE]  ';'  expected	4	None	replace
90	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray),  1);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray),  1);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray),  1);	  return    StringUtils.newStringUtf8(encode(pArray),    0);    	non-compiled	[CE]  ';'  expected	4	None	replace
91	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray),  32);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray),  32);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray),  32);	  return    StringUtils.newStringUtf8(encode(pArray),    0);    	non-compiled	[CE]  ';'  expected	4	None	replace
92	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  1,  0);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  1,  0);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray)+  1,  0);	  return    StringUtils.newStringUtf8(encode(pArray),    0);    	non-compiled	[CE]  ';'  expected	4	None	replace
93	[BUG]  [BUGGY]  if(pArray  ==  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray.length);  }	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
94	[BUG]  [BUGGY]  if(pArray.length!=  0)  {  if(pArray  ==  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray.length!=  0)  {  if(pArray  ==  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray.length!=  0)  {  if(pArray  ==  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
95	[BUG]  [BUGGY]  if(pArray.length  ==  0)  {  if(pArray  ==  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray.length  ==  0)  {  if(pArray  ==  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray.length  ==  0)  {  if(pArray  ==  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
96	[BUG]  [BUGGY]  if(pArray  ==  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  p  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  p  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  p	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
97	[BUG]  [BUGGY]  if(pArray  ==  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
98	[BUG]  [BUGGY]  if(pArray  ==  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray.length  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray.length  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray.length	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
99	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  20));  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  20));  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  20));	  return    StringUtils.newStringUtf8(encode(pArray,    2));    	non-compiled	[CE]  ';'  expected	7	None	replace
100	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  2)+  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  2)+  1);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  2)+  1);	  return    StringUtils.newStringUtf8(encode(pArray,    2));    	non-compiled	[CE]  ';'  expected	7	None	replace
101	[BUG]  [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
102	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
103	[BUG]  [BUGGY]  if(pArray.length!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray.length!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray.length!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
104	[BUG]  [BUGGY]  if(pArray.length  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray.length  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray.length  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
105	[BUG]  [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  System.arraycopy(pArray,  0,  pArray.length);  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  System.arraycopy(pArray,  0,  pArray.length);  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  for(int  i  =  0,  len  =  System.arraycopy(pArray,  0,  pArray.length);  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
106	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  System.arraycopy(pArray,  0,  pArray.length);  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  System.arraycopy(pArray,  0,  pArray.length);  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0,  len  =  System.arraycopy(pArray,  0,  pArray.length);  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
107	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length  +  1);  }  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length  +  1);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length  +  1);  }	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
108	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  null)+  1);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  null)+  1);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  null)+  1);	  return    StringUtils.newStringUtf8(encode(pArray,    null));    	non-compiled	[CE]  ';'  expected	3	None	replace
109	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  null),  pArray.length);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  null),  pArray.length);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  null),  pArray.length);	  return    StringUtils.newStringUtf8(encode(pArray,    null));    	non-compiled	[CE]  ';'  expected	3	None	replace
110	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  null),  0);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  null),  0);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  null),  0);	  return    StringUtils.newStringUtf8(encode(pArray,    null));    	non-compiled	[CE]  ';'  expected	3	None	replace
111	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,   "UTF-8 "));  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,   "UTF-8 "));  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,   "UTF-8 "));	  return    StringUtils.newStringUtf8(encode(pArray,    null));    	non-compiled	[CE]  ';'  expected	3	None	replace
112	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  false));  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  false));  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  false));	  return    StringUtils.newStringUtf8(encode(pArray,    null));    	non-compiled	[CE]  ';'  expected	3	None	replace
113	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  null)+  ';');  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  null)+  ';');  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  null)+  ';');	  return    StringUtils.newStringUtf8(encode(pArray,    null));    	non-compiled	[CE]  ';'  expected	3	None	replace
114	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    	non-compiled	[CE]  ';'  expected	23	None	replace
115	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length  +  1);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length  +  1);  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	System.arraycopy(pArray,  0,  pArray,  0,  pArray.length  +  1);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    	non-compiled	[CE]  ';'  expected	23	None	replace
116	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  2,  pArray.length);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  2,  pArray.length);  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	System.arraycopy(pArray,  0,  pArray,  2,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    	non-compiled	[CE]  ';'  expected	23	None	replace
117	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length  +  2);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length  +  2);  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	System.arraycopy(pArray,  0,  pArray,  0,  pArray.length  +  2);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    	non-compiled	[CE]  ';'  expected	23	None	replace
118	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  4,  pArray.length);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  4,  pArray.length);  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	System.arraycopy(pArray,  0,  pArray,  4,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    	non-compiled	[CE]  ';'  expected	23	None	replace
119	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length)+  1;  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length)+  1;  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	System.arraycopy(pArray,  0,  pArray,  0,  pArray.length)+  1;	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    	non-compiled	[CE]  ';'  expected	23	None	replace
120	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length  *  2);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length  *  2);  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	System.arraycopy(pArray,  0,  pArray,  0,  pArray.length  *  2);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    	non-compiled	[CE]  ';'  expected	23	None	replace
121	[BUG]  [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  outPos  +=  pArray.length;  }  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  outPos  +=  pArray.length;  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  outPos  +=  pArray.length;  }	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    outPos    +=    pArray.length;    }    	non-compiled	[CE]  ';'  expected	38	None	replace
122	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  outPos  +=  pArray.length;  }  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  outPos  +=  pArray.length;  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  outPos  +=  pArray.length;  }	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    outPos    +=    pArray.length;    }    	non-compiled	[CE]  ';'  expected	38	None	replace
123	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  outPos  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  outPos  +=  pArray.length;  }  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  outPos  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  outPos  +=  pArray.length;  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0,  outPos  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  outPos  +=  pArray.length;  }	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    outPos    +=    pArray.length;    }    	non-compiled	[CE]  ';'  expected	38	None	replace
124	[BUG]  [BUGGY]  if(pArray.length!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  outPos  +=  pArray.length;  }  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray.length!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  outPos  +=  pArray.length;  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray.length!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  outPos  +=  pArray.length;  }	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    outPos    +=    pArray.length;    }    	non-compiled	[CE]  ';'  expected	38	None	replace
125	[BUG]  [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  outPos  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  outPos  +=  pArray.length;  }  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  outPos  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  outPos  +=  pArray.length;  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  for(int  i  =  0,  outPos  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  outPos  +=  pArray.length;  }	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    outPos    +=    pArray.length;    }    	non-compiled	[CE]  ';'  expected	38	None	replace
126	[BUG]  [BUGGY]  if(pArray.length  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  outPos  +=  pArray.length;  }  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray.length  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  outPos  +=  pArray.length;  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray.length  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  outPos  +=  pArray.length;  }	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    outPos    +=    pArray.length;    }    	non-compiled	[CE]  ';'  expected	38	None	replace
127	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  outPos  +=  pArray.length;  [CE]  ';'  expected  [FE]                                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  outPos  +=  pArray.length;  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  outPos  +=  pArray.length;	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    outPos    +=    pArray.length;    }    	non-compiled	[CE]  ';'  expected	38	None	replace
128	[BUG]  [BUGGY]  for(int  i  =  0,  outPos  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  outPos  +=  pArray.length;  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  for(int  i  =  0,  outPos  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  outPos  +=  pArray.length;  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	for(int  i  =  0,  outPos  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  outPos  +=  pArray.length;  }	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    outPos    +=    pArray.length;    }    	non-compiled	[CE]  ';'  expected	38	None	replace
129	[BUG]  [BUGGY]  if(pArray!=  null)  {  if(pArray  ==  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  if(pArray  ==  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  if(pArray  ==  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  }	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	24	None	replace
130	[BUG]  [BUGGY]  if(pArray  ==  null)  {  if(pArray!=  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  if(pArray!=  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  if(pArray!=  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  }	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	24	None	replace
131	[BUG]  [BUGGY]  if(pArray!=  null)  {  if(pArray  ==  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  if(pArray  ==  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  if(pArray  ==  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	24	None	replace
132	[BUG]  [BUGGY]  if(pArray!=  null)  {  if(pArray  ==  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  if(pArray  ==  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  if(pArray  ==  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	24	None	replace
133	[BUG]  [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(p,  0,  p,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(p,  0,  p,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(p,  0,  p,  0,  pArray.length);  }	      if(pArray    ==    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char[]    p    =    new    char[lenientPos];    System.arraycopy(p,    0,    p,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	37	None	replace
134	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[lenientPos];  System.arraycopy(p,  0,  p,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[lenientPos];  System.arraycopy(p,  0,  p,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[lenientPos];  System.arraycopy(p,  0,  p,  0,  pArray.length);  }	      if(pArray    ==    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char[]    p    =    new    char[lenientPos];    System.arraycopy(p,    0,    p,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	37	None	replace
135	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(p,  0,  p,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(p,  0,  p,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(p,  0,  p,  0,  pArray.length);  }	      if(pArray    ==    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char[]    p    =    new    char[lenientPos];    System.arraycopy(p,    0,    p,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	37	None	replace
136	[BUG]  [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[lenentPos];  System.arraycopy(p,  0,  p,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[lenentPos];  System.arraycopy(p,  0,  p,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[lenentPos];  System.arraycopy(p,  0,  p,  0,  pArray.length);  }	      if(pArray    ==    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char[]    p    =    new    char[lenientPos];    System.arraycopy(p,    0,    p,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	37	None	replace
137	[BUG]  [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len];  System.arraycopy(p,  0,  p,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len];  System.arraycopy(p,  0,  p,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len];  System.arraycopy(p,  0,  p,  0,  pArray.length);  }	      if(pArray    ==    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char[]    p    =    new    char[lenientPos];    System.arraycopy(p,    0,    p,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	37	None	replace
138	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len];  System.arraycopy(p,  0,  p,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len];  System.arraycopy(p,  0,  p,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len];  System.arraycopy(p,  0,  p,  0,  pArray.length);  }	      if(pArray    ==    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char[]    p    =    new    char[lenientPos];    System.arraycopy(p,    0,    p,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	37	None	replace
139	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[lenentPos];  System.arraycopy(p,  0,  p,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[lenentPos];  System.arraycopy(p,  0,  p,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[lenentPos];  System.arraycopy(p,  0,  p,  0,  pArray.length);  }	      if(pArray    ==    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char[]    p    =    new    char[lenientPos];    System.arraycopy(p,    0,    p,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	37	None	replace
140	[BUG]  [BUGGY]  if(pArray.length!=  0)  {  if(pArray!=  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray.length!=  0)  {  if(pArray!=  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray.length!=  0)  {  if(pArray!=  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }	      if(pArray!=    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    1,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	31	None	replace
141	[BUG]  [BUGGY]  if(pArray  ==  null)  {  if(pArray!=  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  if(pArray!=  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  if(pArray!=  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }	      if(pArray!=    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    1,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	31	None	replace
142	[BUG]  [BUGGY]  if(pArray  ==  null)  {  if(pArray!=  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  }  }  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  if(pArray!=  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  }  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  if(pArray!=  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  }  }	      if(pArray!=    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    1,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	31	None	replace
143	[BUG]  [BUGGY]  if(pArray.length  ==  0)  {  if(pArray!=  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray.length  ==  0)  {  if(pArray!=  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray.length  ==  0)  {  if(pArray!=  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }	      if(pArray!=    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
144	[BUG]  [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  StringUtils.newStringUtf8(encode(pArray[i]));  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  StringUtils.newStringUtf8(encode(pArray[i]));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  StringUtils.newStringUtf8(encode(pArray[i]));  }	      if(pArray!=    null)    {    for(int    i    =    0;    i    <    pArray.length;    ++i)    {    return    StringUtils.newStringUtf8(encode(pArray[i]));    }    	non-compiled	[CE]  ';'  expected	33	None	replace
145	[BUG]  [BUGGY]  while(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  StringUtils.newStringUtf8(encode(pArray[i]));  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  while(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  StringUtils.newStringUtf8(encode(pArray[i]));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	while(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  StringUtils.newStringUtf8(encode(pArray[i]));  }	      if(pArray!=    null)    {    for(int    i    =    0;    i    <    pArray.length;    ++i)    {    return    StringUtils.newStringUtf8(encode(pArray[i]));    }    	non-compiled	[CE]  ';'  expected	33	None	replace
146	[BUG]  [BUGGY]  while(pArray!=  null  &&  pArray.length  >  0)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  StringUtils.newStringUtf8(encode(pArray[i]));  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  while(pArray!=  null  &&  pArray.length  >  0)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  StringUtils.newStringUtf8(encode(pArray[i]));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	while(pArray!=  null  &&  pArray.length  >  0)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  StringUtils.newStringUtf8(encode(pArray[i]));  }	      if(pArray!=    null)    {    for(int    i    =    0;    i    <    pArray.length;    ++i)    {    return    StringUtils.newStringUtf8(encode(pArray[i]));    }    	non-compiled	[CE]  ';'  expected	33	None	replace
147	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  StringUtils.newStringUtf8(encode(pArray[i]));  }  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  StringUtils.newStringUtf8(encode(pArray[i]));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  StringUtils.newStringUtf8(encode(pArray[i]));  }	      if(pArray!=    null)    {    for(int    i    =    0;    i    <    pArray.length;    ++i)    {    return    StringUtils.newStringUtf8(encode(pArray[i]));    }    	non-compiled	[CE]  ';'  expected	33	None	replace
148	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  StringUtils.newStringUtf8(encode(pArray[i]));  }  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  For(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  StringUtils.newStringUtf8(encode(pArray[i]));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	For(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  StringUtils.newStringUtf8(encode(pArray[i]));  }	      if(pArray!=    null)    {    for(int    i    =    0;    i    <    pArray.length;    ++i)    {    return    StringUtils.newStringUtf8(encode(pArray[i]));    }    	non-compiled	[CE]  ';'  expected	33	None	replace
149	[BUG]  [BUGGY]  while(pArray.length!=  0)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  StringUtils.newStringUtf8(encode(pArray[i]));  }  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  while(pArray.length!=  0)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  StringUtils.newStringUtf8(encode(pArray[i]));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	while(pArray.length!=  0)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  StringUtils.newStringUtf8(encode(pArray[i]));  }	      if(pArray!=    null)    {    for(int    i    =    0;    i    <    pArray.length;    ++i)    {    return    StringUtils.newStringUtf8(encode(pArray[i]));    }    	non-compiled	[CE]  ';'  expected	33	None	replace
150	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  stringUtils.newStringUtf8(encode(pArray[i]));  }  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  stringUtils.newStringUtf8(encode(pArray[i]));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  stringUtils.newStringUtf8(encode(pArray[i]));  }	      if(pArray!=    null)    {    for(int    i    =    0;    i    <    pArray.length;    ++i)    {    return    StringUtils.newStringUtf8(encode(pArray[i]));    }    	non-compiled	[CE]  ';'  expected	33	None	replace
151	[BUG]  [BUGGY]  safeIndex(pArray.length)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  StringUtils.newStringUtf8(encode(pArray[i]));  }  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  safeIndex(pArray.length)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  StringUtils.newStringUtf8(encode(pArray[i]));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	safeIndex(pArray.length)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  StringUtils.newStringUtf8(encode(pArray[i]));  }	      if(pArray!=    null)    {    for(int    i    =    0;    i    <    pArray.length;    ++i)    {    return    StringUtils.newStringUtf8(encode(pArray[i]));    }    	non-compiled	[CE]  ';'  expected	33	None	replace
152	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  1,  pArray.length));  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  1,  pArray.length));  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  1,  pArray.length));	  return    StringUtils.newStringUtf8(encode(pArray,    pArray.length));    	non-compiled	[CE]  ';'  expected	40	None	replace
153	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  pArray.length  +  1));  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  pArray.length  +  1));  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  pArray.length  +  1));	  return    StringUtils.newStringUtf8(encode(pArray,    pArray.length));    	non-compiled	[CE]  ';'  expected	40	None	replace
154	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  pArray.length)+  1);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  pArray.length)+  1);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  pArray.length)+  1);	  return    StringUtils.newStringUtf8(encode(pArray,    pArray.length));    	non-compiled	[CE]  ';'  expected	40	None	replace
155	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  32)+  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  32)+  1);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  32)+  1);	  return    StringUtils.newStringUtf8(encode(pArray,    32));    	non-compiled	[CE]  ';'  expected	6	None	replace
156	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  32)+  1));  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  32)+  1));  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  32)+  1));	  return    StringUtils.newStringUtf8(encode(pArray,    32));    	non-compiled	[CE]  ';'  expected	6	None	replace
157	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  32)+  2);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  32)+  2);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  32)+  2);	  return    StringUtils.newStringUtf8(encode(pArray,    32));    	non-compiled	[CE]  ';'  expected	6	None	replace
158	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  32)+  4);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  32)+  4);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  32)+  4);	  return    StringUtils.newStringUtf8(encode(pArray,    32));    	non-compiled	[CE]  ';'  expected	6	None	replace
159	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  32)+  3);  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  32)+  3);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  32)+  3);	  return    StringUtils.newStringUtf8(encode(pArray,    32));    	non-compiled	[CE]  ';'  expected	6	None	replace
160	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  32)+  16);  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  32)+  16);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  32)+  16);	  return    StringUtils.newStringUtf8(encode(pArray,    32));    	non-compiled	[CE]  ';'  expected	6	None	replace
161	[BUG]  [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  System.arraycopy(p,  0,  c,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  System.arraycopy(p,  0,  c,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  System.arraycopy(p,  0,  c,  0,  pArray.length);  }	      if(pArray    ==    null)    {    for(int    i    =    0;    i    <    pArray.length;    i++)    {    char    c    =    pArray[i];    System.arraycopy(p,    0,    c,    0,    c);    }    	non-compiled	[CE]  ';'  expected	18	None	replace
162	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  System.arraycopy(p,  0,  c,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  System.arraycopy(p,  0,  c,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  System.arraycopy(p,  0,  c,  0,  pArray.length);  }	      if(pArray    ==    null)    {    for(int    i    =    0;    i    <    pArray.length;    i++)    {    char    c    =    pArray[i];    System.arraycopy(p,    0,    c,    0,    c);    }    	non-compiled	[CE]  ';'  expected	18	None	replace
163	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  System.arraycopy(p,  0,  c,  0,  c);  }  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  System.arraycopy(p,  0,  c,  0,  c);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  System.arraycopy(p,  0,  c,  0,  c);  }	      if(pArray    ==    null)    {    for(int    i    =    0;    i    <    pArray.length;    i++)    {    char    c    =    pArray[i];    System.arraycopy(p,    0,    c,    0,    c);    }    	non-compiled	[CE]  ';'  expected	18	None	replace
164	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  System.arraycopy(p,  0,  c,  0,  c);  }  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  System.arraycopy(p,  0,  c,  0,  c);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  System.arraycopy(p,  0,  c,  0,  c);  }	      if(pArray    ==    null)    {    for(int    i    =    0;    i    <    pArray.length;    i++)    {    char    c    =    pArray[i];    System.arraycopy(p,    0,    c,    0,    c);    }    	non-compiled	[CE]  ';'  expected	18	None	replace
165	[BUG]  [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  System.arraycopy(pArray[i],  0,  pArray[i],  0,  pArray[i]);  }  [CE]  ';'  expected  [FE]                                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  System.arraycopy(pArray[i],  0,  pArray[i],  0,  pArray[i]);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  System.arraycopy(pArray[i],  0,  pArray[i],  0,  pArray[i]);  }	      if(pArray    ==    null)    {    for(int    i    =    0;    i    <    pArray.length;    i++)    {    char    c    =    pArray[i];    System.arraycopy(p,    0,    c,    0,    c);    }    	non-compiled	[CE]  ';'  expected	18	None	replace
166	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  System.arraycopy(pArray[i],  0,  pArray[i],  0,  pArray[i]);  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  System.arraycopy(pArray[i],  0,  pArray[i],  0,  pArray[i]);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  System.arraycopy(pArray[i],  0,  pArray[i],  0,  pArray[i]);  }	      if(pArray    ==    null)    {    for(int    i    =    0;    i    <    pArray.length;    i++)    {    char    c    =    pArray[i];    System.arraycopy(p,    0,    c,    0,    c);    }    	non-compiled	[CE]  ';'  expected	18	None	replace
167	[BUG]  [BUGGY]  if(pArray.length  ==  0)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  System.arraycopy(p,  0,  c,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray.length  ==  0)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  System.arraycopy(p,  0,  c,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray.length  ==  0)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  System.arraycopy(p,  0,  c,  0,  pArray.length);  }	      if(pArray    ==    null)    {    for(int    i    =    0;    i    <    pArray.length;    i++)    {    char    c    =    pArray[i];    System.arraycopy(p,    0,    c,    0,    c);    }    	non-compiled	[CE]  ';'  expected	18	None	replace
168	[BUG]  [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  String  c  =  pArray[i];  System.arraycopy(p,  0,  c,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  String  c  =  pArray[i];  System.arraycopy(p,  0,  c,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  String  c  =  pArray[i];  System.arraycopy(p,  0,  c,  0,  pArray.length);  }	      if(pArray    ==    null)    {    for(int    i    =    0;    i    <    pArray.length;    i++)    {    char    c    =    pArray[i];    System.arraycopy(p,    0,    c,    0,    c);    }    	non-compiled	[CE]  ';'  expected	18	None	replace
169	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray),  pArray.length  +  1);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray),  pArray.length  +  1);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray),  pArray.length  +  1);	  return    StringUtils.newStringUtf8(encode(pArray),    pArray.length);    	non-compiled	[CE]  ';'  expected	41	None	replace
170	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  0,  pArray.length);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  0,  pArray.length);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  0,  pArray.length);	  return    StringUtils.newStringUtf8(encode(pArray),    pArray.length);    	non-compiled	[CE]  ';'  expected	41	None	replace
171	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  }  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(c  ==  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(c  ==  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  }	      if(pArray    ==    null)    {    for(int    i    =    0;    i    <    pArray.length;    i++)    {    char    c    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	15	None	replace
172	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  }  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  }	      if(pArray    ==    null)    {    for(int    i    =    0;    i    <    pArray.length;    i++)    {    char    c    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	15	None	replace
173	[BUG]  [BUGGY]  if(pArray!=  null  ||  pArray.length  ==  0)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  }  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null  ||  pArray.length  ==  0)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null  ||  pArray.length  ==  0)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  }	      if(pArray    ==    null)    {    for(int    i    =    0;    i    <    pArray.length;    i++)    {    char    c    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	15	None	replace
174	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  c  =  pArray[i];  }  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  c  =  pArray[i];  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  c  =  pArray[i];  }	      if(pArray    ==    null)    {    for(int    i    =    0;    i    <    pArray.length;    i++)    {    char    c    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	15	None	replace
175	[BUG]  [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  c  =  pArray[i];  }  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  c  =  pArray[i];  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  c  =  pArray[i];  }	      if(pArray    ==    null)    {    for(int    i    =    0;    i    <    pArray.length;    i++)    {    char    c    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	15	None	replace
176	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  String  c  =  pArray[i];  }  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  String  c  =  pArray[i];  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  String  c  =  pArray[i];  }	      if(pArray    ==    null)    {    for(int    i    =    0;    i    <    pArray.length;    i++)    {    char    c    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	15	None	replace
177	[BUG]  [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  String  c  =  pArray[i];  }  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  String  c  =  pArray[i];  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  String  c  =  pArray[i];  }	      if(pArray    ==    null)    {    for(int    i    =    0;    i    <    pArray.length;    i++)    {    char    c    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	15	None	replace
178	[BUG]  [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  return  StringUtils.newStringUtf8  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  return  StringUtils.newStringUtf8  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  return  StringUtils.newStringUtf8	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	35	None	replace
179	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  return  StringUtils.newStringUtf8  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  return  StringUtils.newStringUtf8  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  return  StringUtils.newStringUtf8	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	35	None	replace
180	[BUG]  [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  return  StringUtils.newStringUt  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  return  StringUtils.newStringUt  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  return  StringUtils.newStringUt	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	35	None	replace
181	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  return  StringUtils.newStringUt  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  return  StringUtils.newStringUt  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  return  StringUtils.newStringUt	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	35	None	replace
182	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  return  StringUtils.newStringUtf8(encode(pArray));  }  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  return  StringUtils.newStringUtf8(encode(pArray));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  return  StringUtils.newStringUtf8(encode(pArray));  }	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	35	None	replace
183	[BUG]  [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  return  StringUtils.newString  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  return  StringUtils.newString  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  return  StringUtils.newString	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	35	None	replace
184	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  return  StringUtils.newString  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  return  StringUtils.newString  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  return  StringUtils.newString	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	35	None	replace
185	[BUG]  [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  return  StringUtils.newStringU  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  return  StringUtils.newStringU  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  return  StringUtils.newStringU	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	35	None	replace
186	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  return  StringUtils.newStringU  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  return  StringUtils.newStringU  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  return  StringUtils.newStringU	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	35	None	replace
187	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  p,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  p,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  p,  0,  pArray.length);  }	      if(pArray    ==    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char[]    p    =    new    char[len    +    1];    System.arraycopy(p,    0,    p,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	16	None	replace
188	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  p,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  p,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  p,  0,  pArray.length);  }	      if(pArray    ==    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char[]    p    =    new    char[len    +    1];    System.arraycopy(p,    0,    p,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	16	None	replace
189	[BUG]  [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  p,  0,  p  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  p,  0,  p  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  p,  0,  p	      if(pArray    ==    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char[]    p    =    new    char[len    +    1];    System.arraycopy(p,    0,    p,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	16	None	replace
190	[BUG]  [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  2];  System.arraycopy(p,  0,  p,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  2];  System.arraycopy(p,  0,  p,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  2];  System.arraycopy(p,  0,  p,  0,  pArray.length);  }	      if(pArray    ==    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char[]    p    =    new    char[len    +    1];    System.arraycopy(p,    0,    p,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	16	None	replace
191	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i].toCharArray();  }  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i].toCharArray();  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i].toCharArray();  }	      if(pArray!=    null)    {    for(int    i    =    0;    i    <    pArray.length;    i++)    {    char    c    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	17	None	replace
192	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  2);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  2);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray)+  2);	  return    StringUtils.newStringUtf8(encode(pArray)+    1);    	non-compiled	[CE]  ';'  expected	2	None	replace
193	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  3);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  3);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray)+  3);	  return    StringUtils.newStringUtf8(encode(pArray)+    1);    	non-compiled	[CE]  ';'  expected	2	None	replace
194	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  4);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  4);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray)+  4);	  return    StringUtils.newStringUtf8(encode(pArray)+    1);    	non-compiled	[CE]  ';'  expected	2	None	replace
195	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  0);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  0);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray)+  0);	  return    StringUtils.newStringUtf8(encode(pArray)+    1);    	non-compiled	[CE]  	2	None	replace
196	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)/  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)/  1);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray)/  1);	  return    StringUtils.newStringUtf8(encode(pArray)+    1);    	non-compiled	[CE]  ';'  expected	2	None	replace
197	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  5);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  5);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray)+  5);	  return    StringUtils.newStringUtf8(encode(pArray)+    1);    	non-compiled	[CE]  ';'  expected	2	None	replace
198	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  6);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  6);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray)+  6);	  return    StringUtils.newStringUtf8(encode(pArray)+    1);    	non-compiled	[CE]  ';'  expected	2	None	replace
199	[BUG]  [BUGGY]  aughtExceptionHandler.handleMalformedException( " ");  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  aughtExceptionHandler.handleMalformedException( " ");  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	aughtExceptionHandler.handleMalformedException( " ");	      if(pArray!=    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	29	None	replace
200	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len];  System.arraycopy(p,  0,  p,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len];  System.arraycopy(p,  0,  p,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len];  System.arraycopy(p,  0,  p,  0,  pArray.length);  }	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char[]    p    =    new    char[lenientPos];    System.arraycopy(p,    0,    p,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	36	None	replace
201	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  0)+  1);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  0)+  1);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  0)+  1);	  return    StringUtils.newStringUtf8(encode(pArray,    0));    	non-compiled	[CE]  ';'  expected	1	None	replace
202	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  1,  base64);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  1,  base64);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray)+  1,  base64);	  return    StringUtils.newStringUtf8(encode(pArray),    base64);    	non-compiled	[CE]  ';'  expected	20	None	replace
203	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray),  2);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray),  2);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray),  2);	  return    StringUtils.newStringUtf8(encode(pArray),    base64);    	non-compiled	[CE]  ';'  expected	20	None	replace
204	[BUG]  [BUGGY]  if(pArray!=  null)  {  if(pArray  ==  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  }  }  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  if(pArray  ==  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  }  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  if(pArray  ==  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  }  }	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    1,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
205	[BUG]  [BUGGY]  return  encodeToString(pArray,  false);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  encodeToString(pArray,  false);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  encodeToString(pArray,  false);	      	non-compiled	[CE]  ';'  expected	9	None	replace
206	[BUG]  [BUGGY]  return  encodeToString(pArray,  base64);  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  encodeToString(pArray,  base64);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  encodeToString(pArray,  base64);	      	non-compiled	[CE]  ';'  expected	9	None	replace
207	[BUG]  [BUGGY]  return  encodeToString(pArray,  true);  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  encodeToString(pArray,  true);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  encodeToString(pArray,  true);	      	non-compiled	[CE]  ';'  expected	9	None	replace
208	[BUG]  [BUGGY]  return  encodeToString(pArray,  0);  [CE]  [FE]                              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  encodeToString(pArray,  0);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  encodeToString(pArray,  0);	      	non-compiled	[CE]  	9	None	replace
209	[BUG]  [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[0];  System.arraycopy(p,  0,  p,  0,  pArray.length);  }  [CE]  [FE]                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[0];  System.arraycopy(p,  0,  p,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[0];  System.arraycopy(p,  0,  p,  0,  pArray.length);  }	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char[]    p    =    new    char[lenientPos];    System.arraycopy(p,    0,    p,    0,    pArray.length);    }    	non-compiled	[CE]  	36	None	replace
210	[BUG]  [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[lenientPos];  System.arraycopy(p,  0,  p  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[lenientPos];  System.arraycopy(p,  0,  p  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[lenientPos];  System.arraycopy(p,  0,  p	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char[]    p    =    new    char[lenientPos];    System.arraycopy(p,    0,    p,    0,    pArray.length);    }    	non-compiled	[CE]  	36	None	replace
211	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[0];  System.arraycopy(p,  0,  p,  0,  pArray.length);  }  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[0];  System.arraycopy(p,  0,  p,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[0];  System.arraycopy(p,  0,  p,  0,  pArray.length);  }	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char[]    p    =    new    char[lenientPos];    System.arraycopy(p,    0,    p,    0,    pArray.length);    }    	non-compiled	[CE]  	36	None	replace
212	[BUG]  [BUGGY]  if(pArray!=  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray.length);  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray.length);  }	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  	26	None	replace
213	[BUG]  [BUGGY]  if(pArray!=  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray.length  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray.length  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray.length	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
214	[BUG]  [BUGGY]  if(pArray!=  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(p  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(p  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(p	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  	26	None	replace
215	[BUG]  [BUGGY]  if(pArray!=  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  	26	None	replace
216	[BUG]  [BUGGY]  if(pArray  ==  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(p  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(p  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(p	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  	26	None	replace
217	[BUG]  [BUGGY]  if(pArray!=  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  p  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  p  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  p	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  	26	None	replace
218	[BUG]  [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i].toCharArray();  }  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i].toCharArray();  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i].toCharArray();  }	      if(pArray!=    null)    {    for(int    i    =    0;    i    <    pArray.length;    i++)    {    char    c    =    pArray[i];    }    	non-compiled	[CE]  	17	None	replace
219	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i].toString();  }  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i].toString();  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i].toString();  }	      if(pArray!=    null)    {    for(int    i    =    0;    i    <    pArray.length;    i++)    {    char    c    =    pArray[i];    }    	non-compiled	[CE]  	17	None	replace
220	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  0,  null));  [CE]  [FE]            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  0,  null));  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  0,  null));	  return    StringUtils.newStringUtf8(encode(pArray,    null));    	non-compiled	[CE]  	3	None	replace
221	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p	      if(pArray    ==    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char[]    p    =    new    char[len    +    1];    System.arraycopy(p,    0,    p,    0,    pArray.length);    }    	non-compiled	[CE]  	16	None	replace
222	[BUG]  [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p	      if(pArray    ==    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char[]    p    =    new    char[len    +    1];    System.arraycopy(p,    0,    p,    0,    pArray.length);    }    	non-compiled	[CE]  	16	None	replace
223	[BUG]  [BUGGY]  return  StringUtils.newStringUtf7(encode(pArray));  [CE]  [FE]            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf7(encode(pArray));  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf7(encode(pArray));	  return    StringUtils.newStringUtf9(encode(pArray));    	non-compiled	[CE]  	22	None	replace
224	[BUG]  [BUGGY]  return  StringUtils.newStringUtf0(encode(pArray));  [CE]  [FE]              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf0(encode(pArray));  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf0(encode(pArray));	  return    StringUtils.newStringUtf9(encode(pArray));    	non-compiled	[CE]  	22	None	replace
225	[BUG]  [BUGGY]  return  StringUtils.newStringUtf9(encode(pArray),  base64);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf9(encode(pArray),  base64);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf9(encode(pArray),  base64);	  return    StringUtils.newStringUtf9(encode(pArray));    	non-compiled	[CE]  	22	None	replace
226	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray),  null);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray),  null);  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray),  null);	      if(pArray!=    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  	25	None	replace
227	[BUG]  [BUGGY]  if(outPos  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  outPos  +=  pArray.length;  }  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(outPos  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  outPos  +=  pArray.length;  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(outPos  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  outPos  +=  pArray.length;  }	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    outPos    +=    pArray.length;    }    	non-compiled	[CE]  	38	None	replace
228	[BUG]  [BUGGY]  if(pArray!=  null)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  outPos  +=  pArray.length;  }  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  outPos  +=  pArray.length;  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  outPos  +=  pArray.length;  }	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    outPos    +=    pArray.length;    }    	non-compiled	[CE]  	38	None	replace
229	[BUG]  [BUGGY]  if(pArray  ==  null)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  outPos  +=  pArray.length;  }  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  outPos  +=  pArray.length;  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  outPos  +=  pArray.length;  }	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    outPos    +=    pArray.length;    }    	non-compiled	[CE]  	38	None	replace
230	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  base64  +  1));  [CE]  [FE]          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  base64  +  1));  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  base64  +  1));	  return    StringUtils.newStringUtf8(encode(pArray,    base64));    	non-compiled	[CE]  	21	None	replace
231	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  0),  pArray.length);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  0),  pArray.length);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  0),  pArray.length);	  return    StringUtils.newStringUtf8(encode(pArray),    pArray.length);    	non-compiled	[CE]  	41	None	replace
232	[BUG]  [BUGGY]  wires.put(pArray,  encodeToString(pArray));  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  wires.put(pArray,  encodeToString(pArray));  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	wires.put(pArray,  encodeToString(pArray));	      if(pArray!=    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  	29	None	replace
233	[BUG]  [BUGGY]  aughtExceptionHandler.handleMoreGuaranteed(getBase64(),  pArray);  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  aughtExceptionHandler.handleMoreGuaranteed(getBase64(),  pArray);  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	aughtExceptionHandler.handleMoreGuaranteed(getBase64(),  pArray);	      if(pArray!=    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  	29	None	replace
234	[BUG]  [BUGGY]  aughtExceptionHandler.handleMoreGuaranteed(getBase64());  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  aughtExceptionHandler.handleMoreGuaranteed(getBase64());  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	aughtExceptionHandler.handleMoreGuaranteed(getBase64());	      if(pArray!=    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  	29	None	replace
235	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(pArray);  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  aughtExceptionHandler.handleMissingName(pArray);  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	aughtExceptionHandler.handleMissingName(pArray);	      if(pArray!=    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  	29	None	replace
236	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  16);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  16);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray)+  16);	  return    StringUtils.newStringUtf8(encode(pArray)+    1);    	non-compiled	[CE]  	2	None	replace
237	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  encodeToString,  0,  pArray.length);  [CE]  [FE]        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  System.arraycopy(pArray,  0,  encodeToString,  0,  pArray.length);  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	System.arraycopy(pArray,  0,  encodeToString,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    	non-compiled	[CE]  	23	None	replace
238	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  encodedArray,  0,  pArray.length);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  System.arraycopy(pArray,  0,  encodedArray,  0,  pArray.length);  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	System.arraycopy(pArray,  0,  encodedArray,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    	non-compiled	[CE]  	23	None	replace
239	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length-1);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length-1);  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	System.arraycopy(pArray,  0,  pArray,  0,  pArray.length-1);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    	non-compiled	[CE]  	23	None	replace
240	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  pArray,  0,  pArray.length);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  System.arraycopy(base64,  0,  pArray,  0,  pArray.length);  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	System.arraycopy(base64,  0,  pArray,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    	non-compiled	[CE]  	23	None	replace
241	[BUG]  [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  return  StringUtils.newStringUtf  [CE]  [FE]              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  return  StringUtils.newStringUtf  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  return  StringUtils.newStringUtf	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  	35	None	replace
242	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  return  StringUtils.newStringUtf  [CE]  [FE]                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  return  StringUtils.newStringUtf  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  return  StringUtils.newStringUtf	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  	35	None	replace
243	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  pArray[i];  }  [CE]  [FE]                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  pArray[i];  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  pArray[i];  }	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char    c    =    pArray[i];    }    	non-compiled	[CE]  	14	None	replace
244	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  pArray[i].toCharArray();  }  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  pArray[i].toCharArray();  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  pArray[i].toCharArray();  }	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char    c    =    pArray[i];    }    	non-compiled	[CE]  	14	None	replace
245	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  p[i];  }  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  p[i];  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  p[i];  }	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char    c    =    pArray[i];    }    	non-compiled	[CE]  	14	None	replace
246	[BUG]  [BUGGY]  return  StringUtils.newStringUtf9(encode(pArray,  32));  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf9(encode(pArray,  32));  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf9(encode(pArray,  32));	  return    StringUtils.newStringUtf8(encode(pArray,    32));    	non-compiled	[CE]  	6	None	replace
247	[BUG]  [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  stringUtils.newStringUtf8(encode(pArray[i]));  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  stringUtils.newStringUtf8(encode(pArray[i]));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  stringUtils.newStringUtf8(encode(pArray[i]));  }	      if(pArray!=    null)    {    for(int    i    =    0;    i    <    pArray.length;    ++i)    {    return    StringUtils.newStringUtf8(encode(pArray[i]));    }    	non-compiled	[CE]  	33	None	replace
248	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  StringUtils.newStringUtf9(encode(pArray[i]));  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  StringUtils.newStringUtf9(encode(pArray[i]));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  StringUtils.newStringUtf9(encode(pArray[i]));  }	      if(pArray!=    null)    {    for(int    i    =    0;    i    <    pArray.length;    ++i)    {    return    StringUtils.newStringUtf8(encode(pArray[i]));    }    	non-compiled	[CE]  	33	None	replace
249	[BUG]  [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  StringUtils.newStringUtf9(encode(pArray[i]));  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  StringUtils.newStringUtf9(encode(pArray[i]));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  StringUtils.newStringUtf9(encode(pArray[i]));  }	      if(pArray!=    null)    {    for(int    i    =    0;    i    <    pArray.length;    ++i)    {    return    StringUtils.newStringUtf8(encode(pArray[i]));    }    	non-compiled	[CE]  	33	None	replace
250	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  StringUtils.newStringUtf8(encode(pArray[i])+  1);  }  [CE]  [FE]                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  StringUtils.newStringUtf8(encode(pArray[i])+  1);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  StringUtils.newStringUtf8(encode(pArray[i])+  1);  }	      if(pArray!=    null)    {    for(int    i    =    0;    i    <    pArray.length;    ++i)    {    return    StringUtils.newStringUtf8(encode(pArray[i]));    }    	non-compiled	[CE]  	33	None	replace
251	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  	24	None	replace
252	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  	24	None	replace
253	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray  [CE]  [FE]              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  	24	None	replace
254	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length  [CE]  [FE]                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  	24	None	replace
255	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  p  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  p  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  p	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	24	None	replace
256	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringUtf9(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringUtf9(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringUtf9(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	24	None	replace
257	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  }  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  }	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	24	None	replace
258	[BUG]  [BUGGY]  if(pArray!=  null)  {  StringUtils.newStringUtf8(encode(pArray));  }  else  {  return  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  StringUtils.newStringUtf8(encode(pArray));  }  else  {  return  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  StringUtils.newStringUtf8(encode(pArray));  }  else  {  return  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }	      StringUtils.newStringUtf8(encode(pArray));    	non-compiled	[CE]  ';'  expected	10	None	replace
259	[BUG]  [BUGGY]  StringUtils.newStringUtf9(encode(pArray));  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  StringUtils.newStringUtf9(encode(pArray));  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	StringUtils.newStringUtf9(encode(pArray));	      StringUtils.newStringUtf8(encode(pArray));    	non-compiled	[CE]  ';'  expected	10	None	replace
260	[BUG]  [BUGGY]  StringUtils.newStringUtf8(encode(pArray),  0);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  StringUtils.newStringUtf8(encode(pArray),  0);  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	StringUtils.newStringUtf8(encode(pArray),  0);	      StringUtils.newStringUtf8(encode(pArray));    	non-compiled	[CE]  ';'  expected	10	None	replace
261	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  pArray[i].charAt(i);  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  pArray[i].charAt(i);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  pArray[i].charAt(i);  }	      if(pArray    ==    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char    c    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	13	None	replace
262	[BUG]  [BUGGY]  parent  ==  null  ||  pArray.length  ==  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  parent  ==  null  ||  pArray.length  ==  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	parent  ==  null  ||  pArray.length  ==  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	28	None	replace
263	[BUG]  [BUGGY]  parent  ==  null  ||  pArray.length  ==  0)  {  return  StringUtils.newStringUtf9(encode(pArray));  }  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  parent  ==  null  ||  pArray.length  ==  0)  {  return  StringUtils.newStringUtf9(encode(pArray));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	parent  ==  null  ||  pArray.length  ==  0)  {  return  StringUtils.newStringUtf9(encode(pArray));  }	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	28	None	replace
264	[BUG]  [BUGGY]  parent  ==  null  ||  pArray.length  ==  0)  {  return  StringUtils.newStringUtf8(encode(null));  }  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  parent  ==  null  ||  pArray.length  ==  0)  {  return  StringUtils.newStringUtf8(encode(null));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	parent  ==  null  ||  pArray.length  ==  0)  {  return  StringUtils.newStringUtf8(encode(null));  }	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	28	None	replace
265	[BUG]  [BUGGY]  parent  ==  null  ||  pArray.length  ==  0)  {  return  StringUtils.newStringUtf8(encode(this.base64));  }  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  parent  ==  null  ||  pArray.length  ==  0)  {  return  StringUtils.newStringUtf8(encode(this.base64));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	parent  ==  null  ||  pArray.length  ==  0)  {  return  StringUtils.newStringUtf8(encode(this.base64));  }	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	28	None	replace
266	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray),  base64  +  1);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray),  base64  +  1);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray),  base64  +  1);	  return    StringUtils.newStringUtf8(encode(pArray),    base64);    	non-compiled	[CE]  ';'  expected	20	None	replace
267	[BUG]  [BUGGY]  byte[]  pArray  =  System.getProperty( "octet.separator ");  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  byte[]  pArray  =  System.getProperty( "octet.separator ");  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	byte[]  pArray  =  System.getProperty( "octet.separator ");	      byte[]    pArray    =    System.getProperty(   "line.separator   ");    	non-compiled	[CE]  ';'  expected	34	None	replace
268	[BUG]  [BUGGY]  byte[]  pArray  =  System.getProperty( "line.separator ", "separator ");  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  byte[]  pArray  =  System.getProperty( "line.separator ", "separator ");  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	byte[]  pArray  =  System.getProperty( "line.separator ", "separator ");	      byte[]    pArray    =    System.getProperty(   "line.separator   ");    	non-compiled	[CE]  ';'  expected	34	None	replace
269	[BUG]  [BUGGY]  if(pArray!=  null)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
270	[BUG]  [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length  +  1);  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length  +  1);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length  +  1);  }	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
271	[BUG]  [BUGGY]  if(pArray  ==  null)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
272	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length  +  1;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length  +  1;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length  +  1;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
273	[BUG]  [BUGGY]  return  StringUtils.newStringUtf9(encode(pArray,  0,  pArray.length));  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf9(encode(pArray,  0,  pArray.length));  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf9(encode(pArray,  0,  pArray.length));	  return    StringUtils.newStringUtf8(encode(pArray,    0,    0));    	non-compiled	[CE]  ';'  expected	5	None	replace
274	[BUG]  [BUGGY]  return  StringUtils.newStringUtf7(encode(pArray,  0,  pArray.length));  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf7(encode(pArray,  0,  pArray.length));  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf7(encode(pArray,  0,  pArray.length));	  return    StringUtils.newStringUtf8(encode(pArray,    0,    0));    	non-compiled	[CE]  ';'  expected	5	None	replace
275	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(decode(pArray,  0,  pArray.length));  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(decode(pArray,  0,  pArray.length));  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(decode(pArray,  0,  pArray.length));	  return    StringUtils.newStringUtf8(encode(pArray,    0,    0));    	non-compiled	[CE]  ';'  expected	5	None	replace
276	[BUG]  [BUGGY]  return  StringUtils.newStringUtf0(encode(pArray,  0,  pArray.length));  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf0(encode(pArray,  0,  pArray.length));  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf0(encode(pArray,  0,  pArray.length));	  return    StringUtils.newStringUtf8(encode(pArray,    0,    0));    	non-compiled	[CE]  ';'  expected	5	None	replace
277	[BUG]  [BUGGY]  return  StringUtils.newStringUtf9(encode(pArray,  pArray.length));  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf9(encode(pArray,  pArray.length));  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf9(encode(pArray,  pArray.length));	  return    StringUtils.newStringUtf8(encode(pArray,    pArray.length));    	non-compiled	[CE]  ';'  expected	40	None	replace
278	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  4,  pArray.length);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  4,  pArray.length);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray)+  4,  pArray.length);	  return    StringUtils.newStringUtf8(encode(pArray)+    1,    pArray.length);    	non-compiled	[CE]  ';'  expected	39	None	replace
279	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  1,  pArray.length  *  2);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  1,  pArray.length  *  2);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray)+  1,  pArray.length  *  2);	  return    StringUtils.newStringUtf8(encode(pArray)+    1,    pArray.length);    	non-compiled	[CE]  ';'  expected	39	None	replace
280	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  System.arraycopy(p  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  System.arraycopy(p  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  System.arraycopy(p	      if(pArray    ==    null)    {    for(int    i    =    0;    i    <    pArray.length;    i++)    {    char    c    =    pArray[i];    System.arraycopy(p,    0,    c,    0,    c);    }    	non-compiled	[CE]  ';'  expected	18	None	replace
281	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  String  c  =  pArray[i];  System.arraycopy(p,  0,  c,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  String  c  =  pArray[i];  System.arraycopy(p,  0,  c,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  String  c  =  pArray[i];  System.arraycopy(p,  0,  c,  0,  pArray.length);  }	      if(pArray    ==    null)    {    for(int    i    =    0;    i    <    pArray.length;    i++)    {    char    c    =    pArray[i];    System.arraycopy(p,    0,    c,    0,    c);    }    	non-compiled	[CE]  ';'  expected	18	None	replace
282	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  System.arraycopy(p,  0,  c,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(c  ==  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  System.arraycopy(p,  0,  c,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(c  ==  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  System.arraycopy(p,  0,  c,  0,  pArray.length);  }	      if(pArray    ==    null)    {    for(int    i    =    0;    i    <    pArray.length;    i++)    {    char    c    =    pArray[i];    System.arraycopy(p,    0,    c,    0,    c);    }    	non-compiled	[CE]  ';'  expected	18	None	replace
283	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  System.arraycopy(p,  0,  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  System.arraycopy(p,  0,  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  System.arraycopy(p,  0,	      if(pArray    ==    null)    {    for(int    i    =    0;    i    <    pArray.length;    i++)    {    char    c    =    pArray[i];    System.arraycopy(p,    0,    c,    0,    c);    }    	non-compiled	[CE]  ';'  expected	18	None	replace
284	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  System.arraycopy(p,  0,  c,  0,  c);  }  [CE]  ';'  expected  [FE]                                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(c  ==  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  System.arraycopy(p,  0,  c,  0,  c);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(c  ==  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  System.arraycopy(p,  0,  c,  0,  c);  }	      if(pArray    ==    null)    {    for(int    i    =    0;    i    <    pArray.length;    i++)    {    char    c    =    pArray[i];    System.arraycopy(p,    0,    c,    0,    c);    }    	non-compiled	[CE]  ';'  expected	18	None	replace
285	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    1,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
286	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  p  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  p  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  p	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    1,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
287	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    1,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
288	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringUtf9(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  }  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringUtf9(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	parent  ==  null  ||!parent.equals(pArray))  {  return  StringUtils.newStringUtf9(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  }	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    1,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
289	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(p,  0,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(p,  0,  pArray,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(p,  0,  pArray,  0,  pArray.length);  }	      if(pArray    ==    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char[]    p    =    new    char[len    +    1];    System.arraycopy(p,    0,    p,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	19	None	replace
290	[BUG]  [BUGGY]  if(pArray!=  null)  {  if(pArray.length  <  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  if(pArray.length  <  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  if(pArray.length  <  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }	      if(pArray    ==    null)    {    if(pArray.length    >    0)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	11	None	replace
291	[BUG]  [BUGGY]  if(pArray!=  null)  {  if(pArray.length  >  0)  {  return  stringUtils.newStringUtf8(encode(pArray));  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  if(pArray.length  >  0)  {  return  stringUtils.newStringUtf8(encode(pArray));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  if(pArray.length  >  0)  {  return  stringUtils.newStringUtf8(encode(pArray));  }	      if(pArray    ==    null)    {    if(pArray.length    >    0)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	11	None	replace
292	[BUG]  [BUGGY]  if(pArray!=  null)  {  if(pArray.length  <  =  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  if(pArray.length  <  =  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  if(pArray.length  <  =  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }	      if(pArray!=    null)    {    if(pArray.length    >    0)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	12	None	replace
293	[BUG]  [BUGGY]  if(pArray  ==  null)  {  if(pArray.length  >  0)  {  return  stringUtils.newStringUtf8(encode(pArray));  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  if(pArray.length  >  0)  {  return  stringUtils.newStringUtf8(encode(pArray));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  if(pArray.length  >  0)  {  return  stringUtils.newStringUtf8(encode(pArray));  }	      if(pArray!=    null)    {    if(pArray.length    >    0)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	12	None	replace
294	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[lenientPos];  System.arraycopy(p,  0,  p  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[lenientPos];  System.arraycopy(p,  0,  p  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[lenientPos];  System.arraycopy(p,  0,  p	      if(pArray    ==    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char[]    p    =    new    char[lenientPos];    System.arraycopy(p,    0,    p,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	37	None	replace
295	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  0,  pArray.length),  pArray.length);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  0,  pArray.length),  pArray.length);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  0,  pArray.length),  pArray.length);	  return    StringUtils.newStringUtf8(encode(pArray,    0,    pArray.length));    	non-compiled	[CE]  ';'  expected	8	None	replace
296	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i].trim();  }  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i].trim();  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i].trim();  }	      if(pArray    ==    null)    {    for(int    i    =    0;    i    <    pArray.length;    i++)    {    char    c    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	15	None	replace
297	[BUG]  [BUGGY]  if(pArray  ==  null)  {  if(pArray!=  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  }  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  if(pArray!=  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  if(pArray!=  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  }	      if(pArray!=    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    1,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	31	None	replace
298	[BUG]  [BUGGY]  if(pArray.length!=  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  }  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray.length!=  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray.length!=  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  }	      if(pArray!=    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    1,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	31	None	replace
299	[BUG]  [BUGGY]  if(pArray!=  null)  {  return  StringUtils.newStringUtf9(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  }  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  return  StringUtils.newStringUtf9(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  return  StringUtils.newStringUtf9(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  }	      if(pArray!=    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    1,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	31	None	replace
300	[BUG]  [BUGGY]  [Delete]  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  [Delete]  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	[Delete]	      if(pArray    ==    null)    {    if(pArray.length    >    0)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	11	None	replace
301	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingEncoding(pArray,  0,  pArray.length);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  aughtExceptionHandler.handleMissingEncoding(pArray,  0,  pArray.length);  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	aughtExceptionHandler.handleMissingEncoding(pArray,  0,  pArray.length);	      if(pArray    ==    null)    {    if(pArray.length    >    0)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	11	None	replace
302	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingEncoding(pArray);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  aughtExceptionHandler.handleMissingEncoding(pArray);  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	aughtExceptionHandler.handleMissingEncoding(pArray);	      if(pArray    ==    null)    {    if(pArray.length    >    0)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	11	None	replace
303	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingPath(pArray);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  aughtExceptionHandler.handleMissingPath(pArray);  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	aughtExceptionHandler.handleMissingPath(pArray);	      if(pArray    ==    null)    {    if(pArray.length    >    0)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	11	None	replace
304	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[lenentPos];  System.arraycopy(p,  0,  p  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[lenentPos];  System.arraycopy(p,  0,  p  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[lenentPos];  System.arraycopy(p,  0,  p	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char[]    p    =    new    char[lenientPos];    System.arraycopy(p,    0,    p,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	36	None	replace
305	[BUG]  [BUGGY]  if(pArray  ==  null  ||  pArray.length  <  2)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null  ||  pArray.length  <  2)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null  ||  pArray.length  <  2)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	24	None	replace
306	[BUG]  [BUGGY]  if(pArray.length  ==  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray.length  ==  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray.length  ==  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	24	None	replace
307	[BUG]  [BUGGY]  if(pArray  ==  null  ||  pArray.length  <  =  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null  ||  pArray.length  <  =  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null  ||  pArray.length  <  =  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	24	None	replace
308	[BUG]  [BUGGY]  if(pArray  ==  null  ||  pArray.length!=  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null  ||  pArray.length!=  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null  ||  pArray.length!=  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	24	None	replace
309	[BUG]  [BUGGY]  if(pArray  ==  null  ||  pArray.length  <  =  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null  ||  pArray.length  <  =  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null  ||  pArray.length  <  =  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	24	None	replace
310	[BUG]  [BUGGY]  if(c  ==  ';')  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  }  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(c  ==  ';')  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(c  ==  ';')  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  }	      if(pArray    ==    null)    {    for(int    i    =    0;    i    <    pArray.length;    i++)    {    char    c    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	15	None	replace
311	[BUG]  [BUGGY]  if(pArray  ==  null  ||  pArray.length!=  0)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  }  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null  ||  pArray.length!=  0)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null  ||  pArray.length!=  0)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  }	      if(pArray    ==    null)    {    for(int    i    =    0;    i    <    pArray.length;    i++)    {    char    c    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	15	None	replace
312	[BUG]  [BUGGY]  if(c  ==  ' "')  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  }  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(c  ==  ' "')  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(c  ==  ' "')  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  }	      if(pArray    ==    null)    {    for(int    i    =    0;    i    <    pArray.length;    i++)    {    char    c    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	15	None	replace
313	[BUG]  [BUGGY]  if(pArray  ==  null  ||  pArray.length  <  2)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  }  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null  ||  pArray.length  <  2)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null  ||  pArray.length  <  2)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  }	      if(pArray    ==    null)    {    for(int    i    =    0;    i    <    pArray.length;    i++)    {    char    c    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	15	None	replace
314	[BUG]  [BUGGY]  if(pArray!=  null)  {  if(pArray.length  <  2  ||  pArray.length  >  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  if(pArray.length  <  2  ||  pArray.length  >  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  if(pArray.length  <  2  ||  pArray.length  >  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }	      if(pArray!=    null)    {    if(pArray.length    >    0)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	12	None	replace
315	[BUG]  [BUGGY]  if(pArray!=  null)  {  if(pArray.length  <  2)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  if(pArray.length  <  2)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  if(pArray.length  <  2)  {  return  StringUtils.newStringUtf8(encode(pArray));  }	      if(pArray!=    null)    {    if(pArray.length    >    0)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	12	None	replace
316	[BUG]  [BUGGY]  byte[]  pArray  =  System.getProperty( "user.home ");  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  byte[]  pArray  =  System.getProperty( "user.home ");  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	byte[]  pArray  =  System.getProperty( "user.home ");	      byte[]    pArray    =    System.getProperty(   "line.separator   ");    	non-compiled	[CE]  ';'  expected	34	None	replace
317	[BUG]  [BUGGY]  byte[]  pArray  =  System.getProperty( "java.separator ");  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  byte[]  pArray  =  System.getProperty( "java.separator ");  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	byte[]  pArray  =  System.getProperty( "java.separator ");	      byte[]    pArray    =    System.getProperty(   "line.separator   ");    	non-compiled	[CE]  ';'  expected	34	None	replace
318	[BUG]  [BUGGY]  byte[]  pArray  =  System.getProperty( "java.line.separator ");  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  byte[]  pArray  =  System.getProperty( "java.line.separator ");  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	byte[]  pArray  =  System.getProperty( "java.line.separator ");	      byte[]    pArray    =    System.getProperty(   "line.separator   ");    	non-compiled	[CE]  ';'  expected	34	None	replace
319	[BUG]  [BUGGY]  return  encode(pArray,  0,  pArray.length);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  encode(pArray,  0,  pArray.length);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  encode(pArray,  0,  pArray.length);	      	non-compiled	[CE]  ';'  expected	9	None	replace
320	[BUG]  [BUGGY]  return  encodeToString(pArray,  true,  null);  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  encodeToString(pArray,  true,  null);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  encodeToString(pArray,  true,  null);	      	non-compiled	[CE]  ';'  expected	9	None	replace
321	[BUG]  [BUGGY]  return  encodeToString(pArray,  false,  null);  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  encodeToString(pArray,  false,  null);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  encodeToString(pArray,  false,  null);	      	non-compiled	[CE]  ';'  expected	9	None	replace
322	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  c  =  pArray[i];  System.arraycopy(p,  0,  c,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  c  =  pArray[i];  System.arraycopy(p,  0,  c,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  c  =  pArray[i];  System.arraycopy(p,  0,  c,  0,  pArray.length);  }	      if(pArray    ==    null)    {    for(int    i    =    0;    i    <    pArray.length;    i++)    {    char    c    =    pArray[i];    System.arraycopy(p,    0,    c,    0,    c);    }    	non-compiled	[CE]  ';'  expected	18	None	replace
323	[BUG]  [BUGGY]  if(pArray  ==  null  ||  pArray.length  <  2)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  System.arraycopy(p,  0,  c,  0,  c);  }  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null  ||  pArray.length  <  2)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  System.arraycopy(p,  0,  c,  0,  c);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null  ||  pArray.length  <  2)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  System.arraycopy(p,  0,  c,  0,  c);  }	      if(pArray    ==    null)    {    for(int    i    =    0;    i    <    pArray.length;    i++)    {    char    c    =    pArray[i];    System.arraycopy(p,    0,    c,    0,    c);    }    	non-compiled	[CE]  ';'  expected	18	None	replace
324	[BUG]  [BUGGY]  if(pArray  ==  null  ||  pArray.length!=  0)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  System.arraycopy(p,  0,  c,  0,  c);  }  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null  ||  pArray.length!=  0)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  System.arraycopy(p,  0,  c,  0,  c);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null  ||  pArray.length!=  0)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  System.arraycopy(p,  0,  c,  0,  c);  }	      if(pArray    ==    null)    {    for(int    i    =    0;    i    <    pArray.length;    i++)    {    char    c    =    pArray[i];    System.arraycopy(p,    0,    c,    0,    c);    }    	non-compiled	[CE]  ';'  expected	18	None	replace
325	[BUG]  [BUGGY]  if(pArray.length  ==  0)  {  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray.length  ==  0)  {  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray.length  ==  0)  {  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }	      StringUtils.newStringUtf8(encode(pArray));    	non-compiled	[CE]  ';'  expected	10	None	replace
326	[BUG]  [BUGGY]  if(pArray.length  ==  0)  {  StringUtils.newStringUtf8(encode(pArray));  }  else  {  return  null;  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray.length  ==  0)  {  StringUtils.newStringUtf8(encode(pArray));  }  else  {  return  null;  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray.length  ==  0)  {  StringUtils.newStringUtf8(encode(pArray));  }  else  {  return  null;  }	      StringUtils.newStringUtf8(encode(pArray));    	non-compiled	[CE]  ';'  expected	10	None	replace
327	[BUG]  [BUGGY]  if(pArray.length  ==  0)  {  StringUtils.newStringUtf8(encode(pArray));  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray.length  ==  0)  {  StringUtils.newStringUtf8(encode(pArray));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray.length  ==  0)  {  StringUtils.newStringUtf8(encode(pArray));  }	      StringUtils.newStringUtf8(encode(pArray));    	non-compiled	[CE]  ';'  expected	10	None	replace
328	[BUG]  [BUGGY]  return  StringUtils.newStringUtf9(encode(pArray),  pArray.length);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf9(encode(pArray),  pArray.length);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf9(encode(pArray),  pArray.length);	  return    StringUtils.newStringUtf9(encode(pArray));    	non-compiled	[CE]  ';'  expected	22	None	replace
329	[BUG]  [BUGGY]  return  StringUtils.newStringUtf9(encode(pArray)+  1));  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf9(encode(pArray)+  1));  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf9(encode(pArray)+  1));	  return    StringUtils.newStringUtf9(encode(pArray));    	non-compiled	[CE]  ';'  expected	22	None	replace
330	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  32),  pArray.length);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  32),  pArray.length);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  32),  pArray.length);	  return    StringUtils.newStringUtf8(encode(pArray,    32));    	non-compiled	[CE]  ';'  expected	6	None	replace
331	[BUG]  [BUGGY]  if(pArray!=  null  ||  pArray.length  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null  ||  pArray.length  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null  ||  pArray.length  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
332	[BUG]  [BUGGY]  if(pArray!=  null  ||  pArray.length  <  2)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null  ||  pArray.length  <  2)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null  ||  pArray.length  <  2)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
333	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  1,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  1,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  1,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
334	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)/  1,  pArray.length);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)/  1,  pArray.length);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray)/  1,  pArray.length);	  return    StringUtils.newStringUtf8(encode(pArray)+    1,    pArray.length);    	non-compiled	[CE]  ';'  expected	39	None	replace
335	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  1,  pArray.length  -  2);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray)+  1,  pArray.length  -  2);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray)+  1,  pArray.length  -  2);	  return    StringUtils.newStringUtf8(encode(pArray)+    1,    pArray.length);    	non-compiled	[CE]  ';'  expected	39	None	replace
336	[BUG]  [BUGGY]  if(pArray  ==  null  ||  pArray.length  <  2)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  }  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null  ||  pArray.length  <  2)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null  ||  pArray.length  <  2)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  }	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    1,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
337	[BUG]  [BUGGY]  if(pArray.length  ==  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  }  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray.length  ==  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray.length  ==  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  }	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    1,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
338	[BUG]  [BUGGY]  if(pArray  ==  null  ||  pArray.length  <  =  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  }  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null  ||  pArray.length  <  =  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null  ||  pArray.length  <  =  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  }	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    1,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
339	[BUG]  [BUGGY]  if(pArray  ==  null  ||  pArray.length!=  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  }  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null  ||  pArray.length!=  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null  ||  pArray.length!=  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  }	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    1,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
340	[BUG]  [BUGGY]  if(pArray.length!=  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray.length!=  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray.length!=  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }	      if(pArray!=    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	25	None	replace
341	[BUG]  [BUGGY]  if(pArray!=  null)  {  return  StringUtils.newStringUtf8(decode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  return  StringUtils.newStringUtf8(decode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  return  StringUtils.newStringUtf8(decode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }	      if(pArray!=    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	25	None	replace
342	[BUG]  [BUGGY]  if(pArray!=  null)  {  return  StringUtils.newStringUtf9(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  return  StringUtils.newStringUtf9(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  return  StringUtils.newStringUtf9(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }	      if(pArray!=    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	25	None	replace
343	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray),  base64,  pArray.length);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray),  base64,  pArray.length);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray),  base64,  pArray.length);	  return    StringUtils.newStringUtf8(encode(pArray),    base64);    	non-compiled	[CE]  ';'  expected	20	None	replace
344	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingEncoding(pArray,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  aughtExceptionHandler.handleMissingEncoding(pArray,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	aughtExceptionHandler.handleMissingEncoding(pArray,  DEFAULT_BUFFER_RESIZE_FACTOR);	      if(pArray!=    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	29	None	replace
345	[BUG]  [BUGGY]  parent  ==  null  ||  pArray.length  ==  0)  {  return  StringUtils.newStringUtf8(encode(pArray);  }  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  parent  ==  null  ||  pArray.length  ==  0)  {  return  StringUtils.newStringUtf8(encode(pArray);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	parent  ==  null  ||  pArray.length  ==  0)  {  return  StringUtils.newStringUtf8(encode(pArray);  }	      if(pArray!=    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	29	None	replace
346	[BUG]  [BUGGY]  parent  ==  null  ||  pArray.length  ==  0)  {  return  StringUtils.newStringUtf8(decode(pArray));  }  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  parent  ==  null  ||  pArray.length  ==  0)  {  return  StringUtils.newStringUtf8(decode(pArray));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	parent  ==  null  ||  pArray.length  ==  0)  {  return  StringUtils.newStringUtf8(decode(pArray));  }	      if(pArray!=    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	29	None	replace
347	[BUG]  [BUGGY]  parent  ==  null  ||  pArray.length  ==  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  parent  ==  null  ||  pArray.length  ==  0)  {  return  StringUtils.newStringUtf8(encode(pArray));  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	parent  ==  null  ||  pArray.length  ==  0)  {  return  StringUtils.newStringUtf8(encode(pArray));	      if(pArray!=    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	29	None	replace
348	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,	      if(pArray    ==    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char[]    p    =    new    char[len    +    1];    System.arraycopy(p,    0,    p,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	16	None	replace
349	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  2];  System.arraycopy(p,  0,  p,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  2];  System.arraycopy(p,  0,  p,  0,  pArray.length);  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  2];  System.arraycopy(p,  0,  p,  0,  pArray.length);  }	      if(pArray    ==    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char[]    p    =    new    char[len    +    1];    System.arraycopy(p,    0,    p,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	16	None	replace
350	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  DEFAULT_BUFFER_RESIZE_FACTOR));  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  DEFAULT_BUFFER_RESIZE_FACTOR));  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  DEFAULT_BUFFER_RESIZE_FACTOR));	  return    StringUtils.newStringUtf8(encode(pArray,    base64));    	non-compiled	[CE]  ';'  expected	21	None	replace
351	[BUG]  [BUGGY]  if(pArray!=  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray,  0,  p  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray,  0,  p  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray,  0,  p	      if(pArray!=    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
352	[BUG]  [BUGGY]  parent  ==  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  parent  ==  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	parent  ==  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    	non-compiled	[CE]  ';'  expected	28	None	replace
353	[BUG]  [BUGGY]  if(pArray!=  null  &&  pArray.length  >  0)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  StringUtils.newStringUtf8(encode(pArray[i]));  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null  &&  pArray.length  >  0)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  StringUtils.newStringUtf8(encode(pArray[i]));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null  &&  pArray.length  >  0)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  StringUtils.newStringUtf8(encode(pArray[i]));  }	      if(pArray!=    null)    {    for(int    i    =    0;    i    <    pArray.length;    ++i)    {    return    StringUtils.newStringUtf8(encode(pArray[i]));    }    	non-compiled	[CE]  ';'  expected	33	None	replace
354	[BUG]  [BUGGY]  if(pArray!=  null  ||  pArray.length  ==  0)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  StringUtils.newStringUtf8(encode(pArray[i]));  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null  ||  pArray.length  ==  0)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  StringUtils.newStringUtf8(encode(pArray[i]));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null  ||  pArray.length  ==  0)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  StringUtils.newStringUtf8(encode(pArray[i]));  }	      if(pArray!=    null)    {    for(int    i    =    0;    i    <    pArray.length;    ++i)    {    return    StringUtils.newStringUtf8(encode(pArray[i]));    }    	non-compiled	[CE]  ';'  expected	33	None	replace
355	[BUG]  [BUGGY]  if(pArray!=  null  ||  pArray.length  <  2)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  StringUtils.newStringUtf8(encode(pArray[i]));  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null  ||  pArray.length  <  2)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  StringUtils.newStringUtf8(encode(pArray[i]));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null  ||  pArray.length  <  2)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  return  StringUtils.newStringUtf8(encode(pArray[i]));  }	      if(pArray!=    null)    {    for(int    i    =    0;    i    <    pArray.length;    ++i)    {    return    StringUtils.newStringUtf8(encode(pArray[i]));    }    	non-compiled	[CE]  ';'  expected	33	None	replace
356	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  pArray.length  -  1));  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  pArray.length  -  1));  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  pArray.length  -  1));	  return    StringUtils.newStringUtf8(encode(pArray,    pArray.length));    	non-compiled	[CE]  ';'  expected	40	None	replace
357	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray[0],  pArray.length));  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray[0],  pArray.length));  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray[0],  pArray.length));	  return    StringUtils.newStringUtf8(encode(pArray),    pArray.length);    	non-compiled	[CE]  ';'  expected	41	None	replace
358	[BUG]  [BUGGY]  if(pArray!=  null  &&  pArray.length  >  0)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  }  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null  &&  pArray.length  >  0)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null  &&  pArray.length  >  0)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  char  c  =  pArray[i];  }	      if(pArray!=    null)    {    for(int    i    =    0;    i    <    pArray.length;    i++)    {    char    c    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	17	None	replace
359	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  return  StringUtils.newStringUtf8(encode(pArray[i]));  }  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  return  StringUtils.newStringUtf8(encode(pArray[i]));  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0;  i  <  pArray.length;  i++)  {  return  StringUtils.newStringUtf8(encode(pArray[i]));  }	      if(pArray!=    null)    {    for(int    i    =    0;    i    <    pArray.length;    i++)    {    char    c    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	17	None	replace
360	[BUG]  [BUGGY]  if(pArray  ==  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray,  0,  p  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray,  0,  p  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null)  {  return  StringUtils.newStringUtf8(encode(pArray));  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray,  0,  p	      if(pArray    ==    null)    {    return    StringUtils.newStringUtf8(encode(pArray));    }    else    {    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
361	[BUG]  [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  null)+  1,  pArray.length);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  return  StringUtils.newStringUtf8(encode(pArray,  null)+  1,  pArray.length);  [BUGGY]    }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	return  StringUtils.newStringUtf8(encode(pArray,  null)+  1,  pArray.length);	  return    StringUtils.newStringUtf8(encode(pArray,    null));    	non-compiled	[CE]  ';'  expected	3	None	replace
362	[BUG]  [BUGGY]  if(pArray!=  null  ||  pArray.length  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  pArray[i];  }  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null  ||  pArray.length  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  pArray[i];  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null  ||  pArray.length  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  pArray[i];  }	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char    c    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	14	None	replace
363	[BUG]  [BUGGY]  if(c  ==  ';')  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  pArray[i];  }  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(c  ==  ';')  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  pArray[i];  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(c  ==  ';')  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  pArray[i];  }	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char    c    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	14	None	replace
364	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  c  =  pArray[i];  }  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  c  =  pArray[i];  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  c  =  pArray[i];  }	      if(pArray!=    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char    c    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	14	None	replace
365	[BUG]  [BUGGY]  if(pArray  ==  null  ||  pArray.length!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  pArray[i];  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null  ||  pArray.length!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  pArray[i];  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null  ||  pArray.length!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  pArray[i];  }	      if(pArray    ==    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char    c    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	13	None	replace
366	[BUG]  [BUGGY]  if(pArray  ==  null  ||  pArray.length  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  pArray[i];  }  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null  ||  pArray.length  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  pArray[i];  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null  ||  pArray.length  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  pArray[i];  }	      if(pArray    ==    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char    c    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	13	None	replace
367	[BUG]  [BUGGY]  if(pArray  ==  null  ||  pArray.length  <  2)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  pArray[i];  }  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray  ==  null  ||  pArray.length  <  2)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  pArray[i];  }  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray  ==  null  ||  pArray.length  <  2)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char  c  =  pArray[i];  }	      if(pArray    ==    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char    c    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	13	None	replace
368	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  3,  pArray.length);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  3,  pArray.length);  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	System.arraycopy(pArray,  0,  pArray,  3,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    	non-compiled	[CE]  ';'  expected	23	None	replace
369	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  16,  pArray.length);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  16,  pArray.length);  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	System.arraycopy(pArray,  0,  pArray,  16,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    	non-compiled	[CE]  ';'  expected	23	None	replace
370	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  pArray,  0,  pArray.length  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  pArray,  0,  pArray.length  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  pArray,  0,  pArray.length	      if(pArray    ==    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char[]    p    =    new    char[len    +    1];    System.arraycopy(p,    0,    p,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	19	None	replace
371	[BUG]  [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  pArray,  0,  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    public  String  encodeToString(byte[]  pArray)  {    [BUGGY]  if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  pArray,  0,  [BUGGY]    return  StringUtils.newStringUtf8(encode(pArray));  }  [CLASS]  Base64  [METHOD]  encodeToString  [RETURN_TYPE]  String  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	if(pArray!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  char[]  p  =  new  char[len  +  1];  System.arraycopy(p,  0,  pArray,  0,	      if(pArray    ==    null)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    char[]    p    =    new    char[len    +    1];    System.arraycopy(p,    0,    p,    0,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	19	None	replace
