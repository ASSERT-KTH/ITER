bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  0,  this.base64Separator,  0,  lineLength);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  0,  this.base64Separator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  0,  this.base64Separator,  0,  lineLength);	  System.arraycopy(this.base64Separator,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	150	None	replace
2	[BUG]  [BUGGY]  System.arraycopy(this.base64Separator,  0,  this.base64Separator,  0,  this.base64Separator.length);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64Separator,  0,  this.base64Separator,  0,  this.base64Separator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64Separator,  0,  this.base64Separator,  0,  this.base64Separator.length);	  System.arraycopy(this.base64Separator,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	150	None	replace
3	[BUG]  [BUGGY]  System.arraycopy(this.base64Separator,  0,  this.base64Separator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64Separator,  0,  this.base64Separator,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64Separator,  0,  this.base64Separator,  0,  lineLength  -  1);	  System.arraycopy(this.base64Separator,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	150	None	replace
4	[BUG]  [BUGGY]  System.arraycopy(this.base64Separator,  0,  this.base64Separator,  0,  lineLength  -  this.base64Separator.length);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64Separator,  0,  this.base64Separator,  0,  lineLength  -  this.base64Separator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64Separator,  0,  this.base64Separator,  0,  lineLength  -  this.base64Separator.length);	  System.arraycopy(this.base64Separator,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	150	None	replace
5	[BUG]  [BUGGY]  this.encodeSize  =  1  +  this.base64Separator.length  -  1;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  +  this.base64Separator.length  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  this.base64Separator.length  -  1;	  this.encodeSize    =    1    +    this.base64Separator.length;    	non-compiled	[CE]  ';'  expected	121	None	replace
6	[BUG]  [BUGGY]  this.encodeSize  =  1  +  this.base64Separator.length  -  2;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  +  this.base64Separator.length  -  2;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  this.base64Separator.length  -  2;	  this.encodeSize    =    1    +    this.base64Separator.length;    	non-compiled	[CE]  ';'  expected	121	None	replace
7	[BUG]  [BUGGY]  this.decodeSize  =  1  +  this.base64Separator.length;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.decodeSize  =  1  +  this.base64Separator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.decodeSize  =  1  +  this.base64Separator.length;	  this.encodeSize    =    1    +    this.base64Separator.length;    	non-compiled	[CE]  ';'  expected	121	None	replace
8	[BUG]  [BUGGY]  this.encodeSize  =  1  +  this.base64Separator.length  -  4;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  +  this.base64Separator.length  -  4;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  this.base64Separator.length  -  4;	  this.encodeSize    =    1    +    this.base64Separator.length;    	non-compiled	[CE]  ';'  expected	121	None	replace
9	[BUG]  [BUGGY]  this.encodeSize  =  1  +  this.base64Separator.length  -  3;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  +  this.base64Separator.length  -  3;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  this.base64Separator.length  -  3;	  this.encodeSize    =    1    +    this.base64Separator.length;    	non-compiled	[CE]  ';'  expected	121	None	replace
10	[BUG]  [BUGGY]  this.base64Separator.length  =  1  +  this.base64Separator.length;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.base64Separator.length  =  1  +  this.base64Separator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.base64Separator.length  =  1  +  this.base64Separator.length;	  this.encodeSize    =    1    +    this.base64Separator.length;    	non-compiled	[CE]  ';'  expected	121	None	replace
11	[BUG]  [BUGGY]  this.base64Separator.size  =  1  +  this.base64Separator.length;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.base64Separator.size  =  1  +  this.base64Separator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.base64Separator.size  =  1  +  this.base64Separator.length;	  this.encodeSize    =    1    +    this.base64Separator.length;    	non-compiled	[CE]  ';'  expected	121	None	replace
12	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ')'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.base64,  0,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.base64,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	72	None	replace
13	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.base64,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ')'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.base64,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteUtf8(this.base64,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.base64,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	72	None	replace
14	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64,  0,  lineSeparator,  0,  this.lineLength);  [CE]  ')'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64,  0,  lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.base64,  0,  lineSeparator,  0,  this.lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.base64,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	72	None	replace
15	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.base64,  0,  lineLength);  [CE]  ')'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.base64,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.base64,  0,  lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.base64,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	72	None	replace
16	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64,  0,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  ')'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64,  0,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.base64,  0,  this.lineSeparator,  0,  lineLength  -  1);	  System.arraycopy(Base64Utils.newStringUtf8(this.base64,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	72	None	replace
17	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64,  lineSeparator,  0,  this.lineLength);  [CE]  ')'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64,  lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.base64,  lineSeparator,  0,  this.lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.base64,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	72	None	replace
18	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64,  0,  this.lineSeparator,  0,  lineLength));  [CE]  ';'  expected  [FE]                                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64,  0,  this.lineSeparator,  0,  lineLength));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.base64,  0,  this.lineSeparator,  0,  lineLength));	  System.arraycopy(Base64Utils.newStringUtf8(this.base64,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	72	None	replace
19	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  lineSeparator,  0,  urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  lineSeparator,  0,  urlSafe);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	137	None	replace
20	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe.length);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	137	None	replace
21	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.RBASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.RBASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.RBASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	137	None	replace
22	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  fileLength);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  fileLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  fileLength);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	137	None	replace
23	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.base64Separator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  this.base64Separator,  0,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.base64Separator,  0,  lineSeparator.length);	  System.arraycopy(this.base64,    0,    lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	201	None	replace
24	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);	  System.arraycopy(this.base64,    0,    lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	201	None	replace
25	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.urlSafe,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  this.urlSafe,  0,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.urlSafe,  0,  lineSeparator.length);	  System.arraycopy(this.base64,    0,    lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	201	None	replace
26	[BUG]  [BUGGY]  this.encodeSize  =  5  *  this.lineSeparator.length;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  5  *  this.lineSeparator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  5  *  this.lineSeparator.length;	  this.encodeSize    =    5    *    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	205	None	replace
27	[BUG]  [BUGGY]  this.encodeSize  =  5  *  this.urlSafe;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  5  *  this.urlSafe;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  5  *  this.urlSafe;	  this.encodeSize    =    5    *    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	205	None	replace
28	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.base64Separator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.base64Separator,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.base64Separator,  0,  lineLength  -  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	156	None	replace
29	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.base64Separator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.base64Separator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.base64Separator,  0,  this.lineLength);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	156	None	replace
30	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.US_ASCII,  0,  this.base64Separator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.US_ASCII,  0,  this.base64Separator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.US_ASCII,  0,  this.base64Separator,  0,  lineLength);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	156	None	replace
31	[BUG]  [BUGGY]  System.arraycopy(Base64.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  -  1);	  System.arraycopy(Base64.DEFAULT,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	220	None	replace
32	[BUG]  [BUGGY]  System.arraycopy(Base64.DEFAULT,  0,  this.base64,  0,  lineLength);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64.DEFAULT,  0,  this.base64,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64.DEFAULT,  0,  this.base64,  0,  lineLength);	  System.arraycopy(Base64.DEFAULT,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	220	None	replace
33	[BUG]  [BUGGY]  System.arraycopy(Base64.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  +  1);	  System.arraycopy(Base64.DEFAULT,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	220	None	replace
34	[BUG]  [BUGGY]  System.arraycopy(Base64.DEFAULT,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64.DEFAULT,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64.DEFAULT,  0,  this.lineSeparator,  0,  lineSeparator.length);	  System.arraycopy(Base64.DEFAULT,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	220	None	replace
35	[BUG]  [BUGGY]  System.arraycopy(Base64.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  -  2);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  -  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  -  2);	  System.arraycopy(Base64.DEFAULT,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	220	None	replace
36	[BUG]  [BUGGY]  System.arraycopy(Base64.DEFAULT,  0,  this.baseSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64.DEFAULT,  0,  this.baseSeparator,  0,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64.DEFAULT,  0,  this.baseSeparator,  0,  lineSeparator.length);	  System.arraycopy(Base64.DEFAULT,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	220	None	replace
37	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  4);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  4);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    /    2);    	non-compiled	[CE]  ';'  expected	84	None	replace
38	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  2  +  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  2  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  2  +  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    /    2);    	non-compiled	[CE]  ';'  expected	84	None	replace
39	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  3);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  3);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  3);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    /    2);    	non-compiled	[CE]  ';'  expected	84	None	replace
40	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  2);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  2);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    /    2);    	non-compiled	[CE]  ';'  expected	84	None	replace
41	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  2  -  1);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  2  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  2  -  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    /    2);    	non-compiled	[CE]  ';'  expected	84	None	replace
42	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  1);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    /    2);    	non-compiled	[CE]  ';'  expected	84	None	replace
43	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  2);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  2);	  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	88	None	replace
44	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  4);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  4);	  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	88	None	replace
45	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  3);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  3);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  3);	  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	88	None	replace
46	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  1);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  1);	  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	88	None	replace
47	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  6);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  6);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  6);	  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	88	None	replace
48	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  +  1);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  +  1);	  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	88	None	replace
49	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  this.lineSeparator,  0,  lineSeparator.length);	  System.arraycopy(Base64Separator.DEFAULT,    0,    lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	179	None	replace
50	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  lineSeparator,  0,  this.lineLength  -  1);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  lineSeparator,  0,  this.lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  lineSeparator,  0,  this.lineLength  -  1);	  System.arraycopy(Base64Separator.DEFAULT,    0,    lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	179	None	replace
51	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  /  3);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  /  3);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  /  3);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    lineLength    -    3);    	non-compiled	[CE]  ';'  expected	25	None	replace
52	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  +  3);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  +  3);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  +  3);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    lineLength    -    3);    	non-compiled	[CE]  ';'  expected	25	None	replace
53	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  *  3);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  *  3);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  *  3);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    lineLength    -    3);    	non-compiled	[CE]  ';'  expected	25	None	replace
54	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  /  4);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  /  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  /  4);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    lineLength    -    4);    	non-compiled	[CE]  ';'  expected	23	None	replace
55	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep  +  ']',  lineLength);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep  +  ']',  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(sep  +  ']',  lineLength);	  String    sep    =    StringUtils.newStringUtf8(sep    +    ']');    	non-compiled	[CE]  ';'  expected	209	None	replace
56	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep  +  ']',  lineSeparator.length);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep  +  ']',  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(sep  +  ']',  lineSeparator.length);	  String    sep    =    StringUtils.newStringUtf8(sep    +    ']');    	non-compiled	[CE]  ';'  expected	209	None	replace
57	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(lineSeparator  +  ']');  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(lineSeparator  +  ']');  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(lineSeparator  +  ']');	  String    sep    =    StringUtils.newStringUtf8(sep    +    ']');    	non-compiled	[CE]  ';'  expected	209	None	replace
58	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep  +  ']',  urlSafe);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep  +  ']',  urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(sep  +  ']',  urlSafe);	  String    sep    =    StringUtils.newStringUtf8(sep    +    ']');    	non-compiled	[CE]  ';'  expected	209	None	replace
59	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.urlSafe  +  ']');  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.urlSafe  +  ']');  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(this.urlSafe  +  ']');	  String    sep    =    StringUtils.newStringUtf8(sep    +    ']');    	non-compiled	[CE]  ';'  expected	209	None	replace
60	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep  +  ']',  base64);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep  +  ']',  base64);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(sep  +  ']',  base64);	  String    sep    =    StringUtils.newStringUtf8(sep    +    ']');    	non-compiled	[CE]  ';'  expected	209	None	replace
61	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep  +  ']',  lineSeparator);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep  +  ']',  lineSeparator);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(sep  +  ']',  lineSeparator);	  String    sep    =    StringUtils.newStringUtf8(sep    +    ']');    	non-compiled	[CE]  ';'  expected	209	None	replace
62	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  &&  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe  &&  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe  &&  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    urlSafe    ||    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	98	None	replace
63	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  urlSafe  :  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  urlSafe  :  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  urlSafe  :  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    urlSafe    ||    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	98	None	replace
64	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  false  :  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  false  :  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  false  :  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    urlSafe    ||    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	98	None	replace
65	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  true  :  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  true  :  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  true  :  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    urlSafe    ||    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	98	None	replace
66	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  null  :  urlSafe  ||  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  null  :  urlSafe  ||  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  null  :  urlSafe  ||  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    urlSafe    ||    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	98	None	replace
67	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  true  :  ||  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  true  :  ||  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  true  :  ||  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    urlSafe    ||    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
68	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  null  :  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  null  :  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  null  :  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    urlSafe    ||    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	98	None	replace
69	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  lineSeparator));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  lineSeparator));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  lineSeparator));	  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator,    this.urlSafe));    	non-compiled	[CE]  ';'  expected	59	None	replace
70	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(lineSeparator,  this.urlSafe));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(lineSeparator,  this.urlSafe));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteUtf8(lineSeparator,  this.urlSafe));	  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator,    this.urlSafe));    	non-compiled	[CE]  ';'  expected	59	None	replace
71	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe,  lineSeparator));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe,  lineSeparator));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe,  lineSeparator));	  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator,    this.urlSafe));    	non-compiled	[CE]  ';'  expected	59	None	replace
72	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  this.urlSafe));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  this.urlSafe));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  this.urlSafe));	  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator,    this.urlSafe));    	non-compiled	[CE]  ';'  expected	59	None	replace
73	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.lineSeparator,  this.urlSafe));  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.lineSeparator,  this.urlSafe));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteUtf8(this.lineSeparator,  this.urlSafe));	  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator,    this.urlSafe));    	non-compiled	[CE]  ';'  expected	59	None	replace
74	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator,  this.urlSafe,  lineLength));  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator,  this.urlSafe,  lineLength));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(lineSeparator,  this.urlSafe,  lineLength));	  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator,    this.urlSafe));    	non-compiled	[CE]  ';'  expected	59	None	replace
75	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator,  this.urlSafe,  urlSafe));  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator,  this.urlSafe,  urlSafe));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(lineSeparator,  this.urlSafe,  urlSafe));	  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator,    this.urlSafe));    	non-compiled	[CE]  ';'  expected	59	None	replace
76	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator,  this.lineSeparator));  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator,  this.lineSeparator));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(lineSeparator,  this.lineSeparator));	  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator,    this.urlSafe));    	non-compiled	[CE]  ';'  expected	59	None	replace
77	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength  /  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength  /  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength  /  1);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	196	None	replace
78	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength  -  2);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength  -  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength  -  2);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	196	None	replace
79	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength  -  4);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength  -  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength  -  4);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	196	None	replace
80	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength  -  3);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength  -  3);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength  -  3);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	196	None	replace
81	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength  +  1);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength  +  1);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	196	None	replace
82	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  /  1);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  /  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  /  1);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	196	None	replace
83	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  /  2);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  /  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  /  2);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    lineLength    /    1);    	non-compiled	[CE]  ';'  expected	20	None	replace
84	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  lineLength  /  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  lineLength  /  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.lineSeparator,  lineLength  /  1);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    lineLength    /    1);    	non-compiled	[CE]  ';'  expected	20	None	replace
85	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  4  -  1);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  4  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  4  -  1);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    /    2    -    1);    	non-compiled	[CE]  ';'  expected	110	None	replace
86	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  3  -  1);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  3  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  3  -  1);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    /    2    -    1);    	non-compiled	[CE]  ';'  expected	110	None	replace
87	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  2  *  1);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  2  *  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  2  *  1);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    /    2    -    1);    	non-compiled	[CE]  ';'  expected	110	None	replace
88	[BUG]  [BUGGY]  this.encodeSize  =  2  +  this.lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  2  +  this.lineSeparator.length  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  2  +  this.lineSeparator.length  -  1;	  this.encodeSize    =    2    +    this.lineSeparator.length;    	non-compiled	[CE]  ';'  expected	99	None	replace
89	[BUG]  [BUGGY]  this.encodeSize  =  2  *  this.lineSeparator.length;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  2  *  this.lineSeparator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  2  *  this.lineSeparator.length;	  this.encodeSize    =    2    +    this.lineSeparator.length;    	non-compiled	[CE]  ';'  expected	99	None	replace
90	[BUG]  [BUGGY]  this.lineSize  =  2  +  this.lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSize  =  2  +  this.lineSeparator.length  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSize  =  2  +  this.lineSeparator.length  -  1;	  this.encodeSize    =    2    +    this.lineSeparator.length;    	non-compiled	[CE]  ';'  expected	99	None	replace
91	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  2);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  2);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    -    2);    	non-compiled	[CE]  ';'  expected	194	None	replace
92	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  4);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  4);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    -    2);    	non-compiled	[CE]  ';'  expected	194	None	replace
93	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  3);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  3);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  3);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    -    2);    	non-compiled	[CE]  ';'  expected	194	None	replace
94	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  2);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  2);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    -    2);    	non-compiled	[CE]  ';'  expected	194	None	replace
95	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  6);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  6);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  6);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    -    2);    	non-compiled	[CE]  ';'  expected	194	None	replace
96	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  2);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  2);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    -    2);    	non-compiled	[CE]  ';'  expected	194	None	replace
97	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  /  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  /  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  /  1);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	193	None	replace
98	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  4);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  4);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	193	None	replace
99	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  3);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  3);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  3);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	193	None	replace
100	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize  -  1);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize  -  1);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	193	None	replace
101	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  +  1);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  +  1);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	193	None	replace
102	[BUG]  [BUGGY]  this.encodeSize  -=  2;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  -=  2;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  -=  2;	  this.encodeSize    -=    1;    	non-compiled	[CE]  ';'  expected	6	None	replace
103	[BUG]  [BUGGY]  this.decodeSize  -=  1;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.decodeSize  -=  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.decodeSize  -=  1;	  this.encodeSize    -=    1;    	non-compiled	[CE]  ';'  expected	6	None	replace
104	[BUG]  [BUGGY]  this.encodeSize  -=  6;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  -=  6;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  -=  6;	  this.encodeSize    -=    1;    	non-compiled	[CE]  ';'  expected	6	None	replace
105	[BUG]  [BUGGY]  this.encodeSize  -=  8;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  -=  8;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  -=  8;	  this.encodeSize    -=    1;    	non-compiled	[CE]  ';'  expected	6	None	replace
106	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.DEFAULT_BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.DEFAULT_BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.DEFAULT_BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(Base64Utils.DEFAULT_BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	139	None	replace
107	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.DEFAULT_BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.DEFAULT_BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.DEFAULT_BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  1);	  System.arraycopy(Base64Utils.DEFAULT_BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	139	None	replace
108	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.DEFAULT_BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.DEFAULT_BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.DEFAULT_BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe);	  System.arraycopy(Base64Utils.DEFAULT_BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	139	None	replace
109	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.DEFAULT_BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.DEFAULT_BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.DEFAULT_BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe);	  System.arraycopy(Base64Utils.DEFAULT_BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	139	None	replace
110	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.DEFAULT_BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.DEFAULT_BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.DEFAULT_BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  1);	  System.arraycopy(Base64Utils.DEFAULT_BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	139	None	replace
111	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.DEFAULT_BASE64_SEPARATOR,  1,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.DEFAULT_BASE64_SEPARATOR,  1,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.DEFAULT_BASE64_SEPARATOR,  1,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Utils.DEFAULT_BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	139	None	replace
112	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.DEFAULT_BASE64_SEPARATOR,  0,  this.base64,  0,  lineLength);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.DEFAULT_BASE64_SEPARATOR,  0,  this.base64,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.DEFAULT_BASE64_SEPARATOR,  0,  this.base64,  0,  lineLength);	  System.arraycopy(Base64Utils.DEFAULT_BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	139	None	replace
113	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.DEFAULT_BIGDECIMAL_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.DEFAULT_BIGDECIMAL_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.DEFAULT_BIGDECIMAL_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Utils.DEFAULT_BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	139	None	replace
114	[BUG]  [BUGGY]  System.arraycopy(this.base64Byte,  0,  this.base64Separator,  0,  this.base64Length);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64Byte,  0,  this.base64Separator,  0,  this.base64Length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64Byte,  0,  this.base64Separator,  0,  this.base64Length);	  System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    this.base64Length);    	non-compiled	[CE]  ';'  expected	227	None	replace
115	[BUG]  [BUGGY]  System.arraycopy(this.base64Separator,  0,  this.base64Byte,  0,  this.base64Length);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64Separator,  0,  this.base64Byte,  0,  this.base64Length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64Separator,  0,  this.base64Byte,  0,  this.base64Length);	  System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    this.base64Length);    	non-compiled	[CE]  ';'  expected	227	None	replace
116	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.base64Separator,  0,  this.base64Length);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  this.base64Separator,  0,  this.base64Length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.base64Separator,  0,  this.base64Length);	  System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    this.base64Length);    	non-compiled	[CE]  ';'  expected	227	None	replace
117	[BUG]  [BUGGY]  System.arraycopy(this.base64Length,  0,  this.base64Separator,  0,  this.base64Length);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64Length,  0,  this.base64Separator,  0,  this.base64Length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64Length,  0,  this.base64Separator,  0,  this.base64Length);	  System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    this.base64Length);    	non-compiled	[CE]  ';'  expected	227	None	replace
118	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength  /  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength  /  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength  /  1);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	243	None	replace
119	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength  -  2);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength  -  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength  -  2);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	243	None	replace
120	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength  -  4);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength  -  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength  -  4);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	243	None	replace
121	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength  -  3);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength  -  3);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength  -  3);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	243	None	replace
122	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  /  1);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  /  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  /  1);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	243	None	replace
123	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength  +  1);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength  +  1);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	243	None	replace
124	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineSeparator.length  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineSeparator.length  -  1);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	37	None	replace
125	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  this.lineSeparator,  0,  lineSeparator.length);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	37	None	replace
126	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64Separator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64Separator,  0,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64Separator,  0,  lineSeparator.length);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	37	None	replace
127	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineSeparator.length  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineSeparator.length  +  1);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	37	None	replace
128	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  1,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  1,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  1,  this.lineSeparator,  0,  lineSeparator.length);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	37	None	replace
129	[BUG]  [BUGGY]  this.encodeSize  =  1  +  this.urlSafe  -  1;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  +  this.urlSafe  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  this.urlSafe  -  1;	  this.encodeSize    =    1    +    this.urlSafe;    	non-compiled	[CE]  ';'  expected	120	None	replace
130	[BUG]  [BUGGY]  this.encodeSize  =  1  +  this.lineSeparator;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  +  this.lineSeparator;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  this.lineSeparator;	  this.encodeSize    =    1    +    this.urlSafe;    	non-compiled	[CE]  ';'  expected	120	None	replace
131	[BUG]  [BUGGY]  this.encodeSize  =  1  +  lineSeparator;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  +  lineSeparator;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  lineSeparator;	  this.encodeSize    =    1    +    this.urlSafe;    	non-compiled	[CE]  ';'  expected	120	None	replace
132	[BUG]  [BUGGY]  this.encodeSize  =  1  +  this.base64;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  +  this.base64;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  this.base64;	  this.encodeSize    =    1    +    this.urlSafe;    	non-compiled	[CE]  ';'  expected	120	None	replace
133	[BUG]  [BUGGY]  this.encodeSize  =  1  -  this.urlSafe;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  -  this.urlSafe;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  -  this.urlSafe;	  this.encodeSize    =    1    +    this.urlSafe;    	non-compiled	[CE]  ';'  expected	120	None	replace
134	[BUG]  [BUGGY]  this.urlSafe  =  1  +  this.encodeSize;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.urlSafe  =  1  +  this.encodeSize;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.urlSafe  =  1  +  this.encodeSize;	  this.encodeSize    =    1    +    this.urlSafe;    	non-compiled	[CE]  ';'  expected	120	None	replace
135	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep,  lineLength  +  1);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep,  lineLength  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(sep,  lineLength  +  1);	  String    sep    =    StringUtils.newStringUtf8(sep,    lineLength);    	non-compiled	[CE]  ';'  expected	164	None	replace
136	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.urlSafe,  lineLength);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.urlSafe,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(this.urlSafe,  lineLength);	  String    sep    =    StringUtils.newStringUtf8(sep,    lineLength);    	non-compiled	[CE]  ';'  expected	164	None	replace
137	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep,  lineLength  -  1);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(sep,  lineLength  -  1);	  String    sep    =    StringUtils.newStringUtf8(sep,    lineLength);    	non-compiled	[CE]  ';'  expected	164	None	replace
138	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(lineSeparator,  lineLength);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(lineSeparator,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(lineSeparator,  lineLength);	  String    sep    =    StringUtils.newStringUtf8(sep,    lineLength);    	non-compiled	[CE]  ';'  expected	164	None	replace
139	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep,  0,  lineLength);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(sep,  0,  lineLength);	  String    sep    =    StringUtils.newStringUtf8(sep,    lineLength);    	non-compiled	[CE]  ';'  expected	164	None	replace
140	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep,  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep,  this.lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(sep,  this.lineSeparator.length);	  String    sep    =    StringUtils.newStringUtf8(sep,    lineLength);    	non-compiled	[CE]  ';'  expected	164	None	replace
141	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep,  0);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep,  0);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(sep,  0);	  String    sep    =    StringUtils.newStringUtf8(sep,    lineLength);    	non-compiled	[CE]  ';'  expected	164	None	replace
142	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(sep,  lineSeparator.length);	  String    sep    =    StringUtils.newStringUtf8(sep,    lineLength);    	non-compiled	[CE]  ';'  expected	164	None	replace
143	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.lineSeparator));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.lineSeparator));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteUtf8(this.lineSeparator));	  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator));    	non-compiled	[CE]  ';'  expected	61	None	replace
144	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.lineSeparator.length));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.lineSeparator.length));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.lineSeparator.length));	  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator));    	non-compiled	[CE]  ';'  expected	61	None	replace
145	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  lineLength));  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  lineLength));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  lineLength));	  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator));    	non-compiled	[CE]  ';'  expected	61	None	replace
146	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  this.lineSeparator.length));  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  this.lineSeparator.length));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  this.lineSeparator.length));	  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator));    	non-compiled	[CE]  ';'  expected	61	None	replace
147	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  lineSeparator.length));  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  lineSeparator.length));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  lineSeparator.length));	  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator));    	non-compiled	[CE]  ';'  expected	61	None	replace
148	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newLineByte(this.lineSeparator));  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newLineByte(this.lineSeparator));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newLineByte(this.lineSeparator));	  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator));    	non-compiled	[CE]  ';'  expected	61	None	replace
149	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),  0,  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),  0,  this.lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),  0,  this.lineSeparator.length);	  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator));    	non-compiled	[CE]  ';'  expected	61	None	replace
150	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteArrayUtf8(this.lineSeparator));  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteArrayUtf8(this.lineSeparator));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteArrayUtf8(this.lineSeparator));	  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator));    	non-compiled	[CE]  ';'  expected	61	None	replace
151	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  +  1);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  +  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	81	None	replace
152	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	81	None	replace
153	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  *  4  +  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  *  4  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  *  4  +  1);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    lineLength    *    4);    	non-compiled	[CE]  ';'  expected	197	None	replace
154	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  *  2);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  *  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  *  2);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    lineLength    *    4);    	non-compiled	[CE]  ';'  expected	197	None	replace
155	[BUG]  [BUGGY]  System.arraycopy(base64Byte,  0,  this.base64Separator,  0,  lineLength  /  1);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64Byte,  0,  this.base64Separator,  0,  lineLength  /  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64Byte,  0,  this.base64Separator,  0,  lineLength  /  1);	  System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	182	None	replace
156	[BUG]  [BUGGY]  System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  lineLength  -  1);	  System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	182	None	replace
157	[BUG]  [BUGGY]  System.arraycopy(this.base64Byte,  0,  this.base64Separator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64Byte,  0,  this.base64Separator,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64Byte,  0,  this.base64Separator,  0,  lineLength  -  1);	  System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	182	None	replace
158	[BUG]  [BUGGY]  System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  lineLength  /  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  lineLength  /  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  lineLength  /  1);	  System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	182	None	replace
159	[BUG]  [BUGGY]  System.arraycopy(base64Byte,  0,  this.base64Separator,  0,  lineLength  -  2);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64Byte,  0,  this.base64Separator,  0,  lineLength  -  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64Byte,  0,  this.base64Separator,  0,  lineLength  -  2);	  System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	182	None	replace
160	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.base64Separator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  this.base64Separator,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.base64Separator,  0,  lineLength  -  1);	  System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	182	None	replace
161	[BUG]  [BUGGY]  System.arraycopy(base64Byte,  0,  this.base64Separator,  0,  lineLength  -  4);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64Byte,  0,  this.base64Separator,  0,  lineLength  -  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64Byte,  0,  this.base64Separator,  0,  lineLength  -  4);	  System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	182	None	replace
162	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  3  +  1);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  3  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  3  +  1);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    /    2    +    1);    	non-compiled	[CE]  ';'  expected	107	None	replace
163	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  *  2  +  1);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  *  2  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  *  2  +  1);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    /    2    +    1);    	non-compiled	[CE]  ';'  expected	107	None	replace
164	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  2  +  4);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  2  +  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  2  +  4);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    /    2    +    1);    	non-compiled	[CE]  ';'  expected	107	None	replace
165	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  this.lineLength  -  1);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  this.lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.lineSeparator,  0,  this.lineLength  -  1);	  System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	232	None	replace
166	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.lineSeparator,  0,  this.lineLength  -  1);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  this.lineSeparator,  0,  this.lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.lineSeparator,  0,  this.lineLength  -  1);	  System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	232	None	replace
167	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  1);	  System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	232	None	replace
168	[BUG]  [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.lineLength  /  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.lineLength  /  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.lineLength  /  1);	  System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	232	None	replace
169	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  :  expected  [FE]            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  :  expected	187	None	replace
170	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  ||  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe  ||  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe  ||  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	187	None	replace
171	[BUG]  [BUGGY]  this.encodeSize  =  1  +  this.lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  +  this.lineSeparator.length  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  this.lineSeparator.length  -  1;	  this.encodeSize    =    1    +    lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	119	None	replace
172	[BUG]  [BUGGY]  this.encodeSize  =  1  +  this.urlSafe?  lineSeparator.length  -  1  :  0;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  +  this.urlSafe?  lineSeparator.length  -  1  :  0;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  this.urlSafe?  lineSeparator.length  -  1  :  0;	  this.encodeSize    =    1    +    lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	119	None	replace
173	[BUG]  [BUGGY]  this.encodeSize  =  1  +  this.urlSafe?  lineSeparator.length  :  1;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  +  this.urlSafe?  lineSeparator.length  :  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  this.urlSafe?  lineSeparator.length  :  1;	  this.encodeSize    =    1    +    lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	119	None	replace
174	[BUG]  [BUGGY]  this.encodeSize  =  1  +  this.urlSafe?  lineSeparator.length  -  1  :  1;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  +  this.urlSafe?  lineSeparator.length  -  1  :  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  this.urlSafe?  lineSeparator.length  -  1  :  1;	  this.encodeSize    =    1    +    lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	119	None	replace
175	[BUG]  [BUGGY]  this.decodeSize  =  1  +  this.lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.decodeSize  =  1  +  this.lineSeparator.length  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.decodeSize  =  1  +  this.lineSeparator.length  -  1;	  this.encodeSize    =    1    +    lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	119	None	replace
176	[BUG]  [BUGGY]  this.encodeSize  =  1  +  lineSeparator.length  /  1;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  +  lineSeparator.length  /  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  lineSeparator.length  /  1;	  this.encodeSize    =    1    +    lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	119	None	replace
177	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(lineSeparator));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(lineSeparator));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteUtf8(lineSeparator));	  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator));    	non-compiled	[CE]  ';'  expected	60	None	replace
178	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator,  0,  this.lineSeparator.length));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator,  0,  this.lineSeparator.length));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(lineSeparator,  0,  this.lineSeparator.length));	  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator));    	non-compiled	[CE]  ';'  expected	60	None	replace
179	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newLineByte(lineSeparator));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newLineByte(lineSeparator));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newLineByte(lineSeparator));	  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator));    	non-compiled	[CE]  ';'  expected	60	None	replace
180	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator,  0,  lineSeparator.length));  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator,  0,  lineSeparator.length));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(lineSeparator,  0,  lineSeparator.length));	  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator));    	non-compiled	[CE]  ';'  expected	60	None	replace
181	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newLongUtf8(this.lineSeparator));  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newLongUtf8(this.lineSeparator));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newLongUtf8(this.lineSeparator));	  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator));    	non-compiled	[CE]  ';'  expected	60	None	replace
182	[BUG]  [BUGGY]  this.encodeSize  =  3  +  this.lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  3  +  this.lineSeparator.length  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  3  +  this.lineSeparator.length  -  1;	  this.encodeSize    =    3    +    lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	104	None	replace
183	[BUG]  [BUGGY]  this.encodeSize  =  3  +  this.urlSafe?  lineSeparator.length  -  1  :  0;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  3  +  this.urlSafe?  lineSeparator.length  -  1  :  0;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  3  +  this.urlSafe?  lineSeparator.length  -  1  :  0;	  this.encodeSize    =    3    +    lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	104	None	replace
184	[BUG]  [BUGGY]  this.encodeSize  =  3  +  this.urlSafe?  lineSeparator.length  :  1;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  3  +  this.urlSafe?  lineSeparator.length  :  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  3  +  this.urlSafe?  lineSeparator.length  :  1;	  this.encodeSize    =    3    +    lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	104	None	replace
185	[BUG]  [BUGGY]  this.encodeSize  =  3  *  lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  3  *  lineSeparator.length  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  3  *  lineSeparator.length  -  1;	  this.encodeSize    =    3    +    lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	104	None	replace
186	[BUG]  [BUGGY]  this.encodeSize  =  3  +  this.base64Separator.length  -  1;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  3  +  this.base64Separator.length  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  3  +  this.base64Separator.length  -  1;	  this.encodeSize    =    3    +    lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	104	None	replace
187	[BUG]  [BUGGY]  this.encodeSize  =  3  +  this.urlSafe  -  1;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  3  +  this.urlSafe  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  3  +  this.urlSafe  -  1;	  this.encodeSize    =    3    +    lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	104	None	replace
188	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  lineSeparator,  urlSafe));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  lineSeparator,  urlSafe));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  lineSeparator,  urlSafe));	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,    lineSeparator));    	non-compiled	[CE]  ';'  expected	58	None	replace
189	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  lineSeparator,  this.urlSafe));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  lineSeparator,  this.urlSafe));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  lineSeparator,  this.urlSafe));	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,    lineSeparator));    	non-compiled	[CE]  ';'  expected	58	None	replace
190	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  0,  lineSeparator.length));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  0,  lineSeparator.length));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  0,  lineSeparator.length));	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,    lineSeparator));    	non-compiled	[CE]  ';'  expected	58	None	replace
191	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64,  lineSeparator));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64,  lineSeparator));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.base64,  lineSeparator));	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,    lineSeparator));    	non-compiled	[CE]  ';'  expected	58	None	replace
192	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	  System.arraycopy(base64,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	203	None	replace
193	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	  System.arraycopy(base64,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	203	None	replace
194	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);	  System.arraycopy(base64,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	203	None	replace
195	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);	  System.arraycopy(base64,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	203	None	replace
196	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.base64,  0,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.base64,  0,  lineSeparator.length  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.base64,  0,  lineSeparator.length  -  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	51	None	replace
197	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.base64,  0,  lineLength);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.base64,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.base64,  0,  lineLength);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	51	None	replace
198	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.base64,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.base64,  0,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.base64,  0,  lineSeparator.length);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	51	None	replace
199	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.base64,  0,  lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.base64,  0,  lineSeparator.length  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.base64,  0,  lineSeparator.length  +  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	51	None	replace
200	[BUG]  [BUGGY]  this.encodeSize  -=  0;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  -=  0;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  -=  0;	  this.encodeSize    =    0;    	non-compiled	[CE]  ';'  expected	1	None	replace
201	[BUG]  [BUGGY]  this.encodeSize  =  -1;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  -1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  -1;	  this.encodeSize    =    0;    	non-compiled	[CE]  ';'  expected	1	None	replace
202	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.urlSafe.length));  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.urlSafe.length));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.urlSafe.length));	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,    0,    this.lineSeparator.length));    	non-compiled	[CE]  ';'  expected	64	None	replace
203	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64,  0,  this.lineSeparator.length));  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64,  0,  this.lineSeparator.length));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.base64,  0,  this.lineSeparator.length));	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,    0,    this.lineSeparator.length));    	non-compiled	[CE]  ';'  expected	64	None	replace
204	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.decodeTable,  0,  this.lineSeparator.length));  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.decodeTable,  0,  this.lineSeparator.length));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.decodeTable,  0,  this.lineSeparator.length));	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,    0,    this.lineSeparator.length));    	non-compiled	[CE]  ';'  expected	64	None	replace
205	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.decodeSize,  0,  this.lineSeparator.length));  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.decodeSize,  0,  this.lineSeparator.length));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.decodeSize,  0,  this.lineSeparator.length));	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,    0,    this.lineSeparator.length));    	non-compiled	[CE]  ';'  expected	64	None	replace
206	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64Name,  0,  this.lineSeparator.length));  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64Name,  0,  this.lineSeparator.length));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.base64Name,  0,  this.lineSeparator.length));	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,    0,    this.lineSeparator.length));    	non-compiled	[CE]  ';'  expected	64	None	replace
207	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  0,  this.lineSeparator.length  -  1));  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  0,  this.lineSeparator.length  -  1));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  0,  this.lineSeparator.length  -  1));	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,    0,    this.lineSeparator.length));    	non-compiled	[CE]  ';'  expected	64	None	replace
208	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(base64,  0,  this.lineSeparator.length));  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(base64,  0,  this.lineSeparator.length));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(base64,  0,  this.lineSeparator.length));	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,    0,    this.lineSeparator.length));    	non-compiled	[CE]  ';'  expected	64	None	replace
209	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.lineSeparator,  0,  urlSafe);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	127	None	replace
210	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	127	None	replace
211	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  this.lineLength);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	143	None	replace
212	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.baseSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.baseSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.baseSeparator,  0,  this.lineLength);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	143	None	replace
213	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),  0,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	66	None	replace
214	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.lineSeparator),  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.lineSeparator),  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteUtf8(this.lineSeparator),  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	66	None	replace
215	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64,  lineSeparator),  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64,  lineSeparator),  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.base64,  lineSeparator),  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	66	None	replace
216	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.decodeSeparator),  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.decodeSeparator),  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.decodeSeparator),  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	66	None	replace
217	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64,  0,  this.base64,  0,  lineLength);  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64,  0,  this.base64,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.base64,  0,  this.base64,  0,  lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	66	None	replace
218	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [CE]  :  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  :  expected	94	None	replace
219	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  ||  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe  ||  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe  ||  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	94	None	replace
220	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  1,  lineSeparator,  0,  lineLength);  [CE]  :  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  1,  lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  1,  lineSeparator,  0,  lineLength);	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  :  expected	94	None	replace
221	[BUG]  [BUGGY]  System.arraycopy(Base64Path,  0,  this.base64Path,  0,  lineLength);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Path,  0,  this.base64Path,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Path,  0,  this.base64Path,  0,  lineLength);	  System.arraycopy(base64Path,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	175	None	replace
222	[BUG]  [BUGGY]  System.arraycopy(Base64Path,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Path,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Path,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(base64Path,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	175	None	replace
223	[BUG]  [BUGGY]  System.arraycopy(base64Path,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64Path,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64Path,  0,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(base64Path,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	175	None	replace
224	[BUG]  [BUGGY]  System.arraycopy(this.base64Path,  0,  this.base64Path,  0,  lineLength);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64Path,  0,  this.base64Path,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64Path,  0,  this.base64Path,  0,  lineLength);	  System.arraycopy(base64Path,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	175	None	replace
225	[BUG]  [BUGGY]  System.arraycopy(this.base64Path,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64Path,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64Path,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(base64Path,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	175	None	replace
226	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  -  3);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  -  3);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  -  3);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    lineSeparator.length    -    2);    	non-compiled	[CE]  ';'  expected	217	None	replace
227	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  /  2);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  /  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  /  2);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    lineSeparator.length    -    2);    	non-compiled	[CE]  ';'  expected	217	None	replace
228	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineSeparator.length  -  2);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineSeparator.length  -  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineSeparator.length  -  2);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    lineSeparator.length    -    2);    	non-compiled	[CE]  ';'  expected	217	None	replace
229	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  +  2);  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  +  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  +  2);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    lineSeparator.length    -    2);    	non-compiled	[CE]  ';'  expected	217	None	replace
230	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  /  3);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  /  3);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  /  3);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineLength    /    4);    	non-compiled	[CE]  ';'  expected	255	None	replace
231	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  /  4  +  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  /  4  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  /  4  +  1);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineLength    /    4);    	non-compiled	[CE]  ';'  expected	255	None	replace
232	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  *  4);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  *  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  *  4);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineLength    /    4);    	non-compiled	[CE]  ';'  expected	255	None	replace
233	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  -  4);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  -  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  -  4);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineLength    /    4);    	non-compiled	[CE]  ';'  expected	255	None	replace
234	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength):  1;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength):  1;  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength):  1;	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength):    0;    	non-compiled	[CE]  ';'  expected	95	None	replace
235	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength):  0;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength):  0;  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength):  0;	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength):    0;    	non-compiled	[CE]  ';'  expected	95	None	replace
236	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength):  0;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength):  0;  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength):  0;	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength):    0;    	non-compiled	[CE]  ';'  expected	95	None	replace
237	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength):  -1;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength):  -1;  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength):  -1;	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength):    0;    	non-compiled	[CE]  ';'  expected	95	None	replace
238	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength):  0;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength):  0;  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength):  0;	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength):    0;    	non-compiled	[CE]  ';'  expected	95	None	replace
239	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  1):  0;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  1):  0;  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  1):  0;	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength):    0;    	non-compiled	[CE]  ';'  expected	95	None	replace
240	[BUG]  [BUGGY]  this.encodeSize  =  1  *  this.lineSeparator.length;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  *  this.lineSeparator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  *  this.lineSeparator.length;	  this.encodeSize    =    1    *    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	8	None	replace
241	[BUG]  [BUGGY]  this.encodeSize  =  1  *  this.urlSafe;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  *  this.urlSafe;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  *  this.urlSafe;	  this.encodeSize    =    1    *    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	8	None	replace
242	[BUG]  [BUGGY]  this.encodeSize  =  1  *  this.base64Separator.length;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  *  this.base64Separator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  *  this.base64Separator.length;	  this.encodeSize    =    1    *    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	8	None	replace
243	[BUG]  [BUGGY]  this.encodeSize  =  1  /  lineSeparator.length;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  /  lineSeparator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  /  lineSeparator.length;	  this.encodeSize    =    1    *    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	8	None	replace
244	[BUG]  [BUGGY]  this.encodeSize  =  1  *  lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  *  lineSeparator.length  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  *  lineSeparator.length  -  1;	  this.encodeSize    =    1    *    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	8	None	replace
245	[BUG]  [BUGGY]  this.encodeSize  =  1L  *  lineSeparator.length;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1L  *  lineSeparator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1L  *  lineSeparator.length;	  this.encodeSize    =    1    *    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	8	None	replace
246	[BUG]  [BUGGY]  this.decodeSize  =  1  *  this.lineSeparator.length;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.decodeSize  =  1  *  this.lineSeparator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.decodeSize  =  1  *  this.lineSeparator.length;	  this.encodeSize    =    1    *    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	8	None	replace
247	[BUG]  [BUGGY]  this.encodeSize  =  1  +  this.lineSeparator.length  -  4;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  +  this.lineSeparator.length  -  4;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  this.lineSeparator.length  -  4;	  this.encodeSize    =    1    +    lineSeparator.length    -    4;    	non-compiled	[CE]  ';'  expected	176	None	replace
248	[BUG]  [BUGGY]  this.encodeSize  =  1  +  lineSeparator.length  /  4;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  +  lineSeparator.length  /  4;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  lineSeparator.length  /  4;	  this.encodeSize    =    1    +    lineSeparator.length    -    4;    	non-compiled	[CE]  ';'  expected	176	None	replace
249	[BUG]  [BUGGY]  this.encodeSize  =  1  +  this.urlSafe?  lineSeparator.length  -  4  :  0;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  +  this.urlSafe?  lineSeparator.length  -  4  :  0;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  this.urlSafe?  lineSeparator.length  -  4  :  0;	  this.encodeSize    =    1    +    lineSeparator.length    -    4;    	non-compiled	[CE]  ';'  expected	176	None	replace
250	[BUG]  [BUGGY]  this.encodeSize  =  1  +  lineSeparator.length  -  3;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  +  lineSeparator.length  -  3;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  lineSeparator.length  -  3;	  this.encodeSize    =    1    +    lineSeparator.length    -    4;    	non-compiled	[CE]  ';'  expected	176	None	replace
251	[BUG]  [BUGGY]  this.encodeSize  =  1  +  this.urlSafe?  lineSeparator.length  :  4;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  +  this.urlSafe?  lineSeparator.length  :  4;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  this.urlSafe?  lineSeparator.length  :  4;	  this.encodeSize    =    1    +    lineSeparator.length    -    4;    	non-compiled	[CE]  ';'  expected	176	None	replace
252	[BUG]  [BUGGY]  this.encodeSize  =  4  *  this.base64Separator.length  -  1;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  4  *  this.base64Separator.length  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  4  *  this.base64Separator.length  -  1;	  this.encodeSize    =    4    *    this.base64Separator.length;    	non-compiled	[CE]  ';'  expected	14	None	replace
253	[BUG]  [BUGGY]  this.encodeSize  =  4  *  this.base64Separator.length  +  1;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  4  *  this.base64Separator.length  +  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  4  *  this.base64Separator.length  +  1;	  this.encodeSize    =    4    *    this.base64Separator.length;    	non-compiled	[CE]  ';'  expected	14	None	replace
254	[BUG]  [BUGGY]  this.encodeSize  =  3  *  this.base64Separator.length;  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  3  *  this.base64Separator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  3  *  this.base64Separator.length;	  this.encodeSize    =    4    *    this.base64Separator.length;    	non-compiled	[CE]  ';'  expected	14	None	replace
255	[BUG]  [BUGGY]  this.encodeSize  =  2  *  this.base64Separator.length;  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  2  *  this.base64Separator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  2  *  this.base64Separator.length;	  this.encodeSize    =    4    *    this.base64Separator.length;    	non-compiled	[CE]  ';'  expected	14	None	replace
256	[BUG]  [BUGGY]  this.encodeSize  =  4  *  this.base64Separator.length  -  2;  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  4  *  this.base64Separator.length  -  2;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  4  *  this.base64Separator.length  -  2;	  this.encodeSize    =    4    *    this.base64Separator.length;    	non-compiled	[CE]  ';'  expected	14	None	replace
257	[BUG]  [BUGGY]  this.encodeSize  =  0  *  this.base64Separator.length;  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  0  *  this.base64Separator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  0  *  this.base64Separator.length;	  this.encodeSize    =    4    *    this.base64Separator.length;    	non-compiled	[CE]  ';'  expected	14	None	replace
258	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  -  2);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  -  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  -  2);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineLength    /    2);    	non-compiled	[CE]  ';'  expected	218	None	replace
259	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  /  2  +  1);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  /  2  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  /  2  +  1);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineLength    /    2);    	non-compiled	[CE]  ';'  expected	218	None	replace
260	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  *  2);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  *  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  *  2);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineLength    /    2);    	non-compiled	[CE]  ';'  expected	218	None	replace
261	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.lineSeparator.length);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator.length);    	non-compiled	[CE]  ')'  expected	63	None	replace
262	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.urlSafe.length);  [CE]  ')'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.urlSafe.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.urlSafe.length);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator.length);    	non-compiled	[CE]  ')'  expected	63	None	replace
263	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),  0,  this.urlSafe.length);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),  0,  this.urlSafe.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),  0,  this.urlSafe.length);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator.length);    	non-compiled	[CE]  ';'  expected	63	None	replace
264	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  lineSeparator.length);  [CE]  ')'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  lineSeparator.length);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator.length);    	non-compiled	[CE]  ')'  expected	63	None	replace
265	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe),  0,  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe),  0,  this.lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe),  0,  this.lineSeparator.length);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator.length);    	non-compiled	[CE]  ';'  expected	63	None	replace
266	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  ')'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteUtf8(this.lineSeparator,  0,  this.lineSeparator.length);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator.length);    	non-compiled	[CE]  ')'  expected	63	None	replace
267	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator,  0,  this.lineSeparator.length);  [CE]  ')'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(lineSeparator,  0,  this.lineSeparator.length);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator.length);    	non-compiled	[CE]  ')'  expected	63	None	replace
268	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize  +  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize  +  1);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	241	None	replace
269	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.encodeSize);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.encodeSize);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.encodeSize);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	241	None	replace
270	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	241	None	replace
271	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.DEFAULT_BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.DEFAULT_BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.DEFAULT_BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	241	None	replace
272	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  2);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  2);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	82	None	replace
273	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  4);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  4);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	82	None	replace
274	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  3);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  3);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  3);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	82	None	replace
275	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  6);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  6);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  6);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	82	None	replace
276	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  +  2);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  +  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  +  2);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	113	None	replace
277	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  +  4);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  +  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  +  4);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	113	None	replace
278	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  +  3);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  +  3);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  +  3);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	113	None	replace
279	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  +  6);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  +  6);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  +  6);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	113	None	replace
280	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  +  5);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  +  5);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  +  5);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	113	None	replace
281	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  this.lineSeparator,  0,  this.lineSeparator.length);	  System.arraycopy(Base64Separator.DEFAULT,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	114	None	replace
282	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(Base64Separator.DEFAULT,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	114	None	replace
283	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  this.lineSeparator,  0,  lineLength  -  1);	  System.arraycopy(Base64Separator.DEFAULT,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	114	None	replace
284	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  this.lineSeparator,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  this.lineSeparator,  0,  lineLength  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  this.lineSeparator,  0,  lineLength  +  1);	  System.arraycopy(Base64Separator.DEFAULT,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	114	None	replace
285	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  lineSeparator,  0,  this.lineLength);	  System.arraycopy(Base64Separator.DEFAULT,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	114	None	replace
286	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  this.lineSeparator,  0,  lineLength  -  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  this.lineSeparator,  0,  lineLength  -  this.lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  this.lineSeparator,  0,  lineLength  -  this.lineSeparator.length);	  System.arraycopy(Base64Separator.DEFAULT,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	114	None	replace
287	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.base64,  lineLength);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.base64,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(this.base64,  lineLength);	  String    sep    =    StringUtils.newStringUtf8(this.base64);    	non-compiled	[CE]  ';'  expected	238	None	replace
288	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.base64,  lineSeparator);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.base64,  lineSeparator);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(this.base64,  lineSeparator);	  String    sep    =    StringUtils.newStringUtf8(this.base64);    	non-compiled	[CE]  ';'  expected	238	None	replace
289	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.base64,  lineSeparator.length);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.base64,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(this.base64,  lineSeparator.length);	  String    sep    =    StringUtils.newStringUtf8(this.base64);    	non-compiled	[CE]  ';'  expected	238	None	replace
290	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.base64,  this.decodeSize);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.base64,  this.decodeSize);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(this.base64,  this.decodeSize);	  String    sep    =    StringUtils.newStringUtf8(this.base64);    	non-compiled	[CE]  ';'  expected	238	None	replace
291	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.base64,  this.urlSafe);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.base64,  this.urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(this.base64,  this.urlSafe);	  String    sep    =    StringUtils.newStringUtf8(this.base64);    	non-compiled	[CE]  ';'  expected	238	None	replace
292	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.base64,  this.lineSeparator);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.base64,  this.lineSeparator);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(this.base64,  this.lineSeparator);	  String    sep    =    StringUtils.newStringUtf8(this.base64);    	non-compiled	[CE]  ';'  expected	238	None	replace
293	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.base64,  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.base64,  this.lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(this.base64,  this.lineSeparator.length);	  String    sep    =    StringUtils.newStringUtf8(this.base64);    	non-compiled	[CE]  ';'  expected	238	None	replace
294	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.lineSeparator);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.lineSeparator);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(this.lineSeparator);	  String    sep    =    StringUtils.newStringUtf8(this.base64);    	non-compiled	[CE]  ';'  expected	238	None	replace
295	[BUG]  [BUGGY]  this.encodeSize  =  2  +  this.urlSafe?  lineSeparator.length  -  1  :  0;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  2  +  this.urlSafe?  lineSeparator.length  -  1  :  0;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  2  +  this.urlSafe?  lineSeparator.length  -  1  :  0;	  this.encodeSize    =    2    +    lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	100	None	replace
296	[BUG]  [BUGGY]  this.encodeSize  =  2  *  lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  2  *  lineSeparator.length  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  2  *  lineSeparator.length  -  1;	  this.encodeSize    =    2    +    lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	100	None	replace
297	[BUG]  [BUGGY]  this.encodeSize  =  2  +  this.urlSafe?  lineSeparator.length  :  1;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  2  +  this.urlSafe?  lineSeparator.length  :  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  2  +  this.urlSafe?  lineSeparator.length  :  1;	  this.encodeSize    =    2    +    lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	100	None	replace
298	[BUG]  [BUGGY]  this.encodeSize  =  1  +  this.lineSeparator.length  -  2;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  +  this.lineSeparator.length  -  2;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  this.lineSeparator.length  -  2;	  this.encodeSize    =    1    +    lineSeparator.length    -    2;    	non-compiled	[CE]  ';'  expected	123	None	replace
299	[BUG]  [BUGGY]  this.encodeSize  =  1  +  this.urlSafe?  lineSeparator.length  -  2  :  0;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  +  this.urlSafe?  lineSeparator.length  -  2  :  0;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  this.urlSafe?  lineSeparator.length  -  2  :  0;	  this.encodeSize    =    1    +    lineSeparator.length    -    2;    	non-compiled	[CE]  ';'  expected	123	None	replace
300	[BUG]  [BUGGY]  this.encodeSize  =  1  +  lineSeparator.length  /  2;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  +  lineSeparator.length  /  2;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  lineSeparator.length  /  2;	  this.encodeSize    =    1    +    lineSeparator.length    -    2;    	non-compiled	[CE]  ';'  expected	123	None	replace
301	[BUG]  [BUGGY]  this.encodeSize  =  1  +  this.urlSafe?  lineSeparator.length  :  2;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  +  this.urlSafe?  lineSeparator.length  :  2;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  this.urlSafe?  lineSeparator.length  :  2;	  this.encodeSize    =    1    +    lineSeparator.length    -    2;    	non-compiled	[CE]  ';'  expected	123	None	replace
302	[BUG]  [BUGGY]  this.encodeSize  =  4  *  this.lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  4  *  this.lineSeparator.length  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  4  *  this.lineSeparator.length  -  1;	  this.encodeSize    =    4    +    this.lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	134	None	replace
303	[BUG]  [BUGGY]  this.encodeSize  =  0  +  this.lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  0  +  this.lineSeparator.length  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  0  +  this.lineSeparator.length  -  1;	  this.encodeSize    =    4    +    this.lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	134	None	replace
304	[BUG]  [BUGGY]  this.lineSize  =  4  +  this.lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSize  =  4  +  this.lineSeparator.length  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSize  =  4  +  this.lineSeparator.length  -  1;	  this.encodeSize    =    4    +    this.lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	134	None	replace
305	[BUG]  [BUGGY]  this.lineSeparator.length  =  4  +  this.lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator.length  =  4  +  this.lineSeparator.length  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator.length  =  4  +  this.lineSeparator.length  -  1;	  this.encodeSize    =    4    +    this.lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	134	None	replace
306	[BUG]  [BUGGY]  this.lineSeparator.size  =  4  +  this.lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator.size  =  4  +  this.lineSeparator.length  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator.size  =  4  +  this.lineSeparator.length  -  1;	  this.encodeSize    =    4    +    this.lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	134	None	replace
307	[BUG]  [BUGGY]  this.lineSize  =  0  +  this.lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSize  =  0  +  this.lineSeparator.length  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSize  =  0  +  this.lineSeparator.length  -  1;	  this.encodeSize    =    4    +    this.lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	134	None	replace
308	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);	  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	90	None	replace
309	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  lineSeparator,  0,  this.urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  lineSeparator,  0,  this.urlSafe);	  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	90	None	replace
310	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.urlSafe,  0,  lineLength);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.urlSafe,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.urlSafe,  0,  lineLength);	  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	90	None	replace
311	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe  -  1);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe  -  1);	  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	90	None	replace
312	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  1,  this.lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  1,  this.lineSeparator,  0,  this.urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  1,  this.lineSeparator,  0,  this.urlSafe);	  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	90	None	replace
313	[BUG]  [BUGGY]  this.encodeSize  =  1  -  lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  -  lineSeparator.length  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  -  lineSeparator.length  -  1;	  this.encodeSize    =    1    -    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	240	None	replace
314	[BUG]  [BUGGY]  this.encodeSize  =  1  -  lineSeparator.length  +  1;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  -  lineSeparator.length  +  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  -  lineSeparator.length  +  1;	  this.encodeSize    =    1    -    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	240	None	replace
315	[BUG]  [BUGGY]  this.encodeSize  =  1  -  lineSeparator.length  -  2;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  -  lineSeparator.length  -  2;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  -  lineSeparator.length  -  2;	  this.encodeSize    =    1    -    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	240	None	replace
316	[BUG]  [BUGGY]  this.encodeSize  =  1  -  this.lineSeparator.length;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  -  this.lineSeparator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  -  this.lineSeparator.length;	  this.encodeSize    =    1    -    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	240	None	replace
317	[BUG]  [BUGGY]  this.encodeSize  =  1  -  lineSeparator.length  -  4;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  -  lineSeparator.length  -  4;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  -  lineSeparator.length  -  4;	  this.encodeSize    =    1    -    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	240	None	replace
318	[BUG]  [BUGGY]  this.encodeSize  =  1  -  lineLength;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  -  lineLength;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  -  lineLength;	  this.encodeSize    =    1    -    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	240	None	replace
319	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe),  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe),  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe),  0,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	71	None	replace
320	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(lineSeparator),  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(lineSeparator),  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteUtf8(lineSeparator),  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	71	None	replace
321	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ')'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteUtf8(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	71	None	replace
322	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ')'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	71	None	replace
323	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ')'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteUtf8(lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	71	None	replace
324	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.lineSeparator),  0,  this.urlSafe,  0,  lineLength);  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.lineSeparator),  0,  this.urlSafe,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteUtf8(this.lineSeparator),  0,  this.urlSafe,  0,  lineLength);	  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	71	None	replace
325	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.decodeTable),  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.decodeTable),  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteUtf8(this.decodeTable),  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	71	None	replace
326	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  /  4);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  /  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  /  4);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    lineSeparator.length    -    4);    	non-compiled	[CE]  ';'  expected	250	None	replace
327	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  -  6);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  -  6);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  -  6);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    lineSeparator.length    -    4);    	non-compiled	[CE]  ';'  expected	250	None	replace
328	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  -  5);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  -  5);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  -  5);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    lineSeparator.length    -    4);    	non-compiled	[CE]  ';'  expected	250	None	replace
329	[BUG]  [BUGGY]  System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  this.base64Length  -  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  this.base64Length  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  this.base64Length  -  1);	  System.arraycopy(Base64Byte,    0,    this.base64Separator,    0,    this.base64Length);    	non-compiled	[CE]  ';'  expected	229	None	replace
330	[BUG]  [BUGGY]  System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  this.base64Length  +  1);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  this.base64Length  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  this.base64Length  +  1);	  System.arraycopy(Base64Byte,    0,    this.base64Separator,    0,    this.base64Length);    	non-compiled	[CE]  ';'  expected	229	None	replace
331	[BUG]  [BUGGY]  System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  this.lineLength);	  System.arraycopy(Base64Byte,    0,    this.base64Separator,    0,    this.base64Length);    	non-compiled	[CE]  ';'  expected	229	None	replace
332	[BUG]  [BUGGY]  System.arraycopy(this.base64Separator,  0,  this.base64Separator,  0,  this.base64Length);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64Separator,  0,  this.base64Separator,  0,  this.base64Length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64Separator,  0,  this.base64Separator,  0,  this.base64Length);	  System.arraycopy(Base64Byte,    0,    this.base64Separator,    0,    this.base64Length);    	non-compiled	[CE]  ';'  expected	229	None	replace
333	[BUG]  [BUGGY]  System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  this.base64Length  -  2);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  this.base64Length  -  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  this.base64Length  -  2);	  System.arraycopy(Base64Byte,    0,    this.base64Separator,    0,    this.base64Length);    	non-compiled	[CE]  ';'  expected	229	None	replace
334	[BUG]  [BUGGY]  System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  this.baseLength);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  this.baseLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  this.baseLength);	  System.arraycopy(Base64Byte,    0,    this.base64Separator,    0,    this.base64Length);    	non-compiled	[CE]  ';'  expected	229	None	replace
335	[BUG]  [BUGGY]  this.encodeSize  =  10  +  this.lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  10  +  this.lineSeparator.length  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  10  +  this.lineSeparator.length  -  1;	  this.encodeSize    =    10    +    this.lineSeparator.length;    	non-compiled	[CE]  ';'  expected	225	None	replace
336	[BUG]  [BUGGY]  this.lineSize  =  10  +  this.lineSeparator.length;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSize  =  10  +  this.lineSeparator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSize  =  10  +  this.lineSeparator.length;	  this.encodeSize    =    10    +    this.lineSeparator.length;    	non-compiled	[CE]  ';'  expected	225	None	replace
337	[BUG]  [BUGGY]  this.encodeSize  =  10  *  this.lineSeparator.length;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  10  *  this.lineSeparator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  10  *  this.lineSeparator.length;	  this.encodeSize    =    10    +    this.lineSeparator.length;    	non-compiled	[CE]  ';'  expected	225	None	replace
338	[BUG]  [BUGGY]  this.lineSize  =  10  +  this.lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSize  =  10  +  this.lineSeparator.length  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSize  =  10  +  this.lineSeparator.length  -  1;	  this.encodeSize    =    10    +    this.lineSeparator.length;    	non-compiled	[CE]  ';'  expected	225	None	replace
339	[BUG]  [BUGGY]  this.encodeSize  =  10;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  10;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  10;	  this.encodeSize    =    10    +    this.lineSeparator.length;    	non-compiled	[CE]  ';'  expected	225	None	replace
340	[BUG]  [BUGGY]  this.encodeSize  =  10  +  this.lineSeparator.length  -  2;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  10  +  this.lineSeparator.length  -  2;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  10  +  this.lineSeparator.length  -  2;	  this.encodeSize    =    10    +    this.lineSeparator.length;    	non-compiled	[CE]  ';'  expected	225	None	replace
341	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.base64Separator,  0,  lineLength);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  this.base64Separator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(lineSeparator,  0,  this.base64Separator,  0,  lineLength);	  System.arraycopy(base64Separator,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	184	None	replace
342	[BUG]  [BUGGY]  System.arraycopy(this.base64Separator,  0,  lineSeparator,  0,  this.base64Separator.length);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64Separator,  0,  lineSeparator,  0,  this.base64Separator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64Separator,  0,  lineSeparator,  0,  this.base64Separator.length);	  System.arraycopy(base64Separator,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	184	None	replace
343	[BUG]  [BUGGY]  System.arraycopy(base64Separator,  0,  this.base64Separator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64Separator,  0,  this.base64Separator,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64Separator,  0,  this.base64Separator,  0,  lineLength  -  1);	  System.arraycopy(base64Separator,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	184	None	replace
344	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	140	None	replace
345	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  lineSeparator,  0,  this.urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  lineSeparator,  0,  this.urlSafe);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	140	None	replace
346	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe  -  1);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe  -  1);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	140	None	replace
347	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	140	None	replace
348	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(lineLength);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(lineLength);	  char    sep    =    StringUtils.newStringUtf8(sep);    	non-compiled	[CE]  ';'  expected	237	None	replace
349	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8);	  char    sep    =    StringUtils.newStringUtf8(sep);    	non-compiled	[CE]  ';'  expected	237	None	replace
350	[BUG]  [BUGGY]  byte  sep  =  StringUtils.newStringUtf8(sep);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  byte  sep  =  StringUtils.newStringUtf8(sep);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	byte  sep  =  StringUtils.newStringUtf8(sep);	  char    sep    =    StringUtils.newStringUtf8(sep);    	non-compiled	[CE]  ';'  expected	237	None	replace
351	[BUG]  [BUGGY]  char  sep  =  StringUtils.newChars(sep);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  char  sep  =  StringUtils.newChars(sep);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	char  sep  =  StringUtils.newChars(sep);	  char    sep    =    StringUtils.newStringUtf8(sep);    	non-compiled	[CE]  ';'  expected	237	None	replace
352	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.decodeSize);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.decodeSize);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(this.decodeSize);	  char    sep    =    StringUtils.newStringUtf8(sep);    	non-compiled	[CE]  ';'  expected	237	None	replace
353	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  1,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  1,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  1,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    1,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	242	None	replace
354	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  4,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  4,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  4,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    1,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	242	None	replace
355	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    1,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	242	None	replace
356	[BUG]  [BUGGY]  this.encodeSize  =  3  *  this.urlSafe;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  3  *  this.urlSafe;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  3  *  this.urlSafe;	  this.encodeSize    =    3    +    this.urlSafe;    	non-compiled	[CE]  ';'  expected	105	None	replace
357	[BUG]  [BUGGY]  this.encodeSize  =  3  +  this.lineSeparator;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  3  +  this.lineSeparator;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  3  +  this.lineSeparator;	  this.encodeSize    =    3    +    this.urlSafe;    	non-compiled	[CE]  ';'  expected	105	None	replace
358	[BUG]  [BUGGY]  this.encodeSize  =  4  +  this.urlSafe;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  4  +  this.urlSafe;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  4  +  this.urlSafe;	  this.encodeSize    =    3    +    this.urlSafe;    	non-compiled	[CE]  ';'  expected	105	None	replace
359	[BUG]  [BUGGY]  this.encodeSize  =  3  -  this.urlSafe;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  3  -  this.urlSafe;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  3  -  this.urlSafe;	  this.encodeSize    =    3    +    this.urlSafe;    	non-compiled	[CE]  ';'  expected	105	None	replace
360	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length  +  1);	  System.arraycopy(base64,    0,    this.base64,    0,    lineSeparator.length    +    1);    	non-compiled	[CE]  ';'  expected	204	None	replace
361	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.base64,  0,  lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  this.base64,  0,  lineSeparator.length  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(lineSeparator,  0,  this.base64,  0,  lineSeparator.length  +  1);	  System.arraycopy(base64,    0,    this.base64,    0,    lineSeparator.length    +    1);    	non-compiled	[CE]  ';'  expected	204	None	replace
362	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length  -  1);	  System.arraycopy(base64,    0,    this.base64,    0,    lineSeparator.length    +    1);    	non-compiled	[CE]  ';'  expected	204	None	replace
363	[BUG]  [BUGGY]  System.arraycopy(Base64.BASE64,  0,  this.base64,  0,  lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64.BASE64,  0,  this.base64,  0,  lineSeparator.length  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64.BASE64,  0,  this.base64,  0,  lineSeparator.length  +  1);	  System.arraycopy(base64,    0,    this.base64,    0,    lineSeparator.length    +    1);    	non-compiled	[CE]  ';'  expected	204	None	replace
364	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  lineSeparator,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  lineSeparator,  0,  lineLength  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  lineSeparator,  0,  lineLength  +  1);	  System.arraycopy(base64,    0,    this.base64,    0,    lineSeparator.length    +    1);    	non-compiled	[CE]  ';'  expected	204	None	replace
365	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.base64,  0,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  this.base64,  0,  lineSeparator.length  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(lineSeparator,  0,  this.base64,  0,  lineSeparator.length  -  1);	  System.arraycopy(base64,    0,    this.base64,    0,    lineSeparator.length    -    1);    	non-compiled	[CE]  ';'  expected	49	None	replace
366	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  lineSeparator,  0,  this.base64.length  -  1);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  lineSeparator,  0,  this.base64.length  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  lineSeparator,  0,  this.base64.length  -  1);	  System.arraycopy(base64,    0,    this.base64,    0,    lineSeparator.length    -    1);    	non-compiled	[CE]  ';'  expected	49	None	replace
367	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.base64,  0,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.base64,  0,  lineSeparator.length  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.base64,  0,  lineSeparator.length  -  1);	  System.arraycopy(base64,    0,    this.base64,    0,    lineSeparator.length    -    1);    	non-compiled	[CE]  ';'  expected	49	None	replace
368	[BUG]  [BUGGY]  System.arraycopy(Base64.BASE64,  0,  this.base64,  0,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64.BASE64,  0,  this.base64,  0,  lineSeparator.length  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64.BASE64,  0,  this.base64,  0,  lineSeparator.length  -  1);	  System.arraycopy(base64,    0,    this.base64,    0,    lineSeparator.length    -    1);    	non-compiled	[CE]  ';'  expected	49	None	replace
369	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineSeparator.length  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineSeparator.length  -  1);	  System.arraycopy(base64,    0,    this.base64,    0,    lineSeparator.length    -    1);    	non-compiled	[CE]  ';'  expected	49	None	replace
370	[BUG]  [BUGGY]  System.arraycopy(sep,  0,  this.base64,  0,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(sep,  0,  this.base64,  0,  lineSeparator.length  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(sep,  0,  this.base64,  0,  lineSeparator.length  -  1);	  System.arraycopy(base64,    0,    this.base64,    0,    lineSeparator.length    -    1);    	non-compiled	[CE]  ';'  expected	49	None	replace
371	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(SCS_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  :  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(SCS_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(SCS_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    urlSafe?    System.arraycopy(CSS_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  :  expected	248	None	replace
372	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(CASE_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  :  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(CASE_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(CASE_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    urlSafe?    System.arraycopy(CSS_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  :  expected	248	None	replace
373	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(CCS_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  :  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(CCS_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(CCS_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    urlSafe?    System.arraycopy(CSS_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  :  expected	248	None	replace
374	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(CHUNK_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  :  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(CHUNK_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(CHUNK_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    urlSafe?    System.arraycopy(CSS_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  :  expected	248	None	replace
375	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(CFS_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  :  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(CFS_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(CFS_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    urlSafe?    System.arraycopy(CSS_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  :  expected	248	None	replace
376	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(CSC_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  :  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(CSC_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(CSC_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    urlSafe?    System.arraycopy(CSS_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  :  expected	248	None	replace
377	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	135	None	replace
378	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	135	None	replace
379	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	70	None	replace
380	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newLongUtf8(this.lineSeparator),  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newLongUtf8(this.lineSeparator),  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newLongUtf8(this.lineSeparator),  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	70	None	replace
381	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),  0,  lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),  0,  lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),  0,  lineSeparator,  0,  this.lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	70	None	replace
382	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  lineSeparator,  0,  this.base64.length  -  1);  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  lineSeparator,  0,  this.base64.length  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  lineSeparator,  0,  this.base64.length  -  1);	  System.arraycopy(Base64Byte.DEFAULT,    lineSeparator,    0,    this.base64.length);    	non-compiled	[CE]  ';'  expected	41	None	replace
383	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  lineSeparator,  0,  this.base64.length  +  1);  [CE]  ';'  expected  [FE]                                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  lineSeparator,  0,  this.base64.length  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  lineSeparator,  0,  this.base64.length  +  1);	  System.arraycopy(Base64Byte.DEFAULT,    lineSeparator,    0,    this.base64.length);    	non-compiled	[CE]  ';'  expected	41	None	replace
384	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  this.baseSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  this.baseSeparator,  0,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  this.baseSeparator,  0,  lineSeparator.length);	  System.arraycopy(Base64Byte.DEFAULT,    lineSeparator,    0,    this.base64.length);    	non-compiled	[CE]  ';'  expected	41	None	replace
385	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  this.base64Separator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  this.base64Separator,  0,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  this.base64Separator,  0,  lineSeparator.length);	  System.arraycopy(Base64Byte.DEFAULT,    lineSeparator,    0,    this.base64.length);    	non-compiled	[CE]  ';'  expected	41	None	replace
386	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  -  4);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  -  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  -  4);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	144	None	replace
387	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  -  3);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  -  3);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  -  3);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	144	None	replace
388	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineLength  -  1);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	144	None	replace
389	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),  this.urlSafe);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),  this.urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),  this.urlSafe);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    this.lineSeparator);    	non-compiled	[CE]  ';'  expected	191	None	replace
390	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.lineSeparator),  this.urlSafe);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.lineSeparator),  this.urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteUtf8(this.lineSeparator),  this.urlSafe);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    this.lineSeparator);    	non-compiled	[CE]  ';'  expected	191	None	replace
391	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe),  this.lineSeparator);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe),  this.lineSeparator);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe),  this.lineSeparator);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    this.lineSeparator);    	non-compiled	[CE]  ';'  expected	191	None	replace
392	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator),  this.urlSafe);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator),  this.urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(lineSeparator),  this.urlSafe);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    this.lineSeparator);    	non-compiled	[CE]  ';'  expected	191	None	replace
393	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.decodeTable),  this.lineSeparator);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.decodeTable),  this.lineSeparator);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.decodeTable),  this.lineSeparator);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    this.lineSeparator);    	non-compiled	[CE]  ';'  expected	191	None	replace
394	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  this.lineSeparator,  lineLength);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  this.lineSeparator,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  this.lineSeparator,  lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    this.lineSeparator);    	non-compiled	[CE]  ';'  expected	191	None	replace
395	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  lineSeparator,  this.lineSeparator);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  lineSeparator,  this.lineSeparator);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  lineSeparator,  this.lineSeparator);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    this.lineSeparator);    	non-compiled	[CE]  ';'  expected	191	None	replace
396	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  lineSeparator),  this.lineSeparator);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  lineSeparator),  this.lineSeparator);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  lineSeparator),  this.lineSeparator);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    this.lineSeparator);    	non-compiled	[CE]  ';'  expected	191	None	replace
397	[BUG]  [BUGGY]  System.arraycopy(this.base64Byte,  0,  this.base64Separator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64Byte,  0,  this.base64Separator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64Byte,  0,  this.base64Separator,  0,  this.lineLength);	  System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	228	None	replace
398	[BUG]  [BUGGY]  System.arraycopy(this.base64Separator,  0,  this.base64Byte,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64Separator,  0,  this.base64Byte,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64Separator,  0,  this.base64Byte,  0,  this.lineLength);	  System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	228	None	replace
399	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.base64Separator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.base64Separator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.base64Separator,  0,  this.lineLength);	  System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	228	None	replace
400	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.base64Separator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  this.base64Separator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.base64Separator,  0,  this.lineLength);	  System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	228	None	replace
401	[BUG]  [BUGGY]  System.arraycopy(this.base64Separator,  0,  this.base64Separator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64Separator,  0,  this.base64Separator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64Separator,  0,  this.base64Separator,  0,  this.lineLength);	  System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	228	None	replace
402	[BUG]  [BUGGY]  System.arraycopy(base64Byte,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64Byte,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64Byte,  0,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	228	None	replace
403	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.baseSeparator,  0,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.baseSeparator,  0,  lineSeparator.length  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.baseSeparator,  0,  lineSeparator.length  -  1);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    lineSeparator.length    -    1);    	non-compiled	[CE]  ';'  expected	35	None	replace
404	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  this.base64,  0,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  this.base64,  0,  lineSeparator.length  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  this.base64,  0,  lineSeparator.length  -  1);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    lineSeparator.length    -    1);    	non-compiled	[CE]  ';'  expected	35	None	replace
405	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  lineSeparator,  0,  this.base64.length  -  1);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  lineSeparator,  0,  this.base64.length  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  lineSeparator,  0,  this.base64.length  -  1);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    lineSeparator.length    -    1);    	non-compiled	[CE]  ';'  expected	35	None	replace
406	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  1);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	136	None	replace
407	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength  *  4);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength  *  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength  *  4);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    *    4);    	non-compiled	[CE]  ';'  expected	132	None	replace
408	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  *  4  +  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  *  4  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  *  4  +  1);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    *    4);    	non-compiled	[CE]  ';'  expected	132	None	replace
409	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  *  3);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  *  3);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  *  3);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    *    4);    	non-compiled	[CE]  ';'  expected	132	None	replace
410	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  this.base64.length);  [CE]  ';'  expected  [FE]                                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  this.base64.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  this.base64.length);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    this.lineSeparator.length);    	non-compiled	[CE]  ';'  expected	42	None	replace
411	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  this.lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  this.lineSeparator.length  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  this.lineSeparator.length  -  1);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    this.lineSeparator.length);    	non-compiled	[CE]  ';'  expected	42	None	replace
412	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  this.lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]                                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  this.lineSeparator.length  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  this.lineSeparator.length  +  1);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    this.lineSeparator.length);    	non-compiled	[CE]  ';'  expected	42	None	replace
413	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  this.lineSeparator,  0,  this.base64.length);  [CE]  ';'  expected  [FE]                                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  this.lineSeparator,  0,  this.base64.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  this.lineSeparator,  0,  this.base64.length);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    this.lineSeparator.length);    	non-compiled	[CE]  ';'  expected	42	None	replace
414	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.baseSeparator,  0,  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.baseSeparator,  0,  this.lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.baseSeparator,  0,  this.lineSeparator.length);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    this.lineSeparator.length);    	non-compiled	[CE]  ';'  expected	42	None	replace
415	[BUG]  [BUGGY]  this.encodeSize  =  5  +  this.lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  5  +  this.lineSeparator.length  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  5  +  this.lineSeparator.length  -  1;	  this.encodeSize    =    5    +    this.lineSeparator.length;    	non-compiled	[CE]  ';'  expected	129	None	replace
416	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  this.base64,  0,  lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  this.base64,  0,  lineSeparator.length  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  this.base64,  0,  lineSeparator.length  +  1);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    lineSeparator.length    +    1);    	non-compiled	[CE]  ';'  expected	39	None	replace
417	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  +  3);  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  +  3);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  +  3);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    lineSeparator.length    +    1);    	non-compiled	[CE]  ';'  expected	39	None	replace
418	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  +  4);  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  +  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  +  4);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    lineSeparator.length    +    1);    	non-compiled	[CE]  ';'  expected	39	None	replace
419	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.baseSeparator,  0,  lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]                                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.baseSeparator,  0,  lineSeparator.length  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.baseSeparator,  0,  lineSeparator.length  +  1);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    lineSeparator.length    +    1);    	non-compiled	[CE]  ';'  expected	39	None	replace
420	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	77	None	replace
421	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	77	None	replace
422	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	77	None	replace
423	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	77	None	replace
424	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	77	None	replace
425	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  /  1);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  /  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  /  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	253	None	replace
426	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  2);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  2);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	253	None	replace
427	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  4);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  4);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	253	None	replace
428	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize  -  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize  -  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	253	None	replace
429	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.baseSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.baseSeparator,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.baseSeparator,  0,  lineLength  -  1);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.baseSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	116	None	replace
430	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.baseSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.baseSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.baseSeparator,  0,  this.lineLength);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.baseSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	116	None	replace
431	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  this.baseSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  this.baseSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  this.baseSeparator,  0,  lineLength);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.baseSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	116	None	replace
432	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.baseSeparator,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.baseSeparator,  0,  lineLength  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.baseSeparator,  0,  lineLength  +  1);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.baseSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	116	None	replace
433	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.baseSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.baseSeparator,  0,  urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.baseSeparator,  0,  urlSafe);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.baseSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	116	None	replace
434	[BUG]  [BUGGY]  System.arraycopy(this.baseSeparator,  0,  this.baseSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.baseSeparator,  0,  this.baseSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.baseSeparator,  0,  this.baseSeparator,  0,  lineLength);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.baseSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	116	None	replace
435	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  lineSeparator,  0,  this.baseSeparator.length);  [CE]  ';'  expected  [FE]                                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  lineSeparator,  0,  this.baseSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  lineSeparator,  0,  this.baseSeparator.length);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.baseSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	116	None	replace
436	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  1,  this.baseSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  1,  this.baseSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  1,  this.baseSeparator,  0,  lineLength);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.baseSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	116	None	replace
437	[BUG]  [BUGGY]  this.encodeSize  =  10  *  this.urlSafe;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  10  *  this.urlSafe;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  10  *  this.urlSafe;	  this.encodeSize    =    10    *    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	222	None	replace
438	[BUG]  [BUGGY]  this.encodeSize  =  10  *  this.base64Separator.length;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  10  *  this.base64Separator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  10  *  this.base64Separator.length;	  this.encodeSize    =    10    *    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	222	None	replace
439	[BUG]  [BUGGY]  this.encodeSize  =  10  *  lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  10  *  lineSeparator.length  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  10  *  lineSeparator.length  -  1;	  this.encodeSize    =    10    *    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	222	None	replace
440	[BUG]  [BUGGY]  System.arraycopy(Base64.BASE64,  0,  this.base64,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64.BASE64,  0,  this.base64,  0,  lineSeparator.length);  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64.BASE64,  0,  this.base64,  0,  lineSeparator.length);	  System.arraycopy(this.base64,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	32	None	replace
441	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  1);	  System.arraycopy(Base64Utils.CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	141	None	replace
442	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe);	  System.arraycopy(Base64Utils.CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	141	None	replace
443	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  1);	  System.arraycopy(Base64Utils.CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	141	None	replace
444	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.CHUNK_SEPARATOR,  1,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.CHUNK_SEPARATOR,  1,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.CHUNK_SEPARATOR,  1,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Utils.CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	141	None	replace
445	[BUG]  [BUGGY]  this.encodeSize  =  1  +  lineSeparator.length?  this.urlSafe  :  0;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  +  lineSeparator.length?  this.urlSafe  :  0;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  lineSeparator.length?  this.urlSafe  :  0;	  this.encodeSize    =    1    +    this.urlSafe?    lineSeparator.length    :    0;    	non-compiled	[CE]  ';'  expected	125	None	replace
446	[BUG]  [BUGGY]  this.lineSize  =  1  +  this.urlSafe?  lineSeparator.length  :  0;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSize  =  1  +  this.urlSafe?  lineSeparator.length  :  0;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSize  =  1  +  this.urlSafe?  lineSeparator.length  :  0;	  this.encodeSize    =    1    +    this.urlSafe?    lineSeparator.length    :    0;    	non-compiled	[CE]  ';'  expected	125	None	replace
447	[BUG]  [BUGGY]  this.decodeSize  =  1  +  this.urlSafe?  lineSeparator.length  :  0;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.decodeSize  =  1  +  this.urlSafe?  lineSeparator.length  :  0;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.decodeSize  =  1  +  this.urlSafe?  lineSeparator.length  :  0;	  this.encodeSize    =    1    +    this.urlSafe?    lineSeparator.length    :    0;    	non-compiled	[CE]  ';'  expected	125	None	replace
448	[BUG]  [BUGGY]  this.encodeSize  =  1  +  lineSeparator.length  :  0;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  +  lineSeparator.length  :  0;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  lineSeparator.length  :  0;	  this.encodeSize    =    1    +    this.urlSafe?    lineSeparator.length    :    0;    	non-compiled	[CE]  ';'  expected	125	None	replace
449	[BUG]  [BUGGY]  this.encodeSize  =  1  +(this.urlSafe?  lineSeparator.length  :  0);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  +(this.urlSafe?  lineSeparator.length  :  0);  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +(this.urlSafe?  lineSeparator.length  :  0);	  this.encodeSize    =    1    +    this.urlSafe?    lineSeparator.length    :    0;    	non-compiled	[CE]  ';'  expected	125	None	replace
450	[BUG]  [BUGGY]  this.encodeSize  =  1  +  this.urlSafe?  this.lineSeparator.length  :  0;  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  +  this.urlSafe?  this.lineSeparator.length  :  0;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  this.urlSafe?  this.lineSeparator.length  :  0;	  this.encodeSize    =    1    +    this.urlSafe?    lineSeparator.length    :    0;    	non-compiled	[CE]  ';'  expected	125	None	replace
451	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(lineSeparator  + "] ");  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(lineSeparator  + "] ");  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(lineSeparator  + "] ");	  String    sep    =    StringUtils.newStringUtf8(sep    +   "]   ");    	non-compiled	[CE]  ';'  expected	207	None	replace
452	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep  + ", ");  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep  + ", ");  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(sep  + ", ");	  String    sep    =    StringUtils.newStringUtf8(sep    +   "]   ");    	non-compiled	[CE]  ';'  expected	207	None	replace
453	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.urlSafe  + "] ");  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.urlSafe  + "] ");  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(this.urlSafe  + "] ");	  String    sep    =    StringUtils.newStringUtf8(sep    +   "]   ");    	non-compiled	[CE]  ';'  expected	207	None	replace
454	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep  + ".] ");  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep  + ".] ");  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(sep  + ".] ");	  String    sep    =    StringUtils.newStringUtf8(sep    +   "]   ");    	non-compiled	[CE]  ';'  expected	207	None	replace
455	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep  + ",  urlSafe ");  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep  + ",  urlSafe ");  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(sep  + ",  urlSafe ");	  String    sep    =    StringUtils.newStringUtf8(sep    +   "]   ");    	non-compiled	[CE]  ';'  expected	207	None	replace
456	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.decodeSize  + "] ");  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.decodeSize  + "] ");  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(this.decodeSize  + "] ");	  String    sep    =    StringUtils.newStringUtf8(sep    +   "]   ");    	non-compiled	[CE]  ';'  expected	207	None	replace
457	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),  0,  this.lineSeparator,  0,  this.urlLength);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),  0,  this.lineSeparator,  0,  this.urlLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),  0,  this.lineSeparator,  0,  this.urlLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    this.urlLength);    	non-compiled	[CE]  ';'  expected	173	None	replace
458	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe),  0,  this.lineSeparator,  0,  this.urlLength);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe),  0,  this.lineSeparator,  0,  this.urlLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe),  0,  this.lineSeparator,  0,  this.urlLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    this.urlLength);    	non-compiled	[CE]  ';'  expected	173	None	replace
459	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  0,  this.lineSeparator,  0,  this.urlLength);  [CE]  ')'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  0,  this.lineSeparator,  0,  this.urlLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  0,  this.lineSeparator,  0,  this.urlLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    this.urlLength);    	non-compiled	[CE]  ')'  expected	173	None	replace
460	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator),  0,  this.lineSeparator,  0,  this.urlLength);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator),  0,  this.lineSeparator,  0,  this.urlLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(lineSeparator),  0,  this.lineSeparator,  0,  this.urlLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    this.urlLength);    	non-compiled	[CE]  ';'  expected	173	None	replace
461	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlLength);  [CE]  ')'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    this.urlLength);    	non-compiled	[CE]  ')'  expected	173	None	replace
462	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.decodeTable,  0,  this.lineSeparator,  0,  this.urlLength);  [CE]  ')'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.decodeTable,  0,  this.lineSeparator,  0,  this.urlLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.decodeTable,  0,  this.lineSeparator,  0,  this.urlLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    this.urlLength);    	non-compiled	[CE]  ')'  expected	173	None	replace
463	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  4);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  4);	  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	86	None	replace
464	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  3);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  3);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  3);	  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	86	None	replace
465	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  2);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  2);	  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	86	None	replace
466	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength):  CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength):  CHUNK_SEPARATOR;  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength):  CHUNK_SEPARATOR;	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength):    urlSafe;    	non-compiled	[CE]  ';'  expected	188	None	replace
467	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength):  base64;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength):  base64;  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength):  base64;	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength):    urlSafe;    	non-compiled	[CE]  ';'  expected	188	None	replace
468	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength):  URL_SAFE_ENCODE_TABLE;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength):  URL_SAFE_ENCODE_TABLE;  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength):  URL_SAFE_ENCODE_TABLE;	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength):    urlSafe;    	non-compiled	[CE]  ';'  expected	188	None	replace
469	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength):  urlSafe;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength):  urlSafe;  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength):  urlSafe;	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength):    urlSafe;    	non-compiled	[CE]  ';'  expected	188	None	replace
470	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength):  urlsafe;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength):  urlsafe;  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength):  urlsafe;	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength):    urlSafe;    	non-compiled	[CE]  ';'  expected	188	None	replace
471	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength):  new  byte[0];  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength):  new  byte[0];  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength):  new  byte[0];	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength):    urlSafe;    	non-compiled	[CE]  ';'  expected	188	None	replace
472	[BUG]  [BUGGY]  System.arraycopy(base64Separator,  0,  this.base64Byte,  0,  lineLength);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64Separator,  0,  this.base64Byte,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64Separator,  0,  this.base64Byte,  0,  lineLength);	  System.arraycopy(this.base64Separator,    0,    this.base64Byte,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	153	None	replace
473	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.base64Byte,  0,  lineLength);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.base64Byte,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.base64Byte,  0,  lineLength);	  System.arraycopy(this.base64Separator,    0,    this.base64Byte,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	153	None	replace
474	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  0,  this.base64Byte,  0,  lineLength);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  0,  this.base64Byte,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  0,  this.base64Byte,  0,  lineLength);	  System.arraycopy(this.base64Separator,    0,    this.base64Byte,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	153	None	replace
475	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.base64Byte,  0,  lineLength);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  this.base64Byte,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.base64Byte,  0,  lineLength);	  System.arraycopy(this.base64Separator,    0,    this.base64Byte,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	153	None	replace
476	[BUG]  [BUGGY]  System.arraycopy(this.base64Separator,  0,  this.base64Byte,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64Separator,  0,  this.base64Byte,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64Separator,  0,  this.base64Byte,  0,  lineLength  -  1);	  System.arraycopy(this.base64Separator,    0,    this.base64Byte,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	153	None	replace
477	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  4);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  4);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    -    4);    	non-compiled	[CE]  ';'  expected	27	None	replace
478	[BUG]  [BUGGY]  System.arraycopy(Base64Separator,  0,  this.base64Separator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator,  0,  this.base64Separator,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator,  0,  this.base64Separator,  0,  lineLength  -  1);	  System.arraycopy(Base64Separator,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	185	None	replace
479	[BUG]  [BUGGY]  System.arraycopy(Base64Separator,  0,  this.base64Separator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator,  0,  this.base64Separator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator,  0,  this.base64Separator,  0,  this.lineLength);	  System.arraycopy(Base64Separator,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	185	None	replace
480	[BUG]  [BUGGY]  System.arraycopy(Base64Separator,  0,  this.base64Separator,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator,  0,  this.base64Separator,  0,  lineLength  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator,  0,  this.base64Separator,  0,  lineLength  +  1);	  System.arraycopy(Base64Separator,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	185	None	replace
481	[BUG]  [BUGGY]  System.arraycopy(Base64Separator,  0,  this.base64Separator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator,  0,  this.base64Separator,  0,  urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator,  0,  this.base64Separator,  0,  urlSafe);	  System.arraycopy(Base64Separator,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	185	None	replace
482	[BUG]  [BUGGY]  System.arraycopy(Base64Separator,  0,  this.base64Separator,  0,  lineLength  /  2);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator,  0,  this.base64Separator,  0,  lineLength  /  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator,  0,  this.base64Separator,  0,  lineLength  /  2);	  System.arraycopy(Base64Separator,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	185	None	replace
483	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.urlSafe,  lineSeparator);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.urlSafe,  lineSeparator);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(this.urlSafe,  lineSeparator);	  String    sep    =    StringUtils.newStringUtf8(this.urlSafe);    	non-compiled	[CE]  ';'  expected	158	None	replace
484	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.encodeTable);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.encodeTable);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(this.encodeTable);	  String    sep    =    StringUtils.newStringUtf8(this.urlSafe);    	non-compiled	[CE]  ';'  expected	158	None	replace
485	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.urlSafe,  this.encodeTable);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.urlSafe,  this.encodeTable);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(this.urlSafe,  this.encodeTable);	  String    sep    =    StringUtils.newStringUtf8(this.urlSafe);    	non-compiled	[CE]  ';'  expected	158	None	replace
486	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.decodeTable);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.decodeTable);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(this.decodeTable);	  String    sep    =    StringUtils.newStringUtf8(this.urlSafe);    	non-compiled	[CE]  ';'  expected	158	None	replace
487	[BUG]  [BUGGY]  byte  sep  =  StringUtils.newStringUtf8(this.urlSafe);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  byte  sep  =  StringUtils.newStringUtf8(this.urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	byte  sep  =  StringUtils.newStringUtf8(this.urlSafe);	  String    sep    =    StringUtils.newStringUtf8(this.urlSafe);    	non-compiled	[CE]  ';'  expected	158	None	replace
488	[BUG]  [BUGGY]  this.encodeSize  =  0  +  this.lineSeparator;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  0  +  this.lineSeparator;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  0  +  this.lineSeparator;	  this.encodeSize    =    0    +    this.urlSafe;    	non-compiled	[CE]  ';'  expected	44	None	replace
489	[BUG]  [BUGGY]  this.decodeSize  =  0  +  this.urlSafe;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.decodeSize  =  0  +  this.urlSafe;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.decodeSize  =  0  +  this.urlSafe;	  this.encodeSize    =    0    +    this.urlSafe;    	non-compiled	[CE]  ';'  expected	44	None	replace
490	[BUG]  [BUGGY]  this.encodeSize  =  0  +  this.urlSafe.length;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  0  +  this.urlSafe.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  0  +  this.urlSafe.length;	  this.encodeSize    =    0    +    this.urlSafe;    	non-compiled	[CE]  ';'  expected	44	None	replace
491	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),  0,  this.lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),  0,  this.lineSeparator,  0,  this.urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),  0,  this.lineSeparator,  0,  this.urlSafe);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	67	None	replace
492	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),  0,  this.lineSeparator,  0,  this.urlSafe.length);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),  0,  this.lineSeparator,  0,  this.urlSafe.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),  0,  this.lineSeparator,  0,  this.urlSafe.length);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	67	None	replace
493	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineTable,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineTable,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineTable,  0,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ')'  expected	67	None	replace
494	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe.length);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ')'  expected	67	None	replace
495	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.decodeTable,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ')'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.decodeTable,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.decodeTable,  0,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ')'  expected	67	None	replace
496	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.lineSeparator),  0,  this.lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.lineSeparator),  0,  this.lineSeparator,  0,  this.urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteUtf8(this.lineSeparator),  0,  this.lineSeparator,  0,  this.urlSafe);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	67	None	replace
497	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  0,  this.lineSeparator,  0,  this.urlSafe.length);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    this.urlSafe.length);    	non-compiled	[CE]  ')'  expected	221	None	replace
498	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe),  0,  this.lineSeparator,  0,  this.urlSafe.length);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe),  0,  this.lineSeparator,  0,  this.urlSafe.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe),  0,  this.lineSeparator,  0,  this.urlSafe.length);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    this.urlSafe.length);    	non-compiled	[CE]  ';'  expected	221	None	replace
499	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  this.lineSeparator),  0,  this.lineSeparator,  0,  this.urlSafe.length);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  this.lineSeparator),  0,  this.lineSeparator,  0,  this.urlSafe.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  this.lineSeparator),  0,  this.lineSeparator,  0,  this.urlSafe.length);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    this.urlSafe.length);    	non-compiled	[CE]  ';'  expected	221	None	replace
500	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.decodeTable,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.decodeTable,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.decodeTable,  0,  this.lineSeparator,  0,  this.urlSafe.length);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    this.urlSafe.length);    	non-compiled	[CE]  ')'  expected	221	None	replace
501	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64Name),  0,  this.lineSeparator,  0,  this.urlSafe.length);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64Name),  0,  this.lineSeparator,  0,  this.urlSafe.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.base64Name),  0,  this.lineSeparator,  0,  this.urlSafe.length);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    this.urlSafe.length);    	non-compiled	[CE]  ';'  expected	221	None	replace
502	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [CE]  ')'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.base64,  0,  this.lineSeparator,  0,  this.urlSafe.length);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    this.urlSafe.length);    	non-compiled	[CE]  ')'  expected	221	None	replace
503	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  4,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  4,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  4,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Separator.DEFAULT,    1,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	117	None	replace
504	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  1,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  1,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  1,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(Base64Separator.DEFAULT,    1,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	117	None	replace
505	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator.length,  0,  lineLength);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator.length,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator.length,  0,  lineLength);	  System.arraycopy(Base64Separator.DEFAULT,    1,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	117	None	replace
506	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  1,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  1,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  1,  this.lineSeparator,  0,  lineLength  -  1);	  System.arraycopy(Base64Separator.DEFAULT,    1,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	117	None	replace
507	[BUG]  [BUGGY]  this.encodeSize  =  3  *  this.lineSeparator.length;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  3  *  this.lineSeparator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  3  *  this.lineSeparator.length;	  this.encodeSize    =    3    +    this.lineSeparator.length;    	non-compiled	[CE]  ';'  expected	103	None	replace
508	[BUG]  [BUGGY]  this.lineSize  =  3  +  this.lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSize  =  3  +  this.lineSeparator.length  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSize  =  3  +  this.lineSeparator.length  -  1;	  this.encodeSize    =    3    +    this.lineSeparator.length;    	non-compiled	[CE]  ';'  expected	103	None	replace
509	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep,  lineSeparator);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep,  lineSeparator);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(sep,  lineSeparator);	  String    sep    =    StringUtils.newStringUtf8(sep,    urlSafe);    	non-compiled	[CE]  ';'  expected	161	None	replace
510	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(lineSeparator,  urlSafe);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(lineSeparator,  urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(lineSeparator,  urlSafe);	  String    sep    =    StringUtils.newStringUtf8(sep,    urlSafe);    	non-compiled	[CE]  ';'  expected	161	None	replace
511	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep,  0,  urlSafe);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep,  0,  urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(sep,  0,  urlSafe);	  String    sep    =    StringUtils.newStringUtf8(sep,    urlSafe);    	non-compiled	[CE]  ';'  expected	161	None	replace
512	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep,  base64);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep,  base64);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(sep,  base64);	  String    sep    =    StringUtils.newStringUtf8(sep,    urlSafe);    	non-compiled	[CE]  ';'  expected	161	None	replace
513	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep,  urlSafe,  lineSeparator);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep,  urlSafe,  lineSeparator);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(sep,  urlSafe,  lineSeparator);	  String    sep    =    StringUtils.newStringUtf8(sep,    urlSafe);    	non-compiled	[CE]  ';'  expected	161	None	replace
514	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep,  this.base64);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep,  this.base64);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(sep,  this.base64);	  String    sep    =    StringUtils.newStringUtf8(sep,    urlSafe);    	non-compiled	[CE]  ';'  expected	161	None	replace
515	[BUG]  [BUGGY]  this.lineSize  =  1  +  lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSize  =  1  +  lineSeparator.length  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSize  =  1  +  lineSeparator.length  -  1;	  this.lineSize    =    1    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	124	None	replace
516	[BUG]  [BUGGY]  this.lineSize  =  1  +  this.lineSeparator.length;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSize  =  1  +  this.lineSeparator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSize  =  1  +  this.lineSeparator.length;	  this.lineSize    =    1    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	124	None	replace
517	[BUG]  [BUGGY]  this.lineSize  =  1  +  this.urlSafe;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSize  =  1  +  this.urlSafe;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSize  =  1  +  this.urlSafe;	  this.lineSize    =    1    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	124	None	replace
518	[BUG]  [BUGGY]  this.lineSize  =  1  +  this.base64Separator.length;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSize  =  1  +  this.base64Separator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSize  =  1  +  this.base64Separator.length;	  this.lineSize    =    1    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	124	None	replace
519	[BUG]  [BUGGY]  this.lineSize  =  1  +  lineSeparator.length  -  2;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSize  =  1  +  lineSeparator.length  -  2;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSize  =  1  +  lineSeparator.length  -  2;	  this.lineSize    =    1    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	124	None	replace
520	[BUG]  [BUGGY]  this.lineSize  =  1  +  lineLength;  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSize  =  1  +  lineLength;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSize  =  1  +  lineLength;	  this.lineSize    =    1    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	124	None	replace
521	[BUG]  [BUGGY]  this.lineSize  =  1  +  lineSeparator.length  -  4;  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSize  =  1  +  lineSeparator.length  -  4;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSize  =  1  +  lineSeparator.length  -  4;	  this.lineSize    =    1    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	124	None	replace
522	[BUG]  [BUGGY]  this.lineSize  =  1  +  lineSeparator.length  -  3;  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSize  =  1  +  lineSeparator.length  -  3;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSize  =  1  +  lineSeparator.length  -  3;	  this.lineSize    =    1    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	124	None	replace
523	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe,  lineSeparator.length));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe,  lineSeparator.length));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe,  lineSeparator.length));	  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe));    	non-compiled	[CE]  ';'  expected	57	None	replace
524	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe),  lineSeparator);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe),  lineSeparator);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe),  lineSeparator);	  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe));    	non-compiled	[CE]  ';'  expected	57	None	replace
525	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe,  this.lineSeparator));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe,  this.lineSeparator));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe,  this.lineSeparator));	  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe));    	non-compiled	[CE]  ';'  expected	57	None	replace
526	[BUG]  [BUGGY]  this.encodeSize  -  1;  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  -  1;	  this.encodeSize    =    1;    	non-compiled	[CE]  not  a  statement	2	None	replace
527	[BUG]  [BUGGY]  this.encodeSize  =  12;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  12;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  12;	  this.encodeSize    =    1;    	non-compiled	[CE]  ';'  expected	2	None	replace
528	[BUG]  [BUGGY]  System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  lineLength  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  lineLength  +  1);	  System.arraycopy(Base64Byte,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	151	None	replace
529	[BUG]  [BUGGY]  System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  urlSafe);	  System.arraycopy(Base64Byte,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	151	None	replace
530	[BUG]  [BUGGY]  System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  lineLength  /  2);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  lineLength  /  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  lineLength  /  2);	  System.arraycopy(Base64Byte,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	151	None	replace
531	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  lineSeparator,  0,  urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  lineSeparator,  0,  urlSafe);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	115	None	replace
532	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineSeparator.length);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	115	None	replace
533	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  lineSeparator,  0,  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  lineSeparator,  0,  this.lineSeparator.length);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	115	None	replace
534	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  fileLength);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  fileLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  fileLength);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	115	None	replace
535	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  4);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  4);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	138	None	replace
536	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  3);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  3);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  3);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	138	None	replace
537	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  6);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  6);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  6);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	138	None	replace
538	[BUG]  [BUGGY]  System.arraycopy(Base64DECODE_TABLE,  0,  this.base64,  lineLength);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64DECODE_TABLE,  0,  this.base64,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64DECODE_TABLE,  0,  this.base64,  lineLength);	  System.arraycopy(Base64DECODE_TABLE,    0,    this.lineSeparator,    lineLength);    	non-compiled	[CE]  ';'  expected	214	None	replace
539	[BUG]  [BUGGY]  System.arraycopy(Base64DECODE_TABLE,  0,  this.base64Separator,  lineLength);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64DECODE_TABLE,  0,  this.base64Separator,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64DECODE_TABLE,  0,  this.base64Separator,  lineLength);	  System.arraycopy(Base64DECODE_TABLE,    0,    this.lineSeparator,    lineLength);    	non-compiled	[CE]  ';'  expected	214	None	replace
540	[BUG]  [BUGGY]  System.arraycopy(Base64DECODE_TABLE,  0,  this.lineSeparator,  lineLength  -  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64DECODE_TABLE,  0,  this.lineSeparator,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64DECODE_TABLE,  0,  this.lineSeparator,  lineLength  -  1);	  System.arraycopy(Base64DECODE_TABLE,    0,    this.lineSeparator,    lineLength);    	non-compiled	[CE]  ';'  expected	214	None	replace
541	[BUG]  [BUGGY]  System.arraycopy(Base64DECODE_TABLE,  0,  this.base64,  lineSeparator,  lineLength);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64DECODE_TABLE,  0,  this.base64,  lineSeparator,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64DECODE_TABLE,  0,  this.base64,  lineSeparator,  lineLength);	  System.arraycopy(Base64DECODE_TABLE,    0,    this.lineSeparator,    lineLength);    	non-compiled	[CE]  ';'  expected	214	None	replace
542	[BUG]  [BUGGY]  System.arraycopy(Base64DECODE_TABLE,  0,  this.lineSeparator,  lineLength  +  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64DECODE_TABLE,  0,  this.lineSeparator,  lineLength  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64DECODE_TABLE,  0,  this.lineSeparator,  lineLength  +  1);	  System.arraycopy(Base64DECODE_TABLE,    0,    this.lineSeparator,    lineLength);    	non-compiled	[CE]  ';'  expected	214	None	replace
543	[BUG]  [BUGGY]  System.arraycopy(Base64DECODE_TABLE,  0,  this.lineSeparator,  0);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64DECODE_TABLE,  0,  this.lineSeparator,  0);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64DECODE_TABLE,  0,  this.lineSeparator,  0);	  System.arraycopy(Base64DECODE_TABLE,    0,    this.lineSeparator,    lineLength);    	non-compiled	[CE]  ';'  expected	214	None	replace
544	[BUG]  [BUGGY]  System.arraycopy(base64DECODE_TABLE,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64DECODE_TABLE,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64DECODE_TABLE,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64DECODE_TABLE,    0,    this.lineSeparator,    lineLength);    	non-compiled	[CE]  ';'  expected	214	None	replace
545	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  this.urlSafe.length);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	244	None	replace
546	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.baseSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.baseSeparator,  0,  this.urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.baseSeparator,  0,  this.urlSafe);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	244	None	replace
547	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  lineSeparator,  0,  this.urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  lineSeparator,  0,  this.urlSafe);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	244	None	replace
548	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  this.urlSafe  -  1);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  this.urlSafe  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  this.urlSafe  -  1);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	244	None	replace
549	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.urlSafe,  0,  lineLength);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.urlSafe,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.urlSafe,  0,  lineLength);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	244	None	replace
550	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(lineSeparator,  this.urlSafe);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(lineSeparator,  this.urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(lineSeparator,  this.urlSafe);	  String    sep    =    StringUtils.newStringUtf8(lineSeparator);    	non-compiled	[CE]  ';'  expected	159	None	replace
551	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator.length,  0,  lineLength);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator.length,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator.length,  0,  lineLength);	  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    1,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	89	None	replace
552	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  1,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  1,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  1,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    1,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	89	None	replace
553	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    1,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	89	None	replace
554	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  1,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  1,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  1,  this.lineSeparator,  0,  lineLength  -  1);	  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    1,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	89	None	replace
555	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  2,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  2,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  2,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    1,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	89	None	replace
556	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  lineSeparator,  urlSafe);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  lineSeparator,  urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  lineSeparator,  urlSafe);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    lineSeparator);    	non-compiled	[CE]  ';'  expected	190	None	replace
557	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  0,  lineSeparator);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  0,  lineSeparator);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  0,  lineSeparator);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    lineSeparator);    	non-compiled	[CE]  ';'  expected	190	None	replace
558	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  0,  this.lineSeparator);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  0,  this.lineSeparator);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  0,  this.lineSeparator);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    lineSeparator);    	non-compiled	[CE]  ';'  expected	190	None	replace
559	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength  *  2);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength  *  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength  *  2);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    *    2);    	non-compiled	[CE]  ';'  expected	181	None	replace
560	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  2);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  2);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    *    2);    	non-compiled	[CE]  ';'  expected	181	None	replace
561	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.base64,  0,  lineLength  *  2);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  this.base64,  0,  lineLength  *  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.base64,  0,  lineLength  *  2);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    *    2);    	non-compiled	[CE]  ';'  expected	181	None	replace
562	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe.length);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	256	None	replace
563	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  this.urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.lineSeparator,  0,  this.urlSafe);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	256	None	replace
564	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.urlSafe);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	256	None	replace
565	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.urlSafe,  0,  lineLength);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.urlSafe,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.urlSafe,  0,  lineLength);	  System.arraycopy(this.urlSafe,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	74	None	replace
566	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe.length);	  System.arraycopy(this.urlSafe,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	74	None	replace
567	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.urlSafe.length);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.urlSafe.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.urlSafe.length);	  System.arraycopy(this.urlSafe,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	74	None	replace
568	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe.length);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	83	None	replace
569	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  urlSafe);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	83	None	replace
570	[BUG]  [BUGGY]  this.encodeSize  =  1  +  lineLength  -  1;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  +  lineLength  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  lineLength  -  1;	  this.encodeSize    =    1    +    lineLength;    	non-compiled	[CE]  ';'  expected	122	None	replace
571	[BUG]  [BUGGY]  this.encodeSize  =  1  +  this.lineLength;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  +  this.lineLength;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  this.lineLength;	  this.encodeSize    =    1    +    lineLength;    	non-compiled	[CE]  ';'  expected	122	None	replace
572	[BUG]  [BUGGY]  this.encodeSize  =  1  +  this.base64Size;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  +  this.base64Size;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  this.base64Size;	  this.encodeSize    =    1    +    lineLength;    	non-compiled	[CE]  ';'  expected	122	None	replace
573	[BUG]  [BUGGY]  this.encodeSize  =  1  +  this.base64Length;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  +  this.base64Length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  this.base64Length;	  this.encodeSize    =    1    +    lineLength;    	non-compiled	[CE]  ';'  expected	122	None	replace
574	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.base64Separator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.base64Separator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.base64Separator,  0,  this.lineLength);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	155	None	replace
575	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.base64Separator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.base64Separator,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.base64Separator,  0,  lineLength  -  1);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	155	None	replace
576	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.CHUNK_SEPARATOR,  0,  this.base64Separator,  0,  lineLength);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.CHUNK_SEPARATOR,  0,  this.base64Separator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.CHUNK_SEPARATOR,  0,  this.base64Separator,  0,  lineLength);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	155	None	replace
577	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.base64Separator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.base64Separator,  0,  urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.base64Separator,  0,  urlSafe);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	155	None	replace
578	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.DEFAULT_BASE64_SEPARATOR,  0,  this.base64Separator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.DEFAULT_BASE64_SEPARATOR,  0,  this.base64Separator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.DEFAULT_BASE64_SEPARATOR,  0,  this.base64Separator,  0,  lineLength);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	155	None	replace
579	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.SCRIPT_SEPARATOR,  0,  this.base64Separator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.SCRIPT_SEPARATOR,  0,  this.base64Separator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.SCRIPT_SEPARATOR,  0,  this.base64Separator,  0,  lineLength);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	155	None	replace
580	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.CASE64_SEPARATOR,  0,  this.base64Separator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.CASE64_SEPARATOR,  0,  this.base64Separator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.CASE64_SEPARATOR,  0,  this.base64Separator,  0,  lineLength);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	155	None	replace
581	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.base64Separator,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.base64Separator,  0,  lineLength  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.base64Separator,  0,  lineLength  +  1);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	155	None	replace
582	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  3);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  3);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  3);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    -    3);    	non-compiled	[CE]  ';'  expected	29	None	replace
583	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  6);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  6);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  6);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    -    3);    	non-compiled	[CE]  ';'  expected	29	None	replace
584	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(base64,  lineLength);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(base64,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(base64,  lineLength);	  String    sep    =    StringUtils.newStringUtf8(base64);    	non-compiled	[CE]  ';'  expected	163	None	replace
585	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(base64,  lineSeparator);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(base64,  lineSeparator);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(base64,  lineSeparator);	  String    sep    =    StringUtils.newStringUtf8(base64);    	non-compiled	[CE]  ';'  expected	163	None	replace
586	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(base64,  lineSeparator.length);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(base64,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(base64,  lineSeparator.length);	  String    sep    =    StringUtils.newStringUtf8(base64);    	non-compiled	[CE]  ';'  expected	163	None	replace
587	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	210	None	replace
588	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  1);	  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	210	None	replace
589	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe);	  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	210	None	replace
590	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  1);	  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	210	None	replace
591	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  1,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  1,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  1,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	210	None	replace
592	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	210	None	replace
593	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  4,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  4,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  4,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	210	None	replace
594	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator.length,  0,  lineLength);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator.length,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator.length,  0,  lineLength);	  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	210	None	replace
595	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSep,  0,  lineLength);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSep,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSep,  0,  lineLength);	  System.arraycopy(this.lineSeparator,    0,    sep,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	80	None	replace
596	[BUG]  [BUGGY]  this.encodeSize  =  10  +  lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  10  +  lineSeparator.length  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  10  +  lineSeparator.length  -  1;	  this.encodeSize    =    10    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	239	None	replace
597	[BUG]  [BUGGY]  this.encodeSize  =  10  +  this.urlSafe;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  10  +  this.urlSafe;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  10  +  this.urlSafe;	  this.encodeSize    =    10    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	239	None	replace
598	[BUG]  [BUGGY]  this.encodeSize  =  10  +  this.base64Separator.length;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  10  +  this.base64Separator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  10  +  this.base64Separator.length;	  this.encodeSize    =    10    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	239	None	replace
599	[BUG]  [BUGGY]  this.encodeSize  =  10  +  lineLength;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  10  +  lineLength;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  10  +  lineLength;	  this.encodeSize    =    10    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	239	None	replace
600	[BUG]  [BUGGY]  this.encodeSize  =  10  +  lineSeparator.length  -  2;  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  10  +  lineSeparator.length  -  2;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  10  +  lineSeparator.length  -  2;	  this.encodeSize    =    10    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	239	None	replace
601	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  /  2);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  /  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  /  2);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    lineLength    -    2);    	non-compiled	[CE]  ';'  expected	195	None	replace
602	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  +  2);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  +  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  +  2);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    lineLength    -    2);    	non-compiled	[CE]  ';'  expected	195	None	replace
603	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  -  6);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  -  6);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  -  6);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    lineLength    -    2);    	non-compiled	[CE]  ';'  expected	195	None	replace
604	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64Name),  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64Name),  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.base64Name),  0,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.base64Name),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	172	None	replace
605	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.base64Name),  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.base64Name),  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteUtf8(this.base64Name),  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.base64Name),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	172	None	replace
606	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64Name),  0,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64Name),  0,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.base64Name),  0,  this.lineSeparator,  0,  lineLength  -  1);	  System.arraycopy(Base64Utils.newStringUtf8(this.base64Name),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	172	None	replace
607	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64Name,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ')'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64Name,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.base64Name,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.base64Name),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	172	None	replace
608	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),  0,  this.base64Name,  0,  lineLength);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),  0,  this.base64Name,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),  0,  this.base64Name,  0,  lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.base64Name),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	172	None	replace
609	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64Name),  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64Name),  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.base64Name),  0,  this.lineSeparator,  0,  this.decodeSize);	  System.arraycopy(Base64Utils.newStringUtf8(this.base64Name),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	172	None	replace
610	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64Name),  0,  this.lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64Name),  0,  this.lineSeparator,  0,  this.urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.base64Name),  0,  this.lineSeparator,  0,  this.urlSafe);	  System.arraycopy(Base64Utils.newStringUtf8(this.base64Name),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	172	None	replace
611	[BUG]  [BUGGY]  System.arraycopy(Base64Characters,  0,  this.base64Characters,  0,  lineLength);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Characters,  0,  this.base64Characters,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Characters,  0,  this.base64Characters,  0,  lineLength);	  System.arraycopy(base64Characters,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	234	None	replace
612	[BUG]  [BUGGY]  System.arraycopy(Base64Characters,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Characters,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Characters,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(base64Characters,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	234	None	replace
613	[BUG]  [BUGGY]  System.arraycopy(this.base64Characters,  0,  this.base64Characters,  0,  lineLength);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64Characters,  0,  this.base64Characters,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64Characters,  0,  this.base64Characters,  0,  lineLength);	  System.arraycopy(base64Characters,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	234	None	replace
614	[BUG]  [BUGGY]  System.arraycopy(base64Characters,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64Characters,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64Characters,  0,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(base64Characters,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	234	None	replace
615	[BUG]  [BUGGY]  System.arraycopy(this.base64Characters,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64Characters,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64Characters,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(base64Characters,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	234	None	replace
616	[BUG]  [BUGGY]  this.encodeSize  =  0  *  lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  0  *  lineSeparator.length  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  0  *  lineSeparator.length  -  1;	  this.encodeSize    =    4    *    lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	13	None	replace
617	[BUG]  [BUGGY]  this.encodeSize  =  5  *  lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  5  *  lineSeparator.length  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  5  *  lineSeparator.length  -  1;	  this.encodeSize    =    4    *    lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	13	None	replace
618	[BUG]  [BUGGY]  this.encodeSize  =  4  *  this.urlSafe?  lineSeparator.length  -  1  :  0;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  4  *  this.urlSafe?  lineSeparator.length  -  1  :  0;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  4  *  this.urlSafe?  lineSeparator.length  -  1  :  0;	  this.encodeSize    =    4    *    lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	13	None	replace
619	[BUG]  [BUGGY]  this.encodeSize  =  6  *  lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  6  *  lineSeparator.length  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  6  *  lineSeparator.length  -  1;	  this.encodeSize    =    4    *    lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	13	None	replace
620	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  this.lineSeparator,  0,  this.lineSeparator.length);	  System.arraycopy(Base64Byte.DEFAULT,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	147	None	replace
621	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(Base64Byte.DEFAULT,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	147	None	replace
622	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  lineSeparator,  0,  this.lineLength);	  System.arraycopy(Base64Byte.DEFAULT,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	147	None	replace
623	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  this.lineSeparator,  0,  lineLength  -  1);	  System.arraycopy(Base64Byte.DEFAULT,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	147	None	replace
624	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  this.lineSeparator,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  this.lineSeparator,  0,  lineLength  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  this.lineSeparator,  0,  lineLength  +  1);	  System.arraycopy(Base64Byte.DEFAULT,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	147	None	replace
625	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  this.lineSeparator,  0,  lineLength  -  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  this.lineSeparator,  0,  lineLength  -  this.lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  this.lineSeparator,  0,  lineLength  -  this.lineSeparator.length);	  System.arraycopy(Base64Byte.DEFAULT,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	147	None	replace
626	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  2);  [CE]  :  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  2);	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  :  expected	97	None	replace
627	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  4);  [CE]  :  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  4);	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  :  expected	97	None	replace
628	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  3);  [CE]  :  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  3);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  3);	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  :  expected	97	None	replace
629	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  6);  [CE]  :  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  6);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  6);	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  :  expected	97	None	replace
630	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  1);  [CE]  :  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  1);	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  :  expected	97	None	replace
631	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  5);  [CE]  :  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  5);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  5);	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  :  expected	97	None	replace
632	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength  +  1);  [CE]  :  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength  +  1);	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  :  expected	97	None	replace
633	[BUG]  [BUGGY]  this.lineSize  =  1  +  this.lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSize  =  1  +  this.lineSeparator.length  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSize  =  1  +  this.lineSeparator.length  -  1;	  this.encodeSize    =    1    +    this.lineSeparator.length;    	non-compiled	[CE]  ';'  expected	118	None	replace
634	[BUG]  [BUGGY]  this.lineSeparator.length  =  1  +  this.lineSeparator.length;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator.length  =  1  +  this.lineSeparator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator.length  =  1  +  this.lineSeparator.length;	  this.encodeSize    =    1    +    this.lineSeparator.length;    	non-compiled	[CE]  ';'  expected	118	None	replace
635	[BUG]  [BUGGY]  this.lineSeparator.size  =  1  +  this.lineSeparator.length;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator.size  =  1  +  this.lineSeparator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator.size  =  1  +  this.lineSeparator.length;	  this.encodeSize    =    1    +    this.lineSeparator.length;    	non-compiled	[CE]  ';'  expected	118	None	replace
636	[BUG]  [BUGGY]  this.decodeSize  =  1  +  this.lineSeparator.length;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.decodeSize  =  1  +  this.lineSeparator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.decodeSize  =  1  +  this.lineSeparator.length;	  this.encodeSize    =    1    +    this.lineSeparator.length;    	non-compiled	[CE]  ';'  expected	118	None	replace
637	[BUG]  [BUGGY]  this.lineSeparator.length  =  1  +  this.encodeSize;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator.length  =  1  +  this.encodeSize;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator.length  =  1  +  this.encodeSize;	  this.encodeSize    =    1    +    this.lineSeparator.length;    	non-compiled	[CE]  ';'  expected	118	None	replace
638	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),  0,  this.lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),  0,  this.lineSeparator,  0,  urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),  0,  this.lineSeparator,  0,  urlSafe);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	174	None	replace
639	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe);  [CE]  ')'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ')'  expected	174	None	replace
640	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator),  0,  this.lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator),  0,  this.lineSeparator,  0,  urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(lineSeparator),  0,  this.lineSeparator,  0,  urlSafe);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	174	None	replace
641	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.decodeTable,  0,  this.lineSeparator,  0,  urlSafe);  [CE]  ')'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.decodeTable,  0,  this.lineSeparator,  0,  urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.decodeTable,  0,  this.lineSeparator,  0,  urlSafe);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ')'  expected	174	None	replace
642	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64,  0,  this.lineSeparator,  0,  urlSafe);  [CE]  ')'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64,  0,  this.lineSeparator,  0,  urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.base64,  0,  this.lineSeparator,  0,  urlSafe);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ')'  expected	174	None	replace
643	[BUG]  [BUGGY]  this.encodeSize  -=  10;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  -=  10;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  -=  10;	  this.encodeSize    -=    5;    	non-compiled	[CE]  ';'  expected	224	None	replace
644	[BUG]  [BUGGY]  this.encodeSize  -=  7;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  -=  7;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  -=  7;	  this.encodeSize    -=    5;    	non-compiled	[CE]  ';'  expected	224	None	replace
645	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	68	None	replace
646	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.decodeSize,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.decodeSize,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.decodeSize,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	68	None	replace
647	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.encodeTable,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.encodeTable,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.encodeTable,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	68	None	replace
648	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.decodeSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ')'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.decodeSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.decodeSeparator,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	68	None	replace
649	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.urlSafe,  0,  lineLength);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.urlSafe,  0,  lineLength);  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.urlSafe,  0,  lineLength);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	168	None	replace
650	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.base64,  0,  lineLength);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.base64,  0,  lineLength);  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.base64,  0,  lineLength);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	168	None	replace
651	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.CASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.CASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.CASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	168	None	replace
652	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.decodeSize,  0,  lineLength);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.decodeSize,  0,  lineLength);  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.decodeSize,  0,  lineLength);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	168	None	replace
653	[BUG]  [BUGGY]  System.arraycopy(Base64Separator,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator,  0,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(Base64Separator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	199	None	replace
654	[BUG]  [BUGGY]  System.arraycopy(Base64Separator,  0,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator,  0,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator,  0,  this.lineSeparator,  0,  lineLength  -  1);	  System.arraycopy(Base64Separator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	199	None	replace
655	[BUG]  [BUGGY]  System.arraycopy(Base64Separator,  0,  this.lineSeparator,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator,  0,  this.lineSeparator,  0,  lineLength  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator,  0,  this.lineSeparator,  0,  lineLength  +  1);	  System.arraycopy(Base64Separator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	199	None	replace
656	[BUG]  [BUGGY]  System.arraycopy(Base64Separator,  0,  this.lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator,  0,  this.lineSeparator,  0,  urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator,  0,  this.lineSeparator,  0,  urlSafe);	  System.arraycopy(Base64Separator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	199	None	replace
657	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  -  4);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  -  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  -  4);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	112	None	replace
658	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  -  3);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  -  3);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  -  3);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	112	None	replace
659	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.base64Separator,  0,  lineLength);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.base64Separator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.base64Separator,  0,  lineLength);	  System.arraycopy(this.base64Byte,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	152	None	replace
660	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.SEPARATOR,  0,  this.base64Separator,  0,  lineLength);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.SEPARATOR,  0,  this.base64Separator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.SEPARATOR,  0,  this.base64Separator,  0,  lineLength);	  System.arraycopy(this.base64Byte,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	152	None	replace
661	[BUG]  [BUGGY]  System.arraycopy(this.base64Byte,  0,  this.base64Separator,  0,  this.base64Separator.length);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64Byte,  0,  this.base64Separator,  0,  this.base64Separator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64Byte,  0,  this.base64Separator,  0,  this.base64Separator.length);	  System.arraycopy(this.base64Byte,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	152	None	replace
662	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength  /  1);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength  /  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength  /  1);	  System.arraycopy(base64,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	28	None	replace
663	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.lineSeparator,  0,  lineLength  -  1);	  System.arraycopy(base64,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	28	None	replace
664	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength  -  2);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength  -  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength  -  2);	  System.arraycopy(base64,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	28	None	replace
665	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength  -  1);	  System.arraycopy(base64,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	28	None	replace
666	[BUG]  [BUGGY]  this.lineSeparator  =  DECODE_TABLE?  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  :  expected  [FE]            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  DECODE_TABLE?  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  DECODE_TABLE?  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    urlSafe?    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  :  expected	92	None	replace
667	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(CHUNK_SEPARATOR,  1,  this.lineSeparator,  0,  lineLength);  [CE]  :  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(CHUNK_SEPARATOR,  1,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(CHUNK_SEPARATOR,  1,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    urlSafe?    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  :  expected	92	None	replace
668	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  ||  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe  ||  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe  ||  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    urlSafe?    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	92	None	replace
669	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.lineSeparator,  lineLength);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  this.lineSeparator,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.lineSeparator,  lineLength);	  System.arraycopy(base64,    0,    this.lineSeparator,    lineLength);    	non-compiled	[CE]  ';'  expected	16	None	replace
670	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  lineLength);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(lineSeparator,  0,  this.lineSeparator,  lineLength);	  System.arraycopy(base64,    0,    this.lineSeparator,    lineLength);    	non-compiled	[CE]  ';'  expected	16	None	replace
671	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.base64Separator,  lineLength);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  this.base64Separator,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.base64Separator,  lineLength);	  System.arraycopy(base64,    0,    this.lineSeparator,    lineLength);    	non-compiled	[CE]  ';'  expected	16	None	replace
672	[BUG]  [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  lineLength);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(sep,  0,  this.lineSeparator,  lineLength);	  System.arraycopy(base64,    0,    this.lineSeparator,    lineLength);    	non-compiled	[CE]  ';'  expected	16	None	replace
673	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.base64,  lineLength);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  this.base64,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.base64,  lineLength);	  System.arraycopy(base64,    0,    this.lineSeparator,    lineLength);    	non-compiled	[CE]  ';'  expected	16	None	replace
674	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  lineSeparator,  0,  urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  lineSeparator,  0,  urlSafe);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	146	None	replace
675	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  urlSafe);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  urlSafe);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	146	None	replace
676	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  lineSeparator,  0,  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  lineSeparator,  0,  this.lineSeparator.length);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	146	None	replace
677	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  urlSafe.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  urlSafe.length);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	146	None	replace
678	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  +  2);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  +  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  +  2);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	17	None	replace
679	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  lineLength  +  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  lineLength  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.lineSeparator,  lineLength  +  1);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	17	None	replace
680	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  +  4);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  +  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  +  4);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	17	None	replace
681	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  +  1);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  +  1);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	126	None	replace
682	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.base64,  0,  this.lineLength);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  this.base64,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.base64,  0,  this.lineLength);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	126	None	replace
683	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.lineSeparator,  lineLength  -  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  this.lineSeparator,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.lineSeparator,  lineLength  -  1);	  System.arraycopy(base64,    0,    this.lineSeparator,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	22	None	replace
684	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  lineLength  -  1);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(lineSeparator,  0,  this.lineSeparator,  lineLength  -  1);	  System.arraycopy(base64,    0,    this.lineSeparator,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	22	None	replace
685	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  lineLength  -  1);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  lineLength  -  1);	  System.arraycopy(base64,    0,    this.lineSeparator,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	22	None	replace
686	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  lineLength  -  2);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  lineLength  -  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.lineSeparator,  lineLength  -  2);	  System.arraycopy(base64,    0,    this.lineSeparator,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	22	None	replace
687	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.lineSeparator,  0,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  this.lineSeparator,  0,  lineSeparator.length  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.lineSeparator,  0,  lineSeparator.length  -  1);	  System.arraycopy(this.base64,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	202	None	replace
688	[BUG]  [BUGGY]  System.arraycopy(this.base64Separator,  0,  this.base64Separator,  0,  base64Length);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64Separator,  0,  this.base64Separator,  0,  base64Length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64Separator,  0,  this.base64Separator,  0,  base64Length);	  System.arraycopy(this.base64Separator,    0,    lineSeparator,    0,    base64Length);    	non-compiled	[CE]  ';'  expected	186	None	replace
689	[BUG]  [BUGGY]  System.arraycopy(base64Separator,  0,  this.base64Separator,  0,  base64Length);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64Separator,  0,  this.base64Separator,  0,  base64Length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64Separator,  0,  this.base64Separator,  0,  base64Length);	  System.arraycopy(this.base64Separator,    0,    lineSeparator,    0,    base64Length);    	non-compiled	[CE]  ';'  expected	186	None	replace
690	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.base64Separator,  0,  base64Length);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.base64Separator,  0,  base64Length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.base64Separator,  0,  base64Length);	  System.arraycopy(this.base64Separator,    0,    lineSeparator,    0,    base64Length);    	non-compiled	[CE]  ';'  expected	186	None	replace
691	[BUG]  [BUGGY]  System.arraycopy(Base64Separator,  0,  this.base64Separator,  0,  base64Length);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator,  0,  this.base64Separator,  0,  base64Length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator,  0,  this.base64Separator,  0,  base64Length);	  System.arraycopy(this.base64Separator,    0,    lineSeparator,    0,    base64Length);    	non-compiled	[CE]  ';'  expected	186	None	replace
692	[BUG]  [BUGGY]  System.arraycopy(this.base64Separator,  0,  this.lineSeparator,  0,  base64Length);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64Separator,  0,  this.lineSeparator,  0,  base64Length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64Separator,  0,  this.lineSeparator,  0,  base64Length);	  System.arraycopy(this.base64Separator,    0,    lineSeparator,    0,    base64Length);    	non-compiled	[CE]  ';'  expected	186	None	replace
693	[BUG]  [BUGGY]  System.arraycopy(this.base64Separator,  0,  lineSeparator,  0,  this.base64Length);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64Separator,  0,  lineSeparator,  0,  this.base64Length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64Separator,  0,  lineSeparator,  0,  this.base64Length);	  System.arraycopy(this.base64Separator,    0,    lineSeparator,    0,    base64Length);    	non-compiled	[CE]  ';'  expected	186	None	replace
694	[BUG]  [BUGGY]  this.encodeSize  =  0  +  this.base64Separator.length  -  1;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  0  +  this.base64Separator.length  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  0  +  this.base64Separator.length  -  1;	  this.encodeSize    =    0    +    this.base64Separator.length;    	non-compiled	[CE]  ';'  expected	46	None	replace
695	[BUG]  [BUGGY]  this.decodeSize  =  0  +  this.base64Separator.length;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.decodeSize  =  0  +  this.base64Separator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.decodeSize  =  0  +  this.base64Separator.length;	  this.encodeSize    =    0    +    this.base64Separator.length;    	non-compiled	[CE]  ';'  expected	46	None	replace
696	[BUG]  [BUGGY]  this.encodeSize  =  4  +  this.base64Separator.length;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  4  +  this.base64Separator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  4  +  this.base64Separator.length;	  this.encodeSize    =    0    +    this.base64Separator.length;    	non-compiled	[CE]  ';'  expected	46	None	replace
697	[BUG]  [BUGGY]  this.encodeSize  =  0  +  this.base64Separator.length  -  2;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  0  +  this.base64Separator.length  -  2;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  0  +  this.base64Separator.length  -  2;	  this.encodeSize    =    0    +    this.base64Separator.length;    	non-compiled	[CE]  ';'  expected	46	None	replace
698	[BUG]  [BUGGY]  this.encodeSize  =  0,  this.base64Separator.length;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  0,  this.base64Separator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  0,  this.base64Separator.length;	  this.encodeSize    =    0    +    this.base64Separator.length;    	non-compiled	[CE]  ';'  expected	46	None	replace
699	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(separator,  urlSafe);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(separator,  urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(separator,  urlSafe);	  String    sep    =    StringUtils.newStringUtf8(separator);    	non-compiled	[CE]  ';'  expected	162	None	replace
700	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(separator,  lineSeparator.length);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(separator,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(separator,  lineSeparator.length);	  String    sep    =    StringUtils.newStringUtf8(separator);    	non-compiled	[CE]  ';'  expected	162	None	replace
701	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(separator,  this.urlSafe);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(separator,  this.urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(separator,  this.urlSafe);	  String    sep    =    StringUtils.newStringUtf8(separator);    	non-compiled	[CE]  ';'  expected	162	None	replace
702	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(separator,  lineLength);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(separator,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(separator,  lineLength);	  String    sep    =    StringUtils.newStringUtf8(separator);    	non-compiled	[CE]  ';'  expected	162	None	replace
703	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.base64,  0,  lineLength);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64,  0,  this.base64,  0,  lineLength);  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.base64,  0,  lineLength);	  System.arraycopy(this.base64,    0,    this.base64,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	34	None	replace
704	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.DEFAULT_BUFFER_RESIZE_FACTOR,  0,  this.base64,  0,  lineLength);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.DEFAULT_BUFFER_RESIZE_FACTOR,  0,  this.base64,  0,  lineLength);  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.DEFAULT_BUFFER_RESIZE_FACTOR,  0,  this.base64,  0,  lineLength);	  System.arraycopy(this.base64,    0,    this.base64,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	34	None	replace
705	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.base64,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  this.base64,  0,  lineLength  -  1);  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.base64,  0,  lineLength  -  1);	  System.arraycopy(this.base64,    0,    this.base64,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	34	None	replace
706	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.base64,  0,  this.baseLength);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  this.base64,  0,  this.baseLength);  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.base64,  0,  this.baseLength);	  System.arraycopy(this.base64,    0,    this.base64,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	34	None	replace
707	[BUG]  [BUGGY]  System.arraycopy(Base64.BASE64,  0,  this.base64,  0,  lineLength);  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64.BASE64,  0,  this.base64,  0,  lineLength);  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64.BASE64,  0,  this.base64,  0,  lineLength);	  System.arraycopy(this.base64,    0,    this.base64,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	34	None	replace
708	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.base64,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  this.base64,  0,  lineLength  +  1);  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.base64,  0,  lineLength  +  1);	  System.arraycopy(this.base64,    0,    this.base64,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	34	None	replace
709	[BUG]  [BUGGY]  System.arraycopy(Base64DECODE_TABLE,  0,  this.base64,  0,  lineLength);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64DECODE_TABLE,  0,  this.base64,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64DECODE_TABLE,  0,  this.base64,  0,  lineLength);	  System.arraycopy(Base64DECODE_TABLE,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	200	None	replace
710	[BUG]  [BUGGY]  System.arraycopy(Base64DECODE_TABLE,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64DECODE_TABLE,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64DECODE_TABLE,  0,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(Base64DECODE_TABLE,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	200	None	replace
711	[BUG]  [BUGGY]  System.arraycopy(Base64DECODE_TABLE,  0,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64DECODE_TABLE,  0,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64DECODE_TABLE,  0,  this.lineSeparator,  0,  lineLength  -  1);	  System.arraycopy(Base64DECODE_TABLE,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	200	None	replace
712	[BUG]  [BUGGY]  System.arraycopy(Base64DECODE_TABLE,  0,  this.base64Separator,  0,  lineLength);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64DECODE_TABLE,  0,  this.base64Separator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64DECODE_TABLE,  0,  this.base64Separator,  0,  lineLength);	  System.arraycopy(Base64DECODE_TABLE,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	200	None	replace
713	[BUG]  [BUGGY]  System.arraycopy(Base64DECODE_TABLE,  0,  this.lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64DECODE_TABLE,  0,  this.lineSeparator,  0,  urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64DECODE_TABLE,  0,  this.lineSeparator,  0,  urlSafe);	  System.arraycopy(Base64DECODE_TABLE,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	200	None	replace
714	[BUG]  [BUGGY]  this.encodeSize  =  2  *  this.urlSafe;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  2  *  this.urlSafe;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  2  *  this.urlSafe;	  this.encodeSize    =    2    *    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	12	None	replace
715	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.base64Separator,  0,  this.base64Separator.length);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  this.base64Separator,  0,  this.base64Separator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.base64Separator,  0,  this.base64Separator.length);	  System.arraycopy(this.base64,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	154	None	replace
716	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.base64Separator,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  this.base64Separator,  0,  lineLength  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.base64Separator,  0,  lineLength  +  1);	  System.arraycopy(this.base64,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	154	None	replace
717	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  +  2);  [CE]  :  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  +  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  +  2);	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineLength    +    1);    	non-compiled	[CE]  :  expected	246	None	replace
718	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  +  4);  [CE]  :  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  +  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  +  4);	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineLength    +    1);    	non-compiled	[CE]  :  expected	246	None	replace
719	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  +  3);  [CE]  :  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  +  3);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  +  3);	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineLength    +    1);    	non-compiled	[CE]  :  expected	246	None	replace
720	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineLength  +  1);  [CE]  :  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineLength  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineLength  +  1);	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineLength    +    1);    	non-compiled	[CE]  :  expected	246	None	replace
721	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  +  5);  [CE]  :  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  +  5);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  +  5);	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineLength    +    1);    	non-compiled	[CE]  :  expected	246	None	replace
722	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  +  6);  [CE]  :  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  +  6);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  +  6);	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineLength    +    1);    	non-compiled	[CE]  :  expected	246	None	replace
723	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  +  4);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  +  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  +  4);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	145	None	replace
724	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  +  3);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  +  3);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  +  3);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	145	None	replace
725	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  +  6);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  +  6);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  +  6);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	145	None	replace
726	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  +  5);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  +  5);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  +  5);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	145	None	replace
727	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineLength  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineLength  +  1);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	36	None	replace
728	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  this.base64,  0,  lineLength);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  this.base64,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  this.base64,  0,  lineLength);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	36	None	replace
729	[BUG]  [BUGGY]  System.arraycopy(base64Separator,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64Separator,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64Separator,  0,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(base64Separator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	78	None	replace
730	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64,  this.lineSeparator));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64,  this.lineSeparator));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.base64,  this.lineSeparator));	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,    this.lineSeparator));    	non-compiled	[CE]  ';'  expected	62	None	replace
731	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.decodeTable,  this.lineSeparator));  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.decodeTable,  this.lineSeparator));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.decodeTable,  this.lineSeparator));	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,    this.lineSeparator));    	non-compiled	[CE]  ';'  expected	62	None	replace
732	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  this.lineSeparator,  lineLength));  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  this.lineSeparator,  lineLength));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  this.lineSeparator,  lineLength));	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,    this.lineSeparator));    	non-compiled	[CE]  ';'  expected	62	None	replace
733	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  5,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  5,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  5,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    4,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	91	None	replace
734	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    4,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	91	None	replace
735	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.toByteArray(this.lineSeparator,  0,  this.lineSeparator.length));  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.toByteArray(this.lineSeparator,  0,  this.lineSeparator.length));  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.toByteArray(this.lineSeparator,  0,  this.lineSeparator.length));	  System.arraycopy(Base64Utils.toByteArray(this.lineSeparator,    0,    lineLength));    	non-compiled	[CE]  ';'  expected	169	None	replace
736	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.toByteArray(this.lineSeparator,  0,  lineSeparator.length));  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.toByteArray(this.lineSeparator,  0,  lineSeparator.length));  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.toByteArray(this.lineSeparator,  0,  lineSeparator.length));	  System.arraycopy(Base64Utils.toByteArray(this.lineSeparator,    0,    lineLength));    	non-compiled	[CE]  ';'  expected	169	None	replace
737	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.toByteArray(this.lineSeparator,  0,  this.lineLength));  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.toByteArray(this.lineSeparator,  0,  this.lineLength));  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.toByteArray(this.lineSeparator,  0,  this.lineLength));	  System.arraycopy(Base64Utils.toByteArray(this.lineSeparator,    0,    lineLength));    	non-compiled	[CE]  ';'  expected	169	None	replace
738	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.toByteArray(this.base64,  0,  lineSeparator.length));  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.toByteArray(this.base64,  0,  lineSeparator.length));  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.toByteArray(this.base64,  0,  lineSeparator.length));	  System.arraycopy(Base64Utils.toByteArray(this.lineSeparator,    0,    lineLength));    	non-compiled	[CE]  ';'  expected	169	None	replace
739	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.toByteArray(this.urlSafe,  0,  this.lineSeparator.length));  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.toByteArray(this.urlSafe,  0,  this.lineSeparator.length));  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.toByteArray(this.urlSafe,  0,  this.lineSeparator.length));	  System.arraycopy(Base64Utils.toByteArray(this.lineSeparator,    0,    lineLength));    	non-compiled	[CE]  ';'  expected	169	None	replace
740	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.toByteArray(this.decodeSize,  0,  this.lineSeparator.length));  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.toByteArray(this.decodeSize,  0,  this.lineSeparator.length));  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.toByteArray(this.decodeSize,  0,  this.lineSeparator.length));	  System.arraycopy(Base64Utils.toByteArray(this.lineSeparator,    0,    lineLength));    	non-compiled	[CE]  ';'  expected	169	None	replace
741	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.toByteArray(this.base64,  0,  this.base64));  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.toByteArray(this.base64,  0,  this.base64));  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.toByteArray(this.base64,  0,  this.base64));	  System.arraycopy(Base64Utils.toByteArray(this.lineSeparator,    0,    lineLength));    	non-compiled	[CE]  ';'  expected	169	None	replace
742	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.toByteArray(this.base64,  0,  this.lineSeparator.length));  [CE]  ';'  expected  [FE]                                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.toByteArray(this.base64,  0,  this.lineSeparator.length));  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.toByteArray(this.base64,  0,  this.lineSeparator.length));	  System.arraycopy(Base64Utils.toByteArray(this.lineSeparator,    0,    lineLength));    	non-compiled	[CE]  ';'  expected	169	None	replace
743	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.toByteArray(this.decodeTable,  0,  this.lineSeparator.length));  [CE]  ';'  expected  [FE]                                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.toByteArray(this.decodeTable,  0,  this.lineSeparator.length));  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.toByteArray(this.decodeTable,  0,  this.lineSeparator.length));	  System.arraycopy(Base64Utils.toByteArray(this.lineSeparator,    0,    lineLength));    	non-compiled	[CE]  ';'  expected	169	None	replace
744	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  base64.length);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  base64.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  base64.length);	  System.arraycopy(base64,    0,    this.lineSeparator,    0,    base64.length);    	non-compiled	[CE]  ';'  expected	233	None	replace
745	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	  System.arraycopy(base64,    0,    this.lineSeparator,    0,    base64.length);    	non-compiled	[CE]  ';'  expected	233	None	replace
746	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  base64.length);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  base64.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  base64.length);	  System.arraycopy(base64,    0,    this.lineSeparator,    0,    base64.length);    	non-compiled	[CE]  ';'  expected	233	None	replace
747	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.base64,  0,  base64.length);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  this.base64,  0,  base64.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.base64,  0,  base64.length);	  System.arraycopy(base64,    0,    this.lineSeparator,    0,    base64.length);    	non-compiled	[CE]  ';'  expected	233	None	replace
748	[BUG]  [BUGGY]  System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  this.base64Size.length);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  this.base64Size.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  this.base64Size.length);	  System.arraycopy(Base64Byte,    0,    this.base64Separator,    0,    this.base64Separator.length);    	non-compiled	[CE]  ';'  expected	230	None	replace
749	[BUG]  [BUGGY]  System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  this.base64Separator.length  -  1);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  this.base64Separator.length  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  this.base64Separator.length  -  1);	  System.arraycopy(Base64Byte,    0,    this.base64Separator,    0,    this.base64Separator.length);    	non-compiled	[CE]  ';'  expected	230	None	replace
750	[BUG]  [BUGGY]  System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  lineSeparator.length);	  System.arraycopy(Base64Byte,    0,    this.base64Separator,    0,    this.base64Separator.length);    	non-compiled	[CE]  ';'  expected	230	None	replace
751	[BUG]  [BUGGY]  System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  this.base64Separator.length  +  1);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  this.base64Separator.length  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  this.base64Separator.length  +  1);	  System.arraycopy(Base64Byte,    0,    this.base64Separator,    0,    this.base64Separator.length);    	non-compiled	[CE]  ';'  expected	230	None	replace
752	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64Separator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64Separator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64Separator,  0,  this.lineLength);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	148	None	replace
753	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64Separator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64Separator,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64Separator,  0,  lineLength  -  1);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	148	None	replace
754	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  this.base64Separator,  0,  lineLength);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  this.base64Separator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  this.base64Separator,  0,  lineLength);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	148	None	replace
755	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64Separator,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64Separator,  0,  lineLength  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64Separator,  0,  lineLength  +  1);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	148	None	replace
756	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64Separator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64Separator,  0,  urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64Separator,  0,  urlSafe);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	148	None	replace
757	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  lineSeparator,  0,  this.base64Separator.length);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  lineSeparator,  0,  this.base64Separator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  lineSeparator,  0,  this.base64Separator.length);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	148	None	replace
758	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  1,  this.base64Separator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  1,  this.base64Separator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  1,  this.base64Separator,  0,  lineLength);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	148	None	replace
759	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  lineSeparator,  0,  this.base64Separator.length);  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  lineSeparator,  0,  this.base64Separator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  lineSeparator,  0,  this.base64Separator.length);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	148	None	replace
760	[BUG]  [BUGGY]  this.encodeSize  =  6  +  this.lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  6  +  this.lineSeparator.length  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  6  +  this.lineSeparator.length  -  1;	  this.encodeSize    =    6    +    lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	53	None	replace
761	[BUG]  [BUGGY]  this.encodeSize  =  6  +  this.urlSafe?  lineSeparator.length  -  1  :  0;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  6  +  this.urlSafe?  lineSeparator.length  -  1  :  0;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  6  +  this.urlSafe?  lineSeparator.length  -  1  :  0;	  this.encodeSize    =    6    +    lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	53	None	replace
762	[BUG]  [BUGGY]  this.encodeSize  =  6  +  this.urlSafe?  lineSeparator.length  :  1;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  6  +  this.urlSafe?  lineSeparator.length  :  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  6  +  this.urlSafe?  lineSeparator.length  :  1;	  this.encodeSize    =    6    +    lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	53	None	replace
763	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength):  1;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength):  1;  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength):  1;	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineLength):    0;    	non-compiled	[CE]  ';'  expected	245	None	replace
764	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineLength):  0;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineLength):  0;  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineLength):  0;	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineLength):    0;    	non-compiled	[CE]  ';'  expected	245	None	replace
765	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength):  -1;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength):  -1;  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength):  -1;	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineLength):    0;    	non-compiled	[CE]  ';'  expected	245	None	replace
766	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  +  1):  0;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  +  1):  0;  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  +  1):  0;	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineLength):    0;    	non-compiled	[CE]  ';'  expected	245	None	replace
767	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.base64Separator,  0,  this.base64Separator,  0,  lineLength);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.base64Separator,  0,  this.base64Separator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.base64Separator,  0,  this.base64Separator,  0,  lineLength);	  System.arraycopy(Base64Utils.base64Byte,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	183	None	replace
768	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.base64Byte,  0,  this.base64Separator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.base64Byte,  0,  this.base64Separator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.base64Byte,  0,  this.base64Separator,  0,  this.lineLength);	  System.arraycopy(Base64Utils.base64Byte,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	183	None	replace
769	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.base64Byte,  0,  this.base64Separator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.base64Byte,  0,  this.base64Separator,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.base64Byte,  0,  this.base64Separator,  0,  lineLength  -  1);	  System.arraycopy(Base64Utils.base64Byte,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	183	None	replace
770	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.base64,  0,  this.base64Separator,  0,  lineLength);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.base64,  0,  this.base64Separator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.base64,  0,  this.base64Separator,  0,  lineLength);	  System.arraycopy(Base64Utils.base64Byte,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	183	None	replace
771	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.base64Byte,  0,  this.base64Separator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.base64Byte,  0,  this.base64Separator,  0,  urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.base64Byte,  0,  this.base64Separator,  0,  urlSafe);	  System.arraycopy(Base64Utils.base64Byte,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	183	None	replace
772	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.base64Byte,  0,  this.base64Separator,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.base64Byte,  0,  this.base64Separator,  0,  lineLength  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.base64Byte,  0,  this.base64Separator,  0,  lineLength  +  1);	  System.arraycopy(Base64Utils.base64Byte,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	183	None	replace
773	[BUG]  [BUGGY]  this.encodeSize  =  5  +  this.urlSafe?  lineSeparator.length  -  1  :  0;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  5  +  this.urlSafe?  lineSeparator.length  -  1  :  0;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  5  +  this.urlSafe?  lineSeparator.length  -  1  :  0;	  this.encodeSize    =    5    +    lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	128	None	replace
774	[BUG]  [BUGGY]  this.encodeSize  =  5  +  this.urlSafe?  lineSeparator.length  :  1;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  5  +  this.urlSafe?  lineSeparator.length  :  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  5  +  this.urlSafe?  lineSeparator.length  :  1;	  this.encodeSize    =    5    +    lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	128	None	replace
775	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64,  0,  this.urlSafe,  0,  lineLength);  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64,  0,  this.urlSafe,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.base64,  0,  this.urlSafe,  0,  lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),    0,    this.urlSafe,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	171	None	replace
776	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator),  0,  this.urlSafe,  0,  lineLength);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator),  0,  this.urlSafe,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(lineSeparator),  0,  this.urlSafe,  0,  lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),    0,    this.urlSafe,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	171	None	replace
777	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),  0,  this.urlSafe,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),  0,  this.urlSafe,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),  0,  this.urlSafe,  0,  this.lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),    0,    this.urlSafe,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	171	None	replace
778	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  lineSeparator,  0,  this.lineLength);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	216	None	replace
779	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  lineSeparator,  0,  this.urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  lineSeparator,  0,  this.urlSafe);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	216	None	replace
780	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  lineSeparator,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  lineSeparator,  0,  lineLength  -  1);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	216	None	replace
781	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  lineSeparator,  0,  urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  lineSeparator,  0,  urlSafe);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	216	None	replace
782	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  lineSeparator,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  lineSeparator,  0,  lineLength  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  lineSeparator,  0,  lineLength  +  1);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	216	None	replace
783	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  this.base64,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  this.base64,  lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  this.base64,  lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	216	None	replace
784	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  1,  this.base64,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  1,  this.base64,  lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  1,  this.base64,  lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	216	None	replace
785	[BUG]  [BUGGY]  this.encodeSize  =  7  +  lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  7  +  lineSeparator.length  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  7  +  lineSeparator.length  -  1;	  this.encodeSize    =    7    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	198	None	replace
786	[BUG]  [BUGGY]  this.encodeSize  =  7  +  this.lineSeparator.length;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  7  +  this.lineSeparator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  7  +  this.lineSeparator.length;	  this.encodeSize    =    7    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	198	None	replace
787	[BUG]  [BUGGY]  this.encodeSize  =  7  +  lineLength;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  7  +  lineLength;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  7  +  lineLength;	  this.encodeSize    =    7    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	198	None	replace
788	[BUG]  [BUGGY]  this.encodeSize  =  7  +  this.urlSafe;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  7  +  this.urlSafe;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  7  +  this.urlSafe;	  this.encodeSize    =    7    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	198	None	replace
789	[BUG]  [BUGGY]  this.encodeSize  =  7  +  this.base64Separator.length;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  7  +  this.base64Separator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  7  +  this.base64Separator.length;	  this.encodeSize    =    7    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	198	None	replace
790	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength  /  3);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength  /  3);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength  /  3);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    /    3);    	non-compiled	[CE]  ';'  expected	108	None	replace
791	[BUG]  [BUGGY]  this.encodeSize  =  6  *  this.lineSeparator.length;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  6  *  this.lineSeparator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  6  *  this.lineSeparator.length;	  this.encodeSize    =    6    +    this.lineSeparator.length;    	non-compiled	[CE]  ';'  expected	54	None	replace
792	[BUG]  [BUGGY]  this.lineSize  =  6  +  this.lineSeparator.length;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSize  =  6  +  this.lineSeparator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSize  =  6  +  this.lineSeparator.length;	  this.encodeSize    =    6    +    this.lineSeparator.length;    	non-compiled	[CE]  ';'  expected	54	None	replace
793	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  -  3);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  -  3);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  -  3);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	211	None	replace
794	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.lineLength);	  System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	206	None	replace
795	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  lineSeparator,  0,  lineLength);	  System.arraycopy(lineSeparator,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	47	None	replace
796	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  4,  this.base64,  0,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  4,  this.base64,  0,  lineSeparator.length  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  4,  this.base64,  0,  lineSeparator.length  -  1);	  System.arraycopy(Base64Byte.DEFAULT,    4,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	252	None	replace
797	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  5,  this.base64,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  5,  this.base64,  0,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  5,  this.base64,  0,  lineSeparator.length);	  System.arraycopy(Base64Byte.DEFAULT,    4,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	252	None	replace
798	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  lineSeparator.length);	  System.arraycopy(Base64Byte.DEFAULT,    4,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	252	None	replace
799	[BUG]  [BUGGY]  System.arraycopy(this.base64Separator,  0,  this.base64Byte,  0,  this.base64Separator.length);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64Separator,  0,  this.base64Byte,  0,  this.base64Separator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64Separator,  0,  this.base64Byte,  0,  this.base64Separator.length);	  System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    this.base64Separator.length);    	non-compiled	[CE]  ';'  expected	226	None	replace
800	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(base64,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(base64,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(base64,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	69	None	replace
801	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  0,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	69	None	replace
802	[BUG]  [BUGGY]  this.encodeSize  =  4  *  this.urlSafe  -  1;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  4  *  this.urlSafe  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  4  *  this.urlSafe  -  1;	  this.encodeSize    =    4    *    this.urlSafe;    	non-compiled	[CE]  ';'  expected	15	None	replace
803	[BUG]  [BUGGY]  this.encodeSize  =  4  *  this.urlSafe  +  1;  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  4  *  this.urlSafe  +  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  4  *  this.urlSafe  +  1;	  this.encodeSize    =    4    *    this.urlSafe;    	non-compiled	[CE]  ';'  expected	15	None	replace
804	[BUG]  [BUGGY]  this.encodeSize  =  0  *  this.urlSafe;  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  0  *  this.urlSafe;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  0  *  this.urlSafe;	  this.encodeSize    =    4    *    this.urlSafe;    	non-compiled	[CE]  ';'  expected	15	None	replace
805	[BUG]  [BUGGY]  this.encodeSize  =  4  *  this.lineSeparator;  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  4  *  this.lineSeparator;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  4  *  this.lineSeparator;	  this.encodeSize    =    4    *    this.urlSafe;    	non-compiled	[CE]  ';'  expected	15	None	replace
806	[BUG]  [BUGGY]  this.encodeSize  =  2  +  this.urlSafe  -  1;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  2  +  this.urlSafe  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  2  +  this.urlSafe  -  1;	  this.encodeSize    =    2    +    this.urlSafe;    	non-compiled	[CE]  ';'  expected	101	None	replace
807	[BUG]  [BUGGY]  this.encodeSize  =  2  +  this.lineSeparator;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  2  +  this.lineSeparator;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  2  +  this.lineSeparator;	  this.encodeSize    =    2    +    this.urlSafe;    	non-compiled	[CE]  ';'  expected	101	None	replace
808	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(lineSeparator  +  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(lineSeparator  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(lineSeparator  +  1);	  String    sep    =    StringUtils.newStringUtf8(sep    +    1);    	non-compiled	[CE]  ';'  expected	160	None	replace
809	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(lineLength  +  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(lineLength  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(lineLength  +  1);	  String    sep    =    StringUtils.newStringUtf8(sep    +    1);    	non-compiled	[CE]  ';'  expected	160	None	replace
810	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep  +  2);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep  +  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(sep  +  2);	  String    sep    =    StringUtils.newStringUtf8(sep    +    1);    	non-compiled	[CE]  ';'  expected	160	None	replace
811	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.urlSafe  +  1);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.urlSafe  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(this.urlSafe  +  1);	  String    sep    =    StringUtils.newStringUtf8(sep    +    1);    	non-compiled	[CE]  ';'  expected	160	None	replace
812	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(lineSeparator.length  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(lineSeparator.length  +  1);	  String    sep    =    StringUtils.newStringUtf8(sep    +    1);    	non-compiled	[CE]  ';'  expected	160	None	replace
813	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.decodeSize  +  1);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.decodeSize  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(this.decodeSize  +  1);	  String    sep    =    StringUtils.newStringUtf8(sep    +    1);    	non-compiled	[CE]  ';'  expected	160	None	replace
814	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  lineSeparator,  0,  urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  lineSeparator,  0,  urlSafe);	  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	87	None	replace
815	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe.length);	  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	87	None	replace
816	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  fileLength);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  fileLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  fileLength);	  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	87	None	replace
817	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  1,  this.lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  1,  this.lineSeparator,  0,  urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  1,  this.lineSeparator,  0,  urlSafe);	  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	87	None	replace
818	[BUG]  [BUGGY]  this.encodeSize  =  5  +  lineLength  -  1;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  5  +  lineLength  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  5  +  lineLength  -  1;	  this.encodeSize    =    5    +    lineLength;    	non-compiled	[CE]  ';'  expected	166	None	replace
819	[BUG]  [BUGGY]  this.encodeSize  =  4  +  lineLength;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  4  +  lineLength;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  4  +  lineLength;	  this.encodeSize    =    5    +    lineLength;    	non-compiled	[CE]  ';'  expected	166	None	replace
820	[BUG]  [BUGGY]  this.encodeSize  =  5  +  this.lineLength;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  5  +  this.lineLength;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  5  +  this.lineLength;	  this.encodeSize    =    5    +    lineLength;    	non-compiled	[CE]  ';'  expected	166	None	replace
821	[BUG]  [BUGGY]  this.encodeSize  =  3  +  lineLength;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  3  +  lineLength;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  3  +  lineLength;	  this.encodeSize    =    5    +    lineLength;    	non-compiled	[CE]  ';'  expected	166	None	replace
822	[BUG]  [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineLength  /  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineLength  /  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineLength  /  1);	  System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	79	None	replace
823	[BUG]  [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineLength  -  2);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineLength  -  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineLength  -  2);	  System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	79	None	replace
824	[BUG]  [BUGGY]  System.arraycopy(base64Separator,  0,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64Separator,  0,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64Separator,  0,  this.lineSeparator,  0,  lineLength  -  1);	  System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	79	None	replace
825	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength  -  1);	  System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	79	None	replace
826	[BUG]  [BUGGY]  this.encodeSize  =  6  +  lineLength  -  1;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  6  +  lineLength  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  6  +  lineLength  -  1;	  this.encodeSize    =    6    +    lineLength;    	non-compiled	[CE]  ';'  expected	55	None	replace
827	[BUG]  [BUGGY]  this.encodeSize  =  6  +  this.urlSafe;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  6  +  this.urlSafe;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  6  +  this.urlSafe;	  this.encodeSize    =    6    +    lineLength;    	non-compiled	[CE]  ';'  expected	55	None	replace
828	[BUG]  [BUGGY]  this.encodeSize  =  6  *  lineLength;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  6  *  lineLength;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  6  *  lineLength;	  this.encodeSize    =    6    +    lineLength;    	non-compiled	[CE]  ';'  expected	55	None	replace
829	[BUG]  [BUGGY]  this.encodeSize  =  6  +  this.lineLength;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  6  +  this.lineLength;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  6  +  this.lineLength;	  this.encodeSize    =    6    +    lineLength;    	non-compiled	[CE]  ';'  expected	55	None	replace
830	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength  /  4  +  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength  /  4  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength  /  4  +  1);	  System.arraycopy(base64,    0,    this.lineSeparator,    0,    lineLength    /    4);    	non-compiled	[CE]  ';'  expected	133	None	replace
831	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.lineSeparator,  0,  lineLength  /  4);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  this.lineSeparator,  0,  lineLength  /  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.lineSeparator,  0,  lineLength  /  4);	  System.arraycopy(base64,    0,    this.lineSeparator,    0,    lineLength    /    4);    	non-compiled	[CE]  ';'  expected	133	None	replace
832	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  4);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  4);	  System.arraycopy(base64,    0,    this.lineSeparator,    0,    lineLength    /    4);    	non-compiled	[CE]  ';'  expected	133	None	replace
833	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  :  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.lineLength);	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  :  expected	247	None	replace
834	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.line,  0,  lineSeparator,  0,  lineLength);  [CE]  :  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.line,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.line,  0,  lineSeparator,  0,  lineLength);	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  :  expected	247	None	replace
835	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength  +  1);  [CE]  :  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength  +  1);	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  :  expected	247	None	replace
836	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength):  0;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength):  0;  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength):  0;	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	247	None	replace
837	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.line_separator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  :  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.line_separator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.line_separator,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  :  expected	247	None	replace
838	[BUG]  [BUGGY]  String  sep  =  StringUtils.newBase64Separator(this.urlSafe);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newBase64Separator(this.urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newBase64Separator(this.urlSafe);	  String    sep    =    StringUtils.newBase64Separator(sep);    	non-compiled	[CE]  ';'  expected	208	None	replace
839	[BUG]  [BUGGY]  String  sep  =  StringUtils.newBase64Separator(lineSeparator);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newBase64Separator(lineSeparator);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newBase64Separator(lineSeparator);	  String    sep    =    StringUtils.newBase64Separator(sep);    	non-compiled	[CE]  ';'  expected	208	None	replace
840	[BUG]  [BUGGY]  String  sep  =  StringUtils.newSeparator(sep);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newSeparator(sep);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newSeparator(sep);	  String    sep    =    StringUtils.newBase64Separator(sep);    	non-compiled	[CE]  ';'  expected	208	None	replace
841	[BUG]  [BUGGY]  String  sep  =  StringUtils.newBase64Separator(this.base64);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newBase64Separator(this.base64);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newBase64Separator(this.base64);	  String    sep    =    StringUtils.newBase64Separator(sep);    	non-compiled	[CE]  ';'  expected	208	None	replace
842	[BUG]  [BUGGY]  String  sep  =  StringUtils.newBase64Separator(sep,  urlSafe);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newBase64Separator(sep,  urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newBase64Separator(sep,  urlSafe);	  String    sep    =    StringUtils.newBase64Separator(sep);    	non-compiled	[CE]  ';'  expected	208	None	replace
843	[BUG]  [BUGGY]  String  sep  =  StringUtils.newBase64Separator(base64);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newBase64Separator(base64);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newBase64Separator(base64);	  String    sep    =    StringUtils.newBase64Separator(sep);    	non-compiled	[CE]  ';'  expected	208	None	replace
844	[BUG]  [BUGGY]  String  sep  =  StringUtils.newBase64Separator(sep  +  1);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newBase64Separator(sep  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newBase64Separator(sep  +  1);	  String    sep    =    StringUtils.newBase64Separator(sep);    	non-compiled	[CE]  ';'  expected	208	None	replace
845	[BUG]  [BUGGY]  this.encodeSize  =  0  +  1;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  0  +  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  0  +  1;	  this.encodeSize    =    0    +    lineLength;    	non-compiled	[CE]  ';'  expected	189	None	replace
846	[BUG]  [BUGGY]  this.encodeSize  =  0  +  lineLength  -  1;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  0  +  lineLength  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  0  +  lineLength  -  1;	  this.encodeSize    =    0    +    lineLength;    	non-compiled	[CE]  ';'  expected	189	None	replace
847	[BUG]  [BUGGY]  this.encodeSize  =  0  +  this.lineLength;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  0  +  this.lineLength;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  0  +  this.lineLength;	  this.encodeSize    =    0    +    lineLength;    	non-compiled	[CE]  ';'  expected	189	None	replace
848	[BUG]  [BUGGY]  this.encodeSize  =  6  *  this.urlSafe;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  6  *  this.urlSafe;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  6  *  this.urlSafe;	  this.encodeSize    =    6    *    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	56	None	replace
849	[BUG]  [BUGGY]  this.encodeSize  =  6  *  this.base64Separator.length;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  6  *  this.base64Separator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  6  *  this.base64Separator.length;	  this.encodeSize    =    6    *    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	56	None	replace
850	[BUG]  [BUGGY]  this.encodeSize  =  0  +  this.urlSafe?  lineSeparator.length  -  1  :  0;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  0  +  this.urlSafe?  lineSeparator.length  -  1  :  0;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  0  +  this.urlSafe?  lineSeparator.length  -  1  :  0;	  this.encodeSize    =    0    +    lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	45	None	replace
851	[BUG]  [BUGGY]  this.lineSize  =  0  +  lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSize  =  0  +  lineSeparator.length  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSize  =  0  +  lineSeparator.length  -  1;	  this.encodeSize    =    0    +    lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	45	None	replace
852	[BUG]  [BUGGY]  this.decodeSize  =  0  +  lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.decodeSize  =  0  +  lineSeparator.length  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.decodeSize  =  0  +  lineSeparator.length  -  1;	  this.encodeSize    =    0    +    lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	45	None	replace
853	[BUG]  [BUGGY]  this.encodeSize  =  0  +  lineSeparator.length  /  1;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  0  +  lineSeparator.length  /  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  0  +  lineSeparator.length  /  1;	  this.encodeSize    =    0    +    lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	45	None	replace
854	[BUG]  [BUGGY]  this.encodeSize  =  0,  this.lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  0,  this.lineSeparator.length  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  0,  this.lineSeparator.length  -  1;	  this.encodeSize    =    0    +    lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	45	None	replace
855	[BUG]  [BUGGY]  this.lineSize  =  0;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSize  =  0;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSize  =  0;	  this.encodeSize    =    0    +    this.lineSeparator.length;    	non-compiled	[CE]  ';'  expected	43	None	replace
856	[BUG]  [BUGGY]  this.lineSeparator.length  =  0  +  this.lineSeparator.length;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator.length  =  0  +  this.lineSeparator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator.length  =  0  +  this.lineSeparator.length;	  this.encodeSize    =    0    +    this.lineSeparator.length;    	non-compiled	[CE]  ';'  expected	43	None	replace
857	[BUG]  [BUGGY]  this.lineSeparator.size  =  0  +  this.lineSeparator.length;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator.size  =  0  +  this.lineSeparator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator.size  =  0  +  this.lineSeparator.length;	  this.encodeSize    =    0    +    this.lineSeparator.length;    	non-compiled	[CE]  ';'  expected	43	None	replace
858	[BUG]  [BUGGY]  this.decodeSize  =  0  +  this.lineSeparator.length;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.decodeSize  =  0  +  this.lineSeparator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.decodeSize  =  0  +  this.lineSeparator.length;	  this.encodeSize    =    0    +    this.lineSeparator.length;    	non-compiled	[CE]  ';'  expected	43	None	replace
859	[BUG]  [BUGGY]  this.lineSize  =  0  +  this.lineSeparator.length;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSize  =  0  +  this.lineSeparator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSize  =  0  +  this.lineSeparator.length;	  this.encodeSize    =    0    +    this.lineSeparator.length;    	non-compiled	[CE]  ';'  expected	43	None	replace
860	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.baseSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  this.baseSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.baseSeparator,  0,  lineLength);	  System.arraycopy(this.base64,    0,    lineSeparator,    0,    this.base64.length);    	non-compiled	[CE]  ';'  expected	48	None	replace
861	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.baseSeparator,  0,  this.base64.length);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  this.baseSeparator,  0,  this.base64.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.baseSeparator,  0,  this.base64.length);	  System.arraycopy(this.base64,    0,    lineSeparator,    0,    this.base64.length);    	non-compiled	[CE]  ';'  expected	48	None	replace
862	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.lineSeparator,  0,  this.base64.length);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  this.lineSeparator,  0,  this.base64.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.lineSeparator,  0,  this.base64.length);	  System.arraycopy(this.base64,    0,    lineSeparator,    0,    this.base64.length);    	non-compiled	[CE]  ';'  expected	48	None	replace
863	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.baselineSeparator,  0,  this.base64.length);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  this.baselineSeparator,  0,  this.base64.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.baselineSeparator,  0,  this.base64.length);	  System.arraycopy(this.base64,    0,    lineSeparator,    0,    this.base64.length);    	non-compiled	[CE]  ';'  expected	48	None	replace
864	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.base64,  0,  this.base64.length);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  this.base64,  0,  this.base64.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.base64,  0,  this.base64.length);	  System.arraycopy(this.base64,    0,    lineSeparator,    0,    this.base64.length);    	non-compiled	[CE]  ';'  expected	48	None	replace
865	[BUG]  [BUGGY]  this.encodeSize  =  2  *  lineLength;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  2  *  lineLength;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  2  *  lineLength;	  this.encodeSize    =    2    +    lineLength;    	non-compiled	[CE]  ';'  expected	180	None	replace
866	[BUG]  [BUGGY]  this.encodeSize  =  2  +  lineLength  -  1;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  2  +  lineLength  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  2  +  lineLength  -  1;	  this.encodeSize    =    2    +    lineLength;    	non-compiled	[CE]  ';'  expected	180	None	replace
867	[BUG]  [BUGGY]  this.encodeSize  =  2  +  this.lineLength;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  2  +  this.lineLength;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  2  +  this.lineLength;	  this.encodeSize    =    2    +    lineLength;    	non-compiled	[CE]  ';'  expected	180	None	replace
868	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  4  *  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  4  *  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  4  *  1);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    /    4    +    1);    	non-compiled	[CE]  ';'  expected	131	None	replace
869	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  4  +  2);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  4  +  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  4  +  2);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    /    4    +    1);    	non-compiled	[CE]  ';'  expected	131	None	replace
870	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.baseSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.baseSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.baseSeparator,  0,  lineLength);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.baseSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	38	None	replace
871	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  1,  this.baseSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  1,  this.baseSeparator,  0,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  1,  this.baseSeparator,  0,  lineSeparator.length);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.baseSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	38	None	replace
872	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  lineSeparator,  0,  this.baseSeparator.length);  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  lineSeparator,  0,  this.baseSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  lineSeparator,  0,  this.baseSeparator.length);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.baseSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	38	None	replace
873	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  4,  this.baseSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  4,  this.baseSeparator,  0,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  4,  this.baseSeparator,  0,  lineSeparator.length);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.baseSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	38	None	replace
874	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length  -  4);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length  -  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length  -  4);	  System.arraycopy(base64,    0,    this.base64,    0,    lineSeparator.length    -    4);    	non-compiled	[CE]  ';'  expected	219	None	replace
875	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length  -  2);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length  -  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length  -  2);	  System.arraycopy(base64,    0,    this.base64,    0,    lineSeparator.length    -    4);    	non-compiled	[CE]  ';'  expected	219	None	replace
876	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.base64,  0,  lineSeparator.length  -  2);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64,  0,  this.base64,  0,  lineSeparator.length  -  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.base64,  0,  lineSeparator.length  -  2);	  System.arraycopy(base64,    0,    this.base64,    0,    lineSeparator.length    -    4);    	non-compiled	[CE]  ';'  expected	219	None	replace
877	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.base64,  0,  lineSeparator.length  -  4);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(lineSeparator,  0,  this.base64,  0,  lineSeparator.length  -  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(lineSeparator,  0,  this.base64,  0,  lineSeparator.length  -  4);	  System.arraycopy(base64,    0,    this.base64,    0,    lineSeparator.length    -    4);    	non-compiled	[CE]  ';'  expected	219	None	replace
878	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	254	None	replace
879	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe,  lineLength));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe,  lineLength));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe,  lineLength));	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,    lineLength));    	non-compiled	[CE]  ';'  expected	192	None	replace
880	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  1);	  System.arraycopy(Base64Utils.SCRIPT_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	142	None	replace
881	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe);	  System.arraycopy(Base64Utils.SCRIPT_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	142	None	replace
882	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  1);	  System.arraycopy(Base64Utils.SCRIPT_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	142	None	replace
883	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe);	  System.arraycopy(Base64Utils.SCRIPT_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	142	None	replace
884	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.CRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.CRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.CRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Utils.SCRIPT_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	142	None	replace
885	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineLength  -  1);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineLength  -  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    lineLength);    	non-compiled	[CE]  ';'  expected	236	None	replace
886	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineLength  +  1);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineLength  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineLength  +  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    lineLength);    	non-compiled	[CE]  ';'  expected	236	None	replace
887	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    lineLength);    	non-compiled	[CE]  ';'  expected	236	None	replace
888	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  6);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  6);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  6);	  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    -    2);    	non-compiled	[CE]  ';'  expected	213	None	replace
889	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  2);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  2);	  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    -    2);    	non-compiled	[CE]  ';'  expected	213	None	replace
890	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  this.urlSafe.length);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	235	None	replace
891	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  lineSeparator,  0,  this.urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  lineSeparator,  0,  this.urlSafe);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	235	None	replace
892	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.baseSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.baseSeparator,  0,  this.urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.baseSeparator,  0,  this.urlSafe);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	235	None	replace
893	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  this.urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  this.urlSafe);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	235	None	replace
894	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  this.urlSafe  -  1);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  this.urlSafe  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  this.urlSafe  -  1);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	235	None	replace
895	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.urlSafe,  0,  lineLength);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.urlSafe,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.urlSafe,  0,  lineLength);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	235	None	replace
896	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  6);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  6);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  6);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	30	None	replace
897	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength  +  1);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	30	None	replace
898	[BUG]  [BUGGY]  this.encodeSize  =  2  +  this.base64Separator.length  -  1;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  2  +  this.base64Separator.length  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  2  +  this.base64Separator.length  -  1;	  this.encodeSize    =    2    +    this.base64Separator.length;    	non-compiled	[CE]  ';'  expected	102	None	replace
899	[BUG]  [BUGGY]  this.encodeSize  =  2  -  this.base64Separator.length;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  2  -  this.base64Separator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  2  -  this.base64Separator.length;	  this.encodeSize    =    2    +    this.base64Separator.length;    	non-compiled	[CE]  ';'  expected	102	None	replace
900	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.base64,  0,  lineLength);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.base64,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.base64,  0,  lineLength);	  System.arraycopy(this.base64,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	76	None	replace
901	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  1,  this.base64,  0,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  1,  this.base64,  0,  lineSeparator.length  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  1,  this.base64,  0,  lineSeparator.length  -  1);	  System.arraycopy(Base64Byte.DEFAULT,    1,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	251	None	replace
902	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  lineSeparator,  1,  this.base64,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  lineSeparator,  1,  this.base64,  0,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  lineSeparator,  1,  this.base64,  0,  lineSeparator.length);	  System.arraycopy(Base64Byte.DEFAULT,    1,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	251	None	replace
903	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength  /  2  +  1);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength  /  2  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength  /  2  +  1);	  System.arraycopy(base64,    0,    this.lineSeparator,    0,    lineLength    /    2);    	non-compiled	[CE]  ';'  expected	109	None	replace
904	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.lineSeparator,  0,  lineLength  /  2);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  this.lineSeparator,  0,  lineLength  /  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.lineSeparator,  0,  lineLength  /  2);	  System.arraycopy(base64,    0,    this.lineSeparator,    0,    lineLength    /    2);    	non-compiled	[CE]  ';'  expected	109	None	replace
905	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength  /  2  -  1);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength  /  2  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength  /  2  -  1);	  System.arraycopy(base64,    0,    this.lineSeparator,    0,    lineLength    /    2);    	non-compiled	[CE]  ';'  expected	109	None	replace
906	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  1,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  1,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  1,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(Base64Byte.DEFAULT,    1,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	149	None	replace
907	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  4,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  4,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  4,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Byte.DEFAULT,    1,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	149	None	replace
908	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  1,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  1,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  1,  this.lineSeparator,  0,  lineLength  -  1);	  System.arraycopy(Base64Byte.DEFAULT,    1,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	149	None	replace
909	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  5,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  5,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  5,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Byte.DEFAULT,    1,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	149	None	replace
910	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  /  2);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  /  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  /  2);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    lineLength    -    2);    	non-compiled	[CE]  ';'  expected	178	None	replace
911	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  -  6);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  -  6);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  -  6);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    lineLength    -    2);    	non-compiled	[CE]  ';'  expected	178	None	replace
912	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  4);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  4);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	31	None	replace
913	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  3);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  3);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  3);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	31	None	replace
914	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  0);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  0);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  0);	  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	85	None	replace
915	[BUG]  [BUGGY]  this.encodeSize  =  3  +  this.base64Separator.length  -  2;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  3  +  this.base64Separator.length  -  2;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  3  +  this.base64Separator.length  -  2;	  this.encodeSize    =    3    +    this.base64Separator.length;    	non-compiled	[CE]  ';'  expected	106	None	replace
916	[BUG]  [BUGGY]  this.encodeSize  =  3  -  this.base64Separator.length;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  3  -  this.base64Separator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  3  -  this.base64Separator.length;	  this.encodeSize    =    3    +    this.base64Separator.length;    	non-compiled	[CE]  ';'  expected	106	None	replace
917	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.base64,  0,  this.base64.length);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64,  0,  this.base64,  0,  this.base64.length);  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.base64,  0,  this.base64.length);	  System.arraycopy(base64,    0,    this.base64,    0,    base64.length);    	non-compiled	[CE]  ';'  expected	249	None	replace
918	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.base64,  0,  base64.length  -  1);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64,  0,  this.base64,  0,  base64.length  -  1);  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.base64,  0,  base64.length  -  1);	  System.arraycopy(base64,    0,    this.base64,    0,    base64.length);    	non-compiled	[CE]  ';'  expected	249	None	replace
919	[BUG]  [BUGGY]  System.arraycopy(Base64.BASE64,  0,  this.base64,  0,  base64.length);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64.BASE64,  0,  this.base64,  0,  base64.length);  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64.BASE64,  0,  this.base64,  0,  base64.length);	  System.arraycopy(base64,    0,    this.base64,    0,    base64.length);    	non-compiled	[CE]  ';'  expected	249	None	replace
920	[BUG]  [BUGGY]  System.arraycopy(Base64Length,  0,  this.base64,  0,  base64.length);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Length,  0,  this.base64,  0,  base64.length);  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Length,  0,  this.base64,  0,  base64.length);	  System.arraycopy(base64,    0,    this.base64,    0,    base64.length);    	non-compiled	[CE]  ';'  expected	249	None	replace
921	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.DEFAULT_BUFFER_RESIZE_FACTOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.DEFAULT_BUFFER_RESIZE_FACTOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.DEFAULT_BUFFER_RESIZE_FACTOR,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(base64,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	33	None	replace
922	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.DEFAULT_BUFFER_RESIZE_FACTOR,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.DEFAULT_BUFFER_RESIZE_FACTOR,  this.lineSeparator,  0,  lineLength);  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.DEFAULT_BUFFER_RESIZE_FACTOR,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(base64,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	33	None	replace
923	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  this.base64,  0,  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  this.base64,  0,  this.lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  this.base64,  0,  this.lineSeparator.length);	  System.arraycopy(Base64Byte.DEFAULT,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	40	None	replace
924	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  this.base64,  lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  this.base64,  lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  this.base64,  lineSeparator,  0,  lineSeparator.length);	  System.arraycopy(Base64Byte.DEFAULT,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	40	None	replace
925	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  this.base64,  0,  this.base64Separator.length);  [CE]  ';'  expected  [FE]                                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  this.base64,  0,  this.base64Separator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  this.base64,  0,  this.base64Separator.length);	  System.arraycopy(Base64Byte.DEFAULT,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	40	None	replace
926	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.base64Separator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.base64Separator,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.base64Separator,  0,  lineLength  -  1);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	177	None	replace
927	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.base64Separator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.base64Separator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.base64Separator,  0,  this.lineLength);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	177	None	replace
928	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  this.base64Separator,  0,  lineLength);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  this.base64Separator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  this.base64Separator,  0,  lineLength);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	177	None	replace
929	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.base64Separator,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.base64Separator,  0,  lineLength  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.base64Separator,  0,  lineLength  +  1);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	177	None	replace
930	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.base64Separator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.base64Separator,  0,  urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.base64Separator,  0,  urlSafe);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	177	None	replace
931	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  lineSeparator,  0,  this.base64Separator.length);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  lineSeparator,  0,  this.base64Separator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  lineSeparator,  0,  this.base64Separator.length);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	177	None	replace
932	[BUG]  [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);	  System.arraycopy(sep,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	52	None	replace
933	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  sep,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  sep,  0,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  sep,  0,  lineSeparator.length);	  System.arraycopy(sep,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	52	None	replace
934	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.decodeTable,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ')'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.decodeTable,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteUtf8(this.decodeTable,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.decodeTable,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	73	None	replace
935	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep,  this.lineSeparator);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep,  this.lineSeparator);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(sep,  this.lineSeparator);	  String    sep    =    StringUtils.newStringUtf8(sep,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	165	None	replace
936	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep,  this.urlSafe,  lineSeparator);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep,  this.urlSafe,  lineSeparator);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(sep,  this.urlSafe,  lineSeparator);	  String    sep    =    StringUtils.newStringUtf8(sep,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	165	None	replace
937	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.urlSafe,  this.lineSeparator);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.urlSafe,  this.lineSeparator);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(this.urlSafe,  this.lineSeparator);	  String    sep    =    StringUtils.newStringUtf8(sep,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	165	None	replace
938	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep,  this.urlSafe,  urlSafe);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep,  this.urlSafe,  urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(sep,  this.urlSafe,  urlSafe);	  String    sep    =    StringUtils.newStringUtf8(sep,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	165	None	replace
939	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.decodeTable,  0,  this.urlSafe,  0,  lineLength);  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.decodeTable,  0,  this.urlSafe,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.decodeTable,  0,  this.urlSafe,  0,  lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,    0,    this.urlSafe,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	170	None	replace
940	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  0,  lineSeparator,  0,  lineLength);  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  0,  lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,    0,    this.urlSafe,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	170	None	replace
941	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64Name,  0,  this.urlSafe,  0,  lineLength);  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64Name,  0,  this.urlSafe,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.base64Name,  0,  this.urlSafe,  0,  lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,    0,    this.urlSafe,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	170	None	replace
942	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  0,  lineSeparator,  0,  this.lineLength);  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  0,  lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  0,  lineSeparator,  0,  this.lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,    0,    this.urlSafe,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	170	None	replace
943	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(base64,  0,  this.urlSafe,  0,  lineLength);  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(base64,  0,  this.urlSafe,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(base64,  0,  this.urlSafe,  0,  lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,    0,    this.urlSafe,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	170	None	replace
944	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  lineSeparator,  0,  this.urlSafe.length);  [CE]  ')'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  lineSeparator,  0,  this.urlSafe.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  lineSeparator,  0,  this.urlSafe.length);	  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,    0,    this.urlSafe,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	170	None	replace
945	[BUG]  [BUGGY]  this.encodeSize  =  0  *  this.lineSeparator.length;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  0  *  this.lineSeparator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  0  *  this.lineSeparator.length;	  this.encodeSize    =    4    *    this.lineSeparator.length;    	non-compiled	[CE]  ';'  expected	9	None	replace
946	[BUG]  [BUGGY]  this.encodeSize  =  4  *  this.lineSeparator.length  +  1;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  4  *  this.lineSeparator.length  +  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  4  *  this.lineSeparator.length  +  1;	  this.encodeSize    =    4    *    this.lineSeparator.length;    	non-compiled	[CE]  ';'  expected	9	None	replace
947	[BUG]  [BUGGY]  this.encodeSize  =(this.urlSafe?  0  :  0)*  lineSeparator.length;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =(this.urlSafe?  0  :  0)*  lineSeparator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =(this.urlSafe?  0  :  0)*  lineSeparator.length;	  this.encodeSize    =    0    *    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	11	None	replace
948	[BUG]  [BUGGY]  this.encodeSize  =(this.lineSeparator.length  >  0)?  0  :  0  *  lineSeparator.length;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =(this.lineSeparator.length  >  0)?  0  :  0  *  lineSeparator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =(this.lineSeparator.length  >  0)?  0  :  0  *  lineSeparator.length;	  this.encodeSize    =    0    *    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	11	None	replace
949	[BUG]  [BUGGY]  this.encodeSize  =(this.lineSeparator.length  <  2)?  0  :  0  *  lineSeparator.length;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =(this.lineSeparator.length  <  2)?  0  :  0  *  lineSeparator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =(this.lineSeparator.length  <  2)?  0  :  0  *  lineSeparator.length;	  this.encodeSize    =    0    *    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	11	None	replace
950	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteArrayUtf8(lineSeparator,  this.urlSafe));  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteArrayUtf8(lineSeparator,  this.urlSafe));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteArrayUtf8(lineSeparator,  this.urlSafe));	  System.arraycopy(Base64Utils.newByteArrayUtf8(this.urlSafe));    	non-compiled	[CE]  ';'  expected	65	None	replace
951	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteArrayUtf8(lineSeparator));  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteArrayUtf8(lineSeparator));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteArrayUtf8(lineSeparator));	  System.arraycopy(Base64Utils.newByteArrayUtf8(this.urlSafe));    	non-compiled	[CE]  ';'  expected	65	None	replace
952	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteArrayUtf8(this.urlSafe,  lineSeparator));  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteArrayUtf8(this.urlSafe,  lineSeparator));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteArrayUtf8(this.urlSafe,  lineSeparator));	  System.arraycopy(Base64Utils.newByteArrayUtf8(this.urlSafe));    	non-compiled	[CE]  ';'  expected	65	None	replace
953	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteArrayUtf8(this.lineSeparator,  this.urlSafe));  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteArrayUtf8(this.lineSeparator,  this.urlSafe));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteArrayUtf8(this.lineSeparator,  this.urlSafe));	  System.arraycopy(Base64Utils.newByteArrayUtf8(this.urlSafe));    	non-compiled	[CE]  ';'  expected	65	None	replace
954	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteArrayUtf8(this.urlSafe,  this.lineSeparator));  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteArrayUtf8(this.urlSafe,  this.lineSeparator));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteArrayUtf8(this.urlSafe,  this.lineSeparator));	  System.arraycopy(Base64Utils.newByteArrayUtf8(this.urlSafe));    	non-compiled	[CE]  ';'  expected	65	None	replace
955	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteArrayUtf8(this.urlSafe),  0,  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteArrayUtf8(this.urlSafe),  0,  this.lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteArrayUtf8(this.urlSafe),  0,  this.lineSeparator.length);	  System.arraycopy(Base64Utils.newByteArrayUtf8(this.urlSafe));    	non-compiled	[CE]  ';'  expected	65	None	replace
956	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteArrayUtf8(this.urlSafe,  lineSeparator.length));  [CE]  ';'  expected  [FE]                                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteArrayUtf8(this.urlSafe,  lineSeparator.length));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteArrayUtf8(this.urlSafe,  lineSeparator.length));	  System.arraycopy(Base64Utils.newByteArrayUtf8(this.urlSafe));    	non-compiled	[CE]  ';'  expected	65	None	replace
957	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteArrayUtf8(this.urlSafe,  lineLength));  [CE]  ';'  expected  [FE]                                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteArrayUtf8(this.urlSafe,  lineLength));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteArrayUtf8(this.urlSafe,  lineLength));	  System.arraycopy(Base64Utils.newByteArrayUtf8(this.urlSafe));    	non-compiled	[CE]  ';'  expected	65	None	replace
958	[BUG]  [BUGGY]  this.encodeSize  =  5  +  this.urlSafe  -  1;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  5  +  this.urlSafe  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  5  +  this.urlSafe  -  1;	  this.encodeSize    =    5    +    this.urlSafe;    	non-compiled	[CE]  ';'  expected	130	None	replace
959	[BUG]  [BUGGY]  this.encodeSize  =  5  +  this.lineSeparator;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  5  +  this.lineSeparator;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  5  +  this.lineSeparator;	  this.encodeSize    =    5    +    this.urlSafe;    	non-compiled	[CE]  ';'  expected	130	None	replace
960	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(Base64.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  :  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(Base64.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(Base64.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    urlSafe?    System.arraycopy(base64,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  :  expected	96	None	replace
961	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(Base64.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  :  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(Base64.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(Base64.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    urlSafe?    System.arraycopy(base64,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  :  expected	96	None	replace
962	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(base64,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  :  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(base64,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(base64,  0,  this.lineSeparator,  0,  this.lineLength);	  this.lineSeparator    =    urlSafe?    System.arraycopy(base64,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  :  expected	96	None	replace
963	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(Base64.BASE64,  0,  this.lineSeparator,  0,  lineLength);  [CE]  :  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(Base64.BASE64,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(Base64.BASE64,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    urlSafe?    System.arraycopy(base64,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  :  expected	96	None	replace
964	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.base64,  0,  this.lineSeparator,  0,  lineLength);  [CE]  :  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.base64,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.base64,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    urlSafe?    System.arraycopy(base64,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  :  expected	96	None	replace
965	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(base64,  0,  lineSeparator,  0,  lineLength);  [CE]  :  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(base64,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(base64,  0,  lineSeparator,  0,  lineLength);	  this.lineSeparator    =    urlSafe?    System.arraycopy(base64,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  :  expected	96	None	replace
966	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(Base64.DEFAULT,  0,  this.lineSeparator,  0,  lineLength);  [CE]  :  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(Base64.DEFAULT,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(Base64.DEFAULT,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    urlSafe?    System.arraycopy(base64,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  :  expected	96	None	replace
967	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  /  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  /  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  /  1);	  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	212	None	replace
968	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  4);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  4);	  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	212	None	replace
969	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  3);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  3);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  3);	  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	212	None	replace
970	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  lineSeparator,  0,  this.base64Length);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  lineSeparator,  0,  this.base64Length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  lineSeparator,  0,  this.base64Length);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	216	None	replace
971	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(base64,  urlSafe);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(base64,  urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(base64,  urlSafe);	  String    sep    =    StringUtils.newStringUtf8(base64);    	non-compiled	[CE]  ';'  expected	163	None	replace
972	[BUG]  [BUGGY]  this.encodeSize  =  3  +  lineSeparator.length  /  1;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  3  +  lineSeparator.length  /  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  3  +  lineSeparator.length  /  1;	  this.encodeSize    =    3    +    lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	104	None	replace
973	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.lineSeparator,  0,  this.urlSafe,  0,  lineLength);  [CE]  ')'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.lineSeparator,  0,  this.urlSafe,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteUtf8(this.lineSeparator,  0,  this.urlSafe,  0,  lineLength);	  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	71	None	replace
974	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe),  0,  this.lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe),  0,  this.lineSeparator,  0,  urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe),  0,  this.lineSeparator,  0,  urlSafe);	  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	71	None	replace
975	[BUG]  [BUGGY]  System.arraycopy(Base64SEPARATOR,  0,  this.base64Separator,  0,  lineLength);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64SEPARATOR,  0,  this.base64Separator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64SEPARATOR,  0,  this.base64Separator,  0,  lineLength);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	156	None	replace
976	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  lineSeparator,  0,  this.lineLength);	  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	85	None	replace
977	[BUG]  [BUGGY]  this.encodeSize  =  2  -  this.lineSeparator.length;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  2  -  this.lineSeparator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  2  -  this.lineSeparator.length;	  this.encodeSize    =    2    +    this.lineSeparator.length;    	non-compiled	[CE]  ';'  expected	99	None	replace
978	[BUG]  [BUGGY]  this.encodeSize  =  5  *  this.base64Separator.length;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  5  *  this.base64Separator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  5  *  this.base64Separator.length;	  this.encodeSize    =    4    *    this.base64Separator.length;    	non-compiled	[CE]  ';'  expected	14	None	replace
979	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe,  0));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe,  0));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe,  0));	  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe));    	non-compiled	[CE]  ';'  expected	57	None	replace
980	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  urlSafe));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  urlSafe));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  urlSafe));	  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator,    this.urlSafe));    	non-compiled	[CE]  ';'  expected	59	None	replace
981	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSeparator,  lineSeparator));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSeparator,  lineSeparator));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSeparator,  lineSeparator));	  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator,    this.urlSafe));    	non-compiled	[CE]  ';'  expected	59	None	replace
982	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.lineSeparator,  lineSeparator));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.lineSeparator,  lineSeparator));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteUtf8(this.lineSeparator,  lineSeparator));	  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator,    this.urlSafe));    	non-compiled	[CE]  ';'  expected	59	None	replace
983	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineLength  -  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineLength  -  1);	  System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	75	None	replace
984	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineLength  +  1);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineLength  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineLength  +  1);	  System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	75	None	replace
985	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  5,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  5,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  5,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Separator.DEFAULT,    1,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	117	None	replace
986	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep,  lineLength  +  2);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep,  lineLength  +  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(sep,  lineLength  +  2);	  String    sep    =    StringUtils.newStringUtf8(sep,    lineLength);    	non-compiled	[CE]  ';'  expected	164	None	replace
987	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.base64Separator,  0,  this.base64Separator.length);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64,  0,  this.base64Separator,  0,  this.base64Separator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.base64Separator,  0,  this.base64Separator.length);	  System.arraycopy(base64,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	157	None	replace
988	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.base64Separator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64,  0,  this.base64Separator,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.base64Separator,  0,  lineLength  -  1);	  System.arraycopy(base64,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	157	None	replace
989	[BUG]  [BUGGY]  this.encodeSize  =  512  +  lineLength;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  512  +  lineLength;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  512  +  lineLength;	  this.encodeSize    =    5    +    lineLength;    	non-compiled	[CE]  ';'  expected	166	None	replace
990	[BUG]  [BUGGY]  this.encodeSize  =  5  *  lineLength;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  5  *  lineLength;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  5  *  lineLength;	  this.encodeSize    =    5    +    lineLength;    	non-compiled	[CE]  ';'  expected	166	None	replace
991	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Separator.DEFAULT,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	114	None	replace
992	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  lineSeparator,  0,  this.lineLength);	  System.arraycopy(Base64Byte.DEFAULT,    1,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	149	None	replace
993	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  lineSeparator,  0,  this.lineLength  -  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  lineSeparator,  0,  this.lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  lineSeparator,  0,  this.lineLength  -  1);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	196	None	replace
994	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.baseSeparator,  0,  this.lineLength  -  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.baseSeparator,  0,  this.lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.baseSeparator,  0,  this.lineLength  -  1);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	196	None	replace
995	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  *  1);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  *  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  *  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	82	None	replace
996	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  base64Length);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  base64Length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  base64Length);	  System.arraycopy(base64Separator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	78	None	replace
997	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe));  this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe));  this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe));  this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  not  a  statement	66	None	replace
998	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  *  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  *  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  *  1);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	145	None	replace
999	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  base64  :  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  base64  :  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  base64  :  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    urlSafe    ||    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	98	None	replace
1000	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  &&  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe  &&  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe  &&  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);	  this.lineSeparator    =    urlSafe    ||    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	98	None	replace
1001	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  0  :  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  0  :  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  0  :  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    urlSafe    ||    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	98	None	replace
1002	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.base64,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  this.base64,  0,  this.urlSafe);  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.base64,  0,  this.urlSafe);	  System.arraycopy(this.base64,    0,    this.base64,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	34	None	replace
1003	[BUG]  [BUGGY]  System.arraycopy(base64Separator,  0,  this.lineSeparator,  0,  this.lineLength  -  1);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64Separator,  0,  this.lineSeparator,  0,  this.lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64Separator,  0,  this.lineSeparator,  0,  this.lineLength  -  1);	  System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	232	None	replace
1004	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  this.lineSeparator,  urlSafe);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  this.lineSeparator,  urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  this.lineSeparator,  urlSafe);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    this.lineSeparator);    	non-compiled	[CE]  ';'  expected	191	None	replace
1005	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64Name),  this.lineSeparator);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64Name),  this.lineSeparator);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.base64Name),  this.lineSeparator);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    this.lineSeparator);    	non-compiled	[CE]  ';'  expected	191	None	replace
1006	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.base64Byte(this.base64),  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.base64Byte(this.base64),  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.base64Byte(this.base64),  0,  this.lineSeparator,  0,  lineSeparator.length);	  System.arraycopy(this.base64,    0,    lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	201	None	replace
1007	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);	  System.arraycopy(this.base64,    0,    lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	201	None	replace
1008	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.DEFAULT_LINE_SEPARATOR,  0,  this.base64Separator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.DEFAULT_LINE_SEPARATOR,  0,  this.base64Separator,  0,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.DEFAULT_LINE_SEPARATOR,  0,  this.base64Separator,  0,  lineSeparator.length);	  System.arraycopy(this.base64,    0,    lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	201	None	replace
1009	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.base64,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.base64,  0,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.base64,  0,  lineSeparator.length);	  System.arraycopy(this.base64,    0,    lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	201	None	replace
1010	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength  /  2);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength  /  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength  /  2);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    *    2);    	non-compiled	[CE]  ';'  expected	181	None	replace
1011	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  lineSeparator,  0,  this.base64.length  -  4);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  lineSeparator,  0,  this.base64.length  -  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  lineSeparator,  0,  this.base64.length  -  4);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    lineSeparator.length    -    4);    	non-compiled	[CE]  ';'  expected	250	None	replace
1012	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineSeparator.length  -  4);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineSeparator.length  -  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineSeparator.length  -  4);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    lineSeparator.length    -    4);    	non-compiled	[CE]  ';'  expected	250	None	replace
1013	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.toByteArray(this.base64),  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.toByteArray(this.base64),  0,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.toByteArray(this.base64),  0,  lineSeparator.length);	  System.arraycopy(this.lineSeparator,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	50	None	replace
1014	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  lineSeparator,  0,  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  lineSeparator,  0,  this.lineSeparator.length);	  System.arraycopy(this.lineSeparator,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	50	None	replace
1015	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  -  1);  [CE]  :  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  -  1);	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  :  expected	93	None	replace
1016	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  this.lineLength  /  1);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  this.lineLength  /  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.lineSeparator,  0,  this.lineLength  /  1);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineLength    /    1);    	non-compiled	[CE]  ';'  expected	231	None	replace
1017	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  lineSeparator,  0,  this.base64Separator.length);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  lineSeparator,  0,  this.base64Separator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  lineSeparator,  0,  this.base64Separator.length);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	177	None	replace
1018	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  0,  this.lineSeparator,  lineLength));  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  0,  this.lineSeparator,  lineLength));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  0,  this.lineSeparator,  lineLength));	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,    0,    this.lineSeparator.length));    	non-compiled	[CE]  ';'  expected	64	None	replace
1019	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.urlSafe));  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.urlSafe));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.urlSafe));	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,    0,    this.lineSeparator.length));    	non-compiled	[CE]  ';'  expected	64	None	replace
1020	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.lineSeparator,  0,  this.urlSafe.length));  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.lineSeparator,  0,  this.urlSafe.length));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteUtf8(this.lineSeparator,  0,  this.urlSafe.length));	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,    0,    this.lineSeparator.length));    	non-compiled	[CE]  ';'  expected	64	None	replace
1021	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep  +  0);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep  +  0);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(sep  +  0);	  String    sep    =    StringUtils.newStringUtf8(sep    +    1);    	non-compiled	[CE]  ';'  expected	160	None	replace
1022	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep  +  3);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep  +  3);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(sep  +  3);	  String    sep    =    StringUtils.newStringUtf8(sep    +    1);    	non-compiled	[CE]  ';'  expected	160	None	replace
1023	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep  +  4);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep  +  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(sep  +  4);	  String    sep    =    StringUtils.newStringUtf8(sep    +    1);    	non-compiled	[CE]  ';'  expected	160	None	replace
1024	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep  +  6);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep  +  6);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(sep  +  6);	  String    sep    =    StringUtils.newStringUtf8(sep    +    1);    	non-compiled	[CE]  ';'  expected	160	None	replace
1025	[BUG]  [BUGGY]  System.arraycopy(Base64.DEFAULT,  0,  lineSeparator,  0,  this.base64.length);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64.DEFAULT,  0,  lineSeparator,  0,  this.base64.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64.DEFAULT,  0,  lineSeparator,  0,  this.base64.length);	  System.arraycopy(Base64.DEFAULT,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	220	None	replace
1026	[BUG]  [BUGGY]  System.arraycopy(Base64.DEFAULT,  0,  this.base64,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64.DEFAULT,  0,  this.base64,  lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64.DEFAULT,  0,  this.base64,  lineSeparator,  0,  lineLength);	  System.arraycopy(Base64.DEFAULT,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	220	None	replace
1027	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.urlSafe.length);	  System.arraycopy(this.urlSafe,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	74	None	replace
1028	[BUG]  [BUGGY]  this.encodeSize  =  4  *  this.base64;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  4  *  this.base64;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  4  *  this.base64;	  this.encodeSize    =    4    *    this.urlSafe;    	non-compiled	[CE]  ';'  expected	15	None	replace
1029	[BUG]  [BUGGY]  this.encodeSize  =  4  *  lineSeparator;  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  4  *  lineSeparator;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  4  *  lineSeparator;	  this.encodeSize    =    4    *    this.urlSafe;    	non-compiled	[CE]  ';'  expected	15	None	replace
1030	[BUG]  [BUGGY]  this.encodeSize  =  4  *  this.decodeSize;  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  4  *  this.decodeSize;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  4  *  this.decodeSize;	  this.encodeSize    =    4    *    this.urlSafe;    	non-compiled	[CE]  ';'  expected	15	None	replace
1031	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BIGDECIMAL_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BIGDECIMAL_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BIGDECIMAL_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	137	None	replace
1032	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlLength);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlLength);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	137	None	replace
1033	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  lineSeparator,  0,  lineSeparator.length  -  4);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  lineSeparator,  0,  lineSeparator.length  -  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  lineSeparator,  0,  lineSeparator.length  -  4);	  System.arraycopy(base64,    0,    this.base64,    0,    lineSeparator.length    -    4);    	non-compiled	[CE]  ';'  expected	219	None	replace
1034	[BUG]  [BUGGY]  this.encodeSize  =  0  +  lineSeparator.length  -  2;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  0  +  lineSeparator.length  -  2;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  0  +  lineSeparator.length  -  2;	  this.encodeSize    =    0    +    lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	45	None	replace
1035	[BUG]  [BUGGY]  this.encodeSize  =  0,  lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  0,  lineSeparator.length  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  0,  lineSeparator.length  -  1;	  this.encodeSize    =    0    +    lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	45	None	replace
1036	[BUG]  [BUGGY]  this.encodeSize  =  7;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  7;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  7;	  this.encodeSize    =    7    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	198	None	replace
1037	[BUG]  [BUGGY]  this.encodeSize  =  7  *  lineSeparator.length;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  7  *  lineSeparator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  7  *  lineSeparator.length;	  this.encodeSize    =    7    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	198	None	replace
1038	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.base64Byte,  0,  this.base64Separator,  0,  this.base64Length);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.base64Byte,  0,  this.base64Separator,  0,  this.base64Length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.base64Byte,  0,  this.base64Separator,  0,  this.base64Length);	  System.arraycopy(Base64Utils.base64Byte,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	183	None	replace
1039	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.DEFAULT_LINE_SEPARATOR,  0,  this.base64Separator,  0,  lineLength);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.DEFAULT_LINE_SEPARATOR,  0,  this.base64Separator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.DEFAULT_LINE_SEPARATOR,  0,  this.base64Separator,  0,  lineLength);	  System.arraycopy(Base64Utils.base64Byte,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	183	None	replace
1040	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.base64Byte,  0,  this.base64Separator,  0,  this.base64Separator.length);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.base64Byte,  0,  this.base64Separator,  0,  this.base64Separator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.base64Byte,  0,  this.base64Separator,  0,  this.base64Separator.length);	  System.arraycopy(Base64Utils.base64Byte,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	183	None	replace
1041	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  *  1);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  *  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  *  1);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	138	None	replace
1042	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newLineSeparator(lineSeparator));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newLineSeparator(lineSeparator));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newLineSeparator(lineSeparator));	  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator));    	non-compiled	[CE]  ';'  expected	60	None	replace
1043	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newLineSeparator(this.lineSeparator));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newLineSeparator(this.lineSeparator));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newLineSeparator(this.lineSeparator));	  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator));    	non-compiled	[CE]  ';'  expected	60	None	replace
1044	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  lineSeparator,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  lineSeparator,  0,  lineLength  -  1);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	112	None	replace
1045	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  lineLength);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  lineLength);	  System.arraycopy(base64,    0,    this.lineSeparator,    lineLength);    	non-compiled	[CE]  ';'  expected	16	None	replace
1046	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  base64Length);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  base64Length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.lineSeparator,  0,  base64Length);	  System.arraycopy(base64,    0,    this.lineSeparator,    lineLength);    	non-compiled	[CE]  ';'  expected	16	None	replace
1047	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  lineSeparator,  0,  this.lineLength);  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  lineSeparator,  0,  this.lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	70	None	replace
1048	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator.length);	  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    1,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	89	None	replace
1049	[BUG]  [BUGGY]  this.encodeSize  =  1  +  lineSeparator.length  -  6;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  +  lineSeparator.length  -  6;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  lineSeparator.length  -  6;	  this.encodeSize    =    1    +    lineSeparator.length    -    2;    	non-compiled	[CE]  ';'  expected	123	None	replace
1050	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  lineSeparator,  0,  this.lineLength  -  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  lineSeparator,  0,  this.lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  lineSeparator,  0,  this.lineLength  -  1);	  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	212	None	replace
1051	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf9(sep);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  String  sep  =  StringUtils.newStringUtf9(sep);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf9(sep);	  char    sep    =    StringUtils.newStringUtf8(sep);    	non-compiled	[CE]  ';'  expected	237	None	replace
1052	[BUG]  [BUGGY]  char  sep  =  StringUtils.newStringUtf8(sep  +  1);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  char  sep  =  StringUtils.newStringUtf8(sep  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	char  sep  =  StringUtils.newStringUtf8(sep  +  1);	  char    sep    =    StringUtils.newStringUtf8(sep);    	non-compiled	[CE]  ';'  expected	237	None	replace
1053	[BUG]  [BUGGY]  char  sep  =  StringUtils.newStringUtf8(lineSeparator);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  char  sep  =  StringUtils.newStringUtf8(lineSeparator);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	char  sep  =  StringUtils.newStringUtf8(lineSeparator);	  char    sep    =    StringUtils.newStringUtf8(sep);    	non-compiled	[CE]  ';'  expected	237	None	replace
1054	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteArrayUtf8(this.urlSafe),  lineSeparator);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteArrayUtf8(this.urlSafe),  lineSeparator);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteArrayUtf8(this.urlSafe),  lineSeparator);	  System.arraycopy(Base64Utils.newByteArrayUtf8(this.urlSafe));    	non-compiled	[CE]  ';'  expected	65	None	replace
1055	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteArrayUtf8(this.urlSafe),  this.lineSeparator);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteArrayUtf8(this.urlSafe),  this.lineSeparator);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteArrayUtf8(this.urlSafe),  this.lineSeparator);	  System.arraycopy(Base64Utils.newByteArrayUtf8(this.urlSafe));    	non-compiled	[CE]  ';'  expected	65	None	replace
1056	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteArrayUtf8(this.urlSafe,  0));  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteArrayUtf8(this.urlSafe,  0));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteArrayUtf8(this.urlSafe,  0));	  System.arraycopy(Base64Utils.newByteArrayUtf8(this.urlSafe));    	non-compiled	[CE]  ';'  expected	65	None	replace
1057	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength  /  4);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength  /  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength  /  4);	  System.arraycopy(base64,    0,    this.lineSeparator,    0,    lineLength    /    4);    	non-compiled	[CE]  ';'  expected	133	None	replace
1058	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  0,  lineLength));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  0,  lineLength));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  0,  lineLength));	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,    lineLength));    	non-compiled	[CE]  ';'  expected	192	None	replace
1059	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64,  lineLength));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64,  lineLength));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.base64,  lineLength));	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,    lineLength));    	non-compiled	[CE]  ';'  expected	192	None	replace
1060	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	94	None	replace
1061	[BUG]  [BUGGY]  System.arraycopy(Base64.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  -  1);	  System.arraycopy(base64,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	28	None	replace
1062	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength):  DECODE_TABLE;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength):  DECODE_TABLE;  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength):  DECODE_TABLE;	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength):    urlSafe;    	non-compiled	[CE]  ';'  expected	188	None	replace
1063	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength):  HIDE_SEPARATOR;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength):  HIDE_SEPARATOR;  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength):  HIDE_SEPARATOR;	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength):    urlSafe;    	non-compiled	[CE]  ';'  expected	188	None	replace
1064	[BUG]  [BUGGY]  this.encodeSize  =  0  +  this.urlSafe  +  1;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  0  +  this.urlSafe  +  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  0  +  this.urlSafe  +  1;	  this.encodeSize    =    0    +    this.urlSafe;    	non-compiled	[CE]  ';'  expected	44	None	replace
1065	[BUG]  [BUGGY]  this.encodeSize  =  0  +  this.base64;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  0  +  this.base64;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  0  +  this.base64;	  this.encodeSize    =    0    +    this.urlSafe;    	non-compiled	[CE]  ';'  expected	44	None	replace
1066	[BUG]  [BUGGY]  this.encodeSize  =  0  +  this.base64Separator;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  0  +  this.base64Separator;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  0  +  this.base64Separator;	  this.encodeSize    =    0    +    this.urlSafe;    	non-compiled	[CE]  ';'  expected	44	None	replace
1067	[BUG]  [BUGGY]  System.arraycopy(Base64DECODE_TABLE,  0,  this.lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64DECODE_TABLE,  0,  this.lineSeparator,  0,  this.urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64DECODE_TABLE,  0,  this.lineSeparator,  0,  this.urlSafe);	  System.arraycopy(Base64DECODE_TABLE,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	200	None	replace
1068	[BUG]  [BUGGY]  System.arraycopy(Base64DECODE_TABLE,  0,  this.lineSeparator,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64DECODE_TABLE,  0,  this.lineSeparator,  0,  lineLength  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64DECODE_TABLE,  0,  this.lineSeparator,  0,  lineLength  +  1);	  System.arraycopy(Base64DECODE_TABLE,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	200	None	replace
1069	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlLength);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlLength);	  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	87	None	replace
1070	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength):  4;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength):  4;  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength):  4;	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineLength):    0;    	non-compiled	[CE]  ';'  expected	245	None	replace
1071	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineLength);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineLength);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	254	None	replace
1072	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  lineSeparator,  0,  lineSeparator.length);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	37	None	replace
1073	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  *  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  *  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  *  1);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    lineLength    /    1);    	non-compiled	[CE]  ';'  expected	20	None	replace
1074	[BUG]  [BUGGY]  System.arraycopy(Base64Byte,  0,  this.baseSeparator,  0,  this.base64Length);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte,  0,  this.baseSeparator,  0,  this.base64Length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte,  0,  this.baseSeparator,  0,  this.base64Length);	  System.arraycopy(Base64Byte,    0,    this.base64Separator,    0,    this.base64Length);    	non-compiled	[CE]  ';'  expected	229	None	replace
1075	[BUG]  [BUGGY]  System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  this.base64Length  -  4);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  this.base64Length  -  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  this.base64Length  -  4);	  System.arraycopy(Base64Byte,    0,    this.base64Separator,    0,    this.base64Length);    	non-compiled	[CE]  ';'  expected	229	None	replace
1076	[BUG]  [BUGGY]  System.arraycopy(Base64Byte,  0,  lineSeparator,  0,  this.base64Length);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte,  0,  lineSeparator,  0,  this.base64Length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte,  0,  lineSeparator,  0,  this.base64Length);	  System.arraycopy(Base64Byte,    0,    this.base64Separator,    0,    this.base64Length);    	non-compiled	[CE]  ';'  expected	229	None	replace
1077	[BUG]  [BUGGY]  this.encodeSize  =  6  +  1;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  6  +  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  6  +  1;	  this.encodeSize    =    6    +    lineLength;    	non-compiled	[CE]  ';'  expected	55	None	replace
1078	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  lineSeparator,  0,  this.baseSeparator.length);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  lineSeparator,  0,  this.baseSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  lineSeparator,  0,  this.baseSeparator.length);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.baseSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	38	None	replace
1079	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  lineSeparator,  0,  this.baseSeparator.length);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  lineSeparator,  0,  this.baseSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  lineSeparator,  0,  this.baseSeparator.length);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.baseSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	116	None	replace
1080	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.baseSeparator,  0,  lineLength  -  2);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.baseSeparator,  0,  lineLength  -  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.baseSeparator,  0,  lineLength  -  2);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.baseSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	116	None	replace
1081	[BUG]  [BUGGY]  System.arraycopy(base64Separator,  0,  this.base64Separator,  0,  this.base64Separator.length);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64Separator,  0,  this.base64Separator,  0,  this.base64Separator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64Separator,  0,  this.base64Separator,  0,  this.base64Separator.length);	  System.arraycopy(base64Separator,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	184	None	replace
1082	[BUG]  [BUGGY]  System.arraycopy(base64Separator,  0,  this.base64Separator,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64Separator,  0,  this.base64Separator,  0,  lineLength  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64Separator,  0,  this.base64Separator,  0,  lineLength  +  1);	  System.arraycopy(base64Separator,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	184	None	replace
1083	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.urlSafe,  0,  this.lineLength);  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.urlSafe,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.urlSafe,  0,  this.lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ')'  expected	67	None	replace
1084	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  0,  this.lineSeparator,  0,  this.lineLength  -  1);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  0,  this.lineSeparator,  0,  this.lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  0,  this.lineSeparator,  0,  this.lineLength  -  1);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	67	None	replace
1085	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  0,  lineSeparator,  0,  this.urlLength);  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  0,  lineSeparator,  0,  this.urlLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  0,  lineSeparator,  0,  this.urlLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,    0,    this.urlSafe,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	170	None	replace
1086	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineSeparator.length);	  System.arraycopy(base64,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	203	None	replace
1087	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.line,  0,  lineSeparator,  0,  this.lineLength);  [CE]  :  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.line,  0,  lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.line,  0,  lineSeparator,  0,  this.lineLength);	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  :  expected	247	None	replace
1088	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineLength,  0,  this.lineSeparator,  0,  lineLength);  [CE]  :  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineLength,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineLength,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  :  expected	247	None	replace
1089	[BUG]  [BUGGY]  System.arraycopy(Base64Separator,  0,  this.base64,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator,  0,  this.base64,  0,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator,  0,  this.base64,  0,  lineSeparator.length);	  System.arraycopy(lineSeparator,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	47	None	replace
1090	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64,  0,  lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  lineSeparator,  0,  lineSeparator.length);	  System.arraycopy(lineSeparator,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	47	None	replace
1091	[BUG]  [BUGGY]  this.encodeSize  =  1  +  this.lineSeparator.length?  lineSeparator.length  :  0;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  +  this.lineSeparator.length?  lineSeparator.length  :  0;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  this.lineSeparator.length?  lineSeparator.length  :  0;	  this.encodeSize    =    1    +    this.urlSafe?    lineSeparator.length    :    0;    	non-compiled	[CE]  ';'  expected	125	None	replace
1092	[BUG]  [BUGGY]  this.encodeSize  =  1  +  lineSeparator.length?  lineSeparator.length  :  0;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  +  lineSeparator.length?  lineSeparator.length  :  0;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  lineSeparator.length?  lineSeparator.length  :  0;	  this.encodeSize    =    1    +    this.urlSafe?    lineSeparator.length    :    0;    	non-compiled	[CE]  ';'  expected	125	None	replace
1093	[BUG]  [BUGGY]  this.encodeSize  =  1  +  this.lineSeparator.length  :  0;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  +  this.lineSeparator.length  :  0;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  this.lineSeparator.length  :  0;	  this.encodeSize    =    1    +    this.urlSafe?    lineSeparator.length    :    0;    	non-compiled	[CE]  ';'  expected	125	None	replace
1094	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  *  2);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  *  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  *  2);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    lineLength    -    2);    	non-compiled	[CE]  ';'  expected	178	None	replace
1095	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  4,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  4,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  4,  this.lineSeparator,  0,  lineSeparator.length);	  System.arraycopy(Base64Byte.DEFAULT,    4,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	252	None	replace
1096	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.lineSeparator,  0,  this.base64Length);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  this.lineSeparator,  0,  this.base64Length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.lineSeparator,  0,  this.base64Length);	  System.arraycopy(this.base64,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	76	None	replace
1097	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64,  0,  lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  lineSeparator,  0,  this.lineLength);	  System.arraycopy(this.base64,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	76	None	replace
1098	[BUG]  [BUGGY]  System.arraycopy(Base64Separator,  0,  this.base64Byte,  0,  lineLength);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator,  0,  this.base64Byte,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator,  0,  this.base64Byte,  0,  lineLength);	  System.arraycopy(this.base64Separator,    0,    this.base64Byte,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	153	None	replace
1099	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.base64Byte(this.base64Separator),  0,  this.base64Byte,  0,  lineLength);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.base64Byte(this.base64Separator),  0,  this.base64Byte,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.base64Byte(this.base64Separator),  0,  this.base64Byte,  0,  lineLength);	  System.arraycopy(this.base64Separator,    0,    this.base64Byte,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	153	None	replace
1100	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.base64Byte(this.base64Separator),  0,  lineSeparator,  0,  this.base64Length);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.base64Byte(this.base64Separator),  0,  lineSeparator,  0,  this.base64Length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.base64Byte(this.base64Separator),  0,  lineSeparator,  0,  this.base64Length);	  System.arraycopy(this.base64Separator,    0,    this.base64Byte,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	153	None	replace
1101	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.lineSeparator.length);	  System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	206	None	replace
1102	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.lineSeparator);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.lineSeparator);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  this.lineSeparator);	  System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	206	None	replace
1103	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64Name),  0,  this.urlSafe,  0,  lineLength);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64Name),  0,  this.urlSafe,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.base64Name),  0,  this.urlSafe,  0,  lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),    0,    this.urlSafe,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	171	None	replace
1104	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  0,  lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  0,  lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  0,  lineSeparator,  0,  this.lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),    0,    this.urlSafe,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	171	None	replace
1105	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  lineSeparator),  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  lineSeparator),  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  lineSeparator),  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),    0,    this.urlSafe,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	171	None	replace
1106	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  lineSeparator),  0,  this.lineLength);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  lineSeparator),  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  lineSeparator),  0,  this.lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),    0,    this.urlSafe,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	171	None	replace
1107	[BUG]  [BUGGY]  System.arraycopy(base64Names,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64Names,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64Names,  0,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	77	None	replace
1108	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  2);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  2);	  System.arraycopy(Base64Utils.SCRIPT_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	142	None	replace
1109	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  4);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  4);	  System.arraycopy(Base64Utils.SCRIPT_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	142	None	replace
1110	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  *  1);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  *  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  *  1);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	113	None	replace
1111	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.urlSafe,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.urlSafe,  0,  lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.urlSafe,  0,  lineSeparator.length);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	235	None	replace
1112	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(Base64Utils.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  :  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(Base64Utils.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(Base64Utils.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    urlSafe?    System.arraycopy(base64,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  :  expected	96	None	replace
1113	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.DEFAULT_BUFFER_RESIZE,  0,  this.base64,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.DEFAULT_BUFFER_RESIZE,  0,  this.base64,  0,  lineSeparator.length);  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.DEFAULT_BUFFER_RESIZE,  0,  this.base64,  0,  lineSeparator.length);	  System.arraycopy(this.base64,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	32	None	replace
1114	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.base64,  0,  this.base64,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.base64,  0,  this.base64,  0,  lineSeparator.length);  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.base64,  0,  this.base64,  0,  lineSeparator.length);	  System.arraycopy(this.base64,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	32	None	replace
1115	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  lineLength));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  lineLength));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  lineLength));	  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator));    	non-compiled	[CE]  ';'  expected	61	None	replace
1116	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0));  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0));	  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator));    	non-compiled	[CE]  ';'  expected	61	None	replace
1117	[BUG]  [BUGGY]  this.encodeSize  =  1  +  this.urlSafe  +  1;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  +  this.urlSafe  +  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  this.urlSafe  +  1;	  this.encodeSize    =    1    +    this.urlSafe;    	non-compiled	[CE]  ';'  expected	120	None	replace
1118	[BUG]  [BUGGY]  this.encodeSize  =  1  +  this.urlSafe  -  2;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  +  this.urlSafe  -  2;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  this.urlSafe  -  2;	  this.encodeSize    =    1    +    this.urlSafe;    	non-compiled	[CE]  ';'  expected	120	None	replace
1119	[BUG]  [BUGGY]  this.encodeSize  =  1  +  this.urlSafe  +  4;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  1  +  this.urlSafe  +  4;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  this.urlSafe  +  4;	  this.encodeSize    =    1    +    this.urlSafe;    	non-compiled	[CE]  ';'  expected	120	None	replace
1120	[BUG]  [BUGGY]  this.encodeSize  =  5  +  this.urlSafe  +  1;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  5  +  this.urlSafe  +  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  5  +  this.urlSafe  +  1;	  this.encodeSize    =    5    +    this.urlSafe;    	non-compiled	[CE]  ';'  expected	130	None	replace
1121	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  lineSeparator,  0,  this.lineLength  -  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  lineSeparator,  0,  this.lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  lineSeparator,  0,  this.lineLength  -  1);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    this.lineLength    -    1);    	non-compiled	[CE]  ';'  expected	193	None	replace
1122	[BUG]  [BUGGY]  this.encodeSize  =  3  +  this.urlSafe  +  1;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  3  +  this.urlSafe  +  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  3  +  this.urlSafe  +  1;	  this.encodeSize    =    3    +    this.urlSafe;    	non-compiled	[CE]  ';'  expected	105	None	replace
1123	[BUG]  [BUGGY]  this.encodeSize  =  3  +  this.base64;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  3  +  this.base64;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  3  +  this.base64;	  this.encodeSize    =    3    +    this.urlSafe;    	non-compiled	[CE]  ';'  expected	105	None	replace
1124	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  *  4  -  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  *  4  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  *  4  -  1);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    lineLength    *    4);    	non-compiled	[CE]  ';'  expected	197	None	replace
1125	[BUG]  [BUGGY]  this.encodeSize  =  100  +  this.lineSeparator.length;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  100  +  this.lineSeparator.length;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  100  +  this.lineSeparator.length;	  this.encodeSize    =    10    +    this.lineSeparator.length;    	non-compiled	[CE]  ';'  expected	225	None	replace
1126	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  lineSeparator),  urlSafe);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  lineSeparator),  urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  lineSeparator),  urlSafe);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,    lineSeparator));    	non-compiled	[CE]  ';'  expected	58	None	replace
1127	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe);	  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	210	None	replace
1128	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  2);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  2);	  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	210	None	replace
1129	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  4);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  4);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  4);	  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	210	None	replace
1130	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  1);	  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	210	None	replace
1131	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  lineSeparator,  0,  this.decodeSize);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  lineSeparator,  0,  this.decodeSize);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  lineSeparator,  0,  this.decodeSize);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  ';'  expected	241	None	replace
1132	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  *  1);  [CE]  :  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  *  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  *  1);	  this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineLength    +    1);    	non-compiled	[CE]  :  expected	246	None	replace
1133	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  lineSeparator,  0,  this.base64,  0,  lineLength);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  lineSeparator,  0,  this.base64,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  lineSeparator,  0,  this.base64,  0,  lineLength);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	36	None	replace
1134	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  base64.length  -  1);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  base64.length  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.lineSeparator,  0,  base64.length  -  1);	  System.arraycopy(base64,    0,    this.lineSeparator,    0,    base64.length);    	non-compiled	[CE]  ';'  expected	233	None	replace
1135	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	  System.arraycopy(base64,    0,    this.lineSeparator,    0,    base64.length);    	non-compiled	[CE]  ';'  expected	233	None	replace
1136	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  lineSeparator,  0,  this.base64.length  +  1);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  lineSeparator,  0,  this.base64.length  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  lineSeparator,  0,  this.base64.length  +  1);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    lineSeparator.length    +    1);    	non-compiled	[CE]  ';'  expected	39	None	replace
1137	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  1);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  1);	  System.arraycopy(Base64Utils.CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	141	None	replace
1138	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.CHUNK_SEPARATOR,  0,  lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.CHUNK_SEPARATOR,  0,  lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.CHUNK_SEPARATOR,  0,  lineSeparator,  0,  this.lineLength);	  System.arraycopy(Base64Utils.CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	141	None	replace
1139	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  1,  this.lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  1,  this.lineSeparator,  0,  urlSafe);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  1,  this.lineSeparator,  0,  urlSafe);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	115	None	replace
1140	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  base64Separator.length);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  base64Separator.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  base64Separator.length);	  System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	115	None	replace
1141	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0);    	non-compiled	[CE]  ';'  expected	18	None	replace
1142	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  base64);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  base64);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.lineSeparator,  0,  base64);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0);    	non-compiled	[CE]  ';'  expected	18	None	replace
1143	[BUG]  [BUGGY]  System.arraycopy(this.base64Separator,  0,  lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.base64Separator,  0,  lineSeparator,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64Separator,  0,  lineSeparator,  0,  lineLength  -  1);	  System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	182	None	replace
1144	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  lineSeparator,  0,  this.base64.length  -  2);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  lineSeparator,  0,  this.base64.length  -  2);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  lineSeparator,  0,  this.base64.length  -  2);	  System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    lineSeparator.length    -    2);    	non-compiled	[CE]  ';'  expected	217	None	replace
1145	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe  +  1);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe  +  1);	  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	90	None	replace
1146	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  1,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  1,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  1,  this.lineSeparator,  0,  lineLength  -  1);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    1,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	242	None	replace
1147	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  lineSeparator,  0,  this.lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  lineSeparator,  0,  this.lineLength);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    1,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	242	None	replace
1148	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  1);	  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	68	None	replace
1149	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.decodeSize,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.decodeSize,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteUtf8(this.decodeSize,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	68	None	replace
1150	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  10  +  1);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  10  +  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  10  +  1);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    /    2    +    1);    	non-compiled	[CE]  ';'  expected	107	None	replace
1151	[BUG]  [BUGGY]  System.arraycopy(base64Byte,  0,  this.base64Separator,  0,  this.lineLength  -  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64Byte,  0,  this.base64Separator,  0,  this.lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64Byte,  0,  this.base64Separator,  0,  this.lineLength  -  1);	  System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	228	None	replace
1152	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64Names,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64Names,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.base64Names,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	69	None	replace
1153	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  0,  lineSeparator,  0,  this.urlSafe.length);  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  0,  lineSeparator,  0,  this.urlSafe.length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  0,  lineSeparator,  0,  this.urlSafe.length);	  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	69	None	replace
1154	[BUG]  [BUGGY]  System.arraycopy(base64Names,  0,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64Names,  0,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64Names,  0,  this.lineSeparator,  0,  lineLength  -  1);	  System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	79	None	replace
1155	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.RBRACKET_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.RBRACKET_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.RBRACKET_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	168	None	replace
1156	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.base64Separator,  0,  this.base64Length);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.base64Separator,  0,  this.base64Length);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.base64Separator,  0,  this.base64Length);	  System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    this.base64Length);    	non-compiled	[CE]  ';'  expected	227	None	replace
1157	[BUG]  [BUGGY]  System.arraycopy(base64Byte,  0,  this.base64Separator,  0,  this.base64Length  -  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(base64Byte,  0,  this.base64Separator,  0,  this.base64Length  -  1);  [BUGGY]      this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64Byte,  0,  this.base64Separator,  0,  this.base64Length  -  1);	  System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    this.base64Length);    	non-compiled	[CE]  ';'  expected	227	None	replace
1158	[BUG]  [BUGGY]  System.arraycopy(Base64.DEFAULT,  0,  this.base64,  0,  base64.length);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64.DEFAULT,  0,  this.base64,  0,  base64.length);  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64.DEFAULT,  0,  this.base64,  0,  base64.length);	  System.arraycopy(base64,    0,    this.base64,    0,    base64.length);    	non-compiled	[CE]  ';'  expected	249	None	replace
1159	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.toByteArray(this.base64,  0,  lineLength));  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.toByteArray(this.base64,  0,  lineLength));  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.toByteArray(this.base64,  0,  lineLength));	  System.arraycopy(Base64Utils.toByteArray(this.lineSeparator,    0,    lineLength));    	non-compiled	[CE]  ';'  expected	169	None	replace
1160	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.toByteArray(this.decodeSize,  0,  lineSeparator.length));  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.toByteArray(this.decodeSize,  0,  lineSeparator.length));  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.toByteArray(this.decodeSize,  0,  lineSeparator.length));	  System.arraycopy(Base64Utils.toByteArray(this.lineSeparator,    0,    lineLength));    	non-compiled	[CE]  ';'  expected	169	None	replace
1161	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.toByteArray(this.lineSeparator,  0,  lineLength),  this.urlSafe);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  System.arraycopy(Base64Utils.toByteArray(this.lineSeparator,  0,  lineLength),  this.urlSafe);  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.toByteArray(this.lineSeparator,  0,  lineLength),  this.urlSafe);	  System.arraycopy(Base64Utils.toByteArray(this.lineSeparator,    0,    lineLength));    	non-compiled	[CE]  ';'  expected	169	None	replace
1162	[BUG]  [BUGGY]  this.encodeSize  =  512  +  lineSeparator.length  -  1;  [timeout]  [FE]                          ComparisonFailure      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {      [BUGGY]  this.encodeSize  =  512  +  lineSeparator.length  -  1;  [BUGGY]      }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(     "lineSeperator  must  not  contain  base64  characters:  [     "  +  sep  +       "]     ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  512  +  lineSeparator.length  -  1;	  this.encodeSize    =    5    +    lineSeparator.length    -    1;    	non-compiled	[timeout]	128	None	replace
