bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.encodeSize  =  0;  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  0;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  0;	  this.encodeSize    =    4;    	non-compiled	[CE]  ';'  expected	24	None	replace
2	[BUG]  [BUGGY]  this.encodeSize  =  1;  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  1;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1;	  this.encodeSize    =    4;    	non-compiled	[CE]  ';'  expected	24	None	replace
3	[BUG]  [BUGGY]  this.encodeSize  -=  4;  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  -=  4;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  -=  4;	  this.encodeSize    =    4;    	non-compiled	[CE]  ';'  expected	24	None	replace
4	[BUG]  [BUGGY]  this.encodeSize  =  2;  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  2;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  2;	  this.encodeSize    =    4;    	non-compiled	[CE]  ';'  expected	24	None	replace
5	[BUG]  [BUGGY]  this.encodeSize  =  3;  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  3;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  3;	  this.encodeSize    =    4;    	non-compiled	[CE]  ';'  expected	24	None	replace
6	[BUG]  [BUGGY]  this.encodeSize  -=  1;  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  -=  1;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  -=  1;	  this.encodeSize    =    4;    	non-compiled	[CE]  ';'  expected	24	None	replace
7	[BUG]  [BUGGY]  this.encodeSize  =  5;  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  5;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  5;	  this.encodeSize    =    4;    	non-compiled	[CE]  ';'  expected	24	None	replace
8	[BUG]  [BUGGY]  this.encodeSize  =  1  *  lineSeparator.length;  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  1  *  lineSeparator.length;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  *  lineSeparator.length;	  this.encodeSize    =    4    *    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	4	None	replace
9	[BUG]  [BUGGY]  this.encodeSize  =  4  *  this.lineSeparator.length;  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  4  *  this.lineSeparator.length;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  4  *  this.lineSeparator.length;	  this.encodeSize    =    4    *    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	4	None	replace
10	[BUG]  [BUGGY]  this.encodeSize  =  3  *  lineSeparator.length;  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  3  *  lineSeparator.length;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  3  *  lineSeparator.length;	  this.encodeSize    =    4    *    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	4	None	replace
11	[BUG]  [BUGGY]  this.encodeSize  =  0  *  lineSeparator.length;  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  0  *  lineSeparator.length;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  0  *  lineSeparator.length;	  this.encodeSize    =    4    *    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	4	None	replace
12	[BUG]  [BUGGY]  this.encodeSize  =  2  *  lineSeparator.length;  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  2  *  lineSeparator.length;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  2  *  lineSeparator.length;	  this.encodeSize    =    4    *    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	4	None	replace
13	[BUG]  [BUGGY]  this.encodeSize  =  4  *  lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  4  *  lineSeparator.length  -  1;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  4  *  lineSeparator.length  -  1;	  this.encodeSize    =    4    *    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	4	None	replace
14	[BUG]  [BUGGY]  this.encodeSize  =  4  *  this.base64Separator.length;  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  4  *  this.base64Separator.length;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  4  *  this.base64Separator.length;	  this.encodeSize    =    4    *    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	4	None	replace
15	[BUG]  [BUGGY]  this.encodeSize  =  4  *  this.urlSafe;  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  4  *  this.urlSafe;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  4  *  this.urlSafe;	  this.encodeSize    =    4    *    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	4	None	replace
16	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  lineLength);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.lineSeparator,  lineLength);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    lineLength);    	non-compiled	[CE]  ';'  expected	21	None	replace
17	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  +  1);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  +  1);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  +  1);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    lineLength);    	non-compiled	[CE]  ';'  expected	21	None	replace
18	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    lineLength);    	non-compiled	[CE]  ';'  expected	21	None	replace
19	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    lineLength);    	non-compiled	[CE]  ';'  expected	21	None	replace
20	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  /  1);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  /  1);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  /  1);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	23	None	replace
21	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  -  2);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  -  2);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  -  2);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	23	None	replace
22	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  lineLength  -  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  lineLength  -  1);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.lineSeparator,  lineLength  -  1);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	23	None	replace
23	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  -  4);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  -  4);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  -  4);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	23	None	replace
24	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  1);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  1);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	23	None	replace
25	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  -  3);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  -  3);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  -  3);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	23	None	replace
26	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  2);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  2);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  2);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	17	None	replace
27	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  4);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  4);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  4);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	17	None	replace
28	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength  -  1);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	17	None	replace
29	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  3);  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  3);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  3);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	17	None	replace
30	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  1);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  1);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	17	None	replace
31	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                                ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  1);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	17	None	replace
32	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length);  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length);	      	non-compiled	[CE]  ';'  expected	9	None	replace
33	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength);	      	non-compiled	[CE]  ';'  expected	9	None	replace
34	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.base64,  0,  lineLength);  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.base64,  0,  this.base64,  0,  lineLength);  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.base64,  0,  lineLength);	      	non-compiled	[CE]  ';'  expected	9	None	replace
35	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  -  1);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  -  1);	      System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	19	None	replace
36	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineLength);  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineLength);	      System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	19	None	replace
37	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineSeparator.length);	      System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	19	None	replace
38	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.baseSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.baseSeparator,  0,  lineSeparator.length);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.baseSeparator,  0,  lineSeparator.length);	      System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	19	None	replace
39	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]                                  ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  +  1);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  +  1);	      System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	19	None	replace
40	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  this.base64,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                    ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  this.base64,  0,  lineSeparator.length);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  this.base64,  0,  lineSeparator.length);	      System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	19	None	replace
41	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  lineSeparator,  0,  this.base64.length);  [CE]  ';'  expected  [FE]                                      ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  lineSeparator,  0,  this.base64.length);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  lineSeparator,  0,  this.base64.length);	      System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	19	None	replace
42	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                                        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  this.lineSeparator.length);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  this.lineSeparator.length);	      System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	19	None	replace
43	[BUG]  [BUGGY]  this.encodeSize  =  0  +  this.lineSeparator.length;  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  0  +  this.lineSeparator.length;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  0  +  this.lineSeparator.length;	  this.encodeSize    =    0    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	2	None	replace
44	[BUG]  [BUGGY]  this.encodeSize  =  0  +  this.urlSafe;  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  0  +  this.urlSafe;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  0  +  this.urlSafe;	  this.encodeSize    =    0    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	2	None	replace
45	[BUG]  [BUGGY]  this.encodeSize  =  0  +  lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  0  +  lineSeparator.length  -  1;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  0  +  lineSeparator.length  -  1;	  this.encodeSize    =    0    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	2	None	replace
46	[BUG]  [BUGGY]  this.encodeSize  =  0  +  this.base64Separator.length;  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  0  +  this.base64Separator.length;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  0  +  this.base64Separator.length;	  this.encodeSize    =    0    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	2	None	replace
47	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.base64,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(lineSeparator,  0,  this.base64,  0,  lineSeparator.length);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(lineSeparator,  0,  this.base64,  0,  lineSeparator.length);	      System.arraycopy(base64,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	16	None	replace
48	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  lineSeparator,  0,  this.base64.length);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.base64,  0,  lineSeparator,  0,  this.base64.length);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  lineSeparator,  0,  this.base64.length);	      System.arraycopy(base64,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	16	None	replace
49	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.base64,  0,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(base64,  0,  this.base64,  0,  lineSeparator.length  -  1);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.base64,  0,  lineSeparator.length  -  1);	      System.arraycopy(base64,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	16	None	replace
50	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.base64,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.base64,  0,  lineSeparator.length);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.base64,  0,  lineSeparator.length);	      System.arraycopy(base64,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	16	None	replace
51	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.base64,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.base64,  0,  lineSeparator.length);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.base64,  0,  lineSeparator.length);	      System.arraycopy(base64,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	16	None	replace
52	[BUG]  [BUGGY]  System.arraycopy(sep,  0,  this.base64,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(sep,  0,  this.base64,  0,  lineSeparator.length);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(sep,  0,  this.base64,  0,  lineSeparator.length);	      System.arraycopy(base64,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	16	None	replace
53	[BUG]  [BUGGY]  this.encodeSize  =  6  +  lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  6  +  lineSeparator.length  -  1;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  6  +  lineSeparator.length  -  1;	  this.encodeSize    =    6    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	25	None	replace
54	[BUG]  [BUGGY]  this.encodeSize  =  6  +  this.lineSeparator.length;  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  6  +  this.lineSeparator.length;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  6  +  this.lineSeparator.length;	  this.encodeSize    =    6    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	25	None	replace
55	[BUG]  [BUGGY]  this.encodeSize  =  6  +  lineLength;  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  6  +  lineLength;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  6  +  lineLength;	  this.encodeSize    =    6    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	25	None	replace
56	[BUG]  [BUGGY]  this.encodeSize  =  6  *  lineSeparator.length;  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  6  *  lineSeparator.length;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  6  *  lineSeparator.length;	  this.encodeSize    =    6    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	25	None	replace
57	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe));  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe));  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe));	      System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe));    	non-compiled	[CE]  ';'  expected	28	None	replace
58	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  lineSeparator));  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  lineSeparator));  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  lineSeparator));	      System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe));    	non-compiled	[CE]  ';'  expected	28	None	replace
59	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator,  this.urlSafe));  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator,  this.urlSafe));  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(lineSeparator,  this.urlSafe));	      System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe));    	non-compiled	[CE]  ';'  expected	28	None	replace
60	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator));  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator));  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(lineSeparator));	      System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe));    	non-compiled	[CE]  ';'  expected	28	None	replace
61	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator));  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator));  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator));	      System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe));    	non-compiled	[CE]  ';'  expected	28	None	replace
62	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  this.lineSeparator));  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  this.lineSeparator));  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  this.lineSeparator));	      System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe));    	non-compiled	[CE]  ';'  expected	28	None	replace
63	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  0,  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  0,  this.lineSeparator.length);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  0,  this.lineSeparator.length);	      System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe));    	non-compiled	[CE]  ';'  expected	28	None	replace
64	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  0,  this.lineSeparator.length));  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  0,  this.lineSeparator.length));  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  0,  this.lineSeparator.length));	      System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe));    	non-compiled	[CE]  ';'  expected	28	None	replace
65	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteArrayUtf8(this.urlSafe));  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.newByteArrayUtf8(this.urlSafe));  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteArrayUtf8(this.urlSafe));	      System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe));    	non-compiled	[CE]  ';'  expected	28	None	replace
66	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),  0,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	30	None	replace
67	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  0,  this.lineSeparator,  0,  this.lineLength);	      System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	30	None	replace
68	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ')'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	30	None	replace
69	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ')'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	30	None	replace
70	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator),  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(lineSeparator),  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(lineSeparator),  0,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	30	None	replace
71	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe),  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe),  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newByteUtf8(this.urlSafe),  0,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	30	None	replace
72	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ')'  expected  [FE]                            ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.base64,  0,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	30	None	replace
73	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.decodeTable,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ')'  expected  [FE]                              ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.decodeTable,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.decodeTable,  0,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	30	None	replace
74	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	14	None	replace
75	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineLength);	      System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	14	None	replace
76	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.base64,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	20	None	replace
77	[BUG]  [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.lineLength);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	20	None	replace
78	[BUG]  [BUGGY]  System.arraycopy(base64Separator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(base64Separator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64Separator,  0,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	20	None	replace
79	[BUG]  [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineLength  -  1);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	20	None	replace
80	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  sep,  0,  lineLength);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  sep,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  sep,  0,  lineLength);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	20	None	replace
81	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);	      System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	11	None	replace
82	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  1);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  1);	      System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	11	None	replace
83	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe);	      System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	11	None	replace
84	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  2);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  2);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  /  2);	      System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	11	None	replace
85	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);	      System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	15	None	replace
86	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  1);	      System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	15	None	replace
87	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe);	      System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	15	None	replace
88	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  1);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  1);	      System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	15	None	replace
89	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  1,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  1,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  1,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	15	None	replace
90	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe);	      System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	15	None	replace
91	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  4,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  4,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  4,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	15	None	replace
92	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  :  expected  [FE]        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	      this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  :  expected	26	None	replace
93	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  :  expected  [FE]          ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);	      this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  :  expected	26	None	replace
94	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [CE]  :  expected  [FE]            ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);	      this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  :  expected	26	None	replace
95	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength):  0;  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength):  0;  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength):  0;	      this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	26	None	replace
96	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength);  [CE]  :  expected  [FE]                ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength);	      this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  :  expected	26	None	replace
97	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  1);  [CE]  :  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  1);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  1);	      this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  :  expected	26	None	replace
98	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe  ||  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.lineSeparator  =  urlSafe  ||  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe  ||  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	      this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	26	None	replace
99	[BUG]  [BUGGY]  this.encodeSize  =  2  +  this.lineSeparator.length;  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  2  +  this.lineSeparator.length;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  2  +  this.lineSeparator.length;	  this.encodeSize    =    2    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	6	None	replace
100	[BUG]  [BUGGY]  this.encodeSize  =  2  +  lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  2  +  lineSeparator.length  -  1;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  2  +  lineSeparator.length  -  1;	  this.encodeSize    =    2    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	6	None	replace
101	[BUG]  [BUGGY]  this.encodeSize  =  2  +  this.urlSafe;  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  2  +  this.urlSafe;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  2  +  this.urlSafe;	  this.encodeSize    =    2    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	6	None	replace
102	[BUG]  [BUGGY]  this.encodeSize  =  2  +  this.base64Separator.length;  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  2  +  this.base64Separator.length;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  2  +  this.base64Separator.length;	  this.encodeSize    =    2    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	6	None	replace
103	[BUG]  [BUGGY]  this.encodeSize  =  3  +  this.lineSeparator.length;  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  3  +  this.lineSeparator.length;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  3  +  this.lineSeparator.length;	  this.encodeSize    =    3    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	3	None	replace
104	[BUG]  [BUGGY]  this.encodeSize  =  3  +  lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  3  +  lineSeparator.length  -  1;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  3  +  lineSeparator.length  -  1;	  this.encodeSize    =    3    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	3	None	replace
105	[BUG]  [BUGGY]  this.encodeSize  =  3  +  this.urlSafe;  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  3  +  this.urlSafe;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  3  +  this.urlSafe;	  this.encodeSize    =    3    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	3	None	replace
106	[BUG]  [BUGGY]  this.encodeSize  =  3  +  this.base64Separator.length;  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  3  +  this.base64Separator.length;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  3  +  this.base64Separator.length;	  this.encodeSize    =    3    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	3	None	replace
107	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  2  +  1);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  2  +  1);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  2  +  1);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    /    2);    	non-compiled	[CE]  ';'  expected	18	None	replace
108	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  3);  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  3);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  3);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    /    2);    	non-compiled	[CE]  ';'  expected	18	None	replace
109	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength  /  2);  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength  /  2);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength  /  2);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    /    2);    	non-compiled	[CE]  ';'  expected	18	None	replace
110	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  2  -  1);  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  2  -  1);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  2  -  1);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    /    2);    	non-compiled	[CE]  ';'  expected	18	None	replace
111	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength);	      System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	31	None	replace
112	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  -  1);	      System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	31	None	replace
113	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  +  1);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  +  1);	      System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	31	None	replace
114	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	31	None	replace
115	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  urlSafe);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  urlSafe);	      System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	31	None	replace
116	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.baseSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.baseSeparator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.baseSeparator,  0,  lineLength);	      System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	31	None	replace
117	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  1,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  1,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  1,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	31	None	replace
118	[BUG]  [BUGGY]  this.encodeSize  =  1  +  this.lineSeparator.length;  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  1  +  this.lineSeparator.length;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  this.lineSeparator.length;	  this.encodeSize    =    1    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	1	None	replace
119	[BUG]  [BUGGY]  this.encodeSize  =  1  +  lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  1  +  lineSeparator.length  -  1;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  lineSeparator.length  -  1;	  this.encodeSize    =    1    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	1	None	replace
120	[BUG]  [BUGGY]  this.encodeSize  =  1  +  this.urlSafe;  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  1  +  this.urlSafe;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  this.urlSafe;	  this.encodeSize    =    1    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	1	None	replace
121	[BUG]  [BUGGY]  this.encodeSize  =  1  +  this.base64Separator.length;  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  1  +  this.base64Separator.length;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  this.base64Separator.length;	  this.encodeSize    =    1    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	1	None	replace
122	[BUG]  [BUGGY]  this.encodeSize  =  1  +  lineLength;  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  1  +  lineLength;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  lineLength;	  this.encodeSize    =    1    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	1	None	replace
123	[BUG]  [BUGGY]  this.encodeSize  =  1  +  lineSeparator.length  -  2;  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  1  +  lineSeparator.length  -  2;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  lineSeparator.length  -  2;	  this.encodeSize    =    1    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	1	None	replace
124	[BUG]  [BUGGY]  this.lineSize  =  1  +  lineSeparator.length;  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.lineSize  =  1  +  lineSeparator.length;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSize  =  1  +  lineSeparator.length;	  this.encodeSize    =    1    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	1	None	replace
125	[BUG]  [BUGGY]  this.encodeSize  =  1  +  this.urlSafe?  lineSeparator.length  :  0;  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  1  +  this.urlSafe?  lineSeparator.length  :  0;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  this.urlSafe?  lineSeparator.length  :  0;	  this.encodeSize    =    1    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	1	None	replace
126	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	10	None	replace
127	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	10	None	replace
128	[BUG]  [BUGGY]  this.encodeSize  =  5  +  lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  5  +  lineSeparator.length  -  1;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  5  +  lineSeparator.length  -  1;	  this.encodeSize    =    5    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	8	None	replace
129	[BUG]  [BUGGY]  this.encodeSize  =  5  +  this.lineSeparator.length;  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  5  +  this.lineSeparator.length;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  5  +  this.lineSeparator.length;	  this.encodeSize    =    5    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	8	None	replace
130	[BUG]  [BUGGY]  this.encodeSize  =  5  +  this.urlSafe;  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  5  +  this.urlSafe;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  5  +  this.urlSafe;	  this.encodeSize    =    5    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	8	None	replace
131	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  4  +  1);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  4  +  1);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  /  4  +  1);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    /    4);    	non-compiled	[CE]  ';'  expected	29	None	replace
132	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  *  4);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  *  4);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  *  4);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    /    4);    	non-compiled	[CE]  ';'  expected	29	None	replace
133	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength  /  4);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength  /  4);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineLength  /  4);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    /    4);    	non-compiled	[CE]  ';'  expected	29	None	replace
134	[BUG]  [BUGGY]  this.encodeSize  =  4  +  this.lineSeparator.length  -  1;  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  4  +  this.lineSeparator.length  -  1;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  4  +  this.lineSeparator.length  -  1;	  this.encodeSize    =    4    +    lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	7	None	replace
135	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);	      System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	13	None	replace
136	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  1);	      System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	13	None	replace
137	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe);	      System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	13	None	replace
138	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  1);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  1);	      System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	13	None	replace
139	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.DEFAULT_BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.DEFAULT_BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.DEFAULT_BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	13	None	replace
140	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe);	      System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	13	None	replace
141	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	13	None	replace
142	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	13	None	replace
143	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength);	      System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	12	None	replace
144	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  -  1);	      System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	12	None	replace
145	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  +  1);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  +  1);	      System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	12	None	replace
146	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  urlSafe);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  urlSafe);	      System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	12	None	replace
147	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	12	None	replace
148	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64Separator,  0,  lineLength);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64Separator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64Separator,  0,  lineLength);	      System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	12	None	replace
149	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  1,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  1,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  1,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	12	None	replace
150	[BUG]  [BUGGY]  System.arraycopy(this.base64Separator,  0,  this.base64Separator,  0,  lineLength);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.base64Separator,  0,  this.base64Separator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64Separator,  0,  this.base64Separator,  0,  lineLength);	      System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	22	None	replace
151	[BUG]  [BUGGY]  System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  lineLength);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  lineLength);	      System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	22	None	replace
152	[BUG]  [BUGGY]  System.arraycopy(this.base64Byte,  0,  this.base64Separator,  0,  lineLength);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.base64Byte,  0,  this.base64Separator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64Byte,  0,  this.base64Separator,  0,  lineLength);	      System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	22	None	replace
153	[BUG]  [BUGGY]  System.arraycopy(this.base64Separator,  0,  this.base64Byte,  0,  lineLength);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.base64Separator,  0,  this.base64Byte,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64Separator,  0,  this.base64Byte,  0,  lineLength);	      System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	22	None	replace
154	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.base64Separator,  0,  lineLength);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.base64,  0,  this.base64Separator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.base64Separator,  0,  lineLength);	      System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	22	None	replace
155	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.base64Separator,  0,  lineLength);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.base64Separator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.base64Separator,  0,  lineLength);	      System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	22	None	replace
156	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.base64Separator,  0,  lineLength);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.base64Separator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.base64Separator,  0,  lineLength);	      System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	22	None	replace
157	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.base64Separator,  0,  lineLength);  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(base64,  0,  this.base64Separator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.base64Separator,  0,  lineLength);	      System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	22	None	replace
158	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.urlSafe);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.urlSafe);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(this.urlSafe);	      String    sep    =    StringUtils.newStringUtf8(sep);    	non-compiled	[CE]  ';'  expected	27	None	replace
159	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(lineSeparator);	      String    sep    =    StringUtils.newStringUtf8(sep);    	non-compiled	[CE]  ';'  expected	27	None	replace
160	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep  +  1);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep  +  1);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(sep  +  1);	      String    sep    =    StringUtils.newStringUtf8(sep);    	non-compiled	[CE]  ';'  expected	27	None	replace
161	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep,  urlSafe);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep,  urlSafe);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(sep,  urlSafe);	      String    sep    =    StringUtils.newStringUtf8(sep);    	non-compiled	[CE]  ';'  expected	27	None	replace
162	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(separator);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  String  sep  =  StringUtils.newStringUtf8(separator);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(separator);	      String    sep    =    StringUtils.newStringUtf8(sep);    	non-compiled	[CE]  ';'  expected	27	None	replace
163	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(base64);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  String  sep  =  StringUtils.newStringUtf8(base64);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(base64);	      String    sep    =    StringUtils.newStringUtf8(sep);    	non-compiled	[CE]  ';'  expected	27	None	replace
164	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep,  lineLength);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(sep,  lineLength);	      String    sep    =    StringUtils.newStringUtf8(sep);    	non-compiled	[CE]  ';'  expected	27	None	replace
165	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep,  this.urlSafe);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep,  this.urlSafe);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(sep,  this.urlSafe);	      String    sep    =    StringUtils.newStringUtf8(sep);    	non-compiled	[CE]  ';'  expected	27	None	replace
166	[BUG]  [BUGGY]  this.encodeSize  =  5  +  lineLength;  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  5  +  lineLength;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  5  +  lineLength;	  this.encodeSize    =    5    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	8	None	replace
167	[BUG]  [BUGGY]  this.encodeSize  =  6;  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  6;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  6;	  this.encodeSize    =    4;    	non-compiled	[CE]  ';'  expected	24	None	replace
168	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  lineSeparator,  0,  lineLength);	      	non-compiled	[CE]  ';'  expected	9	None	replace
169	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.toByteArray(this.lineSeparator,  0,  lineLength));  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.toByteArray(this.lineSeparator,  0,  lineLength));  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.toByteArray(this.lineSeparator,  0,  lineLength));	      	non-compiled	[CE]  ';'  expected	9	None	replace
170	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.urlSafe,  0,  lineLength);  [CE]  ')'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.urlSafe,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator,  0,  this.urlSafe,  0,  lineLength);	      System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	30	None	replace
171	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),  0,  this.urlSafe,  0,  lineLength);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),  0,  this.urlSafe,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.lineSeparator),  0,  this.urlSafe,  0,  lineLength);	      System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	30	None	replace
172	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64Name),  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.base64Name),  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.base64Name),  0,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	30	None	replace
173	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  0,  this.lineSeparator,  0,  this.urlLength);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  0,  this.lineSeparator,  0,  this.urlLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  0,  this.lineSeparator,  0,  this.urlLength);	      System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	30	None	replace
174	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  0,  this.lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  0,  this.lineSeparator,  0,  urlSafe);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  0,  this.lineSeparator,  0,  urlSafe);	      System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	30	None	replace
175	[BUG]  [BUGGY]  System.arraycopy(base64Path,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(base64Path,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64Path,  0,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	20	None	replace
176	[BUG]  [BUGGY]  this.encodeSize  =  1  +  lineSeparator.length  -  4;  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  1  +  lineSeparator.length  -  4;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  +  lineSeparator.length  -  4;	  this.encodeSize    =    1    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	1	None	replace
177	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.base64Separator,  0,  lineLength);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.base64Separator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.base64Separator,  0,  lineLength);	      System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	31	None	replace
178	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  -  2);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  -  2);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  -  2);	      System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	31	None	replace
179	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  lineSeparator,  0,  this.lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  lineSeparator,  0,  this.lineLength);	      System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	31	None	replace
180	[BUG]  [BUGGY]  this.encodeSize  =  2  +  lineLength;  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  2  +  lineLength;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  2  +  lineLength;	  this.encodeSize    =    2    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	6	None	replace
181	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  *  2);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  *  2);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  *  2);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    /    2);    	non-compiled	[CE]  ';'  expected	18	None	replace
182	[BUG]  [BUGGY]  System.arraycopy(base64Byte,  0,  this.base64Separator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(base64Byte,  0,  this.base64Separator,  0,  lineLength  -  1);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64Byte,  0,  this.base64Separator,  0,  lineLength  -  1);	      System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	22	None	replace
183	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.base64Byte,  0,  this.base64Separator,  0,  lineLength);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.base64Byte,  0,  this.base64Separator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.base64Byte,  0,  this.base64Separator,  0,  lineLength);	      System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	22	None	replace
184	[BUG]  [BUGGY]  System.arraycopy(base64Separator,  0,  this.base64Separator,  0,  lineLength);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(base64Separator,  0,  this.base64Separator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64Separator,  0,  this.base64Separator,  0,  lineLength);	      System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	22	None	replace
185	[BUG]  [BUGGY]  System.arraycopy(Base64Separator,  0,  this.base64Separator,  0,  lineLength);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Separator,  0,  this.base64Separator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator,  0,  this.base64Separator,  0,  lineLength);	      System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	22	None	replace
186	[BUG]  [BUGGY]  System.arraycopy(this.base64Separator,  0,  lineSeparator,  0,  base64Length);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.base64Separator,  0,  lineSeparator,  0,  base64Length);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64Separator,  0,  lineSeparator,  0,  base64Length);	      System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	22	None	replace
187	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineLength);  [CE]  :  expected  [FE]        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineLength);	      this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  :  expected	26	None	replace
188	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength):  urlSafe;  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength):  urlSafe;  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength):  urlSafe;	      this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	26	None	replace
189	[BUG]  [BUGGY]  this.encodeSize  =  0  +  lineLength;  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  0  +  lineLength;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  0  +  lineLength;	  this.encodeSize    =    0    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	2	None	replace
190	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  lineSeparator);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  lineSeparator);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  lineSeparator);	      System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe));    	non-compiled	[CE]  ';'  expected	28	None	replace
191	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  this.lineSeparator);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  this.lineSeparator);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  this.lineSeparator);	      System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe));    	non-compiled	[CE]  ';'  expected	28	None	replace
192	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  lineLength));  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  lineLength));  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe,  lineLength));	      System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe));    	non-compiled	[CE]  ';'  expected	28	None	replace
193	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  1);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  1);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  1);	      System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	13	None	replace
194	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  2);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  2);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  2);	      System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	13	None	replace
195	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  -  2);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  -  2);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  lineLength  -  2);	      System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	12	None	replace
196	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength  -  1);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength  -  1);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength  -  1);	      System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	12	None	replace
197	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  *  4);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  *  4);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  *  4);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	23	None	replace
198	[BUG]  [BUGGY]  this.encodeSize  =  7  +  lineSeparator.length;  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  7  +  lineSeparator.length;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  7  +  lineSeparator.length;	  this.encodeSize    =    6    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	25	None	replace
199	[BUG]  [BUGGY]  System.arraycopy(Base64Separator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Separator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator,  0,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	11	None	replace
200	[BUG]  [BUGGY]  System.arraycopy(Base64DECODE_TABLE,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64DECODE_TABLE,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64DECODE_TABLE,  0,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	11	None	replace
201	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.base64,  0,  lineSeparator,  0,  lineSeparator.length);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  lineSeparator,  0,  lineSeparator.length);	      System.arraycopy(base64,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	16	None	replace
202	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.base64,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.base64,  0,  this.lineSeparator,  0,  lineSeparator.length);	      System.arraycopy(base64,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	16	None	replace
203	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.lineSeparator,  0,  lineSeparator.length);	      System.arraycopy(base64,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	16	None	replace
204	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.base64,  0,  lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(base64,  0,  this.base64,  0,  lineSeparator.length  +  1);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.base64,  0,  lineSeparator.length  +  1);	      System.arraycopy(base64,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	16	None	replace
205	[BUG]  [BUGGY]  this.encodeSize  =  5  *  lineSeparator.length;  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  5  *  lineSeparator.length;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  5  *  lineSeparator.length;	  this.encodeSize    =    4    *    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	4	None	replace
206	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.urlSafe);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.urlSafe);	      System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	14	None	replace
207	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep  + "] ");  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep  + "] ");  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(sep  + "] ");	      String    sep    =    StringUtils.newStringUtf8(sep);    	non-compiled	[CE]  ';'  expected	27	None	replace
208	[BUG]  [BUGGY]  String  sep  =  StringUtils.newBase64Separator(sep);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  String  sep  =  StringUtils.newBase64Separator(sep);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newBase64Separator(sep);	      String    sep    =    StringUtils.newStringUtf8(sep);    	non-compiled	[CE]  ';'  expected	27	None	replace
209	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep  +  ']');  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  String  sep  =  StringUtils.newStringUtf8(sep  +  ']');  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(sep  +  ']');	      String    sep    =    StringUtils.newStringUtf8(sep);    	non-compiled	[CE]  ';'  expected	27	None	replace
210	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	10	None	replace
211	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  -  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  -  1);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  -  1);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	17	None	replace
212	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  1);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  1);	      System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	15	None	replace
213	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  2);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  2);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  2);	      System.arraycopy(Base64Byte.DEFAULT_LINE_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	15	None	replace
214	[BUG]  [BUGGY]  System.arraycopy(Base64DECODE_TABLE,  0,  this.lineSeparator,  lineLength);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64DECODE_TABLE,  0,  this.lineSeparator,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64DECODE_TABLE,  0,  this.lineSeparator,  lineLength);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    lineLength);    	non-compiled	[CE]  ';'  expected	21	None	replace
215	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  lineSeparator,  0,  this.base64.length);  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  lineSeparator,  0,  this.base64.length);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  lineSeparator,  0,  this.base64.length);	      System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	19	None	replace
216	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  lineSeparator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  lineSeparator,  0,  lineLength);	      System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	19	None	replace
217	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  -  2);  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  -  2);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  -  2);	      System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	19	None	replace
218	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  /  2);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  /  2);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  /  2);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    /    2);    	non-compiled	[CE]  ';'  expected	18	None	replace
219	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.base64,  0,  lineSeparator.length  -  4);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(base64,  0,  this.base64,  0,  lineSeparator.length  -  4);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.base64,  0,  lineSeparator.length  -  4);	      System.arraycopy(base64,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	16	None	replace
220	[BUG]  [BUGGY]  System.arraycopy(Base64.DEFAULT,  0,  this.base64,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64.DEFAULT,  0,  this.base64,  0,  lineSeparator.length);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64.DEFAULT,  0,  this.base64,  0,  lineSeparator.length);	      System.arraycopy(base64,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	16	None	replace
221	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  0,  this.lineSeparator,  0,  this.urlSafe.length);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  0,  this.lineSeparator,  0,  this.urlSafe.length);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),  0,  this.lineSeparator,  0,  this.urlSafe.length);	      System.arraycopy(Base64Utils.newStringUtf8(this.urlSafe),    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	30	None	replace
222	[BUG]  [BUGGY]  this.encodeSize  =  10  *  lineSeparator.length;  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  10  *  lineSeparator.length;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  10  *  lineSeparator.length;	  this.encodeSize    =    4    *    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	4	None	replace
223	[BUG]  [BUGGY]  this.encodeSize  -=  3;  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  -=  3;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  -=  3;	  this.encodeSize    =    4;    	non-compiled	[CE]  ';'  expected	24	None	replace
224	[BUG]  [BUGGY]  this.encodeSize  -=  5;  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  -=  5;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  -=  5;	  this.encodeSize    =    4;    	non-compiled	[CE]  ';'  expected	24	None	replace
225	[BUG]  [BUGGY]  this.encodeSize  =  10  +  this.lineSeparator.length;  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  10  +  this.lineSeparator.length;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  10  +  this.lineSeparator.length;	  this.encodeSize    =    4    +    this.lineSeparator.length;    	non-compiled	[CE]  ';'  expected	5	None	replace
226	[BUG]  [BUGGY]  System.arraycopy(base64Byte,  0,  this.base64Separator,  0,  this.base64Separator.length);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(base64Byte,  0,  this.base64Separator,  0,  this.base64Separator.length);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64Byte,  0,  this.base64Separator,  0,  this.base64Separator.length);	      System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	22	None	replace
227	[BUG]  [BUGGY]  System.arraycopy(base64Byte,  0,  this.base64Separator,  0,  this.base64Length);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(base64Byte,  0,  this.base64Separator,  0,  this.base64Length);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64Byte,  0,  this.base64Separator,  0,  this.base64Length);	      System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	22	None	replace
228	[BUG]  [BUGGY]  System.arraycopy(base64Byte,  0,  this.base64Separator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(base64Byte,  0,  this.base64Separator,  0,  this.lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64Byte,  0,  this.base64Separator,  0,  this.lineLength);	      System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	22	None	replace
229	[BUG]  [BUGGY]  System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  this.base64Length);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  this.base64Length);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  this.base64Length);	      System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	22	None	replace
230	[BUG]  [BUGGY]  System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  this.base64Separator.length);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  this.base64Separator.length);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte,  0,  this.base64Separator,  0,  this.base64Separator.length);	      System.arraycopy(base64Byte,    0,    this.base64Separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	22	None	replace
231	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  /  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  /  1);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  /  1);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	17	None	replace
232	[BUG]  [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.lineLength  -  1);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.lineLength  -  1);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.lineLength  -  1);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	20	None	replace
233	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  base64.length);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(base64,  0,  this.lineSeparator,  0,  base64.length);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.lineSeparator,  0,  base64.length);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	20	None	replace
234	[BUG]  [BUGGY]  System.arraycopy(base64Characters,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(base64Characters,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64Characters,  0,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	20	None	replace
235	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  this.urlSafe);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.lineSeparator,  0,  this.urlSafe);	      System.arraycopy(Base64Byte.DEFAULT,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	12	None	replace
236	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineLength);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineLength);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    lineLength);    	non-compiled	[CE]  ';'  expected	21	None	replace
237	[BUG]  [BUGGY]  char  sep  =  StringUtils.newStringUtf8(sep);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  char  sep  =  StringUtils.newStringUtf8(sep);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	char  sep  =  StringUtils.newStringUtf8(sep);	      String    sep    =    StringUtils.newStringUtf8(sep);    	non-compiled	[CE]  ';'  expected	27	None	replace
238	[BUG]  [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.base64);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  String  sep  =  StringUtils.newStringUtf8(this.base64);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	String  sep  =  StringUtils.newStringUtf8(this.base64);	      String    sep    =    StringUtils.newStringUtf8(sep);    	non-compiled	[CE]  ';'  expected	27	None	replace
239	[BUG]  [BUGGY]  this.encodeSize  =  10  +  lineSeparator.length;  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  10  +  lineSeparator.length;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  10  +  lineSeparator.length;	  this.encodeSize    =    5    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	8	None	replace
240	[BUG]  [BUGGY]  this.encodeSize  =  1  -  lineSeparator.length;  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.encodeSize  =  1  -  lineSeparator.length;  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.encodeSize  =  1  -  lineSeparator.length;	  this.encodeSize    =    1    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	1	None	replace
241	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize);	      System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	13	None	replace
242	[BUG]  [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  1,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Utils.BASE64_SEPARATOR,  1,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Utils.BASE64_SEPARATOR,  1,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(Base64Utils.BASE64_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	13	None	replace
243	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength  -  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength  -  1);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  this.lineLength  -  1);	      System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	31	None	replace
244	[BUG]  [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  this.urlSafe);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Separator.DEFAULT,  0,  this.lineSeparator,  0,  this.urlSafe);	      System.arraycopy(Base64Separator.DEFAULT,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	31	None	replace
245	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength):  0;  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength):  0;  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength):  0;	      this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	26	None	replace
246	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  +  1);  [CE]  :  expected  [FE]          ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  +  1);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  +  1);	      this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  :  expected	26	None	replace
247	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  [CE]  :  expected  [FE]            ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);	      this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  :  expected	26	None	replace
248	[BUG]  [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(CSS_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  :  expected  [FE]              ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  this.lineSeparator  =  urlSafe?  System.arraycopy(CSS_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	this.lineSeparator  =  urlSafe?  System.arraycopy(CSS_LINE_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	      this.lineSeparator    =    urlSafe?    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  :  expected	26	None	replace
249	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  this.base64,  0,  base64.length);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(base64,  0,  this.base64,  0,  base64.length);  [BUGGY]    }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(base64,  0,  this.base64,  0,  base64.length);	      	non-compiled	[CE]  ';'  expected	9	None	replace
250	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  -  4);  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  -  4);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  0,  this.base64,  0,  lineSeparator.length  -  4);	      System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	19	None	replace
251	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  1,  this.base64,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  1,  this.base64,  0,  lineSeparator.length);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  1,  this.base64,  0,  lineSeparator.length);	      System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	19	None	replace
252	[BUG]  [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  4,  this.base64,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(Base64Byte.DEFAULT,  4,  this.base64,  0,  lineSeparator.length);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(Base64Byte.DEFAULT,  4,  this.base64,  0,  lineSeparator.length);	      System.arraycopy(Base64Byte.DEFAULT,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	19	None	replace
253	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  1);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  1);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength  -  1);	      System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	11	None	replace
254	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe);	      System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	11	None	replace
255	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  /  4);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  /  4);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength  /  4);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength    /    4);    	non-compiled	[CE]  ';'  expected	29	None	replace
256	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  if  (lineSeparator  ==  null)  {  lineLength  =  0;//  disable  chunk-separating  lineSeparator  =  CHUNK_SEPARATOR;//  this  just  gets  ignored  }  this.lineLength  =  lineLength  >  0  ?  (lineLength  /  4)  *  4  :  0;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe);  [BUGGY]    this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep  =  StringUtils.newStringUtf8(lineSeparator);  throw  new  IllegalArgumentException(   "lineSeperator  must  not  contain  base64  characters:  [   "  +  sep  +     "]   ");  }  this.encodeTable  =  urlSafe  ?  URL_SAFE_ENCODE_TABLE  :  STANDARD_ENCODE_TABLE;  }  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buffer  encodeTable  lineSeparator  boolean  eof  urlSafe  String  sep  byte  PAD  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec7/src/java/org/apache/commons/codec/binary/Base64.java	0.42640143271122083	341	341	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	10	None	replace
