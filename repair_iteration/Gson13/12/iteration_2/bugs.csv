bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result  =  NON_EXECIMAL;  [CE]  [FE]            ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  result  =  NON_EXECIMAL;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  NON_EXECIMAL;	  return    NON_EXECIMAL;    	non-compiled	[CE]  	11	None	replace
2	[BUG]  [BUGGY]  result  =  MIN_INCOMPLETE_INTEGER;  [CE]  [FE]              ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  result  =  MIN_INCOMPLETE_INTEGER;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  MIN_INCOMPLETE_INTEGER;	  return    NON_EXECIMAL;    	non-compiled	[CE]  	11	None	replace
3	[BUG]  [BUGGY]  return  NON_EXECIMAL  -  1;  [CE]  [FE]                ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  NON_EXECIMAL  -  1;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  NON_EXECIMAL  -  1;	  return    NON_EXECIMAL;    	non-compiled	[CE]  	11	None	replace
4	[BUG]  [BUGGY]  return  NON_EXECIMAL  +  PEEKED_BUFFERED;  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  NON_EXECIMAL  +  PEEKED_BUFFERED;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  NON_EXECIMAL  +  PEEKED_BUFFERED;	  return    NON_EXECIMAL;    	non-compiled	[CE]  	11	None	replace
5	[BUG]  [BUGGY]  return  NON_EXECIMAL  +  1;  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  NON_EXECIMAL  +  1;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  NON_EXECIMAL  +  1;	  return    NON_EXECIMAL;    	non-compiled	[CE]  	11	None	replace
6	[BUG]  [BUGGY]  return  peeked  +  PEEKED_SINGLE_QUOTED;  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  peeked  +  PEEKED_SINGLE_QUOTED;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  peeked  +  PEEKED_SINGLE_QUOTED;	  return    result    +    PEEKED_SINGLE_QUOTED;    	non-compiled	[CE]  	7	None	replace
7	[BUG]  [BUGGY]  return  result  /  PEEKED_SINGLE_QUOTED;  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  result  /  PEEKED_SINGLE_QUOTED;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  result  /  PEEKED_SINGLE_QUOTED;	  return    result    +    PEEKED_SINGLE_QUOTED;    	non-compiled	[CE]  	7	None	replace
8	[BUG]  [BUGGY]  return  result  -  PEEKED_SINGLE_QUOTED;  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  result  -  PEEKED_SINGLE_QUOTED;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  result  -  PEEKED_SINGLE_QUOTED;	  return    result    +    PEEKED_SINGLE_QUOTED;    	non-compiled	[CE]  	7	None	replace
9	[BUG]  [BUGGY]  return  result  +  PEEKED_BUFFERED;  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  result  +  PEEKED_BUFFERED;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  result  +  PEEKED_BUFFERED;	  return    result    +    PEEKED_SINGLE_QUOTED;    	non-compiled	[CE]  	7	None	replace
10	[BUG]  [BUGGY]  return  result  +  PEEKED_SINGLE_QUOTED_NAME;  [CE]  [FE]                            ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  result  +  PEEKED_SINGLE_QUOTED_NAME;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  result  +  PEEKED_SINGLE_QUOTED_NAME;	  return    result    +    PEEKED_SINGLE_QUOTED;    	non-compiled	[CE]  	7	None	replace
11	[BUG]  [BUGGY]  return  PEEKED_FALSE;  [CE]  [FE]        ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  PEEKED_FALSE;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_FALSE;	  return    PEEKED_EOF;    	non-compiled	[CE]  	13	None	replace
12	[BUG]  [BUGGY]  return  PEEKED_BEFORE;  [CE]  [FE]          ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  PEEKED_BEFORE;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_BEFORE;	  return    PEEKED_EOF;    	non-compiled	[CE]  	13	None	replace
13	[BUG]  [BUGGY]  return  NUMBER_CHAR_QUOTED;  [CE]  [FE]          ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  NUMBER_CHAR_QUOTED;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  NUMBER_CHAR_QUOTED;	  return    PEEKED_NONE;    	non-compiled	[CE]  	10	None	replace
14	[BUG]  [BUGGY]  result  =  NUMBER_CHAR_SIGN;  [CE]  [FE]            ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  result  =  NUMBER_CHAR_SIGN;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  NUMBER_CHAR_SIGN;	  return    PEEKED_NONE;    	non-compiled	[CE]  	10	None	replace
15	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(PEEKED_BUFFERED);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(PEEKED_BUFFERED);  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().JsonString(PEEKED_BUFFERED);	  return    PEEKED_BOOLEAN;    	non-compiled	[CE]  	12	None	replace
16	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos);  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos);	  return    PEEKED_BOOLEAN;    	non-compiled	[CE]  	12	None	replace
17	[BUG]  [BUGGY]  return  PEEKED_BOOLEAN  ||  PEEKED_SINGLE_QUOTED_NAME;  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  PEEKED_BOOLEAN  ||  PEEKED_SINGLE_QUOTED_NAME;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_BOOLEAN  ||  PEEKED_SINGLE_QUOTED_NAME;	  return    PEEKED_BOOLEAN;    	non-compiled	[CE]  	12	None	replace
18	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  result);  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  result);  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  result);	  return    PEEKED_BOOLEAN;    	non-compiled	[CE]  	12	None	replace
19	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(pathNames[pos]));  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(pathNames[pos]));  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(pathNames[pos]));	  return    PEEKED_BOOLEAN;    	non-compiled	[CE]  	12	None	replace
20	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().jsonString(buffer,  pos);  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  JsonStringEncoder.getInstance().jsonString(buffer,  pos);  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().jsonString(buffer,  pos);	  return    PEEKED_BOOLEAN;    	non-compiled	[CE]  	12	None	replace
21	[BUG]  [BUGGY]  return  PEEKED_TRUE;  [CE]  [FE]            ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  PEEKED_TRUE;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_TRUE;	  return    PEEKED_SINGLE_QUOTED;    	non-compiled	[CE]  	3	None	replace
22	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(PEEKED_SINGLE_QUOTED);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(PEEKED_SINGLE_QUOTED);  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().JsonString(PEEKED_SINGLE_QUOTED);	  return    PEEKED_SINGLE_QUOTED;    	non-compiled	[CE]  	3	None	replace
23	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(PEEKED_SINGLE_QUOTED);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(PEEKED_SINGLE_QUOTED);  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().quoteAsString(PEEKED_SINGLE_QUOTED);	  return    PEEKED_SINGLE_QUOTED;    	non-compiled	[CE]  	3	None	replace
24	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(PEEKED_SINGLE_QUOTED);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(PEEKED_SINGLE_QUOTED);  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(PEEKED_SINGLE_QUOTED);	  return    PEEKED_SINGLE_QUOTED;    	non-compiled	[CE]  	3	None	replace
25	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(PEEKED_SINGLE_QUOTED_NAME);  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(PEEKED_SINGLE_QUOTED_NAME);  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().quoteAsString(PEEKED_SINGLE_QUOTED_NAME);	  return    PEEKED_SINGLE_QUOTED;    	non-compiled	[CE]  	3	None	replace
26	[BUG]  [BUGGY]  return  NUMBER_SINGLE_QUOTED;  [CE]  [FE]                ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  NUMBER_SINGLE_QUOTED;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  NUMBER_SINGLE_QUOTED;	  return    PEEKED_NUMBER;    	non-compiled	[CE]  	5	None	replace
27	[BUG]  [BUGGY]  return  peeked  +  PEEKED_UNQUOTED;  [CE]  [FE]        ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  peeked  +  PEEKED_UNQUOTED;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  peeked  +  PEEKED_UNQUOTED;	  return    result    +    PEEKED_UNQUOTED;    	non-compiled	[CE]  	9	None	replace
28	[BUG]  [BUGGY]  return  result  /  PEEKED_UNQUOTED;  [CE]  [FE]          ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  result  /  PEEKED_UNQUOTED;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  result  /  PEEKED_UNQUOTED;	  return    result    +    PEEKED_UNQUOTED;    	non-compiled	[CE]  	9	None	replace
29	[BUG]  [BUGGY]  return  result  -  PEEKED_UNQUOTED;  [CE]  [FE]            ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  result  -  PEEKED_UNQUOTED;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  result  -  PEEKED_UNQUOTED;	  return    result    +    PEEKED_UNQUOTED;    	non-compiled	[CE]  	9	None	replace
30	[BUG]  [BUGGY]  return  result  +  PEEKED_LONG;  [CE]  [FE]              ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  result  +  PEEKED_LONG;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  result  +  PEEKED_LONG;	  return    result    +    PEEKED_UNQUOTED;    	non-compiled	[CE]  	9	None	replace
31	[BUG]  [BUGGY]  return  peeked;  [CE]  [FE]        ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  peeked;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  peeked;	  return    PEEKED_UNQUOTED;    	non-compiled	[CE]  	1	None	replace
32	[BUG]  [BUGGY]  result  =  peekStack[pos];  [CE]  [FE]          ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  result  =  peekStack[pos];  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  peekStack[pos];	  return    PEEKED_NULL;    	non-compiled	[CE]  	2	None	replace
33	[BUG]  [BUGGY]  result  =  MIN_INCOMPLETE_INTEGER  +  peekedString.length();  [CE]  [FE]              ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  result  =  MIN_INCOMPLETE_INTEGER  +  peekedString.length();  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  MIN_INCOMPLETE_INTEGER  +  peekedString.length();	  return    PEEKED_LONG;    	non-compiled	[CE]  	4	None	replace
34	[BUG]  [BUGGY]  result  =  MIN_INCOMPLETE_INTEGER  +  PEEKED_LONG;  [CE]  [FE]                ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  result  =  MIN_INCOMPLETE_INTEGER  +  PEEKED_LONG;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  MIN_INCOMPLETE_INTEGER  +  PEEKED_LONG;	  return    PEEKED_LONG;    	non-compiled	[CE]  	4	None	replace
35	[BUG]  [BUGGY]  result  =  MIN_INCOMPLETE_INTEGER  |  PEEKED_LONG;  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  result  =  MIN_INCOMPLETE_INTEGER  |  PEEKED_LONG;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  MIN_INCOMPLETE_INTEGER  |  PEEKED_LONG;	  return    PEEKED_LONG;    	non-compiled	[CE]  	4	None	replace
36	[BUG]  [BUGGY]  result  =  MIN_INCOMPLETE_INTEGER  +  peekStack.length;  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  result  =  MIN_INCOMPLETE_INTEGER  +  peekStack.length;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  MIN_INCOMPLETE_INTEGER  +  peekStack.length;	  return    PEEKED_LONG;    	non-compiled	[CE]  	4	None	replace
37	[BUG]  [BUGGY]  pos  =  stack.length();  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  pos  =  stack.length();  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  stack.length();	      	non-compiled	[CE]  	8	None	replace
38	[BUG]  [BUGGY]  int  pos  =  stack.length();  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  int  pos  =  stack.length();  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  stack.length();	      	non-compiled	[CE]  	8	None	replace
39	[BUG]  [BUGGY]  pos  =  stack.length;  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  pos  =  stack.length;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  stack.length;	      	non-compiled	[CE]  	8	None	replace
40	[BUG]  [BUGGY]  result  =  peekStack.length();  [CE]  [FE]                            ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  result  =  peekStack.length();  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  peekStack.length();	      	non-compiled	[CE]  	8	None	replace
41	[BUG]  [BUGGY]  int  pos  =  stack.size();  [CE]  [FE]                              ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  int  pos  =  stack.size();  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  stack.size();	      	non-compiled	[CE]  	8	None	replace
42	[BUG]  [BUGGY]  pos--;  [CE]  [FE]                                ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  pos--;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos--;	      	non-compiled	[CE]  	8	None	replace
43	[BUG]  [BUGGY]  peekStack.push(p);  [CE]  [FE]                                  ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  peekStack.push(p);  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	peekStack.push(p);	      	non-compiled	[CE]  	8	None	replace
44	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(pathNames[pos]);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(pathNames[pos]);  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(pathNames[pos]);	  return    PEEKED_BUFFERED;    	non-compiled	[CE]  	6	None	replace
45	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(peekStack[pos]));  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(peekStack[pos]));  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(peekStack[pos]));	  return    PEEKED_BUFFERED;    	non-compiled	[CE]  	6	None	replace
46	[BUG]  [BUGGY]  return  PEEKED_DOUBLE;  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  PEEKED_DOUBLE;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_DOUBLE;	  return    PEEKED_BUFFERED;    	non-compiled	[CE]  	6	None	replace
47	[BUG]  [BUGGY]  return  result  +  1;  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  result  +  1;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  result  +  1;	  return    result    +    PEEKED_SINGLE_QUOTED;    	non-compiled	[CE]  	7	None	replace
48	[BUG]  [BUGGY]  return  result  +  PEEKED_DOUBLE_QUOTED;  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  result  +  PEEKED_DOUBLE_QUOTED;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  result  +  PEEKED_DOUBLE_QUOTED;	  return    result    +    PEEKED_SINGLE_QUOTED;    	non-compiled	[CE]  	7	None	replace
49	[BUG]  [BUGGY]  return  SINGLE_QUOTED;  [CE]  [FE]        ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  SINGLE_QUOTED;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  SINGLE_QUOTED;	  return    PEEKED_UNQUOTED;    	non-compiled	[CE]  	1	None	replace
50	[BUG]  [BUGGY]  return  NUMBER_CHAR_EXP_E;  [CE]  [FE]            ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  NUMBER_CHAR_EXP_E;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  NUMBER_CHAR_EXP_E;	  return    NON_EXECIMAL;    	non-compiled	[CE]  	11	None	replace
51	[BUG]  [BUGGY]  return  NUMBER_INCOMPLETE_INTEGER;  [CE]  [FE]              ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  NUMBER_INCOMPLETE_INTEGER;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  NUMBER_INCOMPLETE_INTEGER;	  return    PEEKED_LONG;    	non-compiled	[CE]  	4	None	replace
52	[BUG]  [BUGGY]  pos  =  stack.size();  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  pos  =  stack.size();  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  stack.size();	      	non-compiled	[CE]  	8	None	replace
53	[BUG]  [BUGGY]  pos  =  stackSize  -  buffer.length;  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  pos  =  stackSize  -  buffer.length;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  stackSize  -  buffer.length;	      	non-compiled	[CE]  	8	None	replace
54	[BUG]  [BUGGY]  peekStack.pop();  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  peekStack.pop();  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	peekStack.pop();	      	non-compiled	[CE]  	8	None	replace
55	[BUG]  [BUGGY]  return  PEEKED_BOOLEAN  +  1;  [CE]  [FE]              ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  PEEKED_BOOLEAN  +  1;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_BOOLEAN  +  1;	  return    PEEKED_BOOLEAN;    	non-compiled	[CE]  	12	None	replace
56	[BUG]  [BUGGY]  return  PEEKED_BOOLEAN  -  1;  [CE]  [FE]                ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  PEEKED_BOOLEAN  -  1;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_BOOLEAN  -  1;	  return    PEEKED_BOOLEAN;    	non-compiled	[CE]  	12	None	replace
57	[BUG]  [BUGGY]  return  result  +  PEEKED_TRUE;  [CE]  [FE]        ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  result  +  PEEKED_TRUE;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  result  +  PEEKED_TRUE;	  return    result    +    PEEKED_UNQUOTED;    	non-compiled	[CE]  	9	None	replace
58	[BUG]  [BUGGY]  return  PEEKED_SINGLE;  [CE]  [FE]            ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  PEEKED_SINGLE;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_SINGLE;	  return    PEEKED_SINGLE_QUOTED;    	non-compiled	[CE]  	3	None	replace
59	[BUG]  [BUGGY]  return  PEEKED_DOUBLE_QUOTED;  [CE]  [FE]              ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  PEEKED_DOUBLE_QUOTED;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_DOUBLE_QUOTED;	  return    PEEKED_SINGLE_QUOTED;    	non-compiled	[CE]  	3	None	replace
60	[BUG]  [BUGGY]  return  PEEKED_TRUE  +  PEEKED_SINGLE_QUOTED;  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  PEEKED_TRUE  +  PEEKED_SINGLE_QUOTED;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_TRUE  +  PEEKED_SINGLE_QUOTED;	  return    result    +    PEEKED_SINGLE_QUOTED;    	non-compiled	[CE]  	7	None	replace
61	[BUG]  [BUGGY]  return  NUMBER_CHAR_EXP_SIGN;  [CE]  [FE]            ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  NUMBER_CHAR_EXP_SIGN;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  NUMBER_CHAR_EXP_SIGN;	  return    NON_EXECIMAL;    	non-compiled	[CE]  	11	None	replace
62	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(buffer,  pos);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(buffer,  pos);  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().quoteAsString(buffer,  pos);	  return    PEEKED_NONE;    	non-compiled	[CE]  	10	None	replace
63	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer,  pos);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer,  pos);  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().JsonString(buffer,  pos);	  return    PEEKED_NONE;    	non-compiled	[CE]  	10	None	replace
64	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  0,  pos);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  0,  pos);  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  0,  pos);	  return    PEEKED_NONE;    	non-compiled	[CE]  	10	None	replace
65	[BUG]  [BUGGY]  int  pos  =  peekStack.peek();  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  int  pos  =  peekStack.peek();  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  peekStack.peek();	      	non-compiled	[CE]  	8	None	replace
66	[BUG]  [BUGGY]  int  pos  =  peekStack.size();  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  int  pos  =  peekStack.size();  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  peekStack.size();	      	non-compiled	[CE]  	8	None	replace
67	[BUG]  [BUGGY]  int  pos  =  peekStackTop();  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  int  pos  =  peekStackTop();  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  peekStackTop();	      	non-compiled	[CE]  	8	None	replace
68	[BUG]  [BUGGY]  pos  =  peekStack.peek();  [CE]  [FE]                            ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  pos  =  peekStack.peek();  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  peekStack.peek();	      	non-compiled	[CE]  	8	None	replace
69	[BUG]  [BUGGY]  int  pos  =  peekStackToPeek();  [CE]  [FE]                              ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  int  pos  =  peekStackToPeek();  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  peekStackToPeek();	      	non-compiled	[CE]  	8	None	replace
70	[BUG]  [BUGGY]  return  PEEKED_BOOLEAN  ||  PEEKED_DOUBLE_QUOTED_NAME;  [CE]  [FE]              ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  PEEKED_BOOLEAN  ||  PEEKED_DOUBLE_QUOTED_NAME;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_BOOLEAN  ||  PEEKED_DOUBLE_QUOTED_NAME;	  return    PEEKED_BOOLEAN;    	non-compiled	[CE]  	12	None	replace
71	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos));  [CE]  [FE]          ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos));  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos));	  return    PEEKED_NULL;    	non-compiled	[CE]  	2	None	replace
72	[BUG]  [BUGGY]  return  PEEKED_TRUE  +  PEEKED_UNQUOTED;  [CE]  [FE]        ComparisonFailure    [CONTEXT]    pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {    [BUGGY]  return  PEEKED_TRUE  +  PEEKED_UNQUOTED;  [BUGGY]    }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(   "Expected  value   ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_TRUE  +  PEEKED_UNQUOTED;	  return    result    +    PEEKED_UNQUOTED;    	non-compiled	[CE]  	9	None	replace
