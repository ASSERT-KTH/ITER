bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  pos  =  stack.length()  -  1;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  stack.length()  -  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  stack.length()  -  1;	  pos    =    stack.length();    	non-compiled	[CE]  	37	None	replace
2	[BUG]  [BUGGY]  pos  =  stack.length()  +  1;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  stack.length()  +  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  stack.length()  +  1;	  pos    =    stack.length();    	non-compiled	[CE]  	37	None	replace
3	[BUG]  [BUGGY]  pos  =  stackSize();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  stackSize();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  stackSize();	  pos    =    stack.length();    	non-compiled	[CE]  	37	None	replace
4	[BUG]  [BUGGY]  pos  =  stackSize.length();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  stackSize.length();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  stackSize.length();	  pos    =    stack.length();    	non-compiled	[CE]  	37	None	replace
5	[BUG]  [BUGGY]  pos  =  stack.length()  -  2;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  stack.length()  -  2;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  stack.length()  -  2;	  pos    =    stack.length();    	non-compiled	[CE]  	37	None	replace
6	[BUG]  [BUGGY]  pos  =  stack.length()  -  4;  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  stack.length()  -  4;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  stack.length()  -  4;	  pos    =    stack.length();    	non-compiled	[CE]  	37	None	replace
7	[BUG]  [BUGGY]  result  =  stack[pos];  [CE]  [FE]              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  stack[pos];  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  stack[pos];	  result    =    peekStack[pos];    	non-compiled	[CE]  	32	None	replace
8	[BUG]  [BUGGY]  result  =  buffer[pos];  [CE]  [FE]                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  buffer[pos];  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  buffer[pos];	  result    =    peekStack[pos];    	non-compiled	[CE]  	32	None	replace
9	[BUG]  [BUGGY]  result  =  stackSize[pos];  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  stackSize[pos];  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  stackSize[pos];	  result    =    peekStack[pos];    	non-compiled	[CE]  	32	None	replace
10	[BUG]  [BUGGY]  result  =  stackS[pos];  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  stackS[pos];  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  stackS[pos];	  result    =    peekStack[pos];    	non-compiled	[CE]  	32	None	replace
11	[BUG]  [BUGGY]  result  =  stackStack[pos];  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  stackStack[pos];  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  stackStack[pos];	  result    =    peekStack[pos];    	non-compiled	[CE]  	32	None	replace
12	[BUG]  [BUGGY]  result  =  stackStop[pos];  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  stackStop[pos];  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  stackStop[pos];	  result    =    peekStack[pos];    	non-compiled	[CE]  	32	None	replace
13	[BUG]  [BUGGY]  result  =  peekStack[pos]  -  1;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  peekStack[pos]  -  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  peekStack[pos]  -  1;	  result    =    peekStack[pos];    	non-compiled	[CE]  	32	None	replace
14	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos  +  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos  +  1);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos  +  1);	  return    JsonStringEncoder.getInstance().encodeAsString(buffer,    pos);    	non-compiled	[CE]  	16	None	replace
15	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  PEEKED_NULL);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  PEEKED_NULL);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  PEEKED_NULL);	  return    JsonStringEncoder.getInstance().encodeAsString(buffer,    pos);    	non-compiled	[CE]  	16	None	replace
16	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  PEEKED_BUFFERED);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  PEEKED_BUFFERED);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  PEEKED_BUFFERED);	  return    JsonStringEncoder.getInstance().encodeAsString(buffer,    pos);    	non-compiled	[CE]  	16	None	replace
17	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos,  PEEKED_NULL);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos,  PEEKED_NULL);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos,  PEEKED_NULL);	  return    JsonStringEncoder.getInstance().encodeAsString(buffer,    pos);    	non-compiled	[CE]  	16	None	replace
18	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos,  PEEKED_BUFFERED);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos,  PEEKED_BUFFERED);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos,  PEEKED_BUFFERED);	  return    JsonStringEncoder.getInstance().encodeAsString(buffer,    pos);    	non-compiled	[CE]  	16	None	replace
19	[BUG]  [BUGGY]  result  =  peekedString  +  MIN_INCOMPLETE_INTEGER.length();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  peekedString  +  MIN_INCOMPLETE_INTEGER.length();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  peekedString  +  MIN_INCOMPLETE_INTEGER.length();	  result    =    MIN_INCOMPLETE_INTEGER    +    peekedString.length();    	non-compiled	[CE]  	33	None	replace
20	[BUG]  [BUGGY]  result  =  peekedLong  +  MIN_INCOMPLETE_INTEGER.length();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  peekedLong  +  MIN_INCOMPLETE_INTEGER.length();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  peekedLong  +  MIN_INCOMPLETE_INTEGER.length();	  result    =    MIN_INCOMPLETE_INTEGER    +    peekedString.length();    	non-compiled	[CE]  	33	None	replace
21	[BUG]  [BUGGY]  result  =  peekedString.length();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  peekedString.length();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  peekedString.length();	  result    =    MIN_INCOMPLETE_INTEGER    +    peekedString.length();    	non-compiled	[CE]  	33	None	replace
22	[BUG]  [BUGGY]  result  =  peekedLong.length()  +  MIN_INCOMPLETE_INTEGER.length();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  peekedLong.length()  +  MIN_INCOMPLETE_INTEGER.length();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  peekedLong.length()  +  MIN_INCOMPLETE_INTEGER.length();	  result    =    MIN_INCOMPLETE_INTEGER    +    peekedString.length();    	non-compiled	[CE]  	33	None	replace
23	[BUG]  [BUGGY]  result  =  peekedInt.length()  +  MIN_INCOMPLETE_INTEGER.length();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  peekedInt.length()  +  MIN_INCOMPLETE_INTEGER.length();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  peekedInt.length()  +  MIN_INCOMPLETE_INTEGER.length();	  result    =    MIN_INCOMPLETE_INTEGER    +    peekedString.length();    	non-compiled	[CE]  	33	None	replace
24	[BUG]  [BUGGY]  result  =  peekedNumber  +  MIN_INCOMPLETE_INTEGER.length();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  peekedNumber  +  MIN_INCOMPLETE_INTEGER.length();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  peekedNumber  +  MIN_INCOMPLETE_INTEGER.length();	  result    =    MIN_INCOMPLETE_INTEGER    +    peekedString.length();    	non-compiled	[CE]  	33	None	replace
25	[BUG]  [BUGGY]  result  =  pos  +  peekedString.length();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  pos  +  peekedString.length();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  pos  +  peekedString.length();	  result    =    MIN_INCOMPLETE_INTEGER    +    peekedString.length();    	non-compiled	[CE]  	33	None	replace
26	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().jsonString(buffer,  result);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().jsonString(buffer,  result);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().jsonString(buffer,  result);	  return    JsonStringEncoder.getInstance().jsonString(buffer,    pos);    	non-compiled	[CE]  	20	None	replace
27	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().jsonString(buffer,  pos  +  1);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().jsonString(buffer,  pos  +  1);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().jsonString(buffer,  pos  +  1);	  return    JsonStringEncoder.getInstance().jsonString(buffer,    pos);    	non-compiled	[CE]  	20	None	replace
28	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().jsonString(buffer,  0,  pos);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().jsonString(buffer,  0,  pos);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().jsonString(buffer,  0,  pos);	  return    JsonStringEncoder.getInstance().jsonString(buffer,    pos);    	non-compiled	[CE]  	20	None	replace
29	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().jsonString(buffer,  pos,  PEEKED_NULL);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().jsonString(buffer,  pos,  PEEKED_NULL);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().jsonString(buffer,  pos,  PEEKED_NULL);	  return    JsonStringEncoder.getInstance().jsonString(buffer,    pos);    	non-compiled	[CE]  	20	None	replace
30	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().jsonString(buffer,  pos,  PEEKED_BUFFERED);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().jsonString(buffer,  pos,  PEEKED_BUFFERED);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().jsonString(buffer,  pos,  PEEKED_BUFFERED);	  return    JsonStringEncoder.getInstance().jsonString(buffer,    pos);    	non-compiled	[CE]  	20	None	replace
31	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().jsonString(buffer,  pos,  peeked);  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().jsonString(buffer,  pos,  peeked);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().jsonString(buffer,  pos,  peeked);	  return    JsonStringEncoder.getInstance().jsonString(buffer,    pos);    	non-compiled	[CE]  	20	None	replace
32	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().jsonString(buffer,  PEEKED_NULL);  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().jsonString(buffer,  PEEKED_NULL);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().jsonString(buffer,  PEEKED_NULL);	  return    JsonStringEncoder.getInstance().jsonString(buffer,    pos);    	non-compiled	[CE]  	20	None	replace
33	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(PEEKED_NULL,  PEEKED_NULL);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(PEEKED_NULL,  PEEKED_NULL);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(PEEKED_NULL,  PEEKED_NULL);	  return    NUMBER_CHAR_EXP_E;    	non-compiled	[CE]  	50	None	replace
34	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(PEEKED_BUFFERED,  pos);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(PEEKED_BUFFERED,  pos);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(PEEKED_BUFFERED,  pos);	  return    NUMBER_CHAR_EXP_E;    	non-compiled	[CE]  	50	None	replace
35	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer,  result);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer,  result);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().JsonString(buffer,  result);	  return    JsonStringEncoder.getInstance().JsonString(buffer,    pos);    	non-compiled	[CE]  	63	None	replace
36	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer,  pos  +  1);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer,  pos  +  1);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().JsonString(buffer,  pos  +  1);	  return    JsonStringEncoder.getInstance().JsonString(buffer,    pos);    	non-compiled	[CE]  	63	None	replace
37	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer,  pos,  PEEKED_NULL);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer,  pos,  PEEKED_NULL);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().JsonString(buffer,  pos,  PEEKED_NULL);	  return    JsonStringEncoder.getInstance().JsonString(buffer,    pos);    	non-compiled	[CE]  	63	None	replace
38	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer,  0,  pos);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer,  0,  pos);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().JsonString(buffer,  0,  pos);	  return    JsonStringEncoder.getInstance().JsonString(buffer,    pos);    	non-compiled	[CE]  	63	None	replace
39	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer,  pos,  peeked);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer,  pos,  peeked);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().JsonString(buffer,  pos,  peeked);	  return    JsonStringEncoder.getInstance().JsonString(buffer,    pos);    	non-compiled	[CE]  	63	None	replace
40	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer,  pos,  PEEKED_BUFFERED);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer,  pos,  PEEKED_BUFFERED);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().JsonString(buffer,  pos,  PEEKED_BUFFERED);	  return    JsonStringEncoder.getInstance().JsonString(buffer,    pos);    	non-compiled	[CE]  	63	None	replace
41	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer,  pos,  pathNames);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer,  pos,  pathNames);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().JsonString(buffer,  pos,  pathNames);	  return    JsonStringEncoder.getInstance().JsonString(buffer,    pos);    	non-compiled	[CE]  	63	None	replace
42	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer[pos]));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer[pos]));  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer[pos]));	  return    JsonStringEncoder.getInstance().encodeAsString(peekStack[pos]));    	non-compiled	[CE]  	45	None	replace
43	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  peekStack[pos]));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  peekStack[pos]));  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  peekStack[pos]));	  return    JsonStringEncoder.getInstance().encodeAsString(peekStack[pos]));    	non-compiled	[CE]  	45	None	replace
44	[BUG]  [BUGGY]  result  =  JsonStringEncoder.getInstance().encodeAsString(buffer[pos]));  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  JsonStringEncoder.getInstance().encodeAsString(buffer[pos]));  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  JsonStringEncoder.getInstance().encodeAsString(buffer[pos]));	  return    JsonStringEncoder.getInstance().encodeAsString(peekStack[pos]));    	non-compiled	[CE]  	45	None	replace
45	[BUG]  [BUGGY]  peekStack[pos]  =  JsonStringEncoder.getInstance().encodeAsString(buffer[pos]));  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  peekStack[pos]  =  JsonStringEncoder.getInstance().encodeAsString(buffer[pos]));  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	peekStack[pos]  =  JsonStringEncoder.getInstance().encodeAsString(buffer[pos]));	  return    JsonStringEncoder.getInstance().encodeAsString(peekStack[pos]));    	non-compiled	[CE]  	45	None	replace
46	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().decodeAsString(buffer[pos]));  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().decodeAsString(buffer[pos]));  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().decodeAsString(buffer[pos]));	  return    JsonStringEncoder.getInstance().encodeAsString(peekStack[pos]));    	non-compiled	[CE]  	45	None	replace
47	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos]));  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos]));  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos]));	  return    JsonStringEncoder.getInstance().encodeAsString(peekStack[pos]));    	non-compiled	[CE]  	45	None	replace
48	[BUG]  [BUGGY]  return  peeked  -  PEEKED_SINGLE_QUOTED;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  peeked  -  PEEKED_SINGLE_QUOTED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  peeked  -  PEEKED_SINGLE_QUOTED;	  return    peeked    +    PEEKED_SINGLE_QUOTED;    	non-compiled	[CE]  	6	None	replace
49	[BUG]  [BUGGY]  return  peeked  /  PEEKED_SINGLE_QUOTED;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  peeked  /  PEEKED_SINGLE_QUOTED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  peeked  /  PEEKED_SINGLE_QUOTED;	  return    peeked    +    PEEKED_SINGLE_QUOTED;    	non-compiled	[CE]  	6	None	replace
50	[BUG]  [BUGGY]  return  peeked  +  PEEKED_BUFFERED;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  peeked  +  PEEKED_BUFFERED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  peeked  +  PEEKED_BUFFERED;	  return    peeked    +    PEEKED_SINGLE_QUOTED;    	non-compiled	[CE]  	6	None	replace
51	[BUG]  [BUGGY]  return  peeked  +  PEEKED_SINGLE_QUOTED_NAME;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  peeked  +  PEEKED_SINGLE_QUOTED_NAME;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  peeked  +  PEEKED_SINGLE_QUOTED_NAME;	  return    peeked    +    PEEKED_SINGLE_QUOTED;    	non-compiled	[CE]  	6	None	replace
52	[BUG]  [BUGGY]  return  PEEKED_BOOLEAN  &&  PEEKED_SINGLE_QUOTED_NAME;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_BOOLEAN  &&  PEEKED_SINGLE_QUOTED_NAME;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_BOOLEAN  &&  PEEKED_SINGLE_QUOTED_NAME;	  return    PEEKED_BOOLEAN    ||    PEEKED_SINGLE_QUOTED_NAME;    	non-compiled	[CE]  	17	None	replace
53	[BUG]  [BUGGY]  return  PEEKED_BOOLEAN  ||  PEEKED_SINGLE_QUOTED_NAME  +  1;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_BOOLEAN  ||  PEEKED_SINGLE_QUOTED_NAME  +  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_BOOLEAN  ||  PEEKED_SINGLE_QUOTED_NAME  +  1;	  return    PEEKED_BOOLEAN    ||    PEEKED_SINGLE_QUOTED_NAME;    	non-compiled	[CE]  	17	None	replace
54	[BUG]  [BUGGY]  return  result  ||  PEEKED_SINGLE_QUOTED_NAME;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  result  ||  PEEKED_SINGLE_QUOTED_NAME;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  result  ||  PEEKED_SINGLE_QUOTED_NAME;	  return    PEEKED_BOOLEAN    ||    PEEKED_SINGLE_QUOTED_NAME;    	non-compiled	[CE]  	17	None	replace
55	[BUG]  [BUGGY]  return  peeked  ||  PEEKED_SINGLE_QUOTED_NAME;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  peeked  ||  PEEKED_SINGLE_QUOTED_NAME;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  peeked  ||  PEEKED_SINGLE_QUOTED_NAME;	  return    PEEKED_BOOLEAN    ||    PEEKED_SINGLE_QUOTED_NAME;    	non-compiled	[CE]  	17	None	replace
56	[BUG]  [BUGGY]  return  PEEKED_BOOLEAN  ||  PEEKED_SINGLE_QUOTED_NAME  -  1;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_BOOLEAN  ||  PEEKED_SINGLE_QUOTED_NAME  -  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_BOOLEAN  ||  PEEKED_SINGLE_QUOTED_NAME  -  1;	  return    PEEKED_BOOLEAN    ||    PEEKED_SINGLE_QUOTED_NAME;    	non-compiled	[CE]  	17	None	replace
57	[BUG]  [BUGGY]  return  PEEKED_BOOLEAN  ||  PEEKED_TRUE;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_BOOLEAN  ||  PEEKED_TRUE;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_BOOLEAN  ||  PEEKED_TRUE;	  return    PEEKED_BOOLEAN    ||    PEEKED_SINGLE_QUOTED_NAME;    	non-compiled	[CE]  	17	None	replace
58	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(pathNames[pos]);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(pathNames[pos]);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().JsonString(pathNames[pos]);	  return    PEEKED_FALSE;    	non-compiled	[CE]  	11	None	replace
59	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().jsonString(pathNames[pos]);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().jsonString(pathNames[pos]);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().jsonString(pathNames[pos]);	  return    PEEKED_FALSE;    	non-compiled	[CE]  	11	None	replace
60	[BUG]  [BUGGY]  result  =  peekStack.length;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  peekStack.length;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  peekStack.length;	  result    =    NON_EXECIMAL;    	non-compiled	[CE]  	1	None	replace
61	[BUG]  [BUGGY]  result  =  PEEKED_NULL;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  PEEKED_NULL;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  PEEKED_NULL;	  result    =    NON_EXECIMAL;    	non-compiled	[CE]  	1	None	replace
62	[BUG]  [BUGGY]  result  =  buffer.length;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  buffer.length;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  buffer.length;	  result    =    NON_EXECIMAL;    	non-compiled	[CE]  	1	None	replace
63	[BUG]  [BUGGY]  result  =  PEEKED_UNQUOTED;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  PEEKED_UNQUOTED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  PEEKED_UNQUOTED;	  result    =    NON_EXECIMAL;    	non-compiled	[CE]  	1	None	replace
64	[BUG]  [BUGGY]  result  =  pos;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  pos;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  pos;	  result    =    NON_EXECIMAL;    	non-compiled	[CE]  	1	None	replace
65	[BUG]  [BUGGY]  int  pos  =  peekStack.size()  -  1;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  peekStack.size()  -  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  peekStack.size()  -  1;	  int    pos    =    peekStack.size();    	non-compiled	[CE]  	66	None	replace
66	[BUG]  [BUGGY]  int  pos  =  buffer.size();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  buffer.size();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  buffer.size();	  int    pos    =    peekStack.size();    	non-compiled	[CE]  	66	None	replace
67	[BUG]  [BUGGY]  int  pos  =  pathIndices.size();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  pathIndices.size();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  pathIndices.size();	  int    pos    =    peekStack.size();    	non-compiled	[CE]  	66	None	replace
68	[BUG]  [BUGGY]  int  pos  =  peekStack.size()  -  2;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  peekStack.size()  -  2;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  peekStack.size()  -  2;	  int    pos    =    peekStack.size();    	non-compiled	[CE]  	66	None	replace
69	[BUG]  [BUGGY]  int  pos  =  peekStack.size()  -  4;  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  peekStack.size()  -  4;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  peekStack.size()  -  4;	  int    pos    =    peekStack.size();    	non-compiled	[CE]  	66	None	replace
70	[BUG]  [BUGGY]  int  pos  =  peekStack.size()  +  1;  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  peekStack.size()  +  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  peekStack.size()  +  1;	  int    pos    =    peekStack.size();    	non-compiled	[CE]  	66	None	replace
71	[BUG]  [BUGGY]  result  =  PEEKED_SINGLE_QUOTED;  [CE]  [FE]            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  PEEKED_SINGLE_QUOTED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  PEEKED_SINGLE_QUOTED;	  return    SINGLE_QUOTED;    	non-compiled	[CE]  	49	None	replace
72	[BUG]  [BUGGY]  return  PEEKED_SINGLE_QUOTED_NAME;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_SINGLE_QUOTED_NAME;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_SINGLE_QUOTED_NAME;	  return    SINGLE_QUOTED;    	non-compiled	[CE]  	49	None	replace
73	[BUG]  [BUGGY]  return  PEEKED_SINGLE_QUOTED_NAME  +  PEEKED_UNQUOTED;  [CE]  [FE]            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_SINGLE_QUOTED_NAME  +  PEEKED_UNQUOTED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_SINGLE_QUOTED_NAME  +  PEEKED_UNQUOTED;	  return    PEEKED_TRUE    +    PEEKED_UNQUOTED;    	non-compiled	[CE]  	72	None	replace
74	[BUG]  [BUGGY]  return  PEEKED_UNQUOTED  +  PEEKED_TRUE;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_UNQUOTED  +  PEEKED_TRUE;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_UNQUOTED  +  PEEKED_TRUE;	  return    PEEKED_TRUE    +    PEEKED_UNQUOTED;    	non-compiled	[CE]  	72	None	replace
75	[BUG]  [BUGGY]  return  PEEKED_BUFFERED  +  PEEKED_UNQUOTED;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_BUFFERED  +  PEEKED_UNQUOTED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_BUFFERED  +  PEEKED_UNQUOTED;	  return    PEEKED_TRUE    +    PEEKED_UNQUOTED;    	non-compiled	[CE]  	72	None	replace
76	[BUG]  [BUGGY]  return  PEEKED_LONG  +  PEEKED_UNQUOTED;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_LONG  +  PEEKED_UNQUOTED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_LONG  +  PEEKED_UNQUOTED;	  return    PEEKED_TRUE    +    PEEKED_UNQUOTED;    	non-compiled	[CE]  	72	None	replace
77	[BUG]  [BUGGY]  result  =  peekedLong  |  PEEKED_LONG;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  peekedLong  |  PEEKED_LONG;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  peekedLong  |  PEEKED_LONG;	  result    =    MIN_INCOMPLETE_INTEGER    |    PEEKED_LONG;    	non-compiled	[CE]  	35	None	replace
78	[BUG]  [BUGGY]  result  =  PEEKED_LONG  |  MIN_INCOMPLETE_INTEGER;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  PEEKED_LONG  |  MIN_INCOMPLETE_INTEGER;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  PEEKED_LONG  |  MIN_INCOMPLETE_INTEGER;	  result    =    MIN_INCOMPLETE_INTEGER    |    PEEKED_LONG;    	non-compiled	[CE]  	35	None	replace
79	[BUG]  [BUGGY]  result  =  MIN_INCOMPLETE_INTEGER  &  PEEKED_LONG;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  MIN_INCOMPLETE_INTEGER  &  PEEKED_LONG;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  MIN_INCOMPLETE_INTEGER  &  PEEKED_LONG;	  result    =    MIN_INCOMPLETE_INTEGER    |    PEEKED_LONG;    	non-compiled	[CE]  	35	None	replace
80	[BUG]  [BUGGY]  result  =  peekedLong  |  MIN_INCOMPLETE_INTEGER;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  peekedLong  |  MIN_INCOMPLETE_INTEGER;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  peekedLong  |  MIN_INCOMPLETE_INTEGER;	  result    =    MIN_INCOMPLETE_INTEGER    |    PEEKED_LONG;    	non-compiled	[CE]  	35	None	replace
81	[BUG]  [BUGGY]  result  =  MIN_INCOMPLETE_INTEGER  -  PEEKED_LONG;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  MIN_INCOMPLETE_INTEGER  -  PEEKED_LONG;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  MIN_INCOMPLETE_INTEGER  -  PEEKED_LONG;	  result    =    MIN_INCOMPLETE_INTEGER    |    PEEKED_LONG;    	non-compiled	[CE]  	35	None	replace
82	[BUG]  [BUGGY]  result  =  pos  |  PEEKED_LONG;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  pos  |  PEEKED_LONG;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  pos  |  PEEKED_LONG;	  result    =    MIN_INCOMPLETE_INTEGER    |    PEEKED_LONG;    	non-compiled	[CE]  	35	None	replace
83	[BUG]  [BUGGY]  result  =  buffer[pos]  |  PEEKED_LONG;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  buffer[pos]  |  PEEKED_LONG;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  buffer[pos]  |  PEEKED_LONG;	  result    =    MIN_INCOMPLETE_INTEGER    |    PEEKED_LONG;    	non-compiled	[CE]  	35	None	replace
84	[BUG]  [BUGGY]  throw  syntaxError( "Expected  value: "  +  PEEKED_SINGLE_QUOTED_NAME);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  throw  syntaxError( "Expected  value: "  +  PEEKED_SINGLE_QUOTED_NAME);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	throw  syntaxError( "Expected  value: "  +  PEEKED_SINGLE_QUOTED_NAME);	  return    PEEKED_TRUE;    	non-compiled	[CE]  	21	None	replace
85	[BUG]  [BUGGY]  throw  syntaxError( "Expected  value: "  +  peekedString);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  throw  syntaxError( "Expected  value: "  +  peekedString);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	throw  syntaxError( "Expected  value: "  +  peekedString);	  return    PEEKED_TRUE;    	non-compiled	[CE]  	21	None	replace
86	[BUG]  [BUGGY]  throw  syntaxError( "Expected  value: "  +  PEEKED_SINGLE_QUOTED);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  throw  syntaxError( "Expected  value: "  +  PEEKED_SINGLE_QUOTED);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	throw  syntaxError( "Expected  value: "  +  PEEKED_SINGLE_QUOTED);	  return    PEEKED_TRUE;    	non-compiled	[CE]  	21	None	replace
87	[BUG]  [BUGGY]  throw  syntaxError( "Expected  value: "  +  PEEKED_UNQUOTED);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  throw  syntaxError( "Expected  value: "  +  PEEKED_UNQUOTED);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	throw  syntaxError( "Expected  value: "  +  PEEKED_UNQUOTED);	  return    PEEKED_TRUE;    	non-compiled	[CE]  	21	None	replace
88	[BUG]  [BUGGY]  return  PEEKED_BOOLEAN  &&  PEEKED_DOUBLE_QUOTED_NAME;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_BOOLEAN  &&  PEEKED_DOUBLE_QUOTED_NAME;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_BOOLEAN  &&  PEEKED_DOUBLE_QUOTED_NAME;	  return    PEEKED_BOOLEAN    ||    PEEKED_DOUBLE_QUOTED_NAME;    	non-compiled	[CE]  	70	None	replace
89	[BUG]  [BUGGY]  return  result  ||  PEEKED_DOUBLE_QUOTED_NAME;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  result  ||  PEEKED_DOUBLE_QUOTED_NAME;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  result  ||  PEEKED_DOUBLE_QUOTED_NAME;	  return    PEEKED_BOOLEAN    ||    PEEKED_DOUBLE_QUOTED_NAME;    	non-compiled	[CE]  	70	None	replace
90	[BUG]  [BUGGY]  return  PEEKED_BOOLEAN  ||  PEEKED_BUFFERED_QUOTED_NAME;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_BOOLEAN  ||  PEEKED_BUFFERED_QUOTED_NAME;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_BOOLEAN  ||  PEEKED_BUFFERED_QUOTED_NAME;	  return    PEEKED_BOOLEAN    ||    PEEKED_DOUBLE_QUOTED_NAME;    	non-compiled	[CE]  	70	None	replace
91	[BUG]  [BUGGY]  return  PEEKED_BOOLEAN  ||  PEEKED_BUFFERED;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_BOOLEAN  ||  PEEKED_BUFFERED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_BOOLEAN  ||  PEEKED_BUFFERED;	  return    PEEKED_BOOLEAN    ||    PEEKED_DOUBLE_QUOTED_NAME;    	non-compiled	[CE]  	70	None	replace
92	[BUG]  [BUGGY]  return  PEEKED_BOOLEAN  ||  PEEKED_DOUBLE_QUOTED_NAME  +  1;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_BOOLEAN  ||  PEEKED_DOUBLE_QUOTED_NAME  +  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_BOOLEAN  ||  PEEKED_DOUBLE_QUOTED_NAME  +  1;	  return    PEEKED_BOOLEAN    ||    PEEKED_DOUBLE_QUOTED_NAME;    	non-compiled	[CE]  	70	None	replace
93	[BUG]  [BUGGY]  return  NUMBER_CHAR_EXP_SIGN  +  1;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  NUMBER_CHAR_EXP_SIGN  +  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  NUMBER_CHAR_EXP_SIGN  +  1;	  return    NUMBER_CHAR_EXP_SIGN;    	non-compiled	[CE]  	61	None	replace
94	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(PeekStack.DEFAULT_BUFFER);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(PeekStack.DEFAULT_BUFFER);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(PeekStack.DEFAULT_BUFFER);	  return    NUMBER_CHAR_EXP_SIGN;    	non-compiled	[CE]  	61	None	replace
95	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(buffer,  result);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(buffer,  result);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().quoteAsString(buffer,  result);	  return    JsonStringEncoder.getInstance().quoteAsString(buffer,    pos);    	non-compiled	[CE]  	62	None	replace
96	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(buffer,  PEEKED_NULL);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(buffer,  PEEKED_NULL);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().quoteAsString(buffer,  PEEKED_NULL);	  return    JsonStringEncoder.getInstance().quoteAsString(buffer,    pos);    	non-compiled	[CE]  	62	None	replace
97	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(buffer,  0,  pos);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(buffer,  0,  pos);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().quoteAsString(buffer,  0,  pos);	  return    JsonStringEncoder.getInstance().quoteAsString(buffer,    pos);    	non-compiled	[CE]  	62	None	replace
98	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(buffer,  PEEKED_BUFFERED);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(buffer,  PEEKED_BUFFERED);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().quoteAsString(buffer,  PEEKED_BUFFERED);	  return    JsonStringEncoder.getInstance().quoteAsString(buffer,    pos);    	non-compiled	[CE]  	62	None	replace
99	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(buffer,  pos  +  1);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(buffer,  pos  +  1);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().quoteAsString(buffer,  pos  +  1);	  return    JsonStringEncoder.getInstance().quoteAsString(buffer,    pos);    	non-compiled	[CE]  	62	None	replace
100	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(buffer,  PEEKED_SINGLE_QUOTED);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(buffer,  PEEKED_SINGLE_QUOTED);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().quoteAsString(buffer,  PEEKED_SINGLE_QUOTED);	  return    JsonStringEncoder.getInstance().quoteAsString(buffer,    pos);    	non-compiled	[CE]  	62	None	replace
101	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(buffer,  PEEKED_NONE);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(buffer,  PEEKED_NONE);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().quoteAsString(buffer,  PEEKED_NONE);	  return    JsonStringEncoder.getInstance().quoteAsString(buffer,    pos);    	non-compiled	[CE]  	62	None	replace
102	[BUG]  [BUGGY]  int  pos  =  peekStackToPeek(buffer);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  peekStackToPeek(buffer);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  peekStackToPeek(buffer);	  int    pos    =    peekStackToPeek();    	non-compiled	[CE]  	69	None	replace
103	[BUG]  [BUGGY]  int  pos  =  peekStackToPeek(buffer,  0,  buffer.length);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  peekStackToPeek(buffer,  0,  buffer.length);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  peekStackToPeek(buffer,  0,  buffer.length);	  int    pos    =    peekStackToPeek();    	non-compiled	[CE]  	69	None	replace
104	[BUG]  [BUGGY]  int  pos  =  peekStackToPeek()  +  1;  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  peekStackToPeek()  +  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  peekStackToPeek()  +  1;	  int    pos    =    peekStackToPeek();    	non-compiled	[CE]  	69	None	replace
105	[BUG]  [BUGGY]  int  pos  =  peekStackToPeek(outlineNumber);  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  peekStackToPeek(outlineNumber);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  peekStackToPeek(outlineNumber);	  int    pos    =    peekStackToPeek();    	non-compiled	[CE]  	69	None	replace
106	[BUG]  [BUGGY]  int  pos  =  peekStackToPeek(p);  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  peekStackToPeek(p);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  peekStackToPeek(p);	  int    pos    =    peekStackToPeek();    	non-compiled	[CE]  	69	None	replace
107	[BUG]  [BUGGY]  int  pos  =  peekStackToPeek(buffer,  result);  [CE]  [FE]                                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  peekStackToPeek(buffer,  result);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  peekStackToPeek(buffer,  result);	  int    pos    =    peekStackToPeek();    	non-compiled	[CE]  	69	None	replace
108	[BUG]  [BUGGY]  return  result  /  PEEKED_SINGLE_QUOTED_NAME;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  result  /  PEEKED_SINGLE_QUOTED_NAME;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  result  /  PEEKED_SINGLE_QUOTED_NAME;	  return    result    +    PEEKED_SINGLE_QUOTED_NAME;    	non-compiled	[CE]  	10	None	replace
109	[BUG]  [BUGGY]  return  result  -  PEEKED_SINGLE_QUOTED_NAME;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  result  -  PEEKED_SINGLE_QUOTED_NAME;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  result  -  PEEKED_SINGLE_QUOTED_NAME;	  return    result    +    PEEKED_SINGLE_QUOTED_NAME;    	non-compiled	[CE]  	10	None	replace
110	[BUG]  [BUGGY]  return  result  +  PEEKED_SINGLE_QUOTED_NAME  +  1;  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  result  +  PEEKED_SINGLE_QUOTED_NAME  +  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  result  +  PEEKED_SINGLE_QUOTED_NAME  +  1;	  return    result    +    PEEKED_SINGLE_QUOTED_NAME;    	non-compiled	[CE]  	10	None	replace
111	[BUG]  [BUGGY]  return  result  +  PEEKED_SINGLE_QUOTED_NAME  -  1;  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  result  +  PEEKED_SINGLE_QUOTED_NAME  -  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  result  +  PEEKED_SINGLE_QUOTED_NAME  -  1;	  return    result    +    PEEKED_SINGLE_QUOTED_NAME;    	non-compiled	[CE]  	10	None	replace
112	[BUG]  [BUGGY]  return  result  -  1;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  result  -  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  result  -  1;	  return    NON_EXECIMAL    -    1;    	non-compiled	[CE]  	3	None	replace
113	[BUG]  [BUGGY]  result  =  NON_EXECIMAL  -  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  NON_EXECIMAL  -  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  NON_EXECIMAL  -  1;	  return    NON_EXECIMAL    -    1;    	non-compiled	[CE]  	3	None	replace
114	[BUG]  [BUGGY]  return  PEEKED_NULL  -  1;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_NULL  -  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_NULL  -  1;	  return    NON_EXECIMAL    -    1;    	non-compiled	[CE]  	3	None	replace
115	[BUG]  [BUGGY]  return  peekedNumber  -  1;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  peekedNumber  -  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  peekedNumber  -  1;	  return    NON_EXECIMAL    -    1;    	non-compiled	[CE]  	3	None	replace
116	[BUG]  [BUGGY]  return  PEEKED_NUMBER  -  1;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_NUMBER  -  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_NUMBER  -  1;	  return    NON_EXECIMAL    -    1;    	non-compiled	[CE]  	3	None	replace
117	[BUG]  [BUGGY]  return  NON_EXECIMAL  /  1;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  NON_EXECIMAL  /  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  NON_EXECIMAL  /  1;	  return    NON_EXECIMAL    -    1;    	non-compiled	[CE]  	3	None	replace
118	[BUG]  [BUGGY]  peekStack.push(result);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  peekStack.push(result);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	peekStack.push(result);	  peekStack.pop();    	non-compiled	[CE]  	54	None	replace
119	[BUG]  [BUGGY]  peekStack.push(PeekStack.peek());  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  peekStack.push(PeekStack.peek());  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	peekStack.push(PeekStack.peek());	  peekStack.pop();    	non-compiled	[CE]  	54	None	replace
120	[BUG]  [BUGGY]  peekStack.push(new  BigInteger(pos));  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  peekStack.push(new  BigInteger(pos));  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	peekStack.push(new  BigInteger(pos));	  peekStack.pop();    	non-compiled	[CE]  	54	None	replace
121	[BUG]  [BUGGY]  peekStack.push(new  Integer(pos));  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  peekStack.push(new  Integer(pos));  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	peekStack.push(new  Integer(pos));	  peekStack.pop();    	non-compiled	[CE]  	54	None	replace
122	[BUG]  [BUGGY]  peekStack.push(buffer,  result);  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  peekStack.push(buffer,  result);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	peekStack.push(buffer,  result);	  peekStack.pop();    	non-compiled	[CE]  	54	None	replace
123	[BUG]  [BUGGY]  return  PEEKED_UNQUOTED  +  PEEKED_SINGLE_QUOTED;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_UNQUOTED  +  PEEKED_SINGLE_QUOTED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_UNQUOTED  +  PEEKED_SINGLE_QUOTED;	  return    PEEKED_TRUE    +    PEEKED_SINGLE_QUOTED;    	non-compiled	[CE]  	60	None	replace
124	[BUG]  [BUGGY]  return  PEEKED_LONG  +  PEEKED_SINGLE_QUOTED;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_LONG  +  PEEKED_SINGLE_QUOTED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_LONG  +  PEEKED_SINGLE_QUOTED;	  return    PEEKED_TRUE    +    PEEKED_SINGLE_QUOTED;    	non-compiled	[CE]  	60	None	replace
125	[BUG]  [BUGGY]  return  PEEKED_NULL  +  PEEKED_SINGLE_QUOTED;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_NULL  +  PEEKED_SINGLE_QUOTED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_NULL  +  PEEKED_SINGLE_QUOTED;	  return    PEEKED_TRUE    +    PEEKED_SINGLE_QUOTED;    	non-compiled	[CE]  	60	None	replace
126	[BUG]  [BUGGY]  return  PEEKED_SINGLE_QUOTED  +  PEEKED_TRUE;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_SINGLE_QUOTED  +  PEEKED_TRUE;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_SINGLE_QUOTED  +  PEEKED_TRUE;	  return    PEEKED_TRUE    +    PEEKED_SINGLE_QUOTED;    	non-compiled	[CE]  	60	None	replace
127	[BUG]  [BUGGY]  return  pos  +  PEEKED_SINGLE_QUOTED;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  pos  +  PEEKED_SINGLE_QUOTED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  pos  +  PEEKED_SINGLE_QUOTED;	  return    PEEKED_TRUE    +    PEEKED_SINGLE_QUOTED;    	non-compiled	[CE]  	60	None	replace
128	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  PEEKED_SINGLE_QUOTED);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  PEEKED_SINGLE_QUOTED);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  PEEKED_SINGLE_QUOTED);	  return    JsonStringEncoder.getInstance().encodeAsString(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  	24	None	replace
129	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(PEEKED_BUFFERED);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(PEEKED_BUFFERED);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(PEEKED_BUFFERED);	  return    JsonStringEncoder.getInstance().encodeAsString(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  	24	None	replace
130	[BUG]  [BUGGY]  result  =  JsonStringEncoder.getInstance().encodeAsString(PEEKED_SINGLE_QUOTED);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  JsonStringEncoder.getInstance().encodeAsString(PEEKED_SINGLE_QUOTED);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  JsonStringEncoder.getInstance().encodeAsString(PEEKED_SINGLE_QUOTED);	  return    JsonStringEncoder.getInstance().encodeAsString(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  	24	None	replace
131	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(peeked);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(peeked);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(peeked);	  return    JsonStringEncoder.getInstance().encodeAsString(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  	24	None	replace
132	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer[pos]);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer[pos]);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer[pos]);	  return    JsonStringEncoder.getInstance().encodeAsString(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  	24	None	replace
133	[BUG]  [BUGGY]  return  peeked  -  PEEKED_UNQUOTED;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  peeked  -  PEEKED_UNQUOTED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  peeked  -  PEEKED_UNQUOTED;	  return    result    -    PEEKED_UNQUOTED;    	non-compiled	[CE]  	29	None	replace
134	[BUG]  [BUGGY]  return  peeked  -  PEEKED_NUMBER;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  peeked  -  PEEKED_NUMBER;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  peeked  -  PEEKED_NUMBER;	  return    result    -    PEEKED_UNQUOTED;    	non-compiled	[CE]  	29	None	replace
135	[BUG]  [BUGGY]  return  peeked  -  PEEKED_LONG;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  peeked  -  PEEKED_LONG;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  peeked  -  PEEKED_LONG;	  return    result    -    PEEKED_UNQUOTED;    	non-compiled	[CE]  	29	None	replace
136	[BUG]  [BUGGY]  return  result  -  PEEKED_BUFFERED;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  result  -  PEEKED_BUFFERED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  result  -  PEEKED_BUFFERED;	  return    result    -    PEEKED_UNQUOTED;    	non-compiled	[CE]  	29	None	replace
137	[BUG]  [BUGGY]  return  peeked  -  PEEKED_BUCKET;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  peeked  -  PEEKED_BUCKET;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  peeked  -  PEEKED_BUCKET;	  return    result    -    PEEKED_UNQUOTED;    	non-compiled	[CE]  	29	None	replace
138	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(PEEKED_SINGLE_QUOTED_NAME);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(PEEKED_SINGLE_QUOTED_NAME);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().JsonString(PEEKED_SINGLE_QUOTED_NAME);	  return    PEEKED_SINGLE;    	non-compiled	[CE]  	58	None	replace
139	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(PEEKED_SINGLE_QUOTED_NAME);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(PEEKED_SINGLE_QUOTED_NAME);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(PEEKED_SINGLE_QUOTED_NAME);	  return    PEEKED_SINGLE;    	non-compiled	[CE]  	58	None	replace
140	[BUG]  [BUGGY]  return  result  /  PEEKED_LONG;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  result  /  PEEKED_LONG;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  result  /  PEEKED_LONG;	  return    result    +    PEEKED_LONG;    	non-compiled	[CE]  	30	None	replace
141	[BUG]  [BUGGY]  return  result  -  PEEKED_LONG;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  result  -  PEEKED_LONG;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  result  -  PEEKED_LONG;	  return    result    +    PEEKED_LONG;    	non-compiled	[CE]  	30	None	replace
142	[BUG]  [BUGGY]  return  result  +  PEEKED_NULL;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  result  +  PEEKED_NULL;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  result  +  PEEKED_NULL;	  return    result    +    PEEKED_LONG;    	non-compiled	[CE]  	30	None	replace
143	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pathNames[pos]);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pathNames[pos]);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pathNames[pos]);	  return    JsonStringEncoder.getInstance().encodeAsString(pathNames[pos]);    	non-compiled	[CE]  	44	None	replace
144	[BUG]  [BUGGY]  result  =  JsonStringEncoder.getInstance().encodeAsString(pathNames[pos]);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  JsonStringEncoder.getInstance().encodeAsString(pathNames[pos]);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  JsonStringEncoder.getInstance().encodeAsString(pathNames[pos]);	  return    JsonStringEncoder.getInstance().encodeAsString(pathNames[pos]);    	non-compiled	[CE]  	44	None	replace
145	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  paths[pos]);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  paths[pos]);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  paths[pos]);	  return    JsonStringEncoder.getInstance().encodeAsString(pathNames[pos]);    	non-compiled	[CE]  	44	None	replace
146	[BUG]  [BUGGY]  pos  =  JsonStringEncoder.getInstance().encodeAsString(pathNames[pos]);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  JsonStringEncoder.getInstance().encodeAsString(pathNames[pos]);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  JsonStringEncoder.getInstance().encodeAsString(pathNames[pos]);	  return    JsonStringEncoder.getInstance().encodeAsString(pathNames[pos]);    	non-compiled	[CE]  	44	None	replace
147	[BUG]  [BUGGY]  return  PEEKED_UNQUOTED  +  1;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_UNQUOTED  +  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_UNQUOTED  +  1;	  return    PEEKED_BOOLEAN    +    1;    	non-compiled	[CE]  	55	None	replace
148	[BUG]  [BUGGY]  return  PEEKED_BUFFERED  +  1;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_BUFFERED  +  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_BUFFERED  +  1;	  return    PEEKED_BOOLEAN    +    1;    	non-compiled	[CE]  	55	None	replace
149	[BUG]  [BUGGY]  return  PEEKED_LONG  +  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_LONG  +  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_LONG  +  1;	  return    PEEKED_BOOLEAN    +    1;    	non-compiled	[CE]  	55	None	replace
150	[BUG]  [BUGGY]  return  PEEKED_NUMBER  +  1;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_NUMBER  +  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_NUMBER  +  1;	  return    PEEKED_BOOLEAN    +    1;    	non-compiled	[CE]  	55	None	replace
151	[BUG]  [BUGGY]  result  =  0;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  0;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  0;	  result    =    NUMBER_CHAR_SIGN;    	non-compiled	[CE]  	14	None	replace
152	[BUG]  [BUGGY]  int  pos  =  stack.length()  -  1;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  stack.length()  -  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  stack.length()  -  1;	  int    pos    =    stack.length();    	non-compiled	[CE]  	38	None	replace
153	[BUG]  [BUGGY]  int  pos  =  pathIndices.length;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  pathIndices.length;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  pathIndices.length;	  int    pos    =    stack.length();    	non-compiled	[CE]  	38	None	replace
154	[BUG]  [BUGGY]  int  pos  =  buffer.length();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  buffer.length();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  buffer.length();	  int    pos    =    stack.length();    	non-compiled	[CE]  	38	None	replace
155	[BUG]  [BUGGY]  int  pos  =  pathIndices.length();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  pathIndices.length();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  pathIndices.length();	  int    pos    =    stack.length();    	non-compiled	[CE]  	38	None	replace
156	[BUG]  [BUGGY]  int  pos  =  peekStack.length();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  peekStack.length();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  peekStack.length();	  int    pos    =    stack.length();    	non-compiled	[CE]  	38	None	replace
157	[BUG]  [BUGGY]  int  pos  =  stack.length()  +  1;  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  stack.length()  +  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  stack.length()  +  1;	  int    pos    =    stack.length();    	non-compiled	[CE]  	38	None	replace
158	[BUG]  [BUGGY]  result  =  PEEKED_BOOLEAN  -  1;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  PEEKED_BOOLEAN  -  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  PEEKED_BOOLEAN  -  1;	  return    PEEKED_BOOLEAN    -    1;    	non-compiled	[CE]  	56	None	replace
159	[BUG]  [BUGGY]  return  PEEKED_UNQUOTED  -  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_UNQUOTED  -  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_UNQUOTED  -  1;	  return    PEEKED_BOOLEAN    -    1;    	non-compiled	[CE]  	56	None	replace
160	[BUG]  [BUGGY]  return  PEEKED_BUFFERED  -  1;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_BUFFERED  -  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_BUFFERED  -  1;	  return    PEEKED_BOOLEAN    -    1;    	non-compiled	[CE]  	56	None	replace
161	[BUG]  [BUGGY]  return  PEEKED_BOOLEAN  /  1;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_BOOLEAN  /  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_BOOLEAN  /  1;	  return    PEEKED_BOOLEAN    -    1;    	non-compiled	[CE]  	56	None	replace
162	[BUG]  [BUGGY]  return  PEEKED_LONG  -  1;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_LONG  -  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_LONG  -  1;	  return    PEEKED_BOOLEAN    -    1;    	non-compiled	[CE]  	56	None	replace
163	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer,  PEEKED_BUFFERED);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer,  PEEKED_BUFFERED);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().JsonString(buffer,  PEEKED_BUFFERED);	  return    JsonStringEncoder.getInstance().JsonString(PEEKED_BUFFERED);    	non-compiled	[CE]  	15	None	replace
164	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(peeked);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(peeked);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().JsonString(peeked);	  return    JsonStringEncoder.getInstance().JsonString(PEEKED_BUFFERED);    	non-compiled	[CE]  	15	None	replace
165	[BUG]  [BUGGY]  result  =  JsonStringEncoder.getInstance().JsonString(PEEKED_BUFFERED);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  JsonStringEncoder.getInstance().JsonString(PEEKED_BUFFERED);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  JsonStringEncoder.getInstance().JsonString(PEEKED_BUFFERED);	  return    JsonStringEncoder.getInstance().JsonString(PEEKED_BUFFERED);    	non-compiled	[CE]  	15	None	replace
166	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(PEEKED_BUFFERED,  peeked);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(PEEKED_BUFFERED,  peeked);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().JsonString(PEEKED_BUFFERED,  peeked);	  return    JsonStringEncoder.getInstance().JsonString(PEEKED_BUFFERED);    	non-compiled	[CE]  	15	None	replace
167	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(PEEKED_BUFFERED,  buffer[pos]);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(PEEKED_BUFFERED,  buffer[pos]);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().JsonString(PEEKED_BUFFERED,  buffer[pos]);	  return    JsonStringEncoder.getInstance().JsonString(PEEKED_BUFFERED);    	non-compiled	[CE]  	15	None	replace
168	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(PEEKED_BOOLEAN);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(PEEKED_BOOLEAN);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().JsonString(PEEKED_BOOLEAN);	  return    JsonStringEncoder.getInstance().JsonString(PEEKED_BUFFERED);    	non-compiled	[CE]  	15	None	replace
169	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(PEEKED_BUFFERED,  pos);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(PEEKED_BUFFERED,  pos);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().JsonString(PEEKED_BUFFERED,  pos);	  return    JsonStringEncoder.getInstance().JsonString(PEEKED_BUFFERED);    	non-compiled	[CE]  	15	None	replace
170	[BUG]  [BUGGY]  return  result  /  PEEKED_TRUE;  [CE]  [FE]            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  result  /  PEEKED_TRUE;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  result  /  PEEKED_TRUE;	  return    result    +    PEEKED_TRUE;    	non-compiled	[CE]  	57	None	replace
171	[BUG]  [BUGGY]  return  result  -  PEEKED_TRUE;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  result  -  PEEKED_TRUE;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  result  -  PEEKED_TRUE;	  return    result    +    PEEKED_TRUE;    	non-compiled	[CE]  	57	None	replace
172	[BUG]  [BUGGY]  return  peeked  +  PEEKED_DOUBLE_QUOTED;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  peeked  +  PEEKED_DOUBLE_QUOTED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  peeked  +  PEEKED_DOUBLE_QUOTED;	  return    result    +    PEEKED_DOUBLE_QUOTED;    	non-compiled	[CE]  	48	None	replace
173	[BUG]  [BUGGY]  return  result  /  PEEKED_DOUBLE_QUOTED;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  result  /  PEEKED_DOUBLE_QUOTED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  result  /  PEEKED_DOUBLE_QUOTED;	  return    result    +    PEEKED_DOUBLE_QUOTED;    	non-compiled	[CE]  	48	None	replace
174	[BUG]  [BUGGY]  return  result  -  PEEKED_DOUBLE_QUOTED;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  result  -  PEEKED_DOUBLE_QUOTED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  result  -  PEEKED_DOUBLE_QUOTED;	  return    result    +    PEEKED_DOUBLE_QUOTED;    	non-compiled	[CE]  	48	None	replace
175	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(peeked);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(peeked);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().quoteAsString(peeked);	  return    JsonStringEncoder.getInstance().quoteAsString(PEEKED_SINGLE_QUOTED_NAME);    	non-compiled	[CE]  	25	None	replace
176	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(buffer,  PEEKED_SINGLE_QUOTED_NAME);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(buffer,  PEEKED_SINGLE_QUOTED_NAME);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().quoteAsString(buffer,  PEEKED_SINGLE_QUOTED_NAME);	  return    JsonStringEncoder.getInstance().quoteAsString(PEEKED_SINGLE_QUOTED_NAME);    	non-compiled	[CE]  	25	None	replace
177	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(PEEKED_BUFFERED);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(PEEKED_BUFFERED);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().quoteAsString(PEEKED_BUFFERED);	  return    JsonStringEncoder.getInstance().quoteAsString(PEEKED_SINGLE_QUOTED_NAME);    	non-compiled	[CE]  	25	None	replace
178	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(pathNames[pos]);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(pathNames[pos]);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().quoteAsString(pathNames[pos]);	  return    JsonStringEncoder.getInstance().quoteAsString(PEEKED_SINGLE_QUOTED_NAME);    	non-compiled	[CE]  	25	None	replace
179	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(PEEKED_BUFFERED,  PEEKED_SINGLE_QUOTED_NAME);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(PEEKED_BUFFERED,  PEEKED_SINGLE_QUOTED_NAME);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().quoteAsString(PEEKED_BUFFERED,  PEEKED_SINGLE_QUOTED_NAME);	  return    JsonStringEncoder.getInstance().quoteAsString(PEEKED_SINGLE_QUOTED_NAME);    	non-compiled	[CE]  	25	None	replace
180	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(peeked,  PEEKED_SINGLE_QUOTED_NAME);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(peeked,  PEEKED_SINGLE_QUOTED_NAME);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().quoteAsString(peeked,  PEEKED_SINGLE_QUOTED_NAME);	  return    JsonStringEncoder.getInstance().quoteAsString(PEEKED_SINGLE_QUOTED_NAME);    	non-compiled	[CE]  	25	None	replace
181	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(PEEKED_DOUBLE_QUOTED_NAME);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(PEEKED_DOUBLE_QUOTED_NAME);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().quoteAsString(PEEKED_DOUBLE_QUOTED_NAME);	  return    JsonStringEncoder.getInstance().quoteAsString(PEEKED_SINGLE_QUOTED_NAME);    	non-compiled	[CE]  	25	None	replace
182	[BUG]  [BUGGY]  result  =  stack.length();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  stack.length();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  stack.length();	  result    =    peekStack.length();    	non-compiled	[CE]  	40	None	replace
183	[BUG]  [BUGGY]  result  =  stackSize();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  stackSize();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  stackSize();	  result    =    peekStack.length();    	non-compiled	[CE]  	40	None	replace
184	[BUG]  [BUGGY]  result  =  peekStack.length()  -  1;  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  peekStack.length()  -  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  peekStack.length()  -  1;	  result    =    peekStack.length();    	non-compiled	[CE]  	40	None	replace
185	[BUG]  [BUGGY]  result  =  stackSize.length();  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  stackSize.length();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  stackSize.length();	  result    =    peekStack.length();    	non-compiled	[CE]  	40	None	replace
186	[BUG]  [BUGGY]  result  =  stackStack.length();  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  stackStack.length();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  stackStack.length();	  result    =    peekStack.length();    	non-compiled	[CE]  	40	None	replace
187	[BUG]  [BUGGY]  result  =  peekStack.length()  +  1;  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  peekStack.length()  +  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  peekStack.length()  +  1;	  result    =    peekStack.length();    	non-compiled	[CE]  	40	None	replace
188	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  result));  [CE]  [FE]              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  result));  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  result));	  return    JsonStringEncoder.getInstance().encodeAsString(buffer,    pos));    	non-compiled	[CE]  	71	None	replace
189	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  0,  pos));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  0,  pos));  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  0,  pos));	  return    JsonStringEncoder.getInstance().encodeAsString(buffer,    pos));    	non-compiled	[CE]  	71	None	replace
190	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos  +  1));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos  +  1));  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos  +  1));	  return    JsonStringEncoder.getInstance().encodeAsString(buffer,    pos));    	non-compiled	[CE]  	71	None	replace
191	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  PEEKED_BUFFERED));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  PEEKED_BUFFERED));  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  PEEKED_BUFFERED));	  return    JsonStringEncoder.getInstance().encodeAsString(buffer,    pos));    	non-compiled	[CE]  	71	None	replace
192	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  PEEKED_NULL));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  PEEKED_NULL));  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  PEEKED_NULL));	  return    JsonStringEncoder.getInstance().encodeAsString(buffer,    pos));    	non-compiled	[CE]  	71	None	replace
193	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos,  PEEKED_DOUBLE_QUOTED));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos,  PEEKED_DOUBLE_QUOTED));  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos,  PEEKED_DOUBLE_QUOTED));	  return    JsonStringEncoder.getInstance().encodeAsString(buffer,    pos));    	non-compiled	[CE]  	71	None	replace
194	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos,  PEEKED_BUFFERED));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos,  PEEKED_BUFFERED));  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos,  PEEKED_BUFFERED));	  return    JsonStringEncoder.getInstance().encodeAsString(buffer,    pos));    	non-compiled	[CE]  	71	None	replace
195	[BUG]  [BUGGY]  return  NUMBER_INCOMPLETE_INTEGER  +  1;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  NUMBER_INCOMPLETE_INTEGER  +  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  NUMBER_INCOMPLETE_INTEGER  +  1;	  return    NUMBER_INCOMPLETE_INTEGER;    	non-compiled	[CE]  	51	None	replace
196	[BUG]  [BUGGY]  return  MIN_INCOMPLETE_INTEGER;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  MIN_INCOMPLETE_INTEGER;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  MIN_INCOMPLETE_INTEGER;	  return    NUMBER_INCOMPLETE_INTEGER;    	non-compiled	[CE]  	51	None	replace
197	[BUG]  [BUGGY]  return  NUMBER_INCOMPLETE_INTEGER  +  PEEKED_SINGLE_QUOTED_NAME;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  NUMBER_INCOMPLETE_INTEGER  +  PEEKED_SINGLE_QUOTED_NAME;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  NUMBER_INCOMPLETE_INTEGER  +  PEEKED_SINGLE_QUOTED_NAME;	  return    NUMBER_INCOMPLETE_INTEGER;    	non-compiled	[CE]  	51	None	replace
198	[BUG]  [BUGGY]  return  NUMBER_INCOMPLETE_INTEGER  +  PEEKED_BUFFERED;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  NUMBER_INCOMPLETE_INTEGER  +  PEEKED_BUFFERED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  NUMBER_INCOMPLETE_INTEGER  +  PEEKED_BUFFERED;	  return    NUMBER_INCOMPLETE_INTEGER;    	non-compiled	[CE]  	51	None	replace
199	[BUG]  [BUGGY]  return  NUMBER_INCOMPLETE_INTEGER  +  PEEKED_SINGLE_QUOTED;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  NUMBER_INCOMPLETE_INTEGER  +  PEEKED_SINGLE_QUOTED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  NUMBER_INCOMPLETE_INTEGER  +  PEEKED_SINGLE_QUOTED;	  return    NUMBER_INCOMPLETE_INTEGER;    	non-compiled	[CE]  	51	None	replace
200	[BUG]  [BUGGY]  return  PEEKED_SINGLE_QUOTED  -  result;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_SINGLE_QUOTED  -  result;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_SINGLE_QUOTED  -  result;	  return    result    -    PEEKED_SINGLE_QUOTED;    	non-compiled	[CE]  	8	None	replace
201	[BUG]  [BUGGY]  pos  =  buffer.length  -  stackSize;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  buffer.length  -  stackSize;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  buffer.length  -  stackSize;	  pos    =    stackSize    -    buffer.length;    	non-compiled	[CE]  	53	None	replace
202	[BUG]  [BUGGY]  pos  =  peekStack.length  -  buffer.length;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  peekStack.length  -  buffer.length;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  peekStack.length  -  buffer.length;	  pos    =    stackSize    -    buffer.length;    	non-compiled	[CE]  	53	None	replace
203	[BUG]  [BUGGY]  pos  =  stackSize  -  buffer.length  -  1;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  stackSize  -  buffer.length  -  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  stackSize  -  buffer.length  -  1;	  pos    =    stackSize    -    buffer.length;    	non-compiled	[CE]  	53	None	replace
204	[BUG]  [BUGGY]  pos  =  result  -  buffer.length;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  result  -  buffer.length;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  result  -  buffer.length;	  pos    =    stackSize    -    buffer.length;    	non-compiled	[CE]  	53	None	replace
205	[BUG]  [BUGGY]  pos  =  bufferSize  -  stack.length;  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  bufferSize  -  stack.length;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  bufferSize  -  stack.length;	  pos    =    stackSize    -    buffer.length;    	non-compiled	[CE]  	53	None	replace
206	[BUG]  [BUGGY]  pos  =  size  -  buffer.length;  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  size  -  buffer.length;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  size  -  buffer.length;	  pos    =    stackSize    -    buffer.length;    	non-compiled	[CE]  	53	None	replace
207	[BUG]  [BUGGY]  pos  =  stackSize  -  buffer.length  +  1;  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  stackSize  -  buffer.length  +  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  stackSize  -  buffer.length  +  1;	  pos    =    stackSize    -    buffer.length;    	non-compiled	[CE]  	53	None	replace
208	[BUG]  [BUGGY]  result  =  peekStack.length  -  1;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  peekStack.length  -  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  peekStack.length  -  1;	  result    =    MIN_INCOMPLETE_INTEGER;    	non-compiled	[CE]  	2	None	replace
209	[BUG]  [BUGGY]  result  =  peekedLong;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  peekedLong;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  peekedLong;	  result    =    MIN_INCOMPLETE_INTEGER;    	non-compiled	[CE]  	2	None	replace
210	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  PEEKED_LONG);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  PEEKED_LONG);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  PEEKED_LONG);	  return    JsonStringEncoder.getInstance().encodeAsString(buffer,    result);    	non-compiled	[CE]  	18	None	replace
211	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  PEEKED_NONE);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  PEEKED_NONE);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  PEEKED_NONE);	  return    JsonStringEncoder.getInstance().encodeAsString(buffer,    result);    	non-compiled	[CE]  	18	None	replace
212	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  PEEKED_DOUBLE_QUOTED,  result);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  PEEKED_DOUBLE_QUOTED,  result);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  PEEKED_DOUBLE_QUOTED,  result);	  return    JsonStringEncoder.getInstance().encodeAsString(buffer,    result);    	non-compiled	[CE]  	18	None	replace
213	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  PEEKED_SINGLE_QUOTED_NAME);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  PEEKED_SINGLE_QUOTED_NAME);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  PEEKED_SINGLE_QUOTED_NAME);	  return    JsonStringEncoder.getInstance().encodeAsString(buffer,    result);    	non-compiled	[CE]  	18	None	replace
214	[BUG]  [BUGGY]  return  PEEKED_SINGLE_QUOTED  /  result;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_SINGLE_QUOTED  /  result;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_SINGLE_QUOTED  /  result;	  return    result    /    PEEKED_SINGLE_QUOTED;    	non-compiled	[CE]  	7	None	replace
215	[BUG]  [BUGGY]  return  result  *  PEEKED_SINGLE_QUOTED;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  result  *  PEEKED_SINGLE_QUOTED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  result  *  PEEKED_SINGLE_QUOTED;	  return    result    /    PEEKED_SINGLE_QUOTED;    	non-compiled	[CE]  	7	None	replace
216	[BUG]  [BUGGY]  return  result  /  PEEKED_BUFFERED;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  result  /  PEEKED_BUFFERED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  result  /  PEEKED_BUFFERED;	  return    result    /    PEEKED_SINGLE_QUOTED;    	non-compiled	[CE]  	7	None	replace
217	[BUG]  [BUGGY]  return  result  /  1;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  result  /  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  result  /  1;	  return    result    +    1;    	non-compiled	[CE]  	47	None	replace
218	[BUG]  [BUGGY]  pos  =  stack.length  -  1;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  stack.length  -  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  stack.length  -  1;	  pos    =    stack.length;    	non-compiled	[CE]  	39	None	replace
219	[BUG]  [BUGGY]  pos  =  buffer.length;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  buffer.length;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  buffer.length;	  pos    =    stack.length;    	non-compiled	[CE]  	39	None	replace
220	[BUG]  [BUGGY]  pos  =  stackSize;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  stackSize;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  stackSize;	  pos    =    stack.length;    	non-compiled	[CE]  	39	None	replace
221	[BUG]  [BUGGY]  pos  =  stack.length  -  2;  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  stack.length  -  2;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  stack.length  -  2;	  pos    =    stack.length;    	non-compiled	[CE]  	39	None	replace
222	[BUG]  [BUGGY]  pos  =  stack.length  -  4;  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  stack.length  -  4;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  stack.length  -  4;	  pos    =    stack.length;    	non-compiled	[CE]  	39	None	replace
223	[BUG]  [BUGGY]  pos  =  stack.length  +  1;  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  stack.length  +  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  stack.length  +  1;	  pos    =    stack.length;    	non-compiled	[CE]  	39	None	replace
224	[BUG]  [BUGGY]  return  peeked  /  PEEKED_UNQUOTED;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  peeked  /  PEEKED_UNQUOTED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  peeked  /  PEEKED_UNQUOTED;	  return    result    /    PEEKED_UNQUOTED;    	non-compiled	[CE]  	28	None	replace
225	[BUG]  [BUGGY]  return  peeked  /  PEEKED_LONG;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  peeked  /  PEEKED_LONG;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  peeked  /  PEEKED_LONG;	  return    result    /    PEEKED_UNQUOTED;    	non-compiled	[CE]  	28	None	replace
226	[BUG]  [BUGGY]  return  peeked  /  PEEKED_NUMBER;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  peeked  /  PEEKED_NUMBER;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  peeked  /  PEEKED_NUMBER;	  return    result    /    PEEKED_UNQUOTED;    	non-compiled	[CE]  	28	None	replace
227	[BUG]  [BUGGY]  return  peeked  /  PEEKED_NULL;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  peeked  /  PEEKED_NULL;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  peeked  /  PEEKED_NULL;	  return    result    /    PEEKED_UNQUOTED;    	non-compiled	[CE]  	28	None	replace
228	[BUG]  [BUGGY]  return  peeked  /  PEEKED_BUCKET;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  peeked  /  PEEKED_BUCKET;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  peeked  /  PEEKED_BUCKET;	  return    result    /    PEEKED_UNQUOTED;    	non-compiled	[CE]  	28	None	replace
229	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  0,  buffer.length);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  0,  buffer.length);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  0,  buffer.length);	  return    JsonStringEncoder.getInstance().encodeAsString(buffer,    0,    pos);    	non-compiled	[CE]  	64	None	replace
230	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  0,  result);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  0,  result);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  0,  result);	  return    JsonStringEncoder.getInstance().encodeAsString(buffer,    0,    pos);    	non-compiled	[CE]  	64	None	replace
231	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  0,  buffer[pos]);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  0,  buffer[pos]);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  0,  buffer[pos]);	  return    JsonStringEncoder.getInstance().encodeAsString(buffer,    0,    pos);    	non-compiled	[CE]  	64	None	replace
232	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  0,  pathNames.length);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  0,  pathNames.length);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  0,  pathNames.length);	  return    JsonStringEncoder.getInstance().encodeAsString(buffer,    0,    pos);    	non-compiled	[CE]  	64	None	replace
233	[BUG]  [BUGGY]  result  =  JsonStringEncoder.getInstance().encodeAsString(buffer,  0,  pos);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  JsonStringEncoder.getInstance().encodeAsString(buffer,  0,  pos);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  JsonStringEncoder.getInstance().encodeAsString(buffer,  0,  pos);	  return    JsonStringEncoder.getInstance().encodeAsString(buffer,    0,    pos);    	non-compiled	[CE]  	64	None	replace
234	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  0,  PEEKED_BUFFERED);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  0,  PEEKED_BUFFERED);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  0,  PEEKED_BUFFERED);	  return    JsonStringEncoder.getInstance().encodeAsString(buffer,    0,    pos);    	non-compiled	[CE]  	64	None	replace
235	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  0,  peekedString.length);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  0,  peekedString.length);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  0,  peekedString.length);	  return    JsonStringEncoder.getInstance().encodeAsString(buffer,    0,    pos);    	non-compiled	[CE]  	64	None	replace
236	[BUG]  [BUGGY]  int  pos  =  stack.peek();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  stack.peek();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  stack.peek();	  int    pos    =    peekStack.peek();    	non-compiled	[CE]  	65	None	replace
237	[BUG]  [BUGGY]  int  pos  =  buffer.peek();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  buffer.peek();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  buffer.peek();	  int    pos    =    peekStack.peek();    	non-compiled	[CE]  	65	None	replace
238	[BUG]  [BUGGY]  int  pos  =  peekStack.peek()  +  1;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  peekStack.peek()  +  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  peekStack.peek()  +  1;	  int    pos    =    peekStack.peek();    	non-compiled	[CE]  	65	None	replace
239	[BUG]  [BUGGY]  int  pos  =  pathIndices.peek();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  pathIndices.peek();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  pathIndices.peek();	  int    pos    =    peekStack.peek();    	non-compiled	[CE]  	65	None	replace
240	[BUG]  [BUGGY]  int  pos  =  lineStart.peek();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  lineStart.peek();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  lineStart.peek();	  int    pos    =    peekStack.peek();    	non-compiled	[CE]  	65	None	replace
241	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer,  PEEKED_SINGLE_QUOTED);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer,  PEEKED_SINGLE_QUOTED);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().JsonString(buffer,  PEEKED_SINGLE_QUOTED);	  return    JsonStringEncoder.getInstance().JsonString(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  	22	None	replace
242	[BUG]  [BUGGY]  result  =  JsonStringEncoder.getInstance().JsonString(PEEKED_SINGLE_QUOTED);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  JsonStringEncoder.getInstance().JsonString(PEEKED_SINGLE_QUOTED);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  JsonStringEncoder.getInstance().JsonString(PEEKED_SINGLE_QUOTED);	  return    JsonStringEncoder.getInstance().JsonString(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  	22	None	replace
243	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(PEEKED_SINGLE_QUOTED,  peeked);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(PEEKED_SINGLE_QUOTED,  peeked);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().JsonString(PEEKED_SINGLE_QUOTED,  peeked);	  return    JsonStringEncoder.getInstance().JsonString(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  	22	None	replace
244	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(PEEKED_BUFFERED,  PEEKED_SINGLE_QUOTED);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(PEEKED_BUFFERED,  PEEKED_SINGLE_QUOTED);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().JsonString(PEEKED_BUFFERED,  PEEKED_SINGLE_QUOTED);	  return    JsonStringEncoder.getInstance().JsonString(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  	22	None	replace
245	[BUG]  [BUGGY]  pos  =  stack.peek();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  stack.peek();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  stack.peek();	  pos    =    peekStack.peek();    	non-compiled	[CE]  	68	None	replace
246	[BUG]  [BUGGY]  pos  =  buffer.peek();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  buffer.peek();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  buffer.peek();	  pos    =    peekStack.peek();    	non-compiled	[CE]  	68	None	replace
247	[BUG]  [BUGGY]  pos  =  pathIndices.peek();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  pathIndices.peek();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  pathIndices.peek();	  pos    =    peekStack.peek();    	non-compiled	[CE]  	68	None	replace
248	[BUG]  [BUGGY]  pos  =  peekStack.peek()  +  1;  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  peekStack.peek()  +  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  peekStack.peek()  +  1;	  pos    =    peekStack.peek();    	non-compiled	[CE]  	68	None	replace
249	[BUG]  [BUGGY]  pos  =  lineStart.peek();  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  lineStart.peek();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  lineStart.peek();	  pos    =    peekStack.peek();    	non-compiled	[CE]  	68	None	replace
250	[BUG]  [BUGGY]  pos  =  stack.size()  -  1;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  stack.size()  -  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  stack.size()  -  1;	  pos    =    stack.size();    	non-compiled	[CE]  	52	None	replace
251	[BUG]  [BUGGY]  pos  =  stack.size()  +  1;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  stack.size()  +  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  stack.size()  +  1;	  pos    =    stack.size();    	non-compiled	[CE]  	52	None	replace
252	[BUG]  [BUGGY]  pos  =  stack.size()  -  2;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  stack.size()  -  2;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  stack.size()  -  2;	  pos    =    stack.size();    	non-compiled	[CE]  	52	None	replace
253	[BUG]  [BUGGY]  pos  =  stack.size()  -  4;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  stack.size()  -  4;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  stack.size()  -  4;	  pos    =    stack.size();    	non-compiled	[CE]  	52	None	replace
254	[BUG]  [BUGGY]  return  PEEKED_QUOTED;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_QUOTED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_QUOTED;	  return    PEEKED_DOUBLE;    	non-compiled	[CE]  	46	None	replace
255	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pathNames[pos]));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pathNames[pos]));  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pathNames[pos]));	  return    JsonStringEncoder.getInstance().encodeAsString(pathNames[pos]));    	non-compiled	[CE]  	19	None	replace
256	[BUG]  [BUGGY]  result  =  JsonStringEncoder.getInstance().encodeAsString(pathNames[pos]));  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  JsonStringEncoder.getInstance().encodeAsString(pathNames[pos]));  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  JsonStringEncoder.getInstance().encodeAsString(pathNames[pos]));	  return    JsonStringEncoder.getInstance().encodeAsString(pathNames[pos]));    	non-compiled	[CE]  	19	None	replace
257	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  paths[pos]));  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  paths[pos]));  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  paths[pos]));	  return    JsonStringEncoder.getInstance().encodeAsString(pathNames[pos]));    	non-compiled	[CE]  	19	None	replace
258	[BUG]  [BUGGY]  result  =  JsonStringEncoder.getInstance().quoteAsString(PEEKED_SINGLE_QUOTED);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  JsonStringEncoder.getInstance().quoteAsString(PEEKED_SINGLE_QUOTED);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  JsonStringEncoder.getInstance().quoteAsString(PEEKED_SINGLE_QUOTED);	  return    JsonStringEncoder.getInstance().quoteAsString(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  	23	None	replace
259	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(PEEKED_DOUBLE_QUOTED);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(PEEKED_DOUBLE_QUOTED);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().quoteAsString(PEEKED_DOUBLE_QUOTED);	  return    JsonStringEncoder.getInstance().quoteAsString(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  	23	None	replace
260	[BUG]  [BUGGY]  return  PEEKED_BUFFERED  +  NON_EXECIMAL;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_BUFFERED  +  NON_EXECIMAL;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_BUFFERED  +  NON_EXECIMAL;	  return    NON_EXECIMAL    +    PEEKED_BUFFERED;    	non-compiled	[CE]  	4	None	replace
261	[BUG]  [BUGGY]  return  NON_EXECIMAL  -  PEEKED_BUFFERED;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  NON_EXECIMAL  -  PEEKED_BUFFERED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  NON_EXECIMAL  -  PEEKED_BUFFERED;	  return    NON_EXECIMAL    +    PEEKED_BUFFERED;    	non-compiled	[CE]  	4	None	replace
262	[BUG]  [BUGGY]  return  PEEKED_NULL  +  NON_EXECIMAL;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_NULL  +  NON_EXECIMAL;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_NULL  +  NON_EXECIMAL;	  return    NON_EXECIMAL    +    PEEKED_BUFFERED;    	non-compiled	[CE]  	4	None	replace
263	[BUG]  [BUGGY]  return  pos  +  PEEKED_BUFFERED;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  pos  +  PEEKED_BUFFERED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  pos  +  PEEKED_BUFFERED;	  return    NON_EXECIMAL    +    PEEKED_BUFFERED;    	non-compiled	[CE]  	4	None	replace
264	[BUG]  [BUGGY]  return  buffer[pos]  +  PEEKED_BUFFERED;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  buffer[pos]  +  PEEKED_BUFFERED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  buffer[pos]  +  PEEKED_BUFFERED;	  return    NON_EXECIMAL    +    PEEKED_BUFFERED;    	non-compiled	[CE]  	4	None	replace
265	[BUG]  [BUGGY]  peekStack.push(buffer,  pos);  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  peekStack.push(buffer,  pos);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	peekStack.push(buffer,  pos);	  peekStack.push(p);    	non-compiled	[CE]  	43	None	replace
266	[BUG]  [BUGGY]  peekStack.push(buffer,  p);  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  peekStack.push(buffer,  p);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	peekStack.push(buffer,  p);	  peekStack.push(p);    	non-compiled	[CE]  	43	None	replace
267	[BUG]  [BUGGY]  int  pos  =  peekStackTop()  +  1;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  peekStackTop()  +  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  peekStackTop()  +  1;	  int    pos    =    peekStackTop();    	non-compiled	[CE]  	67	None	replace
268	[BUG]  [BUGGY]  int  pos  =  peekStackTop()  +  PEEKED_SINGLE_QUOTED_NAME;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  peekStackTop()  +  PEEKED_SINGLE_QUOTED_NAME;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  peekStackTop()  +  PEEKED_SINGLE_QUOTED_NAME;	  int    pos    =    peekStackTop();    	non-compiled	[CE]  	67	None	replace
269	[BUG]  [BUGGY]  int  pos  =  peekLenient();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  peekLenient();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  peekLenient();	  int    pos    =    peekStackTop();    	non-compiled	[CE]  	67	None	replace
270	[BUG]  [BUGGY]  int  pos  =  peekStackTop()  +  PEEKED_BUFFERED;  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  peekStackTop()  +  PEEKED_BUFFERED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  peekStackTop()  +  PEEKED_BUFFERED;	  int    pos    =    peekStackTop();    	non-compiled	[CE]  	67	None	replace
271	[BUG]  [BUGGY]  int  pos  =  peekStackSize();  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  peekStackSize();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  peekStackSize();	  int    pos    =    peekStackTop();    	non-compiled	[CE]  	67	None	replace
272	[BUG]  [BUGGY]  int  pos  =  peekStackTop()  +  PEEKED_UNQUOTED_NAME;  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  peekStackTop()  +  PEEKED_UNQUOTED_NAME;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  peekStackTop()  +  PEEKED_UNQUOTED_NAME;	  int    pos    =    peekStackTop();    	non-compiled	[CE]  	67	None	replace
273	[BUG]  [BUGGY]  return  result  +  PEEKED_EOF;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  result  +  PEEKED_EOF;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  result  +  PEEKED_EOF;	  return    result    +    PEEKED_BUFFERED;    	non-compiled	[CE]  	9	None	replace
274	[BUG]  [BUGGY]  return  PEEKED_NULL  +  1;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_NULL  +  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_NULL  +  1;	  return    NON_EXECIMAL    +    1;    	non-compiled	[CE]  	5	None	replace
275	[BUG]  [BUGGY]  result  =  NON_EXECIMAL  +  1;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  NON_EXECIMAL  +  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  NON_EXECIMAL  +  1;	  return    NON_EXECIMAL    +    1;    	non-compiled	[CE]  	5	None	replace
276	[BUG]  [BUGGY]  return  NON_EXECIMAL  +  2;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  NON_EXECIMAL  +  2;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  NON_EXECIMAL  +  2;	  return    NON_EXECIMAL    +    1;    	non-compiled	[CE]  	5	None	replace
277	[BUG]  [BUGGY]  result  =  peekedLong  +  PEEKED_LONG;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  peekedLong  +  PEEKED_LONG;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  peekedLong  +  PEEKED_LONG;	  result    =    MIN_INCOMPLETE_INTEGER    +    PEEKED_LONG;    	non-compiled	[CE]  	34	None	replace
278	[BUG]  [BUGGY]  result  =  PEEKED_LONG  +  MIN_INCOMPLETE_INTEGER;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  PEEKED_LONG  +  MIN_INCOMPLETE_INTEGER;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  PEEKED_LONG  +  MIN_INCOMPLETE_INTEGER;	  result    =    MIN_INCOMPLETE_INTEGER    +    PEEKED_LONG;    	non-compiled	[CE]  	34	None	replace
279	[BUG]  [BUGGY]  result  =  pos  +  PEEKED_LONG;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  pos  +  PEEKED_LONG;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  pos  +  PEEKED_LONG;	  result    =    MIN_INCOMPLETE_INTEGER    +    PEEKED_LONG;    	non-compiled	[CE]  	34	None	replace
280	[BUG]  [BUGGY]  result  =  buffer[pos]  +  PEEKED_LONG;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  buffer[pos]  +  PEEKED_LONG;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  buffer[pos]  +  PEEKED_LONG;	  result    =    MIN_INCOMPLETE_INTEGER    +    PEEKED_LONG;    	non-compiled	[CE]  	34	None	replace
281	[BUG]  [BUGGY]  result  =  peekedNumber  +  PEEKED_LONG;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  peekedNumber  +  PEEKED_LONG;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  peekedNumber  +  PEEKED_LONG;	  result    =    MIN_INCOMPLETE_INTEGER    +    PEEKED_LONG;    	non-compiled	[CE]  	34	None	replace
282	[BUG]  [BUGGY]  result  =  peekedString  +  PEEKED_LONG;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  peekedString  +  PEEKED_LONG;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  peekedString  +  PEEKED_LONG;	  result    =    MIN_INCOMPLETE_INTEGER    +    PEEKED_LONG;    	non-compiled	[CE]  	34	None	replace
283	[BUG]  [BUGGY]  result  =  peekedInt  +  PEEKED_LONG;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  peekedInt  +  PEEKED_LONG;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  peekedInt  +  PEEKED_LONG;	  result    =    MIN_INCOMPLETE_INTEGER    +    PEEKED_LONG;    	non-compiled	[CE]  	34	None	replace
284	[BUG]  [BUGGY]  if(pos  >  0)  {  pos--;  }  else  {  buffer[pos]  =  PEEKED_NULL;  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  if(pos  >  0)  {  pos--;  }  else  {  buffer[pos]  =  PEEKED_NULL;  }  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	if(pos  >  0)  {  pos--;  }  else  {  buffer[pos]  =  PEEKED_NULL;  }	  pos--;    	non-compiled	[CE]  	42	None	replace
285	[BUG]  [BUGGY]  if(pos  >  0)  {  pos--;  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  if(pos  >  0)  {  pos--;  }  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	if(pos  >  0)  {  pos--;  }	  pos--;    	non-compiled	[CE]  	42	None	replace
286	[BUG]  [BUGGY]  if(pos  >  0)  {  pos--;  }  else  {  buffer[pos]  =  null;  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  if(pos  >  0)  {  pos--;  }  else  {  buffer[pos]  =  null;  }  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	if(pos  >  0)  {  pos--;  }  else  {  buffer[pos]  =  null;  }	  pos--;    	non-compiled	[CE]  	42	None	replace
287	[BUG]  [BUGGY]  if(pos  >  0)  {  pos--;  }  else  {  buffer[pos]  =  PEEKED_UNQUOTED;  }  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  if(pos  >  0)  {  pos--;  }  else  {  buffer[pos]  =  PEEKED_UNQUOTED;  }  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	if(pos  >  0)  {  pos--;  }  else  {  buffer[pos]  =  PEEKED_UNQUOTED;  }	  pos--;    	non-compiled	[CE]  	42	None	replace
288	[BUG]  [BUGGY]  if(pos  >  0)  {  pos--;  }  else  {  buffer[pos++]  =  PEEKED_NULL;  }  [CE]  [FE]                                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  if(pos  >  0)  {  pos--;  }  else  {  buffer[pos++]  =  PEEKED_NULL;  }  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	if(pos  >  0)  {  pos--;  }  else  {  buffer[pos++]  =  PEEKED_NULL;  }	  pos--;    	non-compiled	[CE]  	42	None	replace
289	[BUG]  [BUGGY]  if(pos  >  0)  {  pos--;  }  else  {  throw  syntaxError( "Expected  value: ");  }  [CE]  [FE]                                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  if(pos  >  0)  {  pos--;  }  else  {  throw  syntaxError( "Expected  value: ");  }  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	if(pos  >  0)  {  pos--;  }  else  {  throw  syntaxError( "Expected  value: ");  }	  pos--;    	non-compiled	[CE]  	42	None	replace
290	[BUG]  [BUGGY]  return  peeked  +  PEEKED_LONG;  [CE]  [FE]            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  peeked  +  PEEKED_LONG;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  peeked  +  PEEKED_LONG;	  return    peeked    +    PEEKED_UNQUOTED;    	non-compiled	[CE]  	27	None	replace
291	[BUG]  [BUGGY]  int  pos  =  stack.size()  -  1;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  stack.size()  -  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  stack.size()  -  1;	  int    pos    =    stack.size();    	non-compiled	[CE]  	41	None	replace
292	[BUG]  [BUGGY]  int  pos  =  stack.size()  +  1;  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  stack.size()  +  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  stack.size()  +  1;	  int    pos    =    stack.size();    	non-compiled	[CE]  	41	None	replace
293	[BUG]  [BUGGY]  int  pos  =  stack.size()  -  2;  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  stack.size()  -  2;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  stack.size()  -  2;	  int    pos    =    stack.size();    	non-compiled	[CE]  	41	None	replace
294	[BUG]  [BUGGY]  int  pos  =  stack.size()  -  4;  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  stack.size()  -  4;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  stack.size()  -  4;	  int    pos    =    stack.size();    	non-compiled	[CE]  	41	None	replace
295	[BUG]  [BUGGY]  result  =  peekStack.length  +  MIN_INCOMPLETE_INTEGER;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  peekStack.length  +  MIN_INCOMPLETE_INTEGER;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  peekStack.length  +  MIN_INCOMPLETE_INTEGER;	  result    =    MIN_INCOMPLETE_INTEGER    +    peekStack.length;    	non-compiled	[CE]  	36	None	replace
296	[BUG]  [BUGGY]  result  =  buffer[pos]  +  MIN_INCOMPLETE_INTEGER.length;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  buffer[pos]  +  MIN_INCOMPLETE_INTEGER.length;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  buffer[pos]  +  MIN_INCOMPLETE_INTEGER.length;	  result    =    MIN_INCOMPLETE_INTEGER    +    peekStack.length;    	non-compiled	[CE]  	36	None	replace
297	[BUG]  [BUGGY]  result  =  peekStack[pos]  +  MIN_INCOMPLETE_INTEGER.length;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  peekStack[pos]  +  MIN_INCOMPLETE_INTEGER.length;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  peekStack[pos]  +  MIN_INCOMPLETE_INTEGER.length;	  result    =    MIN_INCOMPLETE_INTEGER    +    peekStack.length;    	non-compiled	[CE]  	36	None	replace
298	[BUG]  [BUGGY]  result  =  pos  +  peekStack.length;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  pos  +  peekStack.length;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  pos  +  peekStack.length;	  result    =    MIN_INCOMPLETE_INTEGER    +    peekStack.length;    	non-compiled	[CE]  	36	None	replace
299	[BUG]  [BUGGY]  result  =  buffer.length  +  MIN_INCOMPLETE_INTEGER;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  buffer.length  +  MIN_INCOMPLETE_INTEGER;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  buffer.length  +  MIN_INCOMPLETE_INTEGER;	  result    =    MIN_INCOMPLETE_INTEGER    +    peekStack.length;    	non-compiled	[CE]  	36	None	replace
300	[BUG]  [BUGGY]  result  =  peekStack[pos]  +  MIN_INCOMPLETE_INTEGER;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  peekStack[pos]  +  MIN_INCOMPLETE_INTEGER;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  peekStack[pos]  +  MIN_INCOMPLETE_INTEGER;	  result    =    MIN_INCOMPLETE_INTEGER    +    peekStack.length;    	non-compiled	[CE]  	36	None	replace
301	[BUG]  [BUGGY]  result  =  PEEKED_UNQUOTED  +  peekStack.length;  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  PEEKED_UNQUOTED  +  peekStack.length;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  PEEKED_UNQUOTED  +  peekStack.length;	  result    =    MIN_INCOMPLETE_INTEGER    +    peekStack.length;    	non-compiled	[CE]  	36	None	replace
302	[BUG]  [BUGGY]  result  =  NUMBER_EXECIMAL  +  1;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  NUMBER_EXECIMAL  +  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  NUMBER_EXECIMAL  +  1;	  result    =    NON_EXECIMAL;    	non-compiled	[CE]  	1	None	replace
303	[BUG]  [BUGGY]  result  =  NUMBER_CHAR_EXP_E;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  NUMBER_CHAR_EXP_E;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  NUMBER_CHAR_EXP_E;	  result    =    NON_EXECIMAL;    	non-compiled	[CE]  	1	None	replace
304	[BUG]  [BUGGY]  result  =  PEEKED_NONE;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  PEEKED_NONE;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  PEEKED_NONE;	  result    =    NON_EXECIMAL;    	non-compiled	[CE]  	1	None	replace
305	[BUG]  [BUGGY]  return  result  -  PEEKED_FALSE;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  result  -  PEEKED_FALSE;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  result  -  PEEKED_FALSE;	  return    result    -    PEEKED_UNQUOTED;    	non-compiled	[CE]  	29	None	replace
306	[BUG]  [BUGGY]  return  NON_EXECIMAL  /  PEEKED_BUFFERED;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  NON_EXECIMAL  /  PEEKED_BUFFERED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  NON_EXECIMAL  /  PEEKED_BUFFERED;	  return    NON_EXECIMAL    +    PEEKED_BUFFERED;    	non-compiled	[CE]  	4	None	replace
307	[BUG]  [BUGGY]  return  NON_EXECIMAL  +  PEEKED_UNQUOTED;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  NON_EXECIMAL  +  PEEKED_UNQUOTED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  NON_EXECIMAL  +  PEEKED_UNQUOTED;	  return    NON_EXECIMAL    +    PEEKED_BUFFERED;    	non-compiled	[CE]  	4	None	replace
308	[BUG]  [BUGGY]  return  NON_EXECIMAL  +  PEEKED_SINGLE_QUOTED;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  NON_EXECIMAL  +  PEEKED_SINGLE_QUOTED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  NON_EXECIMAL  +  PEEKED_SINGLE_QUOTED;	  return    NON_EXECIMAL    +    PEEKED_BUFFERED;    	non-compiled	[CE]  	4	None	replace
309	[BUG]  [BUGGY]  return  NON_EXECIMAL  +  PEEKED_NULL;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  NON_EXECIMAL  +  PEEKED_NULL;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  NON_EXECIMAL  +  PEEKED_NULL;	  return    NON_EXECIMAL    +    PEEKED_BUFFERED;    	non-compiled	[CE]  	4	None	replace
310	[BUG]  [BUGGY]  return  PEEKED_NUMBER  +  PEEKED_SINGLE_QUOTED;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_NUMBER  +  PEEKED_SINGLE_QUOTED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_NUMBER  +  PEEKED_SINGLE_QUOTED;	  return    PEEKED_TRUE    +    PEEKED_SINGLE_QUOTED;    	non-compiled	[CE]  	60	None	replace
311	[BUG]  [BUGGY]  return  PEEKED_BEFFERED;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_BEFFERED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_BEFFERED;	  return    PEEKED_BEFORE;    	non-compiled	[CE]  	12	None	replace
312	[BUG]  [BUGGY]  return  peeked  +  PEEKED_TRUE;  [CE]  [FE]            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  peeked  +  PEEKED_TRUE;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  peeked  +  PEEKED_TRUE;	  return    peeked    +    PEEKED_UNQUOTED;    	non-compiled	[CE]  	27	None	replace
313	[BUG]  [BUGGY]  result  =  MIN_INCOMPLETE_INTEGER  +  PEEKED_BUFFERED.length;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  MIN_INCOMPLETE_INTEGER  +  PEEKED_BUFFERED.length;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  MIN_INCOMPLETE_INTEGER  +  PEEKED_BUFFERED.length;	  result    =    MIN_INCOMPLETE_INTEGER    +    peekStack.length;    	non-compiled	[CE]  	36	None	replace
314	[BUG]  [BUGGY]  result  =  MIN_INCOMPLETE_INTEGER  +  buffer.length;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  MIN_INCOMPLETE_INTEGER  +  buffer.length;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  MIN_INCOMPLETE_INTEGER  +  buffer.length;	  result    =    MIN_INCOMPLETE_INTEGER    +    peekStack.length;    	non-compiled	[CE]  	36	None	replace
315	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos,  result));  [CE]  [FE]              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos,  result));  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos,  result));	  return    JsonStringEncoder.getInstance().encodeAsString(buffer,    pos));    	non-compiled	[CE]  	71	None	replace
316	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos,  PEEKED_SINGLE_QUOTED));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos,  PEEKED_SINGLE_QUOTED));  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos,  PEEKED_SINGLE_QUOTED));	  return    JsonStringEncoder.getInstance().encodeAsString(buffer,    pos));    	non-compiled	[CE]  	71	None	replace
317	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos,  PEEKED_NULL));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos,  PEEKED_NULL));  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos,  PEEKED_NULL));	  return    JsonStringEncoder.getInstance().encodeAsString(buffer,    pos));    	non-compiled	[CE]  	71	None	replace
318	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pathStack[pos]));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pathStack[pos]));  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pathStack[pos]));	  return    JsonStringEncoder.getInstance().encodeAsString(peekStack[pos]));    	non-compiled	[CE]  	45	None	replace
319	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos[pos]));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos[pos]));  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos[pos]));	  return    JsonStringEncoder.getInstance().encodeAsString(peekStack[pos]));    	non-compiled	[CE]  	45	None	replace
320	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().bufferAsString(buffer[pos]));  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().bufferAsString(buffer[pos]));  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().bufferAsString(buffer[pos]));	  return    JsonStringEncoder.getInstance().encodeAsString(peekStack[pos]));    	non-compiled	[CE]  	45	None	replace
321	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().buffer(buffer[pos]));  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().buffer(buffer[pos]));  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().buffer(buffer[pos]));	  return    JsonStringEncoder.getInstance().encodeAsString(peekStack[pos]));    	non-compiled	[CE]  	45	None	replace
322	[BUG]  [BUGGY]  return  result  +  3;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  result  +  3;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  result  +  3;	  return    result    +    1;    	non-compiled	[CE]  	47	None	replace
323	[BUG]  [BUGGY]  return  result  +  2;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  result  +  2;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  result  +  2;	  return    result    +    1;    	non-compiled	[CE]  	47	None	replace
324	[BUG]  [BUGGY]  return  PEEKED_NONE  +  1;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_NONE  +  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_NONE  +  1;	  return    result    +    1;    	non-compiled	[CE]  	47	None	replace
325	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  PEEKED_UNQUOTED);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  PEEKED_UNQUOTED);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  PEEKED_UNQUOTED);	  return    JsonStringEncoder.getInstance().encodeAsString(buffer,    result);    	non-compiled	[CE]  	18	None	replace
326	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  result,  pos);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  result,  pos);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  result,  pos);	  return    JsonStringEncoder.getInstance().encodeAsString(buffer,    result);    	non-compiled	[CE]  	18	None	replace
327	[BUG]  [BUGGY]  result  =  peekNumber()  +  PEEKED_LONG;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  peekNumber()  +  PEEKED_LONG;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  peekNumber()  +  PEEKED_LONG;	  result    =    MIN_INCOMPLETE_INTEGER    +    PEEKED_LONG;    	non-compiled	[CE]  	34	None	replace
328	[BUG]  [BUGGY]  pos  =  stack.size()  -  3;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  stack.size()  -  3;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  stack.size()  -  3;	  pos    =    stack.size();    	non-compiled	[CE]  	52	None	replace
329	[BUG]  [BUGGY]  return  PEEKED_LONG  ||  PEEKED_SINGLE_QUOTED_NAME;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_LONG  ||  PEEKED_SINGLE_QUOTED_NAME;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_LONG  ||  PEEKED_SINGLE_QUOTED_NAME;	  return    PEEKED_BOOLEAN    ||    PEEKED_SINGLE_QUOTED_NAME;    	non-compiled	[CE]  	17	None	replace
330	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(buffer,  PEEKED_DOUBLE_QUOTED_NAME);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(buffer,  PEEKED_DOUBLE_QUOTED_NAME);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().quoteAsString(buffer,  PEEKED_DOUBLE_QUOTED_NAME);	  return    JsonStringEncoder.getInstance().quoteAsString(PEEKED_SINGLE_QUOTED_NAME);    	non-compiled	[CE]  	25	None	replace
331	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(pathNames);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(pathNames);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().quoteAsString(pathNames);	  return    JsonStringEncoder.getInstance().quoteAsString(PEEKED_SINGLE_QUOTED_NAME);    	non-compiled	[CE]  	25	None	replace
332	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().parseAsString(PEEKED_SINGLE_QUOTED_NAME);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().parseAsString(PEEKED_SINGLE_QUOTED_NAME);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().parseAsString(PEEKED_SINGLE_QUOTED_NAME);	  return    JsonStringEncoder.getInstance().quoteAsString(PEEKED_SINGLE_QUOTED_NAME);    	non-compiled	[CE]  	25	None	replace
333	[BUG]  [BUGGY]  pos  =  stack.pop();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  stack.pop();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  stack.pop();	  pos    =    peekStack.peek();    	non-compiled	[CE]  	68	None	replace
334	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(PEEKED_DOUBLE_QUOTED);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(PEEKED_DOUBLE_QUOTED);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().JsonString(PEEKED_DOUBLE_QUOTED);	  return    JsonStringEncoder.getInstance().JsonString(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  	22	None	replace
335	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer,  PEEKED_DOUBLE_QUOTED);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer,  PEEKED_DOUBLE_QUOTED);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().JsonString(buffer,  PEEKED_DOUBLE_QUOTED);	  return    JsonStringEncoder.getInstance().JsonString(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  	22	None	replace
336	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer[pos]);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer[pos]);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().JsonString(buffer[pos]);	  return    JsonStringEncoder.getInstance().JsonString(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  	22	None	replace
337	[BUG]  [BUGGY]  result  =  stackSegment.length();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  stackSegment.length();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  stackSegment.length();	  result    =    peekStack.length();    	non-compiled	[CE]  	40	None	replace
338	[BUG]  [BUGGY]  result  =  stackSep.length();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  stackSep.length();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  stackSep.length();	  result    =    peekStack.length();    	non-compiled	[CE]  	40	None	replace
339	[BUG]  [BUGGY]  result  =  stackStandard.length();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  stackStandard.length();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  stackStandard.length();	  result    =    peekStack.length();    	non-compiled	[CE]  	40	None	replace
340	[BUG]  [BUGGY]  return  PEEKED_BUFFERED  ||  PEEKED_DOUBLE_QUOTED_NAME;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_BUFFERED  ||  PEEKED_DOUBLE_QUOTED_NAME;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_BUFFERED  ||  PEEKED_DOUBLE_QUOTED_NAME;	  return    PEEKED_BOOLEAN    ||    PEEKED_DOUBLE_QUOTED_NAME;    	non-compiled	[CE]  	70	None	replace
341	[BUG]  [BUGGY]  return  PEEKED_BOOLEAN  ||  PEEKED_LONG;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_BOOLEAN  ||  PEEKED_LONG;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_BOOLEAN  ||  PEEKED_LONG;	  return    PEEKED_BOOLEAN    ||    PEEKED_DOUBLE_QUOTED_NAME;    	non-compiled	[CE]  	70	None	replace
342	[BUG]  [BUGGY]  return  NUMBER_INCOMPLETE_NONE;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  NUMBER_INCOMPLETE_NONE;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  NUMBER_INCOMPLETE_NONE;	  return    NUMBER_INCOMPLETE_INTEGER;    	non-compiled	[CE]  	51	None	replace
343	[BUG]  [BUGGY]  return  MIN_INCOMPLETE_INTEGER  +  1;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  MIN_INCOMPLETE_INTEGER  +  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  MIN_INCOMPLETE_INTEGER  +  1;	  return    NUMBER_INCOMPLETE_INTEGER;    	non-compiled	[CE]  	51	None	replace
344	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().jsonString(buffer,  pos,  result);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().jsonString(buffer,  pos,  result);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().jsonString(buffer,  pos,  result);	  return    JsonStringEncoder.getInstance().jsonString(buffer,    pos);    	non-compiled	[CE]  	20	None	replace
345	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().jsonString(buffer,  pos,  value);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().jsonString(buffer,  pos,  value);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().jsonString(buffer,  pos,  value);	  return    JsonStringEncoder.getInstance().jsonString(buffer,    pos);    	non-compiled	[CE]  	20	None	replace
346	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer,  pos,  result);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer,  pos,  result);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().JsonString(buffer,  pos,  result);	  return    JsonStringEncoder.getInstance().JsonString(buffer,    pos);    	non-compiled	[CE]  	63	None	replace
347	[BUG]  [BUGGY]  return  result  *  PEEKED_UNQUOTED;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  result  *  PEEKED_UNQUOTED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  result  *  PEEKED_UNQUOTED;	  return    result    /    PEEKED_UNQUOTED;    	non-compiled	[CE]  	28	None	replace
348	[BUG]  [BUGGY]  return  result  /  PEEKED_BOOLEAN;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  result  /  PEEKED_BOOLEAN;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  result  /  PEEKED_BOOLEAN;	  return    result    /    PEEKED_UNQUOTED;    	non-compiled	[CE]  	28	None	replace
349	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().buffer(pathNames[pos]);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().buffer(pathNames[pos]);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().buffer(pathNames[pos]);	  return    JsonStringEncoder.getInstance().encodeAsString(pathNames[pos]);    	non-compiled	[CE]  	44	None	replace
350	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().decodeAsString(buffer,  pathNames[pos]);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().decodeAsString(buffer,  pathNames[pos]);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().decodeAsString(buffer,  pathNames[pos]);	  return    JsonStringEncoder.getInstance().encodeAsString(pathNames[pos]);    	non-compiled	[CE]  	44	None	replace
351	[BUG]  [BUGGY]  return  result  +  PEEKED_NONE;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  result  +  PEEKED_NONE;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  result  +  PEEKED_NONE;	  return    result    +    PEEKED_LONG;    	non-compiled	[CE]  	30	None	replace
352	[BUG]  [BUGGY]  return  PEEKED_SINGLE_QUOTED  +  PEEKED_UNQUOTED;  [CE]  [FE]            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_SINGLE_QUOTED  +  PEEKED_UNQUOTED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_SINGLE_QUOTED  +  PEEKED_UNQUOTED;	  return    PEEKED_TRUE    +    PEEKED_UNQUOTED;    	non-compiled	[CE]  	72	None	replace
353	[BUG]  [BUGGY]  return  result  +  PEEKED_DOUBLE_QUOTED_NAME;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  result  +  PEEKED_DOUBLE_QUOTED_NAME;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  result  +  PEEKED_DOUBLE_QUOTED_NAME;	  return    result    +    PEEKED_SINGLE_QUOTED_NAME;    	non-compiled	[CE]  	10	None	replace
354	[BUG]  [BUGGY]  return  result  +  PEEKED_UNQUOTED_NAME;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  result  +  PEEKED_UNQUOTED_NAME;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  result  +  PEEKED_UNQUOTED_NAME;	  return    result    +    PEEKED_SINGLE_QUOTED_NAME;    	non-compiled	[CE]  	10	None	replace
355	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(buffer,  PEEKED_DOUBLE_QUOTED);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(buffer,  PEEKED_DOUBLE_QUOTED);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().quoteAsString(buffer,  PEEKED_DOUBLE_QUOTED);	  return    JsonStringEncoder.getInstance().quoteAsString(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  	23	None	replace
356	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(buffer);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(buffer);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().quoteAsString(buffer);	  return    JsonStringEncoder.getInstance().quoteAsString(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  	23	None	replace
357	[BUG]  [BUGGY]  return  PEEKED_BOOLEAN  -  1L;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_BOOLEAN  -  1L;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_BOOLEAN  -  1L;	  return    PEEKED_BOOLEAN    -    1;    	non-compiled	[CE]  	56	None	replace
358	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  PEEKED_DOUBLE_QUOTED);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  PEEKED_DOUBLE_QUOTED);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  PEEKED_DOUBLE_QUOTED);	  return    JsonStringEncoder.getInstance().encodeAsString(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  	24	None	replace
359	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().decodeAsString(buffer,  PEEKED_SINGLE_QUOTED);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().decodeAsString(buffer,  PEEKED_SINGLE_QUOTED);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().decodeAsString(buffer,  PEEKED_SINGLE_QUOTED);	  return    JsonStringEncoder.getInstance().encodeAsString(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  	24	None	replace
360	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer);	  return    JsonStringEncoder.getInstance().encodeAsString(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  	24	None	replace
361	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().buffer(PEEKED_SINGLE_QUOTED);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().buffer(PEEKED_SINGLE_QUOTED);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().buffer(PEEKED_SINGLE_QUOTED);	  return    JsonStringEncoder.getInstance().encodeAsString(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  	24	None	replace
362	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  PEEKED_SUBJECT);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  PEEKED_SUBJECT);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  PEEKED_SUBJECT);	  return    JsonStringEncoder.getInstance().encodeAsString(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  	24	None	replace
363	[BUG]  [BUGGY]  return  PEEKED_SINGLE_QUOTED  +  peeked;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_SINGLE_QUOTED  +  peeked;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_SINGLE_QUOTED  +  peeked;	  return    peeked    +    PEEKED_SINGLE_QUOTED;    	non-compiled	[CE]  	6	None	replace
364	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer,  PEEKED_BOOLEAN);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer,  PEEKED_BOOLEAN);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().JsonString(buffer,  PEEKED_BOOLEAN);	  return    JsonStringEncoder.getInstance().JsonString(PEEKED_BUFFERED);    	non-compiled	[CE]  	15	None	replace
365	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer,  PEEKED_UNQUOTED);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer,  PEEKED_UNQUOTED);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().JsonString(buffer,  PEEKED_UNQUOTED);	  return    JsonStringEncoder.getInstance().JsonString(PEEKED_BUFFERED);    	non-compiled	[CE]  	15	None	replace
366	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().JsonString(buffer);	  return    JsonStringEncoder.getInstance().JsonString(PEEKED_BUFFERED);    	non-compiled	[CE]  	15	None	replace
367	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer,  PEEKED_NULL);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer,  PEEKED_NULL);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().JsonString(buffer,  PEEKED_NULL);	  return    JsonStringEncoder.getInstance().JsonString(PEEKED_BUFFERED);    	non-compiled	[CE]  	15	None	replace
368	[BUG]  [BUGGY]  return  NON_EXECIMAL  -  2;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  NON_EXECIMAL  -  2;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  NON_EXECIMAL  -  2;	  return    NON_EXECIMAL    -    1;    	non-compiled	[CE]  	3	None	replace
369	[BUG]  [BUGGY]  return  NON_EXECIMAL  +  4;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  NON_EXECIMAL  +  4;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  NON_EXECIMAL  +  4;	  return    NON_EXECIMAL    +    1;    	non-compiled	[CE]  	5	None	replace
370	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().decodeAsString(buffer,  pathNames[pos]));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().decodeAsString(buffer,  pathNames[pos]));  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().decodeAsString(buffer,  pathNames[pos]));	  return    JsonStringEncoder.getInstance().encodeAsString(pathNames[pos]));    	non-compiled	[CE]  	19	None	replace
371	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().buffer(pathNames[pos]));  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().buffer(pathNames[pos]));  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().buffer(pathNames[pos]));	  return    JsonStringEncoder.getInstance().encodeAsString(pathNames[pos]));    	non-compiled	[CE]  	19	None	replace
372	[BUG]  [BUGGY]  int  pos  =  peekStackTop()  +  buffer.length;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  peekStackTop()  +  buffer.length;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  peekStackTop()  +  buffer.length;	  int    pos    =    peekStackTop();    	non-compiled	[CE]  	67	None	replace
373	[BUG]  [BUGGY]  int  pos  =  peekStackTop()  +  PEEKED_SINGLE_QUOTED;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  peekStackTop()  +  PEEKED_SINGLE_QUOTED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  peekStackTop()  +  PEEKED_SINGLE_QUOTED;	  int    pos    =    peekStackTop();    	non-compiled	[CE]  	67	None	replace
374	[BUG]  [BUGGY]  peekStack.push(buffer);  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  peekStack.push(buffer);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	peekStack.push(buffer);	  peekStack.push(p);    	non-compiled	[CE]  	43	None	replace
375	[BUG]  [BUGGY]  return  PEEKED_BOOLEAN  +  2;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_BOOLEAN  +  2;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_BOOLEAN  +  2;	  return    PEEKED_BOOLEAN    +    1;    	non-compiled	[CE]  	55	None	replace
376	[BUG]  [BUGGY]  return  NUMBER_CHAR_EXP_SIGN  -  1;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  NUMBER_CHAR_EXP_SIGN  -  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  NUMBER_CHAR_EXP_SIGN  -  1;	  return    NUMBER_CHAR_EXP_SIGN;    	non-compiled	[CE]  	61	None	replace
377	[BUG]  [BUGGY]  return  NUMBER_CHAR_EXP_SIGN  +  PEEKED_NULL;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  NUMBER_CHAR_EXP_SIGN  +  PEEKED_NULL;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  NUMBER_CHAR_EXP_SIGN  +  PEEKED_NULL;	  return    NUMBER_CHAR_EXP_SIGN;    	non-compiled	[CE]  	61	None	replace
378	[BUG]  [BUGGY]  return  NUMBER_CHAR_EXP_SIGN  +  PEEKED_UNQUOTED;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  NUMBER_CHAR_EXP_SIGN  +  PEEKED_UNQUOTED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  NUMBER_CHAR_EXP_SIGN  +  PEEKED_UNQUOTED;	  return    NUMBER_CHAR_EXP_SIGN;    	non-compiled	[CE]  	61	None	replace
379	[BUG]  [BUGGY]  return  NUMBER_CHAR_EXP_SIGN  +  PEEKED_BUFFERED;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  NUMBER_CHAR_EXP_SIGN  +  PEEKED_BUFFERED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  NUMBER_CHAR_EXP_SIGN  +  PEEKED_BUFFERED;	  return    NUMBER_CHAR_EXP_SIGN;    	non-compiled	[CE]  	61	None	replace
380	[BUG]  [BUGGY]  result  =  peekedInt  +  MIN_INCOMPLETE_INTEGER.length();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  peekedInt  +  MIN_INCOMPLETE_INTEGER.length();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  peekedInt  +  MIN_INCOMPLETE_INTEGER.length();	  result    =    MIN_INCOMPLETE_INTEGER    +    peekedString.length();    	non-compiled	[CE]  	33	None	replace
381	[BUG]  [BUGGY]  result  =  peekedInt.length();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  peekedInt.length();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  peekedInt.length();	  result    =    MIN_INCOMPLETE_INTEGER    +    peekedString.length();    	non-compiled	[CE]  	33	None	replace
382	[BUG]  [BUGGY]  return  NUMBER_CHAR_SIGN;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  NUMBER_CHAR_SIGN;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  NUMBER_CHAR_SIGN;	  return    NUMBER_CHAR_EXP_E;    	non-compiled	[CE]  	50	None	replace
383	[BUG]  [BUGGY]  return  NUMBER_CHAR_EXP_L;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  NUMBER_CHAR_EXP_L;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  NUMBER_CHAR_EXP_L;	  return    NUMBER_CHAR_EXP_E;    	non-compiled	[CE]  	50	None	replace
384	[BUG]  [BUGGY]  peekStack.push(new  BigInteger(result));  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  peekStack.push(new  BigInteger(result));  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	peekStack.push(new  BigInteger(result));	  peekStack.pop();    	non-compiled	[CE]  	54	None	replace
385	[BUG]  [BUGGY]  peekStack.push(new  BigDecimal(result));  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  peekStack.push(new  BigDecimal(result));  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	peekStack.push(new  BigDecimal(result));	  peekStack.pop();    	non-compiled	[CE]  	54	None	replace
386	[BUG]  [BUGGY]  peekStack.push(new  Integer(result));  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  peekStack.push(new  Integer(result));  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	peekStack.push(new  Integer(result));	  peekStack.pop();    	non-compiled	[CE]  	54	None	replace
387	[BUG]  [BUGGY]  pos  =  stackStack.length();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  stackStack.length();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  stackStack.length();	  pos    =    stack.length();    	non-compiled	[CE]  	37	None	replace
388	[BUG]  [BUGGY]  pos  =  stackStandard.length();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  stackStandard.length();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  stackStandard.length();	  pos    =    stack.length();    	non-compiled	[CE]  	37	None	replace
389	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  0,  PEEKED_NULL);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  0,  PEEKED_NULL);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  0,  PEEKED_NULL);	  return    JsonStringEncoder.getInstance().encodeAsString(buffer,    0,    pos);    	non-compiled	[CE]  	64	None	replace
390	[BUG]  [BUGGY]  if(result  ==  PEEKED_UNQUOTED)  {  pos--;  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  if(result  ==  PEEKED_UNQUOTED)  {  pos--;  }  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	if(result  ==  PEEKED_UNQUOTED)  {  pos--;  }	  pos--;    	non-compiled	[CE]  	42	None	replace
391	[BUG]  [BUGGY]  if(result  ==  PEEKED_NULL)  {  pos--;  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  if(result  ==  PEEKED_NULL)  {  pos--;  }  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	if(result  ==  PEEKED_NULL)  {  pos--;  }	  pos--;    	non-compiled	[CE]  	42	None	replace
392	[BUG]  [BUGGY]  if(result  ==  PEEKED_LONG)  {  pos--;  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  if(result  ==  PEEKED_LONG)  {  pos--;  }  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	if(result  ==  PEEKED_LONG)  {  pos--;  }	  pos--;    	non-compiled	[CE]  	42	None	replace
393	[BUG]  [BUGGY]  if(result  ==  PEEKED_NULL)  {  pos--;  }  else  {  buffer[pos]  =  NUMBER_CHAR_QUOTED;  }  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  if(result  ==  PEEKED_NULL)  {  pos--;  }  else  {  buffer[pos]  =  NUMBER_CHAR_QUOTED;  }  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	if(result  ==  PEEKED_NULL)  {  pos--;  }  else  {  buffer[pos]  =  NUMBER_CHAR_QUOTED;  }	  pos--;    	non-compiled	[CE]  	42	None	replace
394	[BUG]  [BUGGY]  if(result  ==  PEEKED_NULL)  {  pos--;  }  else  {  buffer[pos]  =  null;  }  [CE]  [FE]                                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  if(result  ==  PEEKED_NULL)  {  pos--;  }  else  {  buffer[pos]  =  null;  }  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	if(result  ==  PEEKED_NULL)  {  pos--;  }  else  {  buffer[pos]  =  null;  }	  pos--;    	non-compiled	[CE]  	42	None	replace
395	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos,  result);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos,  result);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos,  result);	  return    JsonStringEncoder.getInstance().encodeAsString(buffer,    pos);    	non-compiled	[CE]  	16	None	replace
396	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos,  peeked);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos,  peeked);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos,  peeked);	  return    JsonStringEncoder.getInstance().encodeAsString(buffer,    pos);    	non-compiled	[CE]  	16	None	replace
397	[BUG]  [BUGGY]  int  pos  =  peekStackToPeek(pathIndices);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  peekStackToPeek(pathIndices);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  peekStackToPeek(pathIndices);	  int    pos    =    peekStackToPeek();    	non-compiled	[CE]  	69	None	replace
398	[BUG]  [BUGGY]  int  pos  =  peekStackToPeek(pathNames);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  peekStackToPeek(pathNames);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  peekStackToPeek(pathNames);	  int    pos    =    peekStackToPeek();    	non-compiled	[CE]  	69	None	replace
399	[BUG]  [BUGGY]  int  pos  =  peekStackToPeek(peekStack);  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  peekStackToPeek(peekStack);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  peekStackToPeek(peekStack);	  int    pos    =    peekStackToPeek();    	non-compiled	[CE]  	69	None	replace
400	[BUG]  [BUGGY]  pos  =  stackSize  -  result;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  stackSize  -  result;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  stackSize  -  result;	  pos    =    stackSize    -    buffer.length;    	non-compiled	[CE]  	53	None	replace
401	[BUG]  [BUGGY]  pos  =  bufferLength  -  stackSize;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  bufferLength  -  stackSize;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  bufferLength  -  stackSize;	  pos    =    stackSize    -    buffer.length;    	non-compiled	[CE]  	53	None	replace
402	[BUG]  [BUGGY]  pos  =  stack.length  -  3;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  stack.length  -  3;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  stack.length  -  3;	  pos    =    stack.length;    	non-compiled	[CE]  	39	None	replace
403	[BUG]  [BUGGY]  pos  =  pathIndices.length;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  pathIndices.length;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  pathIndices.length;	  pos    =    stack.length;    	non-compiled	[CE]  	39	None	replace
404	[BUG]  [BUGGY]  result  =  NUMBER_CHAR_SIGN  +  1;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  NUMBER_CHAR_SIGN  +  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  NUMBER_CHAR_SIGN  +  1;	  result    =    NUMBER_CHAR_SIGN;    	non-compiled	[CE]  	14	None	replace
405	[BUG]  [BUGGY]  result  =  NUMBER_CHAR_EXP_SIGN;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  NUMBER_CHAR_EXP_SIGN;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  NUMBER_CHAR_EXP_SIGN;	  result    =    NUMBER_CHAR_SIGN;    	non-compiled	[CE]  	14	None	replace
406	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(buffer,  0);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(buffer,  0);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().quoteAsString(buffer,  0);	  return    JsonStringEncoder.getInstance().quoteAsString(buffer,    pos);    	non-compiled	[CE]  	62	None	replace
407	[BUG]  [BUGGY]  int  pos  =  peekStackToPeekLong();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  peekStackToPeekLong();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  peekStackToPeekLong();	  int    pos    =    peekStackToPeek();    	non-compiled	[CE]  	69	None	replace
408	[BUG]  [BUGGY]  int  pos  =  peekStackToPeekStart();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  peekStackToPeekStart();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  peekStackToPeekStart();	  int    pos    =    peekStackToPeek();    	non-compiled	[CE]  	69	None	replace
409	[BUG]  [BUGGY]  return  PEEKED_TRUE  -  PEEKED_SINGLE_QUOTED;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_TRUE  -  PEEKED_SINGLE_QUOTED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_TRUE  -  PEEKED_SINGLE_QUOTED;	  return    result    -    PEEKED_SINGLE_QUOTED;    	non-compiled	[CE]  	8	None	replace
410	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  PEEKED_BOOLEAN);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  PEEKED_BOOLEAN);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  PEEKED_BOOLEAN);	  return    JsonStringEncoder.getInstance().encodeAsString(buffer,    result);    	non-compiled	[CE]  	18	None	replace
411	[BUG]  [BUGGY]  if(pos  >  0)  {  pos--;  }  else  {  buffer[pos]  =  new  String(buffer,  0,  buffer.length);  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  if(pos  >  0)  {  pos--;  }  else  {  buffer[pos]  =  new  String(buffer,  0,  buffer.length);  }  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	if(pos  >  0)  {  pos--;  }  else  {  buffer[pos]  =  new  String(buffer,  0,  buffer.length);  }	  pos--;    	non-compiled	[CE]  	42	None	replace
412	[BUG]  [BUGGY]  if(pos  >  0)  {  pos--;  }  else  {  buffer[pos]  =  result;  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  if(pos  >  0)  {  pos--;  }  else  {  buffer[pos]  =  result;  }  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	if(pos  >  0)  {  pos--;  }  else  {  buffer[pos]  =  result;  }	  pos--;    	non-compiled	[CE]  	42	None	replace
413	[BUG]  [BUGGY]  if(pos  >  0)  {  pos--;  }  else  {  buffer[pos]  =  PEEKED_LONG;  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  if(pos  >  0)  {  pos--;  }  else  {  buffer[pos]  =  PEEKED_LONG;  }  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	if(pos  >  0)  {  pos--;  }  else  {  buffer[pos]  =  PEEKED_LONG;  }	  pos--;    	non-compiled	[CE]  	42	None	replace
414	[BUG]  [BUGGY]  int  pos  =  stack.pop();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  stack.pop();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  stack.pop();	  int    pos    =    peekStack.peek();    	non-compiled	[CE]  	65	None	replace
415	[BUG]  [BUGGY]  int  pos  =  stack.getPeek();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  stack.getPeek();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  stack.getPeek();	  int    pos    =    peekStack.peek();    	non-compiled	[CE]  	65	None	replace
416	[BUG]  [BUGGY]  pos  =  stack.getLength();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  stack.getLength();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  stack.getLength();	  pos    =    stack.size();    	non-compiled	[CE]  	52	None	replace
417	[BUG]  [BUGGY]  pos  =  stack.getPeek();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  stack.getPeek();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  stack.getPeek();	  pos    =    stack.size();    	non-compiled	[CE]  	52	None	replace
418	[BUG]  [BUGGY]  result  =  buffer[pos]  &  PEEKED_LONG;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  buffer[pos]  &  PEEKED_LONG;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  buffer[pos]  &  PEEKED_LONG;	  result    =    MIN_INCOMPLETE_INTEGER    |    PEEKED_LONG;    	non-compiled	[CE]  	35	None	replace
419	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  stack[pos]));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  stack[pos]));  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  stack[pos]));	  return    JsonStringEncoder.getInstance().encodeAsString(peekStack[pos]));    	non-compiled	[CE]  	45	None	replace
420	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  result[pos]));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  result[pos]));  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  result[pos]));	  return    JsonStringEncoder.getInstance().encodeAsString(peekStack[pos]));    	non-compiled	[CE]  	45	None	replace
421	[BUG]  [BUGGY]  return  NUMBER_INCOMPLETE_INTEGER  -  1;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  NUMBER_INCOMPLETE_INTEGER  -  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  NUMBER_INCOMPLETE_INTEGER  -  1;	  return    NUMBER_INCOMPLETE_INTEGER;    	non-compiled	[CE]  	51	None	replace
422	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos,  PEEKED_DOUBLE_QUOTED);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos,  PEEKED_DOUBLE_QUOTED);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos,  PEEKED_DOUBLE_QUOTED);	  return    JsonStringEncoder.getInstance().encodeAsString(buffer,    pos);    	non-compiled	[CE]  	16	None	replace
423	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos,  PEEKED_EOF);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos,  PEEKED_EOF);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos,  PEEKED_EOF);	  return    JsonStringEncoder.getInstance().encodeAsString(buffer,    pos);    	non-compiled	[CE]  	16	None	replace
424	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos,  PEEKED_BOOLEAN);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos,  PEEKED_BOOLEAN);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos,  PEEKED_BOOLEAN);	  return    JsonStringEncoder.getInstance().encodeAsString(buffer,    pos);    	non-compiled	[CE]  	16	None	replace
425	[BUG]  [BUGGY]  return  pos  -  1;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  pos  -  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  pos  -  1;	  return    NON_EXECIMAL    -    1;    	non-compiled	[CE]  	3	None	replace
426	[BUG]  [BUGGY]  return  pos  +  PEEKED_UNQUOTED;  [CE]  [FE]            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  pos  +  PEEKED_UNQUOTED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  pos  +  PEEKED_UNQUOTED;	  return    PEEKED_TRUE    +    PEEKED_UNQUOTED;    	non-compiled	[CE]  	72	None	replace
427	[BUG]  [BUGGY]  return  PEEKED_SINGLE_QUOTED_NAME  +  PEEKED_TRUE;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_SINGLE_QUOTED_NAME  +  PEEKED_TRUE;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_SINGLE_QUOTED_NAME  +  PEEKED_TRUE;	  return    PEEKED_TRUE    +    PEEKED_UNQUOTED;    	non-compiled	[CE]  	72	None	replace
428	[BUG]  [BUGGY]  pos  =  stack.length  -  buffer.length;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  stack.length  -  buffer.length;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  stack.length  -  buffer.length;	  pos    =    stackSize    -    buffer.length;    	non-compiled	[CE]  	53	None	replace
429	[BUG]  [BUGGY]  pos  =  length  -  buffer.length;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  length  -  buffer.length;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  length  -  buffer.length;	  pos    =    stackSize    -    buffer.length;    	non-compiled	[CE]  	53	None	replace
430	[BUG]  [BUGGY]  pos  =  end  -  buffer.length;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  end  -  buffer.length;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  end  -  buffer.length;	  pos    =    stackSize    -    buffer.length;    	non-compiled	[CE]  	53	None	replace
431	[BUG]  [BUGGY]  return  PEEKED_BOOLEAN  ||  PEEKED_STANDARD_QUOTED_NAME;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_BOOLEAN  ||  PEEKED_STANDARD_QUOTED_NAME;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_BOOLEAN  ||  PEEKED_STANDARD_QUOTED_NAME;	  return    PEEKED_BOOLEAN    ||    PEEKED_DOUBLE_QUOTED_NAME;    	non-compiled	[CE]  	70	None	replace
432	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().bufferAsString(pathNames[pos]));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().bufferAsString(pathNames[pos]));  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().bufferAsString(pathNames[pos]));	  return    JsonStringEncoder.getInstance().encodeAsString(pathNames[pos]));    	non-compiled	[CE]  	19	None	replace
433	[BUG]  [BUGGY]  result  =  peekStack.size();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  peekStack.size();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  peekStack.size();	  result    =    NUMBER_CHAR_SIGN;    	non-compiled	[CE]  	14	None	replace
434	[BUG]  [BUGGY]  return  PEEKED_EOF  -  1;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_EOF  -  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_EOF  -  1;	  return    PEEKED_BOOLEAN    -    1;    	non-compiled	[CE]  	56	None	replace
435	[BUG]  [BUGGY]  return  PEEKED_BOOLEAN  -  2;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_BOOLEAN  -  2;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_BOOLEAN  -  2;	  return    PEEKED_BOOLEAN    -    1;    	non-compiled	[CE]  	56	None	replace
436	[BUG]  [BUGGY]  int  pos  =  stack.length()  -  2;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  stack.length()  -  2;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  stack.length()  -  2;	  int    pos    =    stack.length();    	non-compiled	[CE]  	38	None	replace
437	[BUG]  [BUGGY]  return  peeked  *  PEEKED_UNQUOTED;  [CE]  [FE]            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  peeked  *  PEEKED_UNQUOTED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  peeked  *  PEEKED_UNQUOTED;	  return    peeked    +    PEEKED_UNQUOTED;    	non-compiled	[CE]  	27	None	replace
438	[BUG]  [BUGGY]  return  peeked  +  1;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  peeked  +  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  peeked  +  1;	  return    peeked    +    PEEKED_UNQUOTED;    	non-compiled	[CE]  	27	None	replace
439	[BUG]  [BUGGY]  int  pos  =  stack.getPeekCount();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  stack.getPeekCount();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  stack.getPeekCount();	  int    pos    =    peekStack.size();    	non-compiled	[CE]  	66	None	replace
440	[BUG]  [BUGGY]  result  =  buffer.length();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  buffer.length();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  buffer.length();	  result    =    MIN_INCOMPLETE_INTEGER;    	non-compiled	[CE]  	2	None	replace
441	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().jsonString(buffer,  pos,  pathNames);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().jsonString(buffer,  pos,  pathNames);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().jsonString(buffer,  pos,  pathNames);	  return    JsonStringEncoder.getInstance().jsonString(buffer,    pos);    	non-compiled	[CE]  	20	None	replace
442	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().jsonString(buffer,  pos,  PEEKED_DOUBLE_QUOTED);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().jsonString(buffer,  pos,  PEEKED_DOUBLE_QUOTED);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().jsonString(buffer,  pos,  PEEKED_DOUBLE_QUOTED);	  return    JsonStringEncoder.getInstance().jsonString(buffer,    pos);    	non-compiled	[CE]  	20	None	replace
443	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().jsonString(buffer,  pos,  PEEKED_LONG);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().jsonString(buffer,  pos,  PEEKED_LONG);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().jsonString(buffer,  pos,  PEEKED_LONG);	  return    JsonStringEncoder.getInstance().jsonString(buffer,    pos);    	non-compiled	[CE]  	20	None	replace
444	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().jsonString(buffer,  pos,  PEEKED_SINGLE_QUOTED);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().jsonString(buffer,  pos,  PEEKED_SINGLE_QUOTED);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().jsonString(buffer,  pos,  PEEKED_SINGLE_QUOTED);	  return    JsonStringEncoder.getInstance().jsonString(buffer,    pos);    	non-compiled	[CE]  	20	None	replace
445	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer,  PEEKED_LONG);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer,  PEEKED_LONG);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().JsonString(buffer,  PEEKED_LONG);	  return    JsonStringEncoder.getInstance().JsonString(PEEKED_BUFFERED);    	non-compiled	[CE]  	15	None	replace
446	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer,  pos,  PEEKED_DOUBLE_QUOTED);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer,  pos,  PEEKED_DOUBLE_QUOTED);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().JsonString(buffer,  pos,  PEEKED_DOUBLE_QUOTED);	  return    JsonStringEncoder.getInstance().JsonString(buffer,    pos);    	non-compiled	[CE]  	63	None	replace
447	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer,  pos,  PEEKED_LONG);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().JsonString(buffer,  pos,  PEEKED_LONG);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().JsonString(buffer,  pos,  PEEKED_LONG);	  return    JsonStringEncoder.getInstance().JsonString(buffer,    pos);    	non-compiled	[CE]  	63	None	replace
448	[BUG]  [BUGGY]  pos  =  stack.lastIndexOf('.');  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  stack.lastIndexOf('.');  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  stack.lastIndexOf('.');	  pos    =    stack.length();    	non-compiled	[CE]  	37	None	replace
449	[BUG]  [BUGGY]  pos  =  stack.indexOf('.');  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  pos  =  stack.indexOf('.');  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	pos  =  stack.indexOf('.');	  pos    =    stack.length();    	non-compiled	[CE]  	37	None	replace
450	[BUG]  [BUGGY]  int  pos  =  stack.getLength();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  stack.getLength();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  stack.getLength();	  int    pos    =    stack.size();    	non-compiled	[CE]  	41	None	replace
451	[BUG]  [BUGGY]  return  PEEKED_TRUE  /  PEEKED_SINGLE_QUOTED;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_TRUE  /  PEEKED_SINGLE_QUOTED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_TRUE  /  PEEKED_SINGLE_QUOTED;	  return    PEEKED_TRUE    +    PEEKED_SINGLE_QUOTED;    	non-compiled	[CE]  	60	None	replace
452	[BUG]  [BUGGY]  return  PEEKED_TRUE  +  1;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_TRUE  +  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_TRUE  +  1;	  return    PEEKED_TRUE    +    PEEKED_SINGLE_QUOTED;    	non-compiled	[CE]  	60	None	replace
453	[BUG]  [BUGGY]  result  =  result  +  peekedString.length();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  result  +  peekedString.length();  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  result  +  peekedString.length();	  result    =    MIN_INCOMPLETE_INTEGER    +    peekedString.length();    	non-compiled	[CE]  	33	None	replace
454	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(buffer,  pos,  result);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(buffer,  pos,  result);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().quoteAsString(buffer,  pos,  result);	  return    JsonStringEncoder.getInstance().quoteAsString(buffer,    pos);    	non-compiled	[CE]  	62	None	replace
455	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(buffer,  pos,  PEEKED_BUFFERED);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(buffer,  pos,  PEEKED_BUFFERED);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().quoteAsString(buffer,  pos,  PEEKED_BUFFERED);	  return    JsonStringEncoder.getInstance().quoteAsString(buffer,    pos);    	non-compiled	[CE]  	62	None	replace
456	[BUG]  [BUGGY]  int  pos  =  peekStackTop()  -  1;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  peekStackTop()  -  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  peekStackTop()  -  1;	  int    pos    =    peekStackTop();    	non-compiled	[CE]  	67	None	replace
457	[BUG]  [BUGGY]  int  pos  =  peekStackTop()  +  PEEKED_DOUBLE_QUOTED_NAME;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  int  pos  =  peekStackTop()  +  PEEKED_DOUBLE_QUOTED_NAME;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	int  pos  =  peekStackTop()  +  PEEKED_DOUBLE_QUOTED_NAME;	  int    pos    =    peekStackTop();    	non-compiled	[CE]  	67	None	replace
458	[BUG]  [BUGGY]  result  =  stack.length()  -  1;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  stack.length()  -  1;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  stack.length()  -  1;	  result    =    peekStack.length();    	non-compiled	[CE]  	40	None	replace
459	[BUG]  [BUGGY]  return  peeked  *  PEEKED_SINGLE_QUOTED;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  peeked  *  PEEKED_SINGLE_QUOTED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  peeked  *  PEEKED_SINGLE_QUOTED;	  return    peeked    +    PEEKED_SINGLE_QUOTED;    	non-compiled	[CE]  	6	None	replace
460	[BUG]  [BUGGY]  return  PEEKED_UNQUOTED  +  NON_EXECIMAL;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_UNQUOTED  +  NON_EXECIMAL;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_UNQUOTED  +  NON_EXECIMAL;	  return    NON_EXECIMAL    +    PEEKED_BUFFERED;    	non-compiled	[CE]  	4	None	replace
461	[BUG]  [BUGGY]  return  NON_EXECIMAL  +  PEEKED_DOUBLE_QUOTED;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  NON_EXECIMAL  +  PEEKED_DOUBLE_QUOTED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  NON_EXECIMAL  +  PEEKED_DOUBLE_QUOTED;	  return    NON_EXECIMAL    +    PEEKED_BUFFERED;    	non-compiled	[CE]  	4	None	replace
462	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().bufferAsString(pathNames[pos]);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().bufferAsString(pathNames[pos]);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().bufferAsString(pathNames[pos]);	  return    JsonStringEncoder.getInstance().encodeAsString(pathNames[pos]);    	non-compiled	[CE]  	44	None	replace
463	[BUG]  [BUGGY]  result  =  buffer[pos  +  MIN_INCOMPLETE_INTEGER.length;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  buffer[pos  +  MIN_INCOMPLETE_INTEGER.length;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  buffer[pos  +  MIN_INCOMPLETE_INTEGER.length;	  result    =    MIN_INCOMPLETE_INTEGER    +    peekStack.length;    	non-compiled	[CE]  	36	None	replace
464	[BUG]  [BUGGY]  result  =  PEEKED_NULL  +  peekStack.length;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  PEEKED_NULL  +  peekStack.length;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  PEEKED_NULL  +  peekStack.length;	  result    =    MIN_INCOMPLETE_INTEGER    +    peekStack.length;    	non-compiled	[CE]  	36	None	replace
465	[BUG]  [BUGGY]  result  =  buffer[pos  +  MIN_INCOMPLETE_INTEGER].length;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  buffer[pos  +  MIN_INCOMPLETE_INTEGER].length;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  buffer[pos  +  MIN_INCOMPLETE_INTEGER].length;	  result    =    MIN_INCOMPLETE_INTEGER    +    peekStack.length;    	non-compiled	[CE]  	36	None	replace
466	[BUG]  [BUGGY]  return  PEEKED_TRUE  ||  PEEKED_SINGLE_QUOTED_NAME;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_TRUE  ||  PEEKED_SINGLE_QUOTED_NAME;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_TRUE  ||  PEEKED_SINGLE_QUOTED_NAME;	  return    PEEKED_BOOLEAN    ||    PEEKED_SINGLE_QUOTED_NAME;    	non-compiled	[CE]  	17	None	replace
467	[BUG]  [BUGGY]  return  PEEKED_BUFFERED  ||  PEEKED_SINGLE_QUOTED_NAME;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  PEEKED_BUFFERED  ||  PEEKED_SINGLE_QUOTED_NAME;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  PEEKED_BUFFERED  ||  PEEKED_SINGLE_QUOTED_NAME;	  return    PEEKED_BOOLEAN    ||    PEEKED_SINGLE_QUOTED_NAME;    	non-compiled	[CE]  	17	None	replace
468	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(PEEKED_DOUBLE_QUOTED);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(PEEKED_DOUBLE_QUOTED);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(PEEKED_DOUBLE_QUOTED);	  return    JsonStringEncoder.getInstance().encodeAsString(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  	24	None	replace
469	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(pathNames,  PEEKED_SINGLE_QUOTED_NAME);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().quoteAsString(pathNames,  PEEKED_SINGLE_QUOTED_NAME);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().quoteAsString(pathNames,  PEEKED_SINGLE_QUOTED_NAME);	  return    JsonStringEncoder.getInstance().quoteAsString(PEEKED_SINGLE_QUOTED_NAME);    	non-compiled	[CE]  	25	None	replace
470	[BUG]  [BUGGY]  return  result  /  NUMBER_CHAR_QUOTED;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  result  /  NUMBER_CHAR_QUOTED;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  result  /  NUMBER_CHAR_QUOTED;	  return    result    /    PEEKED_SINGLE_QUOTED;    	non-compiled	[CE]  	7	None	replace
471	[BUG]  [BUGGY]  peekStack.push(buffer,  0,  result);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  peekStack.push(buffer,  0,  result);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	peekStack.push(buffer,  0,  result);	  peekStack.pop();    	non-compiled	[CE]  	54	None	replace
472	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(peekStack[pos]);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(peekStack[pos]);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(peekStack[pos]);	  return    PEEKED_TRUE;    	non-compiled	[CE]  	21	None	replace
473	[BUG]  [BUGGY]  result  =  stackSize(peekStack[pos]);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  stackSize(peekStack[pos]);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  stackSize(peekStack[pos]);	  result    =    peekStack[pos];    	non-compiled	[CE]  	32	None	replace
474	[BUG]  [BUGGY]  result  =  stackSize(pos];  [CE]  [FE]                ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  stackSize(pos];  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  stackSize(pos];	  result    =    peekStack[pos];    	non-compiled	[CE]  	32	None	replace
475	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos,  pos);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos,  pos);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  pos,  pos);	  return    JsonStringEncoder.getInstance().encodeAsString(buffer,    0,    pos);    	non-compiled	[CE]  	64	None	replace
476	[BUG]  [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  0,  pos  +  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  return  JsonStringEncoder.getInstance().encodeAsString(buffer,  0,  pos  +  1);  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	return  JsonStringEncoder.getInstance().encodeAsString(buffer,  0,  pos  +  1);	  return    JsonStringEncoder.getInstance().encodeAsString(buffer,    0,    pos);    	non-compiled	[CE]  	64	None	replace
477	[BUG]  [BUGGY]  result  =  PEEKED_EOF  +  MIN_INCOMPLETE_INTEGER;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  PEEKED_EOF  +  MIN_INCOMPLETE_INTEGER;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  PEEKED_EOF  +  MIN_INCOMPLETE_INTEGER;	  result    =    MIN_INCOMPLETE_INTEGER    +    PEEKED_LONG;    	non-compiled	[CE]  	34	None	replace
478	[BUG]  [BUGGY]  result  =  PEEKED_NUMBER  +  MIN_INCOMPLETE_INTEGER;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  PEEKED_NUMBER  +  MIN_INCOMPLETE_INTEGER;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  PEEKED_NUMBER  +  MIN_INCOMPLETE_INTEGER;	  result    =    MIN_INCOMPLETE_INTEGER    +    PEEKED_LONG;    	non-compiled	[CE]  	34	None	replace
479	[BUG]  [BUGGY]  result  =  result  +  PEEKED_LONG;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {      [BUGGY]  result  =  result  +  PEEKED_LONG;  [BUGGY]      }  if  (!isLiteral(buffer[pos]))  {  throw  syntaxError(     "Expected  value     ");  }  checkLenient();  return  peeked  =  PEEKED_UNQUOTED;  }  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.22941573387056174	586	586	1	replace	result  =  result  +  PEEKED_LONG;	  result    =    MIN_INCOMPLETE_INTEGER    +    PEEKED_LONG;    	non-compiled	[CE]  	34	None	replace
