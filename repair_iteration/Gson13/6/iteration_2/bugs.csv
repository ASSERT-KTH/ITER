bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Negative  =  true;  [CE]  [FE]        ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  Negative  =  true;  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =  true;	  negative    =    false;    	non-compiled	[CE]  	1	None	replace
2	[BUG]  [BUGGY]  last  =  c;  [CE]  [FE]                ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  last  =  c;  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  c;	  last    =    NUMBER_CHAR_FRACTION_DIGIT;    	non-compiled	[CE]  	5	None	replace
3	[BUG]  [BUGGY]  last  =  0;  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  last  =  0;  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  0;	  last    =    NUMBER_CHAR_FRACTION_DIGIT;    	non-compiled	[CE]  	5	None	replace
4	[BUG]  [BUGGY]  last  =  PEEKED_NULL;  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  last  =  PEEKED_NULL;  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  PEEKED_NULL;	  last    =    NUMBER_CHAR_FRACTION_DIGIT;    	non-compiled	[CE]  	5	None	replace
5	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_FLOAT;  [CE]  [FE]          ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  last  =  NUMBER_CHAR_FLOAT;  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  NUMBER_CHAR_FLOAT;	  last    =    NUMBER_CHAR_SIGN;    	non-compiled	[CE]  	2	None	replace
6	[BUG]  [BUGGY]  last  =  l;  [CE]  [FE]            ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  last  =  l;  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  l;	  last    =    NUMBER_CHAR_SIGN;    	non-compiled	[CE]  	2	None	replace
7	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_SIGN  +  1;  [CE]  [FE]              ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  last  =  NUMBER_CHAR_SIGN  +  1;  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  NUMBER_CHAR_SIGN  +  1;	  last    =    NUMBER_CHAR_SIGN;    	non-compiled	[CE]  	2	None	replace
8	[BUG]  [BUGGY]  NegativeFailure.throwInternalException( " ");  [CE]  [FE]            ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  NegativeFailure.throwInternalException( " ");  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternalException( " ");	  NegativeFailure.throwInternal();    	non-compiled	[CE]  	10	None	replace
9	[BUG]  [BUGGY]  NegativeFailure.beginInternal();  [CE]  [FE]              ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  NegativeFailure.beginInternal();  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.beginInternal();	  NegativeFailure.throwInternal();    	non-compiled	[CE]  	10	None	replace
10	[BUG]  [BUGGY]  NegativeFailure.clearInternal();  [CE]  [FE]                ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  NegativeFailure.clearInternal();  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.clearInternal();	  NegativeFailure.throwInternal();    	non-compiled	[CE]  	10	None	replace
11	[BUG]  [BUGGY]  NegativeFailure.breakInternal();  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  NegativeFailure.breakInternal();  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.breakInternal();	  NegativeFailure.throwInternal();    	non-compiled	[CE]  	10	None	replace
12	[BUG]  [BUGGY]  NegativeFailure.throwInternalException();  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  NegativeFailure.throwInternalException();  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternalException();	  NegativeFailure.throwInternal();    	non-compiled	[CE]  	10	None	replace
13	[BUG]  [BUGGY]  NegativeFailure.throwInternal(p);  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  NegativeFailure.throwInternal(p);  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternal(p);	  NegativeFailure.throwInternal();    	non-compiled	[CE]  	10	None	replace
14	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_EXP_SIGN  +  1;  [CE]  [FE]            ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  last  =  NUMBER_CHAR_EXP_SIGN  +  1;  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  NUMBER_CHAR_EXP_SIGN  +  1;	  last    =    NUMBER_CHAR_EXP_SIGN;    	non-compiled	[CE]  	3	None	replace
15	[BUG]  [BUGGY]  Negative  =  null;  [CE]  [FE]              ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  Negative  =  null;  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =  null;	  Negative    =    false;    	non-compiled	[CE]  	4	None	replace
16	[BUG]  [BUGGY]  Negative  = "- ";  [CE]  [FE]                ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  Negative  = "- ";  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  = "- ";	  Negative    =    false;    	non-compiled	[CE]  	4	None	replace
17	[BUG]  [BUGGY]  Negative  :  null;  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  Negative  :  null;  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  :  null;	  Negative    =    false;    	non-compiled	[CE]  	4	None	replace
18	[BUG]  [BUGGY]  Negative  :  true;  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  Negative  :  true;  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  :  true;	  Negative    =    false;    	non-compiled	[CE]  	4	None	replace
19	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(true);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  NegativeFailure.checkNegatives(true);  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(true);	  NegativeFailure.checkNegatives(false);    	non-compiled	[CE]  	11	None	replace
20	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(false,  c);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  NegativeFailure.checkNegatives(false,  c);  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(false,  c);	  NegativeFailure.checkNegatives(false);    	non-compiled	[CE]  	11	None	replace
21	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(false,  null);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  NegativeFailure.checkNegatives(false,  null);  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(false,  null);	  NegativeFailure.checkNegatives(false);    	non-compiled	[CE]  	11	None	replace
22	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(false,  true);  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  NegativeFailure.checkNegatives(false,  true);  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(false,  true);	  NegativeFailure.checkNegatives(false);    	non-compiled	[CE]  	11	None	replace
23	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_SIGN;  continue;  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  last  =  NUMBER_CHAR_SIGN;  continue;  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  NUMBER_CHAR_SIGN;  continue;	      	non-compiled	[CE]  	7	None	replace
24	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_FALSE;  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  last  =  NUMBER_CHAR_FALSE;  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  NUMBER_CHAR_FALSE;	      	non-compiled	[CE]  	7	None	replace
25	[BUG]  [BUGGY]  last  =  buffer[pos  +  i];  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  last  =  buffer[pos  +  i];  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  buffer[pos  +  i];	      	non-compiled	[CE]  	7	None	replace
26	[BUG]  [BUGGY]  NegativeFailure.checkNegative(true,  c);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  NegativeFailure.checkNegative(true,  c);  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(true,  c);	  NegativeFailure.checkNegative(true);    	non-compiled	[CE]  	9	None	replace
27	[BUG]  [BUGGY]  NegativeFailure.checkNegative(false,  c);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  NegativeFailure.checkNegative(false,  c);  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(false,  c);	  NegativeFailure.checkNegative(true);    	non-compiled	[CE]  	9	None	replace
28	[BUG]  [BUGGY]  NegativeFailure.checkNegative(false,  false);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  NegativeFailure.checkNegative(false,  false);  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(false,  false);	  NegativeFailure.checkNegative(true);    	non-compiled	[CE]  	9	None	replace
29	[BUG]  [BUGGY]  NegativeFailure.checkNegative(false,  null);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  NegativeFailure.checkNegative(false,  null);  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(false,  null);	  NegativeFailure.checkNegative(true);    	non-compiled	[CE]  	9	None	replace
30	[BUG]  [BUGGY]  NegativeFailure.checkNegative(false,  true);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  NegativeFailure.checkNegative(false,  true);  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(false,  true);	  NegativeFailure.checkNegative(true);    	non-compiled	[CE]  	9	None	replace
31	[BUG]  [BUGGY]  NegativeFailure.checkNegative(false,  p);  [CE]  [FE]        ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  NegativeFailure.checkNegative(false,  p);  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(false,  p);	  NegativeFailure.checkNegative(false);    	non-compiled	[CE]  	8	None	replace
32	[BUG]  [BUGGY]  NegativeFailure.checkNegative(false,  pos);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  NegativeFailure.checkNegative(false,  pos);  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(false,  pos);	  NegativeFailure.checkNegative(false);    	non-compiled	[CE]  	8	None	replace
33	[BUG]  [BUGGY]  last  =  PEEKED_NONE;  [CE]  [FE]            ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  last  =  PEEKED_NONE;  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  PEEKED_NONE;	  last    =    NUMBER_CHAR_EXP_SIGN;    	non-compiled	[CE]  	3	None	replace
34	[BUG]  [BUGGY]  pos  =  buffer[pos  +  i];  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  pos  =  buffer[pos  +  i];  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	pos  =  buffer[pos  +  i];	      	non-compiled	[CE]  	7	None	replace
35	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_LONG;  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  last  =  NUMBER_CHAR_LONG;  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  NUMBER_CHAR_LONG;	      	non-compiled	[CE]  	7	None	replace
36	[BUG]  [BUGGY]  Negative.negative  =  true;  [CE]  [FE]        ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  Negative.negative  =  true;  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.negative  =  true;	  negative    =    false;    	non-compiled	[CE]  	1	None	replace
37	[BUG]  [BUGGY]  Negate  =  true;  [CE]  [FE]          ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  Negate  =  true;  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negate  =  true;	  negative    =    false;    	non-compiled	[CE]  	1	None	replace
38	[BUG]  [BUGGY]  negative  =  null;  [CE]  [FE]            ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  negative  =  null;  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	negative  =  null;	  negative    =    false;    	non-compiled	[CE]  	1	None	replace
39	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_EXP_DIGIT;  [CE]  [FE]                ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  last  =  NUMBER_CHAR_EXP_DIGIT;  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  NUMBER_CHAR_EXP_DIGIT;	  last    =    NUMBER_CHAR_FRACTION_DIGIT;    	non-compiled	[CE]  	5	None	replace
40	[BUG]  [BUGGY]  NegativeFailure.throwInternal(PEEKED_NULL);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  NegativeFailure.throwInternal(PEEKED_NULL);  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternal(PEEKED_NULL);	  NegativeFailure.throwInternal();    	non-compiled	[CE]  	10	None	replace
41	[BUG]  [BUGGY]  NegativeFailure.throwInternal(pos);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  NegativeFailure.throwInternal(pos);  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternal(pos);	  NegativeFailure.throwInternal();    	non-compiled	[CE]  	10	None	replace
42	[BUG]  [BUGGY]  NegativeFailure.resetInternal();  [CE]  [FE]                ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  NegativeFailure.resetInternal();  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.resetInternal();	  NegativeFailure.throwInternal();    	non-compiled	[CE]  	10	None	replace
43	[BUG]  [BUGGY]  NegativeFailure.throwInternal(PEEKED_NONE);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  NegativeFailure.throwInternal(PEEKED_NONE);  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternal(PEEKED_NONE);	  NegativeFailure.throwInternal();    	non-compiled	[CE]  	10	None	replace
44	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(false,  p);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  NegativeFailure.checkNegatives(false,  p);  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(false,  p);	  NegativeFailure.checkNegatives(false);    	non-compiled	[CE]  	11	None	replace
45	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(false,  buffer);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  NegativeFailure.checkNegatives(false,  buffer);  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(false,  buffer);	  NegativeFailure.checkNegatives(false);    	non-compiled	[CE]  	11	None	replace
46	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(false,  negative);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  NegativeFailure.checkNegatives(false,  negative);  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(false,  negative);	  NegativeFailure.checkNegatives(false);    	non-compiled	[CE]  	11	None	replace
47	[BUG]  [BUGGY]  Negative  = "Negative "  +  NUMBER_CHAR_EXP_SIGN;  [CE]  [FE]              ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  Negative  = "Negative "  +  NUMBER_CHAR_EXP_SIGN;  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  = "Negative "  +  NUMBER_CHAR_EXP_SIGN;	  Negative    =    false;    	non-compiled	[CE]  	4	None	replace
48	[BUG]  [BUGGY]  Negative  = "- "  +  NUMBER_CHAR_EXP_SIGN;  [CE]  [FE]                ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  Negative  = "- "  +  NUMBER_CHAR_EXP_SIGN;  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  = "- "  +  NUMBER_CHAR_EXP_SIGN;	  Negative    =    false;    	non-compiled	[CE]  	4	None	replace
49	[BUG]  [BUGGY]  Negative  = "Negative "  +  NUMBER_CHAR_SIGN;  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  Negative  = "Negative "  +  NUMBER_CHAR_SIGN;  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  = "Negative "  +  NUMBER_CHAR_SIGN;	  Negative    =    false;    	non-compiled	[CE]  	4	None	replace
50	[BUG]  [BUGGY]  Negative  = "- "  +  NUMBER_CHAR_NONE;  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  Negative  = "- "  +  NUMBER_CHAR_NONE;  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  = "- "  +  NUMBER_CHAR_NONE;	  Negative    =    false;    	non-compiled	[CE]  	4	None	replace
51	[BUG]  [BUGGY]  Negative  = "- "  +  NUMBER_CHAR_SIGN;  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  Negative  = "- "  +  NUMBER_CHAR_SIGN;  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  = "- "  +  NUMBER_CHAR_SIGN;	  Negative    =    false;    	non-compiled	[CE]  	4	None	replace
52	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_DIGIT;  [CE]  [FE]        ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  last  =  NUMBER_CHAR_DIGIT;  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  NUMBER_CHAR_DIGIT;	  last    =    NUMBER_CHAR_DECIMAL;    	non-compiled	[CE]  	12	None	replace
53	[BUG]  [BUGGY]  last  =  SHORT_NUMBER;  [CE]  [FE]          ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  last  =  SHORT_NUMBER;  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  SHORT_NUMBER;	  last    =    NUMBER_CHAR_DECIMAL;    	non-compiled	[CE]  	12	None	replace
54	[BUG]  [BUGGY]  last  =  NUMBER_SIGN;  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  last  =  NUMBER_SIGN;  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  NUMBER_SIGN;	  last    =    NUMBER_CHAR_NONE;    	non-compiled	[CE]  	6	None	replace
55	[BUG]  [BUGGY]  last  =  PEEKED_NUMBER;  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  last  =  PEEKED_NUMBER;  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  PEEKED_NUMBER;	  last    =    NUMBER_CHAR_NONE;    	non-compiled	[CE]  	6	None	replace
56	[BUG]  [BUGGY]  last  =  PEEKED_UNQUOTED;  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  last  =  PEEKED_UNQUOTED;  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  PEEKED_UNQUOTED;	  last    =    NUMBER_CHAR_NONE;    	non-compiled	[CE]  	6	None	replace
57	[BUG]  [BUGGY]  NegativeFailure.checkNegative(false,  NUMBER_CHAR_SIGN);  [CE]  [FE]        ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  NegativeFailure.checkNegative(false,  NUMBER_CHAR_SIGN);  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(false,  NUMBER_CHAR_SIGN);	  NegativeFailure.checkNegative(false);    	non-compiled	[CE]  	8	None	replace
58	[BUG]  [BUGGY]  NegativeFailure.checkNegative(false,  negative);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  NegativeFailure.checkNegative(false,  negative);  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(false,  negative);	  NegativeFailure.checkNegative(false);    	non-compiled	[CE]  	8	None	replace
59	[BUG]  [BUGGY]  NegativeFailure.checkNegative(false,  NUMBER_CHAR_EXP_SIGN);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  NegativeFailure.checkNegative(false,  NUMBER_CHAR_EXP_SIGN);  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(false,  NUMBER_CHAR_EXP_SIGN);	  NegativeFailure.checkNegative(true);    	non-compiled	[CE]  	9	None	replace
60	[BUG]  [BUGGY]  Negative.checkNegative(false);  [CE]  [FE]        ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  Negative.checkNegative(false);  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.checkNegative(false);	  negative    =    false;    	non-compiled	[CE]  	1	None	replace
61	[BUG]  [BUGGY]  Negative.checkLenient(c);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  Negative.checkLenient(c);  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.checkLenient(c);	  negative    =    false;    	non-compiled	[CE]  	1	None	replace
62	[BUG]  [BUGGY]  Negative.checkNegative(true);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  Negative.checkNegative(true);  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.checkNegative(true);	  negative    =    false;    	non-compiled	[CE]  	1	None	replace
63	[BUG]  [BUGGY]  Negative.checkNegative(c);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  Negative.checkNegative(c);  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.checkNegative(c);	  negative    =    false;    	non-compiled	[CE]  	1	None	replace
64	[BUG]  [BUGGY]  Negative  = "Negative ";  [CE]  [FE]              ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  Negative  = "Negative ";  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  = "Negative ";	  Negative    =    false;    	non-compiled	[CE]  	4	None	replace
65	[BUG]  [BUGGY]  Negative  = "Negative  value ";  [CE]  [FE]                ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  Negative  = "Negative  value ";  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  = "Negative  value ";	  Negative    =    false;    	non-compiled	[CE]  	4	None	replace
66	[BUG]  [BUGGY]  Negative  = "null ";  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  Negative  = "null ";  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  = "null ";	  Negative    =    false;    	non-compiled	[CE]  	4	None	replace
67	[BUG]  [BUGGY]  Negative  = "Non-null ";  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  Negative  = "Non-null ";  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  = "Non-null ";	  Negative    =    false;    	non-compiled	[CE]  	4	None	replace
68	[BUG]  [BUGGY]  Negative  = "Negative  type ";  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  Negative  = "Negative  type ";  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  = "Negative  type ";	  Negative    =    false;    	non-compiled	[CE]  	4	None	replace
69	[BUG]  [BUGGY]  NegativeFailure.checkNegative(true,  p);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  NegativeFailure.checkNegative(true,  p);  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(true,  p);	  NegativeFailure.checkNegative(true);    	non-compiled	[CE]  	9	None	replace
70	[BUG]  [BUGGY]  NegativeFailure.checkNegative(null);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  NegativeFailure.checkNegative(null);  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(null);	  NegativeFailure.checkNegative(true);    	non-compiled	[CE]  	9	None	replace
71	[BUG]  [BUGGY]  NegativeFailure.checkNegative(true,  pos);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  NegativeFailure.checkNegative(true,  pos);  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(true,  pos);	  NegativeFailure.checkNegative(true);    	non-compiled	[CE]  	9	None	replace
72	[BUG]  [BUGGY]  NegativeFailure.checkNegative(!lenient);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  NegativeFailure.checkNegative(!lenient);  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(!lenient);	  NegativeFailure.checkNegative(true);    	non-compiled	[CE]  	9	None	replace
73	[BUG]  [BUGGY]  NegativeFailure.break;  [CE]  [FE]            ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  NegativeFailure.break;  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.break;	  NegativeFailure.throwInternal();    	non-compiled	[CE]  	10	None	replace
74	[BUG]  [BUGGY]  NegativeFailure.releasePeek();  [CE]  [FE]              ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  NegativeFailure.releasePeek();  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.releasePeek();	  NegativeFailure.throwInternal();    	non-compiled	[CE]  	10	None	replace
75	[BUG]  [BUGGY]  NegativeFailure.initPath();  [CE]  [FE]                ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  NegativeFailure.initPath();  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.initPath();	  NegativeFailure.throwInternal();    	non-compiled	[CE]  	10	None	replace
76	[BUG]  [BUGGY]  NegativeFailure.showInternal();  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  NegativeFailure.showInternal();  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.showInternal();	  NegativeFailure.throwInternal();    	non-compiled	[CE]  	10	None	replace
77	[BUG]  [BUGGY]  NegativeFailure.checkChar(c);  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  NegativeFailure.checkChar(c);  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkChar(c);	  NegativeFailure.throwInternal();    	non-compiled	[CE]  	10	None	replace
78	[BUG]  [BUGGY]  NegativeFailure.notNull(p);  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  NegativeFailure.notNull(p);  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.notNull(p);	  NegativeFailure.throwInternal();    	non-compiled	[CE]  	10	None	replace
79	[BUG]  [BUGGY]  last  =  i;  [CE]  [FE]          ComparisonFailure    [CONTEXT]    break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {    [BUGGY]  last  =  i;  [BUGGY]    last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  i;	  last    =    NUMBER_CHAR_SIGN;    	non-compiled	[CE]  	2	None	replace
