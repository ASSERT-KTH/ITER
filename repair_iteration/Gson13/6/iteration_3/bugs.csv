bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  NegativeFailure.notEmpty(p);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.notEmpty(p);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.notEmpty(p);	  NegativeFailure.notNull(p);    	non-compiled	[CE]  	78	None	replace
2	[BUG]  [BUGGY]  NegativeFailure.notNull(last);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.notNull(last);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.notNull(last);	  NegativeFailure.notNull(p);    	non-compiled	[CE]  	78	None	replace
3	[BUG]  [BUGGY]  NegativeFailure.notNull(pos);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.notNull(pos);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.notNull(pos);	  NegativeFailure.notNull(p);    	non-compiled	[CE]  	78	None	replace
4	[BUG]  [BUGGY]  NegativeFailure.notNull(p,  pos);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.notNull(p,  pos);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.notNull(p,  pos);	  NegativeFailure.notNull(p);    	non-compiled	[CE]  	78	None	replace
5	[BUG]  [BUGGY]  NegativeFailure.notNull(l);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.notNull(l);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.notNull(l);	  NegativeFailure.notNull(p);    	non-compiled	[CE]  	78	None	replace
6	[BUG]  [BUGGY]  NegativeFailure.notEmpty(last);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.notEmpty(last);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.notEmpty(last);	  NegativeFailure.notNull(p);    	non-compiled	[CE]  	78	None	replace
7	[BUG]  [BUGGY]  Negative  = "Negative  value( ";  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  = "Negative  value( ";  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  = "Negative  value( ";	  Negative    =   "Negative    value   ";    	non-compiled	[CE]  	65	None	replace
8	[BUG]  [BUGGY]  Negative  =   "Negative  value( "  +  NUMBER_CHAR_SIGN  +   ") ";  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =   "Negative  value( "  +  NUMBER_CHAR_SIGN  +   ") ";  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =   "Negative  value( "  +  NUMBER_CHAR_SIGN  +   ") ";	  Negative    =   "Negative    value   ";    	non-compiled	[CE]  	65	None	replace
9	[BUG]  [BUGGY]  Negative  =  '-';  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =  '-';  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =  '-';	  Negative    =   "-   ";    	non-compiled	[CE]  	16	None	replace
10	[BUG]  [BUGGY]  Negative  =  new  Negative( "- ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =  new  Negative( "- ");  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =  new  Negative( "- ");	  Negative    =   "-   ";    	non-compiled	[CE]  	16	None	replace
11	[BUG]  [BUGGY]  Negative  =  lenient;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =  lenient;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =  lenient;	  Negative    =   "-   ";    	non-compiled	[CE]  	16	None	replace
12	[BUG]  [BUGGY]  NegativeFailure.checkNegative(c);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(c);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(c);	  NegativeFailure.checkNegative(!lenient);    	non-compiled	[CE]  	72	None	replace
13	[BUG]  [BUGGY]  NegativeFailure.checkNegative(!last);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(!last);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(!last);	  NegativeFailure.checkNegative(!lenient);    	non-compiled	[CE]  	72	None	replace
14	[BUG]  [BUGGY]  NegativeFailure.checkNegative(!linesInLong);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(!linesInLong);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(!linesInLong);	  NegativeFailure.checkNegative(!lenient);    	non-compiled	[CE]  	72	None	replace
15	[BUG]  [BUGGY]  NegativeFailure.checkNegative(c  ==  '+');  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(c  ==  '+');  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(c  ==  '+');	  NegativeFailure.checkNegative(!lenient);    	non-compiled	[CE]  	72	None	replace
16	[BUG]  [BUGGY]  NegativeFailure.checkNegative(!pos);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(!pos);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(!pos);	  NegativeFailure.checkNegative(!lenient);    	non-compiled	[CE]  	72	None	replace
17	[BUG]  [BUGGY]  Negative.checkLenient(last);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative.checkLenient(last);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.checkLenient(last);	  Negative.checkLenient(c);    	non-compiled	[CE]  	61	None	replace
18	[BUG]  [BUGGY]  Negative.checkLenient(p);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative.checkLenient(p);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.checkLenient(p);	  Negative.checkLenient(c);    	non-compiled	[CE]  	61	None	replace
19	[BUG]  [BUGGY]  Negative.checkLenient(c  +  1);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative.checkLenient(c  +  1);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.checkLenient(c  +  1);	  Negative.checkLenient(c);    	non-compiled	[CE]  	61	None	replace
20	[BUG]  [BUGGY]  Negative.checkLenient(last,  c);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative.checkLenient(last,  c);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.checkLenient(last,  c);	  Negative.checkLenient(c);    	non-compiled	[CE]  	61	None	replace
21	[BUG]  [BUGGY]  Negative.checkLenient(l);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative.checkLenient(l);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.checkLenient(l);	  Negative.checkLenient(c);    	non-compiled	[CE]  	61	None	replace
22	[BUG]  [BUGGY]  Negative.checkStrictly(c);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative.checkStrictly(c);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.checkStrictly(c);	  Negative.checkLenient(c);    	non-compiled	[CE]  	61	None	replace
23	[BUG]  [BUGGY]  last  =  c  +  1;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  c  +  1;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  c  +  1;	  last    =    c;    	non-compiled	[CE]  	2	None	replace
24	[BUG]  [BUGGY]  pos  =  buffer[p  +  i];  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  pos  =  buffer[p  +  i];  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	pos  =  buffer[p  +  i];	  pos    =    buffer[pos    +    i];    	non-compiled	[CE]  	34	None	replace
25	[BUG]  [BUGGY]  pos  =  buffer[pos  +  1];  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  pos  =  buffer[pos  +  1];  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	pos  =  buffer[pos  +  1];	  pos    =    buffer[pos    +    i];    	non-compiled	[CE]  	34	None	replace
26	[BUG]  [BUGGY]  pos  =  limit[pos  +  i];  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  pos  =  limit[pos  +  i];  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	pos  =  limit[pos  +  i];	  pos    =    buffer[pos    +    i];    	non-compiled	[CE]  	34	None	replace
27	[BUG]  [BUGGY]  pos  =  buffer[pos  +  2];  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  pos  =  buffer[pos  +  2];  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	pos  =  buffer[pos  +  2];	  pos    =    buffer[pos    +    i];    	non-compiled	[CE]  	34	None	replace
28	[BUG]  [BUGGY]  pos  =  buffer[pos  +  10];  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  pos  =  buffer[pos  +  10];  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	pos  =  buffer[pos  +  10];	  pos    =    buffer[pos    +    i];    	non-compiled	[CE]  	34	None	replace
29	[BUG]  [BUGGY]  pos  =  buffer[pos  +  4];  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  pos  =  buffer[pos  +  4];  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	pos  =  buffer[pos  +  4];	  pos    =    buffer[pos    +    i];    	non-compiled	[CE]  	34	None	replace
30	[BUG]  [BUGGY]  pos  =  buffer[pos  +  11];  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  pos  =  buffer[pos  +  11];  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	pos  =  buffer[pos  +  11];	  pos    =    buffer[pos    +    i];    	non-compiled	[CE]  	34	None	replace
31	[BUG]  [BUGGY]  Negative.negative  =  false;  [CE]  [FE]            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative.negative  =  false;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.negative  =  false;	  Negative.negative    =    true;    	non-compiled	[CE]  	36	None	replace
32	[BUG]  [BUGGY]  Negative.positive  =  false;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative.positive  =  false;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.positive  =  false;	  Negative.negative    =    true;    	non-compiled	[CE]  	36	None	replace
33	[BUG]  [BUGGY]  Negative.Negative  =  false;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative.Negative  =  false;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.Negative  =  false;	  Negative.negative    =    true;    	non-compiled	[CE]  	36	None	replace
34	[BUG]  [BUGGY]  Negative.negative  :  false;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative.negative  :  false;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.negative  :  false;	  Negative.negative    =    true;    	non-compiled	[CE]  	36	None	replace
35	[BUG]  [BUGGY]  Negative.negative  |=  true;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative.negative  |=  true;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.negative  |=  true;	  Negative.negative    =    true;    	non-compiled	[CE]  	36	None	replace
36	[BUG]  [BUGGY]  Negative.Negative  =  true;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative.Negative  =  true;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.Negative  =  true;	  Negative.negative    =    true;    	non-compiled	[CE]  	36	None	replace
37	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_EXP_SIGN  +  2;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  NUMBER_CHAR_EXP_SIGN  +  2;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  NUMBER_CHAR_EXP_SIGN  +  2;	  last    =    NUMBER_CHAR_EXP_SIGN    +    1;    	non-compiled	[CE]  	14	None	replace
38	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_EXP_SIGN  -  1;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  NUMBER_CHAR_EXP_SIGN  -  1;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  NUMBER_CHAR_EXP_SIGN  -  1;	  last    =    NUMBER_CHAR_EXP_SIGN    +    1;    	non-compiled	[CE]  	14	None	replace
39	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_EXP_SIGN  +  4;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  NUMBER_CHAR_EXP_SIGN  +  4;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  NUMBER_CHAR_EXP_SIGN  +  4;	  last    =    NUMBER_CHAR_EXP_SIGN    +    1;    	non-compiled	[CE]  	14	None	replace
40	[BUG]  [BUGGY]  NegativeFailure.checkNegative(true,  false);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(true,  false);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(true,  false);	  NegativeFailure.checkNegative(false,    false);    	non-compiled	[CE]  	28	None	replace
41	[BUG]  [BUGGY]  NegativeFailure.checkNegative(true,  true);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(true,  true);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(true,  true);	  NegativeFailure.checkNegative(false,    false);    	non-compiled	[CE]  	28	None	replace
42	[BUG]  [BUGGY]  NegativeFailure.checkNegative(c,  false);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(c,  false);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(c,  false);	  NegativeFailure.checkNegative(false,    false);    	non-compiled	[CE]  	28	None	replace
43	[BUG]  [BUGGY]  NegativeFailure.checkNegative(null,  false);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(null,  false);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(null,  false);	  NegativeFailure.checkNegative(false,    false);    	non-compiled	[CE]  	28	None	replace
44	[BUG]  [BUGGY]  last  =  l  +  1;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  l  +  1;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  l  +  1;	  last    =    l;    	non-compiled	[CE]  	6	None	replace
45	[BUG]  [BUGGY]  NegativeFailure.checkNegative(true,  negative);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(true,  negative);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(true,  negative);	  NegativeFailure.checkNegative(false,    negative);    	non-compiled	[CE]  	58	None	replace
46	[BUG]  [BUGGY]  NegativeFailure.checkNegative(false,  negative,  pos);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(false,  negative,  pos);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(false,  negative,  pos);	  NegativeFailure.checkNegative(false,    negative);    	non-compiled	[CE]  	58	None	replace
47	[BUG]  [BUGGY]  NegativeFailure.checkNegative(false,  lenient);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(false,  lenient);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(false,  lenient);	  NegativeFailure.checkNegative(false,    negative);    	non-compiled	[CE]  	58	None	replace
48	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(true,  negative);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegatives(true,  negative);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(true,  negative);	  NegativeFailure.checkNegatives(false,    negative);    	non-compiled	[CE]  	46	None	replace
49	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(false,  NUMBER_CHAR_SIGN);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegatives(false,  NUMBER_CHAR_SIGN);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(false,  NUMBER_CHAR_SIGN);	  NegativeFailure.checkNegatives(false,    negative);    	non-compiled	[CE]  	46	None	replace
50	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(false,  negative,  pos);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegatives(false,  negative,  pos);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(false,  negative,  pos);	  NegativeFailure.checkNegatives(false,    negative);    	non-compiled	[CE]  	46	None	replace
51	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(false,  negative,  NUMBER_CHAR_SIGN);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegatives(false,  negative,  NUMBER_CHAR_SIGN);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(false,  negative,  NUMBER_CHAR_SIGN);	  NegativeFailure.checkNegatives(false,    negative);    	non-compiled	[CE]  	46	None	replace
52	[BUG]  [BUGGY]  Negative  =  '-'  +  NUMBER_CHAR_EXP_SIGN;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =  '-'  +  NUMBER_CHAR_EXP_SIGN;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =  '-'  +  NUMBER_CHAR_EXP_SIGN;	  Negative    =   "-   "    +    NUMBER_CHAR_EXP_SIGN;    	non-compiled	[CE]  	48	None	replace
53	[BUG]  [BUGGY]  Negative  =   "- "  +  c;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =   "- "  +  c;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =   "- "  +  c;	  Negative    =   "-   "    +    NUMBER_CHAR_EXP_SIGN;    	non-compiled	[CE]  	48	None	replace
54	[BUG]  [BUGGY]  Negative  =   "- "  +  NUMBER_CHAR_FRACTION_DIGIT;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =   "- "  +  NUMBER_CHAR_FRACTION_DIGIT;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =   "- "  +  NUMBER_CHAR_FRACTION_DIGIT;	  Negative    =   "-   "    +    NUMBER_CHAR_EXP_SIGN;    	non-compiled	[CE]  	48	None	replace
55	[BUG]  [BUGGY]  Negative  =   "- "  +  NUMBER_CHAR_EXP_SIGN  +  1;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =   "- "  +  NUMBER_CHAR_EXP_SIGN  +  1;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =   "- "  +  NUMBER_CHAR_EXP_SIGN  +  1;	  Negative    =   "-   "    +    NUMBER_CHAR_EXP_SIGN;    	non-compiled	[CE]  	48	None	replace
56	[BUG]  [BUGGY]  NegativeFailure.closePeek();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.closePeek();  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.closePeek();	  NegativeFailure.releasePeek();    	non-compiled	[CE]  	74	None	replace
57	[BUG]  [BUGGY]  NegativeFailure.releasePeek(pos);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.releasePeek(pos);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.releasePeek(pos);	  NegativeFailure.releasePeek();    	non-compiled	[CE]  	74	None	replace
58	[BUG]  [BUGGY]  NegativeFailure.releasePeekSize();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.releasePeekSize();  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.releasePeekSize();	  NegativeFailure.releasePeek();    	non-compiled	[CE]  	74	None	replace
59	[BUG]  [BUGGY]  NegativeFailure.flushBuffer();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.flushBuffer();  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.flushBuffer();	  NegativeFailure.releasePeek();    	non-compiled	[CE]  	74	None	replace
60	[BUG]  [BUGGY]  NegativeFailure.releaseNumberOfPeek();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.releaseNumberOfPeek();  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.releaseNumberOfPeek();	  NegativeFailure.releasePeek();    	non-compiled	[CE]  	74	None	replace
61	[BUG]  [BUGGY]  NegativeFailure.releasePeekSize(pos);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.releasePeekSize(pos);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.releasePeekSize(pos);	  NegativeFailure.releasePeek();    	non-compiled	[CE]  	74	None	replace
62	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(true,  p);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegatives(true,  p);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(true,  p);	  NegativeFailure.checkNegatives(false,    p);    	non-compiled	[CE]  	44	None	replace
63	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(false,  p  +  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegatives(false,  p  +  1);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(false,  p  +  1);	  NegativeFailure.checkNegatives(false,    p);    	non-compiled	[CE]  	44	None	replace
64	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(false,  pos);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegatives(false,  pos);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(false,  pos);	  NegativeFailure.checkNegatives(false,    p);    	non-compiled	[CE]  	44	None	replace
65	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(false,  buffer,  p);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegatives(false,  buffer,  p);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(false,  buffer,  p);	  NegativeFailure.checkNegatives(false,    p);    	non-compiled	[CE]  	44	None	replace
66	[BUG]  [BUGGY]  NegativeFailure.throwInternal(PEEKED_EOF);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternal(PEEKED_EOF);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternal(PEEKED_EOF);	  NegativeFailure.throwInternal(PEEKED_NULL);    	non-compiled	[CE]  	40	None	replace
67	[BUG]  [BUGGY]  NegativeFailure.throwInternal(NUMBER_CHAR_SIGN);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternal(NUMBER_CHAR_SIGN);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternal(NUMBER_CHAR_SIGN);	  NegativeFailure.throwInternal(PEEKED_NULL);    	non-compiled	[CE]  	40	None	replace
68	[BUG]  [BUGGY]  NegativeFailure.throwInternal(last);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternal(last);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternal(last);	  NegativeFailure.throwInternal(PEEKED_NULL);    	non-compiled	[CE]  	40	None	replace
69	[BUG]  [BUGGY]  NegativeFailure.throwInternal(PEEKED_NUMBER);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternal(PEEKED_NUMBER);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternal(PEEKED_NUMBER);	  NegativeFailure.throwInternal(PEEKED_NULL);    	non-compiled	[CE]  	40	None	replace
70	[BUG]  [BUGGY]  NegativeFailure.throwInternal(PEEKED_NULL,  pos);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternal(PEEKED_NULL,  pos);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternal(PEEKED_NULL,  pos);	  NegativeFailure.throwInternal(PEEKED_NULL);    	non-compiled	[CE]  	40	None	replace
71	[BUG]  [BUGGY]  NegativeFailure.throwInternal(p,  NUMBER_CHAR_SIGN);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternal(p,  NUMBER_CHAR_SIGN);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternal(p,  NUMBER_CHAR_SIGN);	  NegativeFailure.throwInternal(PEEKED_NULL);    	non-compiled	[CE]  	40	None	replace
72	[BUG]  [BUGGY]  NegativeFailure.reset();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.reset();  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.reset();	  NegativeFailure.resetInternal();    	non-compiled	[CE]  	42	None	replace
73	[BUG]  [BUGGY]  NegativeFailure.setInternal(c);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.setInternal(c);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.setInternal(c);	  NegativeFailure.resetInternal();    	non-compiled	[CE]  	42	None	replace
74	[BUG]  [BUGGY]  NegativeFailure.setInternal(false);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.setInternal(false);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.setInternal(false);	  NegativeFailure.resetInternal();    	non-compiled	[CE]  	42	None	replace
75	[BUG]  [BUGGY]  NegativeFailure.initInternal();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.initInternal();  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.initInternal();	  NegativeFailure.resetInternal();    	non-compiled	[CE]  	42	None	replace
76	[BUG]  [BUGGY]  NegativeFailure.setInternal(p);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.setInternal(p);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.setInternal(p);	  NegativeFailure.resetInternal();    	non-compiled	[CE]  	42	None	replace
77	[BUG]  [BUGGY]  NegativeFailure.throwInternalException( "Number  of  char[] ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternalException( "Number  of  char[] ");  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternalException( "Number  of  char[] ");	  NegativeFailure.throwInternalException();    	non-compiled	[CE]  	12	None	replace
78	[BUG]  [BUGGY]  NegativeFailure.throwInternalException( "Number  of  char[ "  +  c  + "] ");  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternalException( "Number  of  char[ "  +  c  + "] ");  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternalException( "Number  of  char[ "  +  c  + "] ");	  NegativeFailure.throwInternalException();    	non-compiled	[CE]  	12	None	replace
79	[BUG]  [BUGGY]  NegativeFailure.throwInternalException( "Current  argument  not  allowed ");  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternalException( "Current  argument  not  allowed ");  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternalException( "Current  argument  not  allowed ");	  NegativeFailure.throwInternalException();    	non-compiled	[CE]  	12	None	replace
80	[BUG]  [BUGGY]  NegativeFailure.throwInternalException( "Number  of  character  ' "  +  c  + "'  has  side  effects. ");  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternalException( "Number  of  character  ' "  +  c  + "'  has  side  effects. ");  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternalException( "Number  of  character  ' "  +  c  + "'  has  side  effects. ");	  NegativeFailure.throwInternalException();    	non-compiled	[CE]  	12	None	replace
81	[BUG]  [BUGGY]  NegativeFailure.throwInternalException( "Current  argument  ' "  +  c);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternalException( "Current  argument  ' "  +  c);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternalException( "Current  argument  ' "  +  c);	  NegativeFailure.throwInternalException();    	non-compiled	[CE]  	12	None	replace
82	[BUG]  [BUGGY]  NegativeFailure.throwInternalException( "Current  argument  ' "  +  c  + "'  has  side  effects  and  can  not  be  reached. ");  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternalException( "Current  argument  ' "  +  c  + "'  has  side  effects  and  can  not  be  reached. ");  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternalException( "Current  argument  ' "  +  c  + "'  has  side  effects  and  can  not  be  reached. ");	  NegativeFailure.throwInternalException();    	non-compiled	[CE]  	12	None	replace
83	[BUG]  [BUGGY]  Negate  =  false;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negate  =  false;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negate  =  false;	  Negate    =    true;    	non-compiled	[CE]  	37	None	replace
84	[BUG]  [BUGGY]  Negate  if(last  ==  NUMBER_CHAR_SIGN)  {  Negate  =  true;  }  else  if(last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_SIGN;  continue;  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negate  if(last  ==  NUMBER_CHAR_SIGN)  {  Negate  =  true;  }  else  if(last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_SIGN;  continue;  }  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negate  if(last  ==  NUMBER_CHAR_SIGN)  {  Negate  =  true;  }  else  if(last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_SIGN;  continue;  }	  Negate    =    true;    	non-compiled	[CE]  	37	None	replace
85	[BUG]  [BUGGY]  Negate  if(last  ==  NUMBER_CHAR_SIGN)  {  Negate  =  true;  }  else  if(last  ==  NUMBER_CHAR_SIGN)  {  last  =  NUMBER_CHAR_SIGN;  continue;  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negate  if(last  ==  NUMBER_CHAR_SIGN)  {  Negate  =  true;  }  else  if(last  ==  NUMBER_CHAR_SIGN)  {  last  =  NUMBER_CHAR_SIGN;  continue;  }  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negate  if(last  ==  NUMBER_CHAR_SIGN)  {  Negate  =  true;  }  else  if(last  ==  NUMBER_CHAR_SIGN)  {  last  =  NUMBER_CHAR_SIGN;  continue;  }	  Negate    =    true;    	non-compiled	[CE]  	37	None	replace
86	[BUG]  [BUGGY]  Negate  if(last  ==  NUMBER_CHAR_SIGN);  else  if(last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_SIGN;  continue;  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negate  if(last  ==  NUMBER_CHAR_SIGN);  else  if(last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_SIGN;  continue;  }  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negate  if(last  ==  NUMBER_CHAR_SIGN);  else  if(last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_SIGN;  continue;  }	  Negate    =    true;    	non-compiled	[CE]  	37	None	replace
87	[BUG]  [BUGGY]  Negate  if(last  ==  NUMBER_CHAR_SIGN)  {  Negate  =  true;  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN)  {  last  =  NUMBER_CHAR_SIGN;  continue;  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negate  if(last  ==  NUMBER_CHAR_SIGN)  {  Negate  =  true;  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN)  {  last  =  NUMBER_CHAR_SIGN;  continue;  }  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negate  if(last  ==  NUMBER_CHAR_SIGN)  {  Negate  =  true;  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN)  {  last  =  NUMBER_CHAR_SIGN;  continue;  }	  Negate    =    true;    	non-compiled	[CE]  	37	None	replace
88	[BUG]  [BUGGY]  Negate  if(last  ==  NUMBER_CHAR_SIGN)  {  Negate  =  true;  }  else  if(last  ==  NUMBER_CHAR_EXP_E)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negate  if(last  ==  NUMBER_CHAR_SIGN)  {  Negate  =  true;  }  else  if(last  ==  NUMBER_CHAR_EXP_E)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negate  if(last  ==  NUMBER_CHAR_SIGN)  {  Negate  =  true;  }  else  if(last  ==  NUMBER_CHAR_EXP_E)  {  throw  new  IllegalArgumentException( " ");  }	  Negate    =    true;    	non-compiled	[CE]  	37	None	replace
89	[BUG]  [BUGGY]  Negate  if(last  ==  NUMBER_CHAR_SIGN)  {  Negate  =  true;  }  else  if(last  ==  NUMBER_CHAR_EXP_E)  {  return  PEEKED_NULL;  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negate  if(last  ==  NUMBER_CHAR_SIGN)  {  Negate  =  true;  }  else  if(last  ==  NUMBER_CHAR_EXP_E)  {  return  PEEKED_NULL;  }  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negate  if(last  ==  NUMBER_CHAR_SIGN)  {  Negate  =  true;  }  else  if(last  ==  NUMBER_CHAR_EXP_E)  {  return  PEEKED_NULL;  }	  Negate    =    true;    	non-compiled	[CE]  	37	None	replace
90	[BUG]  [BUGGY]  NegativeFailure.checkNegative(true,  NUMBER_CHAR_SIGN);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(true,  NUMBER_CHAR_SIGN);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(true,  NUMBER_CHAR_SIGN);	  NegativeFailure.checkNegative(false,    NUMBER_CHAR_SIGN);    	non-compiled	[CE]  	57	None	replace
91	[BUG]  [BUGGY]  NegativeFailure.checkNegative(false,  last);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(false,  last);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(false,  last);	  NegativeFailure.checkNegative(false,    NUMBER_CHAR_SIGN);    	non-compiled	[CE]  	57	None	replace
92	[BUG]  [BUGGY]  NegativeFailure.checkNegative(true,  NUMBER_CHAR_EXP_SIGN);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(true,  NUMBER_CHAR_EXP_SIGN);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(true,  NUMBER_CHAR_EXP_SIGN);	  NegativeFailure.checkNegative(false,    NUMBER_CHAR_SIGN);    	non-compiled	[CE]  	57	None	replace
93	[BUG]  [BUGGY]  NegativeFailure.checkNegative(false,  NUMBER_CHAR_FRACTION_DIGIT);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(false,  NUMBER_CHAR_FRACTION_DIGIT);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(false,  NUMBER_CHAR_FRACTION_DIGIT);	  NegativeFailure.checkNegative(false,    NUMBER_CHAR_SIGN);    	non-compiled	[CE]  	57	None	replace
94	[BUG]  [BUGGY]  NegativeFailure.checkNegative(false,  PEEKED_NULL);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(false,  PEEKED_NULL);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(false,  PEEKED_NULL);	  NegativeFailure.checkNegative(false,    NUMBER_CHAR_SIGN);    	non-compiled	[CE]  	57	None	replace
95	[BUG]  [BUGGY]  NegativeFailure.checkNegative(last);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(last);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(last);	  NegativeFailure.checkNegative(null);    	non-compiled	[CE]  	70	None	replace
96	[BUG]  [BUGGY]  NegativeFailure.checkNegative(p);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(p);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(p);	  NegativeFailure.checkNegative(null);    	non-compiled	[CE]  	70	None	replace
97	[BUG]  [BUGGY]  NegativeFailure.checkNegative(negative);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(negative);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(negative);	  NegativeFailure.checkNegative(null);    	non-compiled	[CE]  	70	None	replace
98	[BUG]  [BUGGY]  NegativeFailure.checkNegative(false,  pos  +  1);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(false,  pos  +  1);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(false,  pos  +  1);	  NegativeFailure.checkNegative(true,    pos);    	non-compiled	[CE]  	71	None	replace
99	[BUG]  [BUGGY]  NegativeFailure.checkNegative(true,  pos  +  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(true,  pos  +  1);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(true,  pos  +  1);	  NegativeFailure.checkNegative(true,    pos);    	non-compiled	[CE]  	71	None	replace
100	[BUG]  [BUGGY]  Negative.checkNegative(false,  c);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative.checkNegative(false,  c);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.checkNegative(false,  c);	  Negative.checkNegative(false);    	non-compiled	[CE]  	60	None	replace
101	[BUG]  [BUGGY]  Negative.checkNegative(false,  null);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative.checkNegative(false,  null);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.checkNegative(false,  null);	  Negative.checkNegative(false);    	non-compiled	[CE]  	60	None	replace
102	[BUG]  [BUGGY]  Negative.checkNegative(false,  true);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative.checkNegative(false,  true);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.checkNegative(false,  true);	  Negative.checkNegative(false);    	non-compiled	[CE]  	60	None	replace
103	[BUG]  [BUGGY]  Negative.checkNegative(false,  p);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative.checkNegative(false,  p);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.checkNegative(false,  p);	  Negative.checkNegative(false);    	non-compiled	[CE]  	60	None	replace
104	[BUG]  [BUGGY]  Negative  :  false;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  :  false;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  :  false;	  Negative    :    true;    	non-compiled	[CE]  	18	None	replace
105	[BUG]  [BUGGY]  Negative  :  FALSE;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  :  FALSE;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  :  FALSE;	  Negative    :    true;    	non-compiled	[CE]  	18	None	replace
106	[BUG]  [BUGGY]  Negative  :  negate;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  :  negate;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  :  negate;	  Negative    :    true;    	non-compiled	[CE]  	18	None	replace
107	[BUG]  [BUGGY]  Negative  :  negative;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  :  negative;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  :  negative;	  Negative    :    true;    	non-compiled	[CE]  	18	None	replace
108	[BUG]  [BUGGY]  Negate  :  false;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negate  :  false;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negate  :  false;	  Negative    :    true;    	non-compiled	[CE]  	18	None	replace
109	[BUG]  [BUGGY]  Negative  =  new  Negative( "Negative ")?  NUMBER_CHAR_SIGN  :  NUMBER_CHAR_EXP_SIGN;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =  new  Negative( "Negative ")?  NUMBER_CHAR_SIGN  :  NUMBER_CHAR_EXP_SIGN;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =  new  Negative( "Negative ")?  NUMBER_CHAR_SIGN  :  NUMBER_CHAR_EXP_SIGN;	  Negative    =   "Negative   ";    	non-compiled	[CE]  	64	None	replace
110	[BUG]  [BUGGY]  Negative  =  new  Negative( "Negative ")?  NUMBER_CHAR_SIGN  :  NUMBER_CHAR_FRACTION_DIGIT;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =  new  Negative( "Negative ")?  NUMBER_CHAR_SIGN  :  NUMBER_CHAR_FRACTION_DIGIT;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =  new  Negative( "Negative ")?  NUMBER_CHAR_SIGN  :  NUMBER_CHAR_FRACTION_DIGIT;	  Negative    =   "Negative   ";    	non-compiled	[CE]  	64	None	replace
111	[BUG]  [BUGGY]  Negative  =  new  Negative( "Negative ")?  NUMBER_CHAR_SIGN  :  NUMBER_CHAR_DECIMAL;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =  new  Negative( "Negative ")?  NUMBER_CHAR_SIGN  :  NUMBER_CHAR_DECIMAL;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =  new  Negative( "Negative ")?  NUMBER_CHAR_SIGN  :  NUMBER_CHAR_DECIMAL;	  Negative    =   "Negative   ";    	non-compiled	[CE]  	64	None	replace
112	[BUG]  [BUGGY]  NegativeFailure.begin  =  NUMBER_CHAR_SIGN;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.begin  =  NUMBER_CHAR_SIGN;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.begin  =  NUMBER_CHAR_SIGN;	  NegativeFailure.break;    	non-compiled	[CE]  	73	None	replace
113	[BUG]  [BUGGY]  NegativeFailure.setCurrentStructure(NUMBER_CHAR_SIGN);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.setCurrentStructure(NUMBER_CHAR_SIGN);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.setCurrentStructure(NUMBER_CHAR_SIGN);	  NegativeFailure.break;    	non-compiled	[CE]  	73	None	replace
114	[BUG]  [BUGGY]  NegativeFailure.this.break;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.this.break;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.this.break;	  NegativeFailure.break;    	non-compiled	[CE]  	73	None	replace
115	[BUG]  [BUGGY]  NegativeFailure.begin  =  NUMBER_CHAR_EXP_SIGN;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.begin  =  NUMBER_CHAR_EXP_SIGN;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.begin  =  NUMBER_CHAR_EXP_SIGN;	  NegativeFailure.break;    	non-compiled	[CE]  	73	None	replace
116	[BUG]  [BUGGY]  NegativeFailure.begin  =  NUMBER_CHAR_NONE;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.begin  =  NUMBER_CHAR_NONE;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.begin  =  NUMBER_CHAR_NONE;	  NegativeFailure.break;    	non-compiled	[CE]  	73	None	replace
117	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_FRACTION_DIGIT  +  1;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  NUMBER_CHAR_FRACTION_DIGIT  +  1;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  NUMBER_CHAR_FRACTION_DIGIT  +  1;	  last    =    NUMBER_CHAR_EXP_DIGIT;    	non-compiled	[CE]  	39	None	replace
118	[BUG]  [BUGGY]  Negative  =   "Negative "  +  NUMBER_CHAR_FRACTION_DIGIT;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =   "Negative "  +  NUMBER_CHAR_FRACTION_DIGIT;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =   "Negative "  +  NUMBER_CHAR_FRACTION_DIGIT;	  Negative    =   "Negative   "    +    NUMBER_CHAR_EXP_SIGN;    	non-compiled	[CE]  	47	None	replace
119	[BUG]  [BUGGY]  Negative  =   "Negative "  +  c;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =   "Negative "  +  c;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =   "Negative "  +  c;	  Negative    =   "Negative   "    +    NUMBER_CHAR_EXP_SIGN;    	non-compiled	[CE]  	47	None	replace
120	[BUG]  [BUGGY]  Negative  =   "Negative "  +  NUMBER_CHAR_EXP_SIGN  +  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =   "Negative "  +  NUMBER_CHAR_EXP_SIGN  +  1;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =   "Negative "  +  NUMBER_CHAR_EXP_SIGN  +  1;	  Negative    =   "Negative   "    +    NUMBER_CHAR_EXP_SIGN;    	non-compiled	[CE]  	47	None	replace
121	[BUG]  [BUGGY]  NegativeFailure.endInternal();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.endInternal();  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.endInternal();	  NegativeFailure.beginInternal();    	non-compiled	[CE]  	9	None	replace
122	[BUG]  [BUGGY]  NegativeFailure.finishInternal();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.finishInternal();  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.finishInternal();	  NegativeFailure.beginInternal();    	non-compiled	[CE]  	9	None	replace
123	[BUG]  [BUGGY]  NegativeFailure.detachFromInternal();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.detachFromInternal();  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.detachFromInternal();	  NegativeFailure.beginInternal();    	non-compiled	[CE]  	9	None	replace
124	[BUG]  [BUGGY]  NegativeFailure.beginInternal(pos);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.beginInternal(pos);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.beginInternal(pos);	  NegativeFailure.beginInternal();    	non-compiled	[CE]  	9	None	replace
125	[BUG]  [BUGGY]  last  =  PEEKED_EOF;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  PEEKED_EOF;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  PEEKED_EOF;	  last    =    PEEKED_NULL;    	non-compiled	[CE]  	4	None	replace
126	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_EOF;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  NUMBER_CHAR_EOF;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  NUMBER_CHAR_EOF;	  last    =    PEEKED_NULL;    	non-compiled	[CE]  	4	None	replace
127	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_NUMBER;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  NUMBER_CHAR_NUMBER;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  NUMBER_CHAR_NUMBER;	  last    =    PEEKED_NULL;    	non-compiled	[CE]  	4	None	replace
128	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_NULL;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  NUMBER_CHAR_NULL;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  NUMBER_CHAR_NULL;	  last    =    PEEKED_NULL;    	non-compiled	[CE]  	4	None	replace
129	[BUG]  [BUGGY]  NegativeFailure.throwInternal(PEEKED_NONE,  pos);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternal(PEEKED_NONE,  pos);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternal(PEEKED_NONE,  pos);	  NegativeFailure.throwInternal(PEEKED_NONE);    	non-compiled	[CE]  	43	None	replace
130	[BUG]  [BUGGY]  NegativeFailure.throwInternal(PEEKED_NONE,  c);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternal(PEEKED_NONE,  c);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternal(PEEKED_NONE,  c);	  NegativeFailure.throwInternal(PEEKED_NONE);    	non-compiled	[CE]  	43	None	replace
131	[BUG]  [BUGGY]  NegativeFailure.breakInternal(pos);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.breakInternal(pos);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.breakInternal(pos);	  NegativeFailure.breakInternal();    	non-compiled	[CE]  	11	None	replace
132	[BUG]  [BUGGY]  NegativeFailure.breakInternal(p);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.breakInternal(p);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.breakInternal(p);	  NegativeFailure.breakInternal();    	non-compiled	[CE]  	11	None	replace
133	[BUG]  [BUGGY]  NegativeFailure.breakInternal(c);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.breakInternal(c);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.breakInternal(c);	  NegativeFailure.breakInternal();    	non-compiled	[CE]  	11	None	replace
134	[BUG]  [BUGGY]  NegativeFailure.breakInternal(last);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.breakInternal(last);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.breakInternal(last);	  NegativeFailure.breakInternal();    	non-compiled	[CE]  	11	None	replace
135	[BUG]  [BUGGY]  NegativeFailure.breakNumber();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.breakNumber();  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.breakNumber();	  NegativeFailure.breakInternal();    	non-compiled	[CE]  	11	None	replace
136	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_NONE  +  1;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  NUMBER_CHAR_NONE  +  1;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  NUMBER_CHAR_NONE  +  1;	  last    =    NUMBER_CHAR_SIGN    +    1;    	non-compiled	[CE]  	7	None	replace
137	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_SIGN  +  2;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  NUMBER_CHAR_SIGN  +  2;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  NUMBER_CHAR_SIGN  +  2;	  last    =    NUMBER_CHAR_SIGN    +    1;    	non-compiled	[CE]  	7	None	replace
138	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_SIGN  -  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  NUMBER_CHAR_SIGN  -  1;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  NUMBER_CHAR_SIGN  -  1;	  last    =    NUMBER_CHAR_SIGN    +    1;    	non-compiled	[CE]  	7	None	replace
139	[BUG]  [BUGGY]  Negative  :  NUMBER_CHAR_SIGN;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  :  NUMBER_CHAR_SIGN;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  :  NUMBER_CHAR_SIGN;	  Negative    :    null;    	non-compiled	[CE]  	17	None	replace
140	[BUG]  [BUGGY]  Negative  :  PEEKED_NULL;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  :  PEEKED_NULL;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  :  PEEKED_NULL;	  Negative    :    null;    	non-compiled	[CE]  	17	None	replace
141	[BUG]  [BUGGY]  Negative  :  NUMBER_CHAR_NONE;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  :  NUMBER_CHAR_NONE;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  :  NUMBER_CHAR_NONE;	  Negative    :    null;    	non-compiled	[CE]  	17	None	replace
142	[BUG]  [BUGGY]  Negative  :  PEEKED_NONE;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  :  PEEKED_NONE;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  :  PEEKED_NONE;	  Negative    :    null;    	non-compiled	[CE]  	17	None	replace
143	[BUG]  [BUGGY]  NegativeFailure.checkChar(last);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkChar(last);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkChar(last);	  NegativeFailure.checkChar(c);    	non-compiled	[CE]  	77	None	replace
144	[BUG]  [BUGGY]  NegativeFailure.checkLong(c);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkLong(c);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkLong(c);	  NegativeFailure.checkChar(c);    	non-compiled	[CE]  	77	None	replace
145	[BUG]  [BUGGY]  NegativeFailure.checkNumber(c);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNumber(c);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNumber(c);	  NegativeFailure.checkChar(c);    	non-compiled	[CE]  	77	None	replace
146	[BUG]  [BUGGY]  NegativeFailure.checkChar(c,  pos);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkChar(c,  pos);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkChar(c,  pos);	  NegativeFailure.checkChar(c);    	non-compiled	[CE]  	77	None	replace
147	[BUG]  [BUGGY]  NegativeFailure.checkChar(c  +  1);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkChar(c  +  1);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkChar(c  +  1);	  NegativeFailure.checkChar(c);    	non-compiled	[CE]  	77	None	replace
148	[BUG]  [BUGGY]  NegativeFailure.checkSince(c);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkSince(c);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkSince(c);	  NegativeFailure.checkChar(c);    	non-compiled	[CE]  	77	None	replace
149	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_NAME;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  NUMBER_CHAR_NAME;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  NUMBER_CHAR_NAME;	  last    =    PEEKED_UNQUOTED;    	non-compiled	[CE]  	56	None	replace
150	[BUG]  [BUGGY]  last  =  SINGLE_QUOTED_NAME;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  SINGLE_QUOTED_NAME;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  SINGLE_QUOTED_NAME;	  last    =    PEEKED_UNQUOTED;    	non-compiled	[CE]  	56	None	replace
151	[BUG]  [BUGGY]  last  =  PEEKED_SINGLE_QUOTED_NAME;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  PEEKED_SINGLE_QUOTED_NAME;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  PEEKED_SINGLE_QUOTED_NAME;	  last    =    PEEKED_UNQUOTED;    	non-compiled	[CE]  	56	None	replace
152	[BUG]  [BUGGY]  last  =  PEEKED_SINGLE_QUOTED;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  PEEKED_SINGLE_QUOTED;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  PEEKED_SINGLE_QUOTED;	  last    =    PEEKED_UNQUOTED;    	non-compiled	[CE]  	56	None	replace
153	[BUG]  [BUGGY]  negative  =  PEEKED_NULL;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  negative  =  PEEKED_NULL;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	negative  =  PEEKED_NULL;	  negative    =    null;    	non-compiled	[CE]  	38	None	replace
154	[BUG]  [BUGGY]  negative  =  NUMBER_CHAR_SIGN;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  negative  =  NUMBER_CHAR_SIGN;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	negative  =  NUMBER_CHAR_SIGN;	  negative    =    null;    	non-compiled	[CE]  	38	None	replace
155	[BUG]  [BUGGY]  negative  =  '-';  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  negative  =  '-';  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	negative  =  '-';	  negative    =    null;    	non-compiled	[CE]  	38	None	replace
156	[BUG]  [BUGGY]  negative  =  c;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  negative  =  c;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	negative  =  c;	  negative    =    null;    	non-compiled	[CE]  	38	None	replace
157	[BUG]  [BUGGY]  negative  =  NUMBER_CHAR_NONE;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  negative  =  NUMBER_CHAR_NONE;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	negative  =  NUMBER_CHAR_NONE;	  negative    =    null;    	non-compiled	[CE]  	38	None	replace
158	[BUG]  [BUGGY]  NegativeFailure.initPath(pos);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.initPath(pos);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.initPath(pos);	  NegativeFailure.initPath();    	non-compiled	[CE]  	75	None	replace
159	[BUG]  [BUGGY]  NegativeFailure.initPath(p);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.initPath(p);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.initPath(p);	  NegativeFailure.initPath();    	non-compiled	[CE]  	75	None	replace
160	[BUG]  [BUGGY]  NegativeFailure.initialisePath();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.initialisePath();  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.initialisePath();	  NegativeFailure.initPath();    	non-compiled	[CE]  	75	None	replace
161	[BUG]  [BUGGY]  NegativeFailure.clearPath();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.clearPath();  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.clearPath();	  NegativeFailure.initPath();    	non-compiled	[CE]  	75	None	replace
162	[BUG]  [BUGGY]  NegativeFailure.releasePath();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.releasePath();  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.releasePath();	  NegativeFailure.initPath();    	non-compiled	[CE]  	75	None	replace
163	[BUG]  [BUGGY]  Negative  =   "Negative  type( "  +  NUMBER_CHAR_SIGN  +   ") ";  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =   "Negative  type( "  +  NUMBER_CHAR_SIGN  +   ") ";  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =   "Negative  type( "  +  NUMBER_CHAR_SIGN  +   ") ";	  Negative    =   "Negative    type   ";    	non-compiled	[CE]  	68	None	replace
164	[BUG]  [BUGGY]  Negative  =   "Negative  type( "  +  c  +   ") ";  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =   "Negative  type( "  +  c  +   ") ";  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =   "Negative  type( "  +  c  +   ") ";	  Negative    =   "Negative    type   ";    	non-compiled	[CE]  	68	None	replace
165	[BUG]  [BUGGY]  Negative  =   "Negative  type( "  +  NUMBER_CHAR_EXP_SIGN  +   ") ";  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =   "Negative  type( "  +  NUMBER_CHAR_EXP_SIGN  +   ") ";  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =   "Negative  type( "  +  NUMBER_CHAR_EXP_SIGN  +   ") ";	  Negative    =   "Negative    type   ";    	non-compiled	[CE]  	68	None	replace
166	[BUG]  [BUGGY]  NegativeFailure.checkNegative(false,  l);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(false,  l);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(false,  l);	  NegativeFailure.checkNegative(false,    pos);    	non-compiled	[CE]  	32	None	replace
167	[BUG]  [BUGGY]  NegativeFailure.checkNegative(false,  c  +  1);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(false,  c  +  1);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(false,  c  +  1);	  NegativeFailure.checkNegative(false,    c);    	non-compiled	[CE]  	27	None	replace
168	[BUG]  [BUGGY]  NegativeFailure.throwInternal(p,  pos);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternal(p,  pos);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternal(p,  pos);	  NegativeFailure.throwInternal(p);    	non-compiled	[CE]  	13	None	replace
169	[BUG]  [BUGGY]  NegativeFailure.throwInternal(p,  c);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternal(p,  c);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternal(p,  c);	  NegativeFailure.throwInternal(p);    	non-compiled	[CE]  	13	None	replace
170	[BUG]  [BUGGY]  NegativeFailure.throwInternal(p,  l);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternal(p,  l);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternal(p,  l);	  NegativeFailure.throwInternal(p);    	non-compiled	[CE]  	13	None	replace
171	[BUG]  [BUGGY]  NegativeFailure.throwInternal(c);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternal(c);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternal(c);	  NegativeFailure.throwInternal(p);    	non-compiled	[CE]  	13	None	replace
172	[BUG]  [BUGGY]  NegativeFailure.throwInternal(l,  p);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternal(l,  p);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternal(l,  p);	  NegativeFailure.throwInternal(p);    	non-compiled	[CE]  	13	None	replace
173	[BUG]  [BUGGY]  NegativeFailure.checkNegative(true,  p  +  1);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(true,  p  +  1);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(true,  p  +  1);	  NegativeFailure.checkNegative(true,    p);    	non-compiled	[CE]  	69	None	replace
174	[BUG]  [BUGGY]  NegativeFailure.checkNegative(false,  p  +  1);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(false,  p  +  1);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(false,  p  +  1);	  NegativeFailure.checkNegative(true,    p);    	non-compiled	[CE]  	69	None	replace
175	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(false,  false);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegatives(false,  false);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(false,  false);	  NegativeFailure.checkNegatives(true);    	non-compiled	[CE]  	19	None	replace
176	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(true,  c);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegatives(true,  c);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(true,  c);	  NegativeFailure.checkNegatives(false,    c);    	non-compiled	[CE]  	20	None	replace
177	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(false,  buffer,  c);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegatives(false,  buffer,  c);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(false,  buffer,  c);	  NegativeFailure.checkNegatives(false,    c);    	non-compiled	[CE]  	20	None	replace
178	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(false,  c  +  1);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegatives(false,  c  +  1);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(false,  c  +  1);	  NegativeFailure.checkNegatives(false,    c);    	non-compiled	[CE]  	20	None	replace
179	[BUG]  [BUGGY]  NegativeFailure.releaseInternal();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.releaseInternal();  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.releaseInternal();	  NegativeFailure.clearInternal();    	non-compiled	[CE]  	10	None	replace
180	[BUG]  [BUGGY]  NegativeFailure.clearInterval();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.clearInterval();  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.clearInterval();	  NegativeFailure.clearInternal();    	non-compiled	[CE]  	10	None	replace
181	[BUG]  [BUGGY]  NegativeFailure.throwInternalException( " ",  c);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternalException( " ",  c);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternalException( " ",  c);	  NegativeFailure.throwInternalException(   "   ");    	non-compiled	[CE]  	8	None	replace
182	[BUG]  [BUGGY]  NegativeFailure.throwInternalException( "Expected  NUMBER_CHAR_FRACTION_DIGIT ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternalException( "Expected  NUMBER_CHAR_FRACTION_DIGIT ");  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternalException( "Expected  NUMBER_CHAR_FRACTION_DIGIT ");	  NegativeFailure.throwInternalException(   "   ");    	non-compiled	[CE]  	8	None	replace
183	[BUG]  [BUGGY]  NegativeFailure.throwInternalException( "Expected  NUMBER_CHAR_SIGN ",  c);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternalException( "Expected  NUMBER_CHAR_SIGN ",  c);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternalException( "Expected  NUMBER_CHAR_SIGN ",  c);	  NegativeFailure.throwInternalException(   "   ");    	non-compiled	[CE]  	8	None	replace
184	[BUG]  [BUGGY]  NegativeFailure.throwInternalException( "Expected  NUMBER_CHAR_SIGN ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternalException( "Expected  NUMBER_CHAR_SIGN ");  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternalException( "Expected  NUMBER_CHAR_SIGN ");	  NegativeFailure.throwInternalException(   "   ");    	non-compiled	[CE]  	8	None	replace
185	[BUG]  [BUGGY]  NegativeFailure.throwInternalException( "Expected  NUMBER_CHAR_SIGN, ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternalException( "Expected  NUMBER_CHAR_SIGN, ");  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternalException( "Expected  NUMBER_CHAR_SIGN, ");	  NegativeFailure.throwInternalException(   "   ");    	non-compiled	[CE]  	8	None	replace
186	[BUG]  [BUGGY]  NegativeFailure.throwInternalException( "Expected  NUMBER_CHAR_FRACTION_DIGIT. ");  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternalException( "Expected  NUMBER_CHAR_FRACTION_DIGIT. ");  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternalException( "Expected  NUMBER_CHAR_FRACTION_DIGIT. ");	  NegativeFailure.throwInternalException(   "   ");    	non-compiled	[CE]  	8	None	replace
187	[BUG]  [BUGGY]  last  =  SINGLE_QUOTED_NUMBER;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  SINGLE_QUOTED_NUMBER;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  SINGLE_QUOTED_NUMBER;	  last    =    PEEKED_NONE;    	non-compiled	[CE]  	33	None	replace
188	[BUG]  [BUGGY]  Negative  if(last  ==  NUMBER_CHAR_SIGN)  {  Negative  =  true;  }  else  if(last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_SIGN;  continue;  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  if(last  ==  NUMBER_CHAR_SIGN)  {  Negative  =  true;  }  else  if(last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_SIGN;  continue;  }  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  if(last  ==  NUMBER_CHAR_SIGN)  {  Negative  =  true;  }  else  if(last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_SIGN;  continue;  }	  Negative    =    true;    	non-compiled	[CE]  	1	None	replace
189	[BUG]  [BUGGY]  Negative  if(last  ==  NUMBER_CHAR_SIGN);  else  if(last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_SIGN;  continue;  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  if(last  ==  NUMBER_CHAR_SIGN);  else  if(last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_SIGN;  continue;  }  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  if(last  ==  NUMBER_CHAR_SIGN);  else  if(last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_SIGN;  continue;  }	  Negative    =    true;    	non-compiled	[CE]  	1	None	replace
190	[BUG]  [BUGGY]  Negative  if(last  ==  NUMBER_CHAR_SIGN)  {  Negative  =  true;  }  else  if(last  ==  NUMBER_CHAR_SIGN)  {  last  =  NUMBER_CHAR_SIGN;  continue;  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  if(last  ==  NUMBER_CHAR_SIGN)  {  Negative  =  true;  }  else  if(last  ==  NUMBER_CHAR_SIGN)  {  last  =  NUMBER_CHAR_SIGN;  continue;  }  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  if(last  ==  NUMBER_CHAR_SIGN)  {  Negative  =  true;  }  else  if(last  ==  NUMBER_CHAR_SIGN)  {  last  =  NUMBER_CHAR_SIGN;  continue;  }	  Negative    =    true;    	non-compiled	[CE]  	1	None	replace
191	[BUG]  [BUGGY]  Negative  if(last  ==  NUMBER_CHAR_SIGN)  {  Negative  =  true;  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN)  {  last  =  NUMBER_CHAR_SIGN;  continue;  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  if(last  ==  NUMBER_CHAR_SIGN)  {  Negative  =  true;  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN)  {  last  =  NUMBER_CHAR_SIGN;  continue;  }  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  if(last  ==  NUMBER_CHAR_SIGN)  {  Negative  =  true;  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN)  {  last  =  NUMBER_CHAR_SIGN;  continue;  }	  Negative    =    true;    	non-compiled	[CE]  	1	None	replace
192	[BUG]  [BUGGY]  Negative  if(last  ==  NUMBER_CHAR_SIGN)  {  Negative  =  true;  }  else  if(last  ==  NUMBER_CHAR_EXP_E)  {  return  PEEKED_NULL;  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  if(last  ==  NUMBER_CHAR_SIGN)  {  Negative  =  true;  }  else  if(last  ==  NUMBER_CHAR_EXP_E)  {  return  PEEKED_NULL;  }  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  if(last  ==  NUMBER_CHAR_SIGN)  {  Negative  =  true;  }  else  if(last  ==  NUMBER_CHAR_EXP_E)  {  return  PEEKED_NULL;  }	  Negative    =    true;    	non-compiled	[CE]  	1	None	replace
193	[BUG]  [BUGGY]  Negative  if(last  ==  NUMBER_CHAR_SIGN)  {  Negative  =  true;  }  else  if(last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_FALSE;  continue;  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  if(last  ==  NUMBER_CHAR_SIGN)  {  Negative  =  true;  }  else  if(last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_FALSE;  continue;  }  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  if(last  ==  NUMBER_CHAR_SIGN)  {  Negative  =  true;  }  else  if(last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_FALSE;  continue;  }	  Negative    =    true;    	non-compiled	[CE]  	1	None	replace
194	[BUG]  [BUGGY]  last  =  buffer[p  +  i];  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  buffer[p  +  i];  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  buffer[p  +  i];	  last    =    buffer[pos    +    i];    	non-compiled	[CE]  	25	None	replace
195	[BUG]  [BUGGY]  last  =  buffer[pos  +  1];  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  buffer[pos  +  1];  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  buffer[pos  +  1];	  last    =    buffer[pos    +    i];    	non-compiled	[CE]  	25	None	replace
196	[BUG]  [BUGGY]  last  =  buffer[pos  +  i]  *  NUMBER_CHAR_SIGN;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  buffer[pos  +  i]  *  NUMBER_CHAR_SIGN;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  buffer[pos  +  i]  *  NUMBER_CHAR_SIGN;	  last    =    buffer[pos    +    i];    	non-compiled	[CE]  	25	None	replace
197	[BUG]  [BUGGY]  last  =  p[pos  +  i];  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  p[pos  +  i];  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  p[pos  +  i];	  last    =    buffer[pos    +    i];    	non-compiled	[CE]  	25	None	replace
198	[BUG]  [BUGGY]  last  =  buffer[pos  +  c];  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  buffer[pos  +  c];  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  buffer[pos  +  c];	  last    =    buffer[pos    +    i];    	non-compiled	[CE]  	25	None	replace
199	[BUG]  [BUGGY]  last  =  buffer[pos  +  2];  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  buffer[pos  +  2];  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  buffer[pos  +  2];	  last    =    buffer[pos    +    i];    	non-compiled	[CE]  	25	None	replace
200	[BUG]  [BUGGY]  NegativeFailure.checkNegative(c,  p);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(c,  p);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(c,  p);	  NegativeFailure.checkNegative(false,    p);    	non-compiled	[CE]  	31	None	replace
201	[BUG]  [BUGGY]  Negative.checkNegative(true,  c);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative.checkNegative(true,  c);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.checkNegative(true,  c);	  Negative.checkNegative(true);    	non-compiled	[CE]  	62	None	replace
202	[BUG]  [BUGGY]  Negative.checkNegative(true,  false);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative.checkNegative(true,  false);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.checkNegative(true,  false);	  Negative.checkNegative(true);    	non-compiled	[CE]  	62	None	replace
203	[BUG]  [BUGGY]  Negative.checkNegative(true,  true);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative.checkNegative(true,  true);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.checkNegative(true,  true);	  Negative.checkNegative(true);    	non-compiled	[CE]  	62	None	replace
204	[BUG]  [BUGGY]  Negative  =  new  Negative( "null ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =  new  Negative( "null ");  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =  new  Negative( "null ");	  Negative    =   "null   ";    	non-compiled	[CE]  	66	None	replace
205	[BUG]  [BUGGY]  Negative  =  new  Negative(NUMBER_CHAR_SIGN);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =  new  Negative(NUMBER_CHAR_SIGN);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =  new  Negative(NUMBER_CHAR_SIGN);	  Negative    =   "null   ";    	non-compiled	[CE]  	66	None	replace
206	[BUG]  [BUGGY]  Negative  =  new  Negative( "Null ");  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =  new  Negative( "Null ");  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =  new  Negative( "Null ");	  Negative    =   "null   ";    	non-compiled	[CE]  	66	None	replace
207	[BUG]  [BUGGY]  Negative  =   "Null ";  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =   "Null ";  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =   "Null ";	  Negative    =   "null   ";    	non-compiled	[CE]  	66	None	replace
208	[BUG]  [BUGGY]  Negative  =  '-'  +  NUMBER_CHAR_NONE;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =  '-'  +  NUMBER_CHAR_NONE;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =  '-'  +  NUMBER_CHAR_NONE;	  Negative    =   "-   "    +    NUMBER_CHAR_NONE;    	non-compiled	[CE]  	50	None	replace
209	[BUG]  [BUGGY]  Negative  =  PEEKED_NULL  +  NUMBER_CHAR_NONE;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =  PEEKED_NULL  +  NUMBER_CHAR_NONE;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =  PEEKED_NULL  +  NUMBER_CHAR_NONE;	  Negative    =   "-   "    +    NUMBER_CHAR_NONE;    	non-compiled	[CE]  	50	None	replace
210	[BUG]  [BUGGY]  Negative  =   "- "  +  PEEKED_NULL;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =   "- "  +  PEEKED_NULL;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =   "- "  +  PEEKED_NULL;	  Negative    =   "-   "    +    NUMBER_CHAR_NONE;    	non-compiled	[CE]  	50	None	replace
211	[BUG]  [BUGGY]  Negative  =  '-'  +  NUMBER_CHAR_SIGN;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =  '-'  +  NUMBER_CHAR_SIGN;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =  '-'  +  NUMBER_CHAR_SIGN;	  Negative    =   "-   "    +    NUMBER_CHAR_NONE;    	non-compiled	[CE]  	50	None	replace
212	[BUG]  [BUGGY]  NegativeFailure.checkNegative(true,  null);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(true,  null);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(true,  null);	  NegativeFailure.checkNegative(false,    null);    	non-compiled	[CE]  	29	None	replace
213	[BUG]  [BUGGY]  NegativeFailure.checkNegative(null,  null);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(null,  null);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(null,  null);	  NegativeFailure.checkNegative(false,    null);    	non-compiled	[CE]  	29	None	replace
214	[BUG]  [BUGGY]  NegativeFailure.checkNegative(c,  null);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(c,  null);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(c,  null);	  NegativeFailure.checkNegative(false,    null);    	non-compiled	[CE]  	29	None	replace
215	[BUG]  [BUGGY]  NegativeFailure.checkNegative(null,  true);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(null,  true);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(null,  true);	  NegativeFailure.checkNegative(false,    true);    	non-compiled	[CE]  	30	None	replace
216	[BUG]  [BUGGY]  NegativeFailure.checkNegative(c,  true);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(c,  true);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(c,  true);	  NegativeFailure.checkNegative(false,    true);    	non-compiled	[CE]  	30	None	replace
217	[BUG]  [BUGGY]  NegativeFailure.checkNegative(true,  c  +  1);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(true,  c  +  1);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(true,  c  +  1);	  NegativeFailure.checkNegative(true,    c);    	non-compiled	[CE]  	26	None	replace
218	[BUG]  [BUGGY]  last  =  JsonStringEncoder.getInstance().quoteAsString(c);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  JsonStringEncoder.getInstance().quoteAsString(c);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  JsonStringEncoder.getInstance().quoteAsString(c);	  last    =    0;    	non-compiled	[CE]  	3	None	replace
219	[BUG]  [BUGGY]  last  =  JsonStringEncoder.getInstance().quoteAsString(c));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  JsonStringEncoder.getInstance().quoteAsString(c));  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  JsonStringEncoder.getInstance().quoteAsString(c));	  last    =    0;    	non-compiled	[CE]  	3	None	replace
220	[BUG]  [BUGGY]  last  =  1;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  1;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  1;	  last    =    0;    	non-compiled	[CE]  	3	None	replace
221	[BUG]  [BUGGY]  Negative.checkLong(c);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative.checkLong(c);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.checkLong(c);	  Negative.checkNegative(c);    	non-compiled	[CE]  	63	None	replace
222	[BUG]  [BUGGY]  Negative.checkNegative(c  +  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative.checkNegative(c  +  1);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.checkNegative(c  +  1);	  Negative.checkNegative(c);    	non-compiled	[CE]  	63	None	replace
223	[BUG]  [BUGGY]  Negative.checkNumber(c);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative.checkNumber(c);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.checkNumber(c);	  Negative.checkNegative(c);    	non-compiled	[CE]  	63	None	replace
224	[BUG]  [BUGGY]  Negative.checkNotNull(c);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative.checkNotNull(c);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.checkNotNull(c);	  Negative.checkNegative(c);    	non-compiled	[CE]  	63	None	replace
225	[BUG]  [BUGGY]  Negative  =  PEEKED_NULL;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =  PEEKED_NULL;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =  PEEKED_NULL;	  Negative    =    null;    	non-compiled	[CE]  	15	None	replace
226	[BUG]  [BUGGY]  Negative  =  NUMBER_CHAR_SIGN;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =  NUMBER_CHAR_SIGN;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =  NUMBER_CHAR_SIGN;	  Negative    =    null;    	non-compiled	[CE]  	15	None	replace
227	[BUG]  [BUGGY]  Negative  =  NUMBER_CHAR_NONE;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =  NUMBER_CHAR_NONE;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =  NUMBER_CHAR_NONE;	  Negative    =    null;    	non-compiled	[CE]  	15	None	replace
228	[BUG]  [BUGGY]  Negative  =  PEEKED_NONE;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =  PEEKED_NONE;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =  PEEKED_NONE;	  Negative    =    null;    	non-compiled	[CE]  	15	None	replace
229	[BUG]  [BUGGY]  Negative  =  NUMBER_CHAR_NULL;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =  NUMBER_CHAR_NULL;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =  NUMBER_CHAR_NULL;	  Negative    =    null;    	non-compiled	[CE]  	15	None	replace
230	[BUG]  [BUGGY]  NegativeFailure.throwInternal(l);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternal(l);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternal(l);	  NegativeFailure.throwInternal(pos);    	non-compiled	[CE]  	41	None	replace
231	[BUG]  [BUGGY]  NegativeFailure.throwInternal(l,  pos);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternal(l,  pos);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternal(l,  pos);	  NegativeFailure.throwInternal(pos);    	non-compiled	[CE]  	41	None	replace
232	[BUG]  [BUGGY]  NegativeFailure.throwInternal(pos,  c);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternal(pos,  c);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternal(pos,  c);	  NegativeFailure.throwInternal(pos);    	non-compiled	[CE]  	41	None	replace
233	[BUG]  [BUGGY]  NegativeFailure.throwInternal(pos,  l);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternal(pos,  l);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternal(pos,  l);	  NegativeFailure.throwInternal(pos);    	non-compiled	[CE]  	41	None	replace
234	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(true,  buffer);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegatives(true,  buffer);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(true,  buffer);	  NegativeFailure.checkNegatives(false,    buffer);    	non-compiled	[CE]  	45	None	replace
235	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(false,  buffer,  pos);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegatives(false,  buffer,  pos);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(false,  buffer,  pos);	  NegativeFailure.checkNegatives(false,    buffer);    	non-compiled	[CE]  	45	None	replace
236	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(false,  buffer,  NUMBER_CHAR_SIGN);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegatives(false,  buffer,  NUMBER_CHAR_SIGN);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(false,  buffer,  NUMBER_CHAR_SIGN);	  NegativeFailure.checkNegatives(false,    buffer);    	non-compiled	[CE]  	45	None	replace
237	[BUG]  [BUGGY]  NegativeFailure.checkNegative(true,  buffer);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(true,  buffer);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(true,  buffer);	  NegativeFailure.checkNegatives(false,    buffer);    	non-compiled	[CE]  	45	None	replace
238	[BUG]  [BUGGY]  last  =  c;  continue;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  c;  continue;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  c;  continue;	  last    =    NUMBER_CHAR_SIGN;    continue;    	non-compiled	[CE]  	23	None	replace
239	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_FRACTION_DIGIT;  continue;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  NUMBER_CHAR_FRACTION_DIGIT;  continue;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  NUMBER_CHAR_FRACTION_DIGIT;  continue;	  last    =    NUMBER_CHAR_SIGN;    continue;    	non-compiled	[CE]  	23	None	replace
240	[BUG]  [BUGGY]  last  =  0;  continue;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  0;  continue;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  0;  continue;	  last    =    NUMBER_CHAR_SIGN;    continue;    	non-compiled	[CE]  	23	None	replace
241	[BUG]  [BUGGY]  last  =  l;  continue;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  l;  continue;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  l;  continue;	  last    =    NUMBER_CHAR_SIGN;    continue;    	non-compiled	[CE]  	23	None	replace
242	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  NUMBER_CHAR_EXP_SIGN;  continue;	  last    =    NUMBER_CHAR_SIGN;    continue;    	non-compiled	[CE]  	23	None	replace
243	[BUG]  [BUGGY]  Negative  =  new  Negative( "Non-null ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =  new  Negative( "Non-null ");  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =  new  Negative( "Non-null ");	  Negative    =   "Non-null   ";    	non-compiled	[CE]  	67	None	replace
244	[BUG]  [BUGGY]  Negative  =   "Non-null "  +  NUMBER_CHAR_SIGN;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =   "Non-null "  +  NUMBER_CHAR_SIGN;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =   "Non-null "  +  NUMBER_CHAR_SIGN;	  Negative    =   "Non-null   ";    	non-compiled	[CE]  	67	None	replace
245	[BUG]  [BUGGY]  Negative  =   "Non-NLS-1 ";  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =   "Non-NLS-1 ";  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =   "Non-NLS-1 ";	  Negative    =   "Non-null   ";    	non-compiled	[CE]  	67	None	replace
246	[BUG]  [BUGGY]  Negative  =   "Non-null "  +  NUMBER_CHAR_EXP_SIGN;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =   "Non-null "  +  NUMBER_CHAR_EXP_SIGN;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =   "Non-null "  +  NUMBER_CHAR_EXP_SIGN;	  Negative    =   "Non-null   ";    	non-compiled	[CE]  	67	None	replace
247	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(true,  null);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegatives(true,  null);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(true,  null);	  NegativeFailure.checkNegatives(false,    null);    	non-compiled	[CE]  	21	None	replace
248	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(true,  false);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegatives(true,  false);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(true,  false);	  NegativeFailure.checkNegatives(false,    null);    	non-compiled	[CE]  	21	None	replace
249	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(false,  PEEKED_NULL);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegatives(false,  PEEKED_NULL);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(false,  PEEKED_NULL);	  NegativeFailure.checkNegatives(false,    null);    	non-compiled	[CE]  	21	None	replace
250	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(c,  null);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegatives(c,  null);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(c,  null);	  NegativeFailure.checkNegatives(false,    null);    	non-compiled	[CE]  	21	None	replace
251	[BUG]  [BUGGY]  Negative  =   "Negative "  +  NUMBER_CHAR_FLOAT;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =   "Negative "  +  NUMBER_CHAR_FLOAT;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =   "Negative "  +  NUMBER_CHAR_FLOAT;	  Negative    =   "Negative   "    +    NUMBER_CHAR_SIGN;    	non-compiled	[CE]  	49	None	replace
252	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(true,  true);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegatives(true,  true);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(true,  true);	  NegativeFailure.checkNegatives(false,    true);    	non-compiled	[CE]  	22	None	replace
253	[BUG]  [BUGGY]  NegativeFailure.showInternal(p);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.showInternal(p);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.showInternal(p);	  NegativeFailure.showInternal();    	non-compiled	[CE]  	76	None	replace
254	[BUG]  [BUGGY]  NegativeFailure.showInternal(pos);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.showInternal(pos);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.showInternal(pos);	  NegativeFailure.showInternal();    	non-compiled	[CE]  	76	None	replace
255	[BUG]  [BUGGY]  NegativeFailure.checkInternal();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkInternal();  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkInternal();	  NegativeFailure.showInternal();    	non-compiled	[CE]  	76	None	replace
256	[BUG]  [BUGGY]  NegativeFailure.showInternal(c);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.showInternal(c);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.showInternal(c);	  NegativeFailure.showInternal();    	non-compiled	[CE]  	76	None	replace
257	[BUG]  [BUGGY]  NegativeFailure.checkNegative(false,  buffer);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(false,  buffer);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(false,  buffer);	  NegativeFailure.checkNegative(false,    pos);    	non-compiled	[CE]  	32	None	replace
258	[BUG]  [BUGGY]  NegativeFailure.checkNegative(false,  buffer[pos]);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(false,  buffer[pos]);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(false,  buffer[pos]);	  NegativeFailure.checkNegative(false,    pos);    	non-compiled	[CE]  	32	None	replace
259	[BUG]  [BUGGY]  Negative.checkNegative(last);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative.checkNegative(last);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.checkNegative(last);	  Negative.checkNegative(c);    	non-compiled	[CE]  	63	None	replace
260	[BUG]  [BUGGY]  Negative.checkNegative(p);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative.checkNegative(p);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.checkNegative(p);	  Negative.checkNegative(c);    	non-compiled	[CE]  	63	None	replace
261	[BUG]  [BUGGY]  Negative.checkNegative(negative);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative.checkNegative(negative);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.checkNegative(negative);	  Negative.checkNegative(c);    	non-compiled	[CE]  	63	None	replace
262	[BUG]  [BUGGY]  last  =  SINGLE_QUOTED;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  SINGLE_QUOTED;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  SINGLE_QUOTED;	  last    =    PEEKED_UNQUOTED;    	non-compiled	[CE]  	56	None	replace
263	[BUG]  [BUGGY]  Negative  =  Negative.NULL;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =  Negative.NULL;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =  Negative.NULL;	  Negative    =    null;    	non-compiled	[CE]  	15	None	replace
264	[BUG]  [BUGGY]  Negative  =  negative;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =  negative;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =  negative;	  Negative    =    null;    	non-compiled	[CE]  	15	None	replace
265	[BUG]  [BUGGY]  NegativeFailure.throwInternal(PEEKED_NONE,  NUMBER_CHAR_SIGN);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternal(PEEKED_NONE,  NUMBER_CHAR_SIGN);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternal(PEEKED_NONE,  NUMBER_CHAR_SIGN);	  NegativeFailure.throwInternal(PEEKED_NONE);    	non-compiled	[CE]  	43	None	replace
266	[BUG]  [BUGGY]  NegativeFailure.throwInternal(PEEKED_NULL,  NUMBER_CHAR_NONE);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternal(PEEKED_NULL,  NUMBER_CHAR_NONE);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternal(PEEKED_NULL,  NUMBER_CHAR_NONE);	  NegativeFailure.throwInternal(PEEKED_NONE);    	non-compiled	[CE]  	43	None	replace
267	[BUG]  [BUGGY]  Negative  =   "Negative  type "  +  NUMBER_CHAR_SIGN;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =   "Negative  type "  +  NUMBER_CHAR_SIGN;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =   "Negative  type "  +  NUMBER_CHAR_SIGN;	  Negative    =   "Negative    type   ";    	non-compiled	[CE]  	68	None	replace
268	[BUG]  [BUGGY]  Negative  =  new  Negative( "Negative  type ");  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =  new  Negative( "Negative  type ");  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =  new  Negative( "Negative  type ");	  Negative    =   "Negative    type   ";    	non-compiled	[CE]  	68	None	replace
269	[BUG]  [BUGGY]  Negative  =   "Negative  type "  +  c;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =   "Negative  type "  +  c;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =   "Negative  type "  +  c;	  Negative    =   "Negative    type   ";    	non-compiled	[CE]  	68	None	replace
270	[BUG]  [BUGGY]  Negative  =   "Negative  type "  +  NUMBER_CHAR_EXP_SIGN;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =   "Negative  type "  +  NUMBER_CHAR_EXP_SIGN;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =   "Negative  type "  +  NUMBER_CHAR_EXP_SIGN;	  Negative    =   "Negative    type   ";    	non-compiled	[CE]  	68	None	replace
271	[BUG]  [BUGGY]  NegativeFailure.closeInternal();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.closeInternal();  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.closeInternal();	  NegativeFailure.clearInternal();    	non-compiled	[CE]  	10	None	replace
272	[BUG]  [BUGGY]  NegativeFailure.releaseInternal(p);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.releaseInternal(p);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.releaseInternal(p);	  NegativeFailure.clearInternal();    	non-compiled	[CE]  	10	None	replace
273	[BUG]  [BUGGY]  NegativeFailure.checkNegative(false,  NUMBER_CHAR_NONE);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(false,  NUMBER_CHAR_NONE);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(false,  NUMBER_CHAR_NONE);	  NegativeFailure.checkNegative(true,    p);    	non-compiled	[CE]  	69	None	replace
274	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(null,  true);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegatives(null,  true);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(null,  true);	  NegativeFailure.checkNegatives(false,    true);    	non-compiled	[CE]  	22	None	replace
275	[BUG]  [BUGGY]  NegativeFailure.checkNegative(false,  0);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(false,  0);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(false,  0);	  NegativeFailure.checkNegative(false,    NUMBER_CHAR_EXP_SIGN);    	non-compiled	[CE]  	59	None	replace
276	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(p,  false);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegatives(p,  false);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(p,  false);	  NegativeFailure.checkNegatives(false,    p);    	non-compiled	[CE]  	44	None	replace
277	[BUG]  [BUGGY]  NegativeFailure.notNull(null);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.notNull(null);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.notNull(null);	  NegativeFailure.notNull(p);    	non-compiled	[CE]  	78	None	replace
278	[BUG]  [BUGGY]  NegativeFailure.notEmpty(pos);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.notEmpty(pos);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.notEmpty(pos);	  NegativeFailure.notNull(p);    	non-compiled	[CE]  	78	None	replace
279	[BUG]  [BUGGY]  NegativeFailure.showInternal(last);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.showInternal(last);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.showInternal(last);	  NegativeFailure.showInternal();    	non-compiled	[CE]  	76	None	replace
280	[BUG]  [BUGGY]  NegativeFailure.showInternal(pos,  NUMBER_CHAR_NONE);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.showInternal(pos,  NUMBER_CHAR_NONE);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.showInternal(pos,  NUMBER_CHAR_NONE);	  NegativeFailure.showInternal();    	non-compiled	[CE]  	76	None	replace
281	[BUG]  [BUGGY]  NegativeFailure.showInternal(PEEKED_NULL);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.showInternal(PEEKED_NULL);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.showInternal(PEEKED_NULL);	  NegativeFailure.showInternal();    	non-compiled	[CE]  	76	None	replace
282	[BUG]  [BUGGY]  NegativeFailure.showInternal(p,  NUMBER_CHAR_SIGN);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.showInternal(p,  NUMBER_CHAR_SIGN);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.showInternal(p,  NUMBER_CHAR_SIGN);	  NegativeFailure.showInternal();    	non-compiled	[CE]  	76	None	replace
283	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_SIGN  +  4;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  NUMBER_CHAR_SIGN  +  4;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  NUMBER_CHAR_SIGN  +  4;	  last    =    NUMBER_CHAR_SIGN    +    1;    	non-compiled	[CE]  	7	None	replace
284	[BUG]  [BUGGY]  NegativeFailure.throwInternalException( ", ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternalException( ", ");  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternalException( ", ");	  NegativeFailure.throwInternalException(   "   ");    	non-compiled	[CE]  	8	None	replace
285	[BUG]  [BUGGY]  NegativeFailure.throwInternalException( "? ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternalException( "? ");  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternalException( "? ");	  NegativeFailure.throwInternalException(   "   ");    	non-compiled	[CE]  	8	None	replace
286	[BUG]  [BUGGY]  NegativeFailure.throwInternalException( "PEEKED_NULL  NUMBER_CHAR_NONE ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternalException( "PEEKED_NULL  NUMBER_CHAR_NONE ");  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternalException( "PEEKED_NULL  NUMBER_CHAR_NONE ");	  NegativeFailure.throwInternalException(   "   ");    	non-compiled	[CE]  	8	None	replace
287	[BUG]  [BUGGY]  NegativeFailure.throwInternalException( "PEEKED_EOF: ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternalException( "PEEKED_EOF: ");  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternalException( "PEEKED_EOF: ");	  NegativeFailure.throwInternalException(   "   ");    	non-compiled	[CE]  	8	None	replace
288	[BUG]  [BUGGY]  NegativeFailure.throwInternalException( "PEEKED_NULL  NUMBER_CHAR_DIGIT ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternalException( "PEEKED_NULL  NUMBER_CHAR_DIGIT ");  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternalException( "PEEKED_NULL  NUMBER_CHAR_DIGIT ");	  NegativeFailure.throwInternalException(   "   ");    	non-compiled	[CE]  	8	None	replace
289	[BUG]  [BUGGY]  NegativeFailure.releasePeekSibling();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.releasePeekSibling();  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.releasePeekSibling();	  NegativeFailure.releasePeek();    	non-compiled	[CE]  	74	None	replace
290	[BUG]  [BUGGY]  NegativeFailure.releasePeekLong();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.releasePeekLong();  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.releasePeekLong();	  NegativeFailure.releasePeek();    	non-compiled	[CE]  	74	None	replace
291	[BUG]  [BUGGY]  NegativeFailure.releasePeekSiblings();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.releasePeekSiblings();  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.releasePeekSiblings();	  NegativeFailure.releasePeek();    	non-compiled	[CE]  	74	None	replace
292	[BUG]  [BUGGY]  NegativeFailure.checkNegative(negative,  c);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(negative,  c);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(negative,  c);	  NegativeFailure.checkNegative(false,    c);    	non-compiled	[CE]  	27	None	replace
293	[BUG]  [BUGGY]  NegativeFailure.checkNegative(false,  buffer[c]);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(false,  buffer[c]);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(false,  buffer[c]);	  NegativeFailure.checkNegative(false,    c);    	non-compiled	[CE]  	27	None	replace
294	[BUG]  [BUGGY]  Negative  =   "Negative "  +  NUMBER_CHAR_NONE;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =   "Negative "  +  NUMBER_CHAR_NONE;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =   "Negative "  +  NUMBER_CHAR_NONE;	  Negative    =   "Negative   "    +    NUMBER_CHAR_EXP_SIGN;    	non-compiled	[CE]  	47	None	replace
295	[BUG]  [BUGGY]  Negative  =  negative  +  NUMBER_CHAR_EXP_SIGN;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =  negative  +  NUMBER_CHAR_EXP_SIGN;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =  negative  +  NUMBER_CHAR_EXP_SIGN;	  Negative    =   "Negative   "    +    NUMBER_CHAR_EXP_SIGN;    	non-compiled	[CE]  	47	None	replace
296	[BUG]  [BUGGY]  Negative  =   "Negative "  +  PEEKED_NULL;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =   "Negative "  +  PEEKED_NULL;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =   "Negative "  +  PEEKED_NULL;	  Negative    =   "Negative   "    +    NUMBER_CHAR_EXP_SIGN;    	non-compiled	[CE]  	47	None	replace
297	[BUG]  [BUGGY]  Negative  =   "Negative "  +  PEEKED_NONE;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =   "Negative "  +  PEEKED_NONE;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =   "Negative "  +  PEEKED_NONE;	  Negative    =   "Negative   "    +    NUMBER_CHAR_EXP_SIGN;    	non-compiled	[CE]  	47	None	replace
298	[BUG]  [BUGGY]  Negative  :  NUMBER_CHAR_NULL;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  :  NUMBER_CHAR_NULL;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  :  NUMBER_CHAR_NULL;	  Negative    :    null;    	non-compiled	[CE]  	17	None	replace
299	[BUG]  [BUGGY]  Negate  &=  NUMBER_CHAR_EXP_SIGN;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negate  &=  NUMBER_CHAR_EXP_SIGN;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negate  &=  NUMBER_CHAR_EXP_SIGN;	  Negate    =    true;    	non-compiled	[CE]  	37	None	replace
300	[BUG]  [BUGGY]  Negate  &=  NUMBER_CHAR_SIGN;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negate  &=  NUMBER_CHAR_SIGN;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negate  &=  NUMBER_CHAR_SIGN;	  Negate    =    true;    	non-compiled	[CE]  	37	None	replace
301	[BUG]  [BUGGY]  Negate  &=  NUMBER_CHAR_EXP_E;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negate  &=  NUMBER_CHAR_EXP_E;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negate  &=  NUMBER_CHAR_EXP_E;	  Negate    =    true;    	non-compiled	[CE]  	37	None	replace
302	[BUG]  [BUGGY]  Negate  &=  NUMBER_CHAR_EXP_DIGIT;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negate  &=  NUMBER_CHAR_EXP_DIGIT;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negate  &=  NUMBER_CHAR_EXP_DIGIT;	  Negate    =    true;    	non-compiled	[CE]  	37	None	replace
303	[BUG]  [BUGGY]  Negate  &=  NUMBER_CHAR_DIGIT;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negate  &=  NUMBER_CHAR_DIGIT;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negate  &=  NUMBER_CHAR_DIGIT;	  Negate    =    true;    	non-compiled	[CE]  	37	None	replace
304	[BUG]  [BUGGY]  Negate  &=  NUMBER_CHAR_SIGN  <  =  1;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negate  &=  NUMBER_CHAR_SIGN  <  =  1;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negate  &=  NUMBER_CHAR_SIGN  <  =  1;	  Negate    =    true;    	non-compiled	[CE]  	37	None	replace
305	[BUG]  [BUGGY]  NegativeFailure.throwInternal(last,  p);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternal(last,  p);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternal(last,  p);	  NegativeFailure.throwInternal(p);    	non-compiled	[CE]  	13	None	replace
306	[BUG]  [BUGGY]  last  =  NUMBER_EXP_SIGN;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  NUMBER_EXP_SIGN;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  NUMBER_EXP_SIGN;	  last    =    NUMBER_SIGN;    	non-compiled	[CE]  	54	None	replace
307	[BUG]  [BUGGY]  last  =  NUMBER_NONE;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  NUMBER_NONE;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  NUMBER_NONE;	  last    =    NUMBER_SIGN;    	non-compiled	[CE]  	54	None	replace
308	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(null,  null);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegatives(null,  null);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(null,  null);	  NegativeFailure.checkNegatives(false,    null);    	non-compiled	[CE]  	21	None	replace
309	[BUG]  [BUGGY]  Negative  =  negative  +  NUMBER_CHAR_NONE;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =  negative  +  NUMBER_CHAR_NONE;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =  negative  +  NUMBER_CHAR_NONE;	  Negative    =   "-   "    +    NUMBER_CHAR_NONE;    	non-compiled	[CE]  	50	None	replace
310	[BUG]  [BUGGY]  Negative  =   "Negative  value "  +  NUMBER_CHAR_SIGN;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =   "Negative  value "  +  NUMBER_CHAR_SIGN;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =   "Negative  value "  +  NUMBER_CHAR_SIGN;	  Negative    =   "Negative    value   ";    	non-compiled	[CE]  	65	None	replace
311	[BUG]  [BUGGY]  Negative  =   "Negative  value( "  +  c  +   ") ";  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =   "Negative  value( "  +  c  +   ") ";  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =   "Negative  value( "  +  c  +   ") ";	  Negative    =   "Negative    value   ";    	non-compiled	[CE]  	65	None	replace
312	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_EXP_SIGN  +  3;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  NUMBER_CHAR_EXP_SIGN  +  3;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  NUMBER_CHAR_EXP_SIGN  +  3;	  last    =    NUMBER_CHAR_EXP_SIGN    +    1;    	non-compiled	[CE]  	14	None	replace
313	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_LONG  +  1;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  NUMBER_CHAR_LONG  +  1;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  NUMBER_CHAR_LONG  +  1;	  last    =    NUMBER_CHAR_LONG;    	non-compiled	[CE]  	35	None	replace
314	[BUG]  [BUGGY]  NegativeFailure.checkNegative(p,  false);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(p,  false);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(p,  false);	  NegativeFailure.checkNegative(false,    p);    	non-compiled	[CE]  	31	None	replace
315	[BUG]  [BUGGY]  NegativeFailure.checkNegative(null,  p);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(null,  p);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(null,  p);	  NegativeFailure.checkNegative(false,    p);    	non-compiled	[CE]  	31	None	replace
316	[BUG]  [BUGGY]  NegativeFailure.beginNumber();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.beginNumber();  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.beginNumber();	  NegativeFailure.beginInternal();    	non-compiled	[CE]  	9	None	replace
317	[BUG]  [BUGGY]  NegativeFailure.beginInternal(last);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.beginInternal(last);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.beginInternal(last);	  NegativeFailure.beginInternal();    	non-compiled	[CE]  	9	None	replace
318	[BUG]  [BUGGY]  NegativeFailure.checkNegative(negative,  null);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(negative,  null);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(negative,  null);	  NegativeFailure.checkNegative(false,    null);    	non-compiled	[CE]  	29	None	replace
319	[BUG]  [BUGGY]  NegativeFailure.checkNegative(null,  NUMBER_CHAR_SIGN);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(null,  NUMBER_CHAR_SIGN);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(null,  NUMBER_CHAR_SIGN);	  NegativeFailure.checkNegative(false,    null);    	non-compiled	[CE]  	29	None	replace
320	[BUG]  [BUGGY]  NegativeFailure.resetInterval();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.resetInterval();  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.resetInterval();	  NegativeFailure.resetInternal();    	non-compiled	[CE]  	42	None	replace
321	[BUG]  [BUGGY]  NegativeFailure.initNumber(null);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.initNumber(null);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.initNumber(null);	  NegativeFailure.resetInternal();    	non-compiled	[CE]  	42	None	replace
322	[BUG]  [BUGGY]  NegativeFailure.initPath(null);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.initPath(null);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.initPath(null);	  NegativeFailure.initPath();    	non-compiled	[CE]  	75	None	replace
323	[BUG]  [BUGGY]  NegativeFailure.initPath(path);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.initPath(path);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.initPath(path);	  NegativeFailure.initPath();    	non-compiled	[CE]  	75	None	replace
324	[BUG]  [BUGGY]  NegativeFailure.initPath(buffer,  pos);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.initPath(buffer,  pos);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.initPath(buffer,  pos);	  NegativeFailure.initPath();    	non-compiled	[CE]  	75	None	replace
325	[BUG]  [BUGGY]  NegativeFailure.appendPath(p);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.appendPath(p);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.appendPath(p);	  NegativeFailure.initPath();    	non-compiled	[CE]  	75	None	replace
326	[BUG]  [BUGGY]  Negative  =  PEEKED_NULL  +  NUMBER_CHAR_EXP_SIGN;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =  PEEKED_NULL  +  NUMBER_CHAR_EXP_SIGN;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =  PEEKED_NULL  +  NUMBER_CHAR_EXP_SIGN;	  Negative    =   "-   "    +    NUMBER_CHAR_EXP_SIGN;    	non-compiled	[CE]  	48	None	replace
327	[BUG]  [BUGGY]  NegativeFailure.checkNegative(value);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(value);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(value);	  NegativeFailure.checkNegative(null);    	non-compiled	[CE]  	70	None	replace
328	[BUG]  [BUGGY]  last  =  SHORT_SIGN;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  SHORT_SIGN;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  SHORT_SIGN;	  last    =    SHORT_NUMBER;    	non-compiled	[CE]  	53	None	replace
329	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_NONE;  continue;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  NUMBER_CHAR_NONE;  continue;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  NUMBER_CHAR_NONE;  continue;	  last    =    NUMBER_CHAR_SIGN;    continue;    	non-compiled	[CE]  	23	None	replace
330	[BUG]  [BUGGY]  last  =  PEEKED_NULL;  continue;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  PEEKED_NULL;  continue;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  PEEKED_NULL;  continue;	  last    =    NUMBER_CHAR_SIGN;    continue;    	non-compiled	[CE]  	23	None	replace
331	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_SIGN  +  1;  continue;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  NUMBER_CHAR_SIGN  +  1;  continue;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  NUMBER_CHAR_SIGN  +  1;  continue;	  last    =    NUMBER_CHAR_SIGN;    continue;    	non-compiled	[CE]  	23	None	replace
332	[BUG]  [BUGGY]  NegativeFailure.checkNegative(c,  NUMBER_CHAR_SIGN);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(c,  NUMBER_CHAR_SIGN);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(c,  NUMBER_CHAR_SIGN);	  NegativeFailure.checkNegative(false,    NUMBER_CHAR_SIGN);    	non-compiled	[CE]  	57	None	replace
333	[BUG]  [BUGGY]  Negative  =  PEEKED_NULL  +  NUMBER_CHAR_SIGN;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =  PEEKED_NULL  +  NUMBER_CHAR_SIGN;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =  PEEKED_NULL  +  NUMBER_CHAR_SIGN;	  Negative    =   "-   "    +    NUMBER_CHAR_SIGN;    	non-compiled	[CE]  	51	None	replace
334	[BUG]  [BUGGY]  Negative  =  negative  +  NUMBER_CHAR_SIGN;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =  negative  +  NUMBER_CHAR_SIGN;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =  negative  +  NUMBER_CHAR_SIGN;	  Negative    =   "-   "    +    NUMBER_CHAR_SIGN;    	non-compiled	[CE]  	51	None	replace
335	[BUG]  [BUGGY]  NegativeFailure.throwInternal(NUMBER_CHAR_NONE);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternal(NUMBER_CHAR_NONE);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternal(NUMBER_CHAR_NONE);	  NegativeFailure.throwInternal(PEEKED_NULL);    	non-compiled	[CE]  	40	None	replace
336	[BUG]  [BUGGY]  last  =  NUMBER_SINGLE_QUOTED;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  NUMBER_SINGLE_QUOTED;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  NUMBER_SINGLE_QUOTED;	  last    =    PEEKED_NUMBER;    	non-compiled	[CE]  	55	None	replace
337	[BUG]  [BUGGY]  NegativeFailure.checkNegative(negative,  true);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(negative,  true);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(negative,  true);	  NegativeFailure.checkNegative(false,    true);    	non-compiled	[CE]  	30	None	replace
338	[BUG]  [BUGGY]  Negative  = "null ".equals(c)||!lenient.equals(peekNumber);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  = "null ".equals(c)||!lenient.equals(peekNumber);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  = "null ".equals(c)||!lenient.equals(peekNumber);	  Negative    =    true;    	non-compiled	[CE]  	1	None	replace
339	[BUG]  [BUGGY]  Negative  = "null ".equals(c)||!lenient.equals(peekIndices[pos  +  i]);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  = "null ".equals(c)||!lenient.equals(peekIndices[pos  +  i]);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  = "null ".equals(c)||!lenient.equals(peekIndices[pos  +  i]);	  Negative    =    true;    	non-compiled	[CE]  	1	None	replace
340	[BUG]  [BUGGY]  Negative  = "null ".equals(c)||!lenient.equals(buffer[pos  +  i]);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  = "null ".equals(c)||!lenient.equals(buffer[pos  +  i]);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  = "null ".equals(c)||!lenient.equals(buffer[pos  +  i]);	  Negative    =    true;    	non-compiled	[CE]  	1	None	replace
341	[BUG]  [BUGGY]  Negative  = "null ".equals(c)||!lenient.equals(peekIndices[pos]);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  = "null ".equals(c)||!lenient.equals(peekIndices[pos]);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  = "null ".equals(c)||!lenient.equals(peekIndices[pos]);	  Negative    =    true;    	non-compiled	[CE]  	1	None	replace
342	[BUG]  [BUGGY]  Negative  = "null ".equals(c)||!lenient.equals(peekEdString);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  = "null ".equals(c)||!lenient.equals(peekEdString);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  = "null ".equals(c)||!lenient.equals(peekEdString);	  Negative    =    true;    	non-compiled	[CE]  	1	None	replace
343	[BUG]  [BUGGY]  Negative  = "null ".equals(c)||!lenient.equals(peekNumber[pos]);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  = "null ".equals(c)||!lenient.equals(peekNumber[pos]);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  = "null ".equals(c)||!lenient.equals(peekNumber[pos]);	  Negative    =    true;    	non-compiled	[CE]  	1	None	replace
344	[BUG]  [BUGGY]  Negative  =   "Non-null "  +  NUMBER_CHAR_DECIMAL;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =   "Non-null "  +  NUMBER_CHAR_DECIMAL;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =   "Non-null "  +  NUMBER_CHAR_DECIMAL;	  Negative    =   "Non-null   ";    	non-compiled	[CE]  	67	None	replace
345	[BUG]  [BUGGY]  NegativeFailure.checkNotNull(c);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNotNull(c);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNotNull(c);	  NegativeFailure.checkChar(c);    	non-compiled	[CE]  	77	None	replace
346	[BUG]  [BUGGY]  NegativeFailure.checkInvalid(c);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkInvalid(c);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkInvalid(c);	  NegativeFailure.checkChar(c);    	non-compiled	[CE]  	77	None	replace
347	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(false,  lenient);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegatives(false,  lenient);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(false,  lenient);	  NegativeFailure.checkNegatives(false,    negative);    	non-compiled	[CE]  	46	None	replace
348	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(negative,  NUMBER_CHAR_SIGN);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegatives(negative,  NUMBER_CHAR_SIGN);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(negative,  NUMBER_CHAR_SIGN);	  NegativeFailure.checkNegatives(false,    negative);    	non-compiled	[CE]  	46	None	replace
349	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(negative,  NUMBER_CHAR_EXP_SIGN);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegatives(negative,  NUMBER_CHAR_EXP_SIGN);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(negative,  NUMBER_CHAR_EXP_SIGN);	  NegativeFailure.checkNegatives(false,    negative);    	non-compiled	[CE]  	46	None	replace
350	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(negative,  NUMBER_CHAR_DECIMAL);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegatives(negative,  NUMBER_CHAR_DECIMAL);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(negative,  NUMBER_CHAR_DECIMAL);	  NegativeFailure.checkNegatives(false,    negative);    	non-compiled	[CE]  	46	None	replace
351	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(negative,  false);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegatives(negative,  false);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(negative,  false);	  NegativeFailure.checkNegatives(false,    negative);    	non-compiled	[CE]  	46	None	replace
352	[BUG]  [BUGGY]  Negative  =   "Negative "  +  NUMBER_CHAR_DECIMAL;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =   "Negative "  +  NUMBER_CHAR_DECIMAL;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =   "Negative "  +  NUMBER_CHAR_DECIMAL;	  Negative    =   "Negative   "    +    NUMBER_CHAR_SIGN;    	non-compiled	[CE]  	49	None	replace
353	[BUG]  [BUGGY]  Negative  =(negative)? "Negative ": "Negative ";  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =(negative)? "Negative ": "Negative ";  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =(negative)? "Negative ": "Negative ";	  Negative    =   "Negative   ";    	non-compiled	[CE]  	64	None	replace
354	[BUG]  [BUGGY]  Negative  =  new  Negative( "Negative ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =  new  Negative( "Negative ");  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =  new  Negative( "Negative ");	  Negative    =   "Negative   ";    	non-compiled	[CE]  	64	None	replace
355	[BUG]  [BUGGY]  Negative  =  new  Negative();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =  new  Negative();  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =  new  Negative();	  Negative    =   "Negative   ";    	non-compiled	[CE]  	64	None	replace
356	[BUG]  [BUGGY]  NegativeFailure.checkNegative(negative,  NUMBER_CHAR_SIGN);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(negative,  NUMBER_CHAR_SIGN);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(negative,  NUMBER_CHAR_SIGN);	  NegativeFailure.checkNegative(false,    negative);    	non-compiled	[CE]  	58	None	replace
357	[BUG]  [BUGGY]  NegativeFailure.checkNegative(negative,  NUMBER_CHAR_EXP_SIGN);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(negative,  NUMBER_CHAR_EXP_SIGN);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(negative,  NUMBER_CHAR_EXP_SIGN);	  NegativeFailure.checkNegative(false,    negative);    	non-compiled	[CE]  	58	None	replace
358	[BUG]  [BUGGY]  NegativeFailure.checkNegative(negative,  NUMBER_CHAR_DECIMAL);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(negative,  NUMBER_CHAR_DECIMAL);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(negative,  NUMBER_CHAR_DECIMAL);	  NegativeFailure.checkNegative(false,    negative);    	non-compiled	[CE]  	58	None	replace
359	[BUG]  [BUGGY]  NegativeFailure.checkNegative(negative,  NUMBER_CHAR_DIGIT);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(negative,  NUMBER_CHAR_DIGIT);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(negative,  NUMBER_CHAR_DIGIT);	  NegativeFailure.checkNegative(false,    negative);    	non-compiled	[CE]  	58	None	replace
360	[BUG]  [BUGGY]  NegativeFailure.checkNegative(negative,  NUMBER_CHAR_NONE);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(negative,  NUMBER_CHAR_NONE);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(negative,  NUMBER_CHAR_NONE);	  NegativeFailure.checkNegative(false,    negative);    	non-compiled	[CE]  	58	None	replace
361	[BUG]  [BUGGY]  NegativeFailure.throwInternalException(p);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternalException(p);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternalException(p);	  NegativeFailure.throwInternalException();    	non-compiled	[CE]  	12	None	replace
362	[BUG]  [BUGGY]  NegativeFailure.throwInternalException(pos);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternalException(pos);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternalException(pos);	  NegativeFailure.throwInternalException();    	non-compiled	[CE]  	12	None	replace
363	[BUG]  [BUGGY]  NegativeFailure.throwInternalException(PEEKED_NULL);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternalException(PEEKED_NULL);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternalException(PEEKED_NULL);	  NegativeFailure.throwInternalException();    	non-compiled	[CE]  	12	None	replace
364	[BUG]  [BUGGY]  NegativeFailure.throwInternalException(PEEKED_NULL,  c);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternalException(PEEKED_NULL,  c);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternalException(PEEKED_NULL,  c);	  NegativeFailure.throwInternalException();    	non-compiled	[CE]  	12	None	replace
365	[BUG]  [BUGGY]  NegativeFailure.throwInternalException( "Negative  FALSE ");  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternalException( "Negative  FALSE ");  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternalException( "Negative  FALSE ");	  NegativeFailure.throwInternalException();    	non-compiled	[CE]  	12	None	replace
366	[BUG]  [BUGGY]  NegativeFailure.throwInternalException(PEEKED_NONE);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternalException(PEEKED_NONE);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternalException(PEEKED_NONE);	  NegativeFailure.throwInternalException();    	non-compiled	[CE]  	12	None	replace
367	[BUG]  [BUGGY]  negative  =  0;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  negative  =  0;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	negative  =  0;	  negative    =    null;    	non-compiled	[CE]  	38	None	replace
368	[BUG]  [BUGGY]  negative  =  NUMBER_CHAR_NULL;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  negative  =  NUMBER_CHAR_NULL;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	negative  =  NUMBER_CHAR_NULL;	  negative    =    null;    	non-compiled	[CE]  	38	None	replace
369	[BUG]  [BUGGY]  NegativeFailure.checkNegative(null,  c);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(null,  c);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(null,  c);	  NegativeFailure.checkNegative(true,    c);    	non-compiled	[CE]  	26	None	replace
370	[BUG]  [BUGGY]  NegativeFailure.checkNegative(true,  c  ==  NUMBER_CHAR_SIGN);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(true,  c  ==  NUMBER_CHAR_SIGN);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(true,  c  ==  NUMBER_CHAR_SIGN);	  NegativeFailure.checkNegative(true,    c);    	non-compiled	[CE]  	26	None	replace
371	[BUG]  [BUGGY]  Negative  :  NUMBER_CHAR_EXP_SIGN;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  :  NUMBER_CHAR_EXP_SIGN;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  :  NUMBER_CHAR_EXP_SIGN;	  Negative    :    true;    	non-compiled	[CE]  	18	None	replace
372	[BUG]  [BUGGY]  Negative  :  NUMBER_CHAR_EXP_E;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  :  NUMBER_CHAR_EXP_E;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  :  NUMBER_CHAR_EXP_E;	  Negative    :    true;    	non-compiled	[CE]  	18	None	replace
373	[BUG]  [BUGGY]  Negative  :  NUMBER_CHAR_EXP_NONE;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  :  NUMBER_CHAR_EXP_NONE;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  :  NUMBER_CHAR_EXP_NONE;	  Negative    :    true;    	non-compiled	[CE]  	18	None	replace
374	[BUG]  [BUGGY]  last  =  buffer[pos  +  i]  *  NUMBER_CHAR_EXP_SIGN;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  buffer[pos  +  i]  *  NUMBER_CHAR_EXP_SIGN;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  buffer[pos  +  i]  *  NUMBER_CHAR_EXP_SIGN;	  last    =    buffer[pos    +    i];    	non-compiled	[CE]  	25	None	replace
375	[BUG]  [BUGGY]  last  =  buffer[pos  +  i]  +  1;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  buffer[pos  +  i]  +  1;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  buffer[pos  +  i]  +  1;	  last    =    buffer[pos    +    i];    	non-compiled	[CE]  	25	None	replace
376	[BUG]  [BUGGY]  NegativeFailure.throwInternal(pos,  buffer);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternal(pos,  buffer);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternal(pos,  buffer);	  NegativeFailure.throwInternal(pos);    	non-compiled	[CE]  	41	None	replace
377	[BUG]  [BUGGY]  NegativeFailure.breakInternal(0);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.breakInternal(0);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.breakInternal(0);	  NegativeFailure.breakInternal();    	non-compiled	[CE]  	11	None	replace
378	[BUG]  [BUGGY]  NegativeFailure.breakInternal(l);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.breakInternal(l);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.breakInternal(l);	  NegativeFailure.breakInternal();    	non-compiled	[CE]  	11	None	replace
379	[BUG]  [BUGGY]  Negative  =(negative? "null "  :  negative);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =(negative? "null "  :  negative);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =(negative? "null "  :  negative);	  Negative    =   "null   ";    	non-compiled	[CE]  	66	None	replace
380	[BUG]  [BUGGY]  Negative  =(negative)? "null ";  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =(negative)? "null ";  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =(negative)? "null ";	  Negative    =   "null   ";    	non-compiled	[CE]  	66	None	replace
381	[BUG]  [BUGGY]  NegativeFailure.break  =  NUMBER_CHAR_SIGN;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.break  =  NUMBER_CHAR_SIGN;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.break  =  NUMBER_CHAR_SIGN;	  NegativeFailure.break;    	non-compiled	[CE]  	73	None	replace
382	[BUG]  [BUGGY]  NegativeFailure.break  =  NUMBER_CHAR_NONE;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.break  =  NUMBER_CHAR_NONE;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.break  =  NUMBER_CHAR_NONE;	  NegativeFailure.break;    	non-compiled	[CE]  	73	None	replace
383	[BUG]  [BUGGY]  NegativeFailure.begin();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.begin();  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.begin();	  NegativeFailure.break;    	non-compiled	[CE]  	73	None	replace
384	[BUG]  [BUGGY]  NegativeFailure.break  =  NUMBER_CHAR_EXP_SIGN;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.break  =  NUMBER_CHAR_EXP_SIGN;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.break  =  NUMBER_CHAR_EXP_SIGN;	  NegativeFailure.break;    	non-compiled	[CE]  	73	None	replace
385	[BUG]  [BUGGY]  NegativeFailure.throwException( " ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwException( " ");  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwException( " ");	  NegativeFailure.break;    	non-compiled	[CE]  	73	None	replace
386	[BUG]  [BUGGY]  Negative.negative  =  null;  [CE]  [FE]            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative.negative  =  null;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.negative  =  null;	  Negative.negative    =    true;    	non-compiled	[CE]  	36	None	replace
387	[BUG]  [BUGGY]  NegativeFailure.checkNegative(c  ==  '-');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(c  ==  '-');  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(c  ==  '-');	  NegativeFailure.checkNegative(!lenient);    	non-compiled	[CE]  	72	None	replace
388	[BUG]  [BUGGY]  NegativeFailure.checkNegative(!negative);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(!negative);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(!negative);	  NegativeFailure.checkNegative(!lenient);    	non-compiled	[CE]  	72	None	replace
389	[BUG]  [BUGGY]  Negative  =  new  Negative( "Negative "  +  NUMBER_CHAR_EXP_SIGN);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =  new  Negative( "Negative "  +  NUMBER_CHAR_EXP_SIGN);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =  new  Negative( "Negative "  +  NUMBER_CHAR_EXP_SIGN);	  Negative    =   "Negative   "    +    NUMBER_CHAR_EXP_SIGN;    	non-compiled	[CE]  	47	None	replace
390	[BUG]  [BUGGY]  Negative  =   "Negative "  +  NUMBER_CHAR_EXP_DIGIT;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =   "Negative "  +  NUMBER_CHAR_EXP_DIGIT;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =   "Negative "  +  NUMBER_CHAR_EXP_DIGIT;	  Negative    =   "Negative   "    +    NUMBER_CHAR_EXP_SIGN;    	non-compiled	[CE]  	47	None	replace
391	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(c,  p);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegatives(c,  p);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(c,  p);	  NegativeFailure.checkNegatives(false,    p);    	non-compiled	[CE]  	44	None	replace
392	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(false,  p  +  1,  c);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegatives(false,  p  +  1,  c);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(false,  p  +  1,  c);	  NegativeFailure.checkNegatives(false,    p);    	non-compiled	[CE]  	44	None	replace
393	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_SIGN[pos  +  i];  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  NUMBER_CHAR_SIGN[pos  +  i];  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  NUMBER_CHAR_SIGN[pos  +  i];	  last    =    buffer[pos    +    i];    	non-compiled	[CE]  	25	None	replace
394	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_SIGN[p  +  i];  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  NUMBER_CHAR_SIGN[p  +  i];  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  NUMBER_CHAR_SIGN[p  +  i];	  last    =    buffer[pos    +    i];    	non-compiled	[CE]  	25	None	replace
395	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_SEXP_SIGN;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  NUMBER_CHAR_SEXP_SIGN;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  NUMBER_CHAR_SEXP_SIGN;	  last    =    l;    	non-compiled	[CE]  	6	None	replace
396	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(false,  buffer,  NUMBER_CHAR_EXP_SIGN);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegatives(false,  buffer,  NUMBER_CHAR_EXP_SIGN);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(false,  buffer,  NUMBER_CHAR_EXP_SIGN);	  NegativeFailure.checkNegatives(false,    buffer);    	non-compiled	[CE]  	45	None	replace
397	[BUG]  [BUGGY]  Negative  :  buffer[pos  +  i];  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  :  buffer[pos  +  i];  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  :  buffer[pos  +  i];	  Negative    :    null;    	non-compiled	[CE]  	17	None	replace
398	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(c,  false);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegatives(c,  false);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(c,  false);	  NegativeFailure.checkNegatives(false,    c);    	non-compiled	[CE]  	20	None	replace
399	[BUG]  [BUGGY]  last  =  pos  +  1;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  pos  +  1;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  pos  +  1;	  last    =    NUMBER_CHAR_SIGN    +    1;    	non-compiled	[CE]  	7	None	replace
400	[BUG]  [BUGGY]  NegativeFailure.checkInternal(c);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkInternal(c);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkInternal(c);	  NegativeFailure.clearInternal();    	non-compiled	[CE]  	10	None	replace
401	[BUG]  [BUGGY]  NegativeFailure.checkNegative(true,  last);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(true,  last);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(true,  last);	  NegativeFailure.checkNegative(false,    NUMBER_CHAR_EXP_SIGN);    	non-compiled	[CE]  	59	None	replace
402	[BUG]  [BUGGY]  NegativeFailure.checkNegative(true,  NUMBER_CHAR_ESIGN);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(true,  NUMBER_CHAR_ESIGN);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(true,  NUMBER_CHAR_ESIGN);	  NegativeFailure.checkNegative(false,    NUMBER_CHAR_EXP_SIGN);    	non-compiled	[CE]  	59	None	replace
403	[BUG]  [BUGGY]  Negative  =(negative)? "null "  :  negative;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =(negative)? "null "  :  negative;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =(negative)? "null "  :  negative;	  Negative    =   "null   ";    	non-compiled	[CE]  	66	None	replace
404	[BUG]  [BUGGY]  NegativeFailure.throwInternal(PEEKED_SINGLE_QUOTED);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternal(PEEKED_SINGLE_QUOTED);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternal(PEEKED_SINGLE_QUOTED);	  NegativeFailure.throwInternal(PEEKED_NONE);    	non-compiled	[CE]  	43	None	replace
405	[BUG]  [BUGGY]  NegativeFailure.throwInternal(PEEKED_NONE,  p);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternal(PEEKED_NONE,  p);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternal(PEEKED_NONE,  p);	  NegativeFailure.throwInternal(PEEKED_NONE);    	non-compiled	[CE]  	43	None	replace
406	[BUG]  [BUGGY]  last  =  p;  continue;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  p;  continue;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  p;  continue;	  last    =    NUMBER_CHAR_SIGN;    continue;    	non-compiled	[CE]  	23	None	replace
407	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_EXP_SIGN  /  1;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  NUMBER_CHAR_EXP_SIGN  /  1;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  NUMBER_CHAR_EXP_SIGN  /  1;	  last    =    NUMBER_CHAR_EXP_SIGN    +    1;    	non-compiled	[CE]  	14	None	replace
408	[BUG]  [BUGGY]  NegativeFailure.checkNegative(true,  c!=  NUMBER_CHAR_SIGN);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(true,  c!=  NUMBER_CHAR_SIGN);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(true,  c!=  NUMBER_CHAR_SIGN);	  NegativeFailure.checkNegative(true,    c);    	non-compiled	[CE]  	26	None	replace
409	[BUG]  [BUGGY]  NegativeFailure.checkNegative(true,  c  ==  NUMBER_CHAR_EXP_SIGN);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(true,  c  ==  NUMBER_CHAR_EXP_SIGN);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(true,  c  ==  NUMBER_CHAR_EXP_SIGN);	  NegativeFailure.checkNegative(true,    c);    	non-compiled	[CE]  	26	None	replace
410	[BUG]  [BUGGY]  NegativeFailure.checkNegative(last,  c);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(last,  c);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(last,  c);	  NegativeFailure.checkNegative(true,    c);    	non-compiled	[CE]  	26	None	replace
411	[BUG]  [BUGGY]  NegativeFailure.initPath(last);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.initPath(last);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.initPath(last);	  NegativeFailure.initPath();    	non-compiled	[CE]  	75	None	replace
412	[BUG]  [BUGGY]  NegativeFailure.checkNegative(true,  NUMBER_CHAR_FRACTION_DIGIT);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(true,  NUMBER_CHAR_FRACTION_DIGIT);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(true,  NUMBER_CHAR_FRACTION_DIGIT);	  NegativeFailure.checkNegative(false,    NUMBER_CHAR_SIGN);    	non-compiled	[CE]  	57	None	replace
413	[BUG]  [BUGGY]  Negative.checkInvalid(c);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative.checkInvalid(c);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.checkInvalid(c);	  Negative.checkLenient(c);    	non-compiled	[CE]  	61	None	replace
414	[BUG]  [BUGGY]  Negative  =(NUMBER_CHAR_EXP_SIGN  ==  NUMBER_CHAR_DECIMAL)?   "Non-null "  : "Non-null ";  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =(NUMBER_CHAR_EXP_SIGN  ==  NUMBER_CHAR_DECIMAL)?   "Non-null "  : "Non-null ";  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =(NUMBER_CHAR_EXP_SIGN  ==  NUMBER_CHAR_DECIMAL)?   "Non-null "  : "Non-null ";	  Negative    =   "Non-null   ";    	non-compiled	[CE]  	67	None	replace
415	[BUG]  [BUGGY]  Negative  =(NUMBER_CHAR_EXP_SIGN  ==  NUMBER_CHAR_DECIMAL)?  null  : "Non-null ";  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =(NUMBER_CHAR_EXP_SIGN  ==  NUMBER_CHAR_DECIMAL)?  null  : "Non-null ";  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =(NUMBER_CHAR_EXP_SIGN  ==  NUMBER_CHAR_DECIMAL)?  null  : "Non-null ";	  Negative    =   "Non-null   ";    	non-compiled	[CE]  	67	None	replace
416	[BUG]  [BUGGY]  Negative  =(NUMBER_CHAR_EXP_SIGN  >  0)?   "Non-null "  :  NUMBER_CHAR_DECIMAL;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =(NUMBER_CHAR_EXP_SIGN  >  0)?   "Non-null "  :  NUMBER_CHAR_DECIMAL;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =(NUMBER_CHAR_EXP_SIGN  >  0)?   "Non-null "  :  NUMBER_CHAR_DECIMAL;	  Negative    =   "Non-null   ";    	non-compiled	[CE]  	67	None	replace
417	[BUG]  [BUGGY]  Negative  =(NUMBER_CHAR_EXP_SIGN  ==  NUMBER_CHAR_DECIMAL)?  -1  :  1;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =(NUMBER_CHAR_EXP_SIGN  ==  NUMBER_CHAR_DECIMAL)?  -1  :  1;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =(NUMBER_CHAR_EXP_SIGN  ==  NUMBER_CHAR_DECIMAL)?  -1  :  1;	  Negative    =   "Non-null   ";    	non-compiled	[CE]  	67	None	replace
418	[BUG]  [BUGGY]  last  =  EOF;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  EOF;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  EOF;	  last    =    PEEKED_NONE;    	non-compiled	[CE]  	33	None	replace
419	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(c,  true);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegatives(c,  true);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(c,  true);	  NegativeFailure.checkNegatives(false,    true);    	non-compiled	[CE]  	22	None	replace
420	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(false, "true ");  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegatives(false, "true ");  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(false, "true ");	  NegativeFailure.checkNegatives(false,    true);    	non-compiled	[CE]  	22	None	replace
421	[BUG]  [BUGGY]  NegativeFailure.checkNegative(p,  pos);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(p,  pos);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(p,  pos);	  NegativeFailure.checkNegative(false,    pos);    	non-compiled	[CE]  	32	None	replace
422	[BUG]  [BUGGY]  NegativeFailure.checkNegative(negative,  pos);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(negative,  pos);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(negative,  pos);	  NegativeFailure.checkNegative(false,    pos);    	non-compiled	[CE]  	32	None	replace
423	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(negative,  null);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegatives(negative,  null);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(negative,  null);	  NegativeFailure.checkNegatives(false,    negative);    	non-compiled	[CE]  	46	None	replace
424	[BUG]  [BUGGY]  NegativeFailure.checkNegatives(negative,  NUMBER_CHAR_EXP_DIGIT);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegatives(negative,  NUMBER_CHAR_EXP_DIGIT);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegatives(negative,  NUMBER_CHAR_EXP_DIGIT);	  NegativeFailure.checkNegatives(false,    negative);    	non-compiled	[CE]  	46	None	replace
425	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_EXP_DIGIT  +  1;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  last  =  NUMBER_CHAR_EXP_DIGIT  +  1;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	last  =  NUMBER_CHAR_EXP_DIGIT  +  1;	  last    =    NUMBER_CHAR_EXP_DIGIT;    	non-compiled	[CE]  	39	None	replace
426	[BUG]  [BUGGY]  Negative  =(negative? "Negative "  : "Negative ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =(negative? "Negative "  : "Negative ");  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =(negative? "Negative "  : "Negative ");	  Negative    =   "Negative   ";    	non-compiled	[CE]  	64	None	replace
427	[BUG]  [BUGGY]  Negate  if(last  ==  NUMBER_CHAR_SIGN)  {  Negate  =  true;  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negate  if(last  ==  NUMBER_CHAR_SIGN)  {  Negate  =  true;  }  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negate  if(last  ==  NUMBER_CHAR_SIGN)  {  Negate  =  true;  }	  Negate    =    true;    	non-compiled	[CE]  	37	None	replace
428	[BUG]  [BUGGY]  Negate  if(last  ==  NUMBER_CHAR_EXP_SIGN)  {  Negate  =  true;  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negate  if(last  ==  NUMBER_CHAR_EXP_SIGN)  {  Negate  =  true;  }  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negate  if(last  ==  NUMBER_CHAR_EXP_SIGN)  {  Negate  =  true;  }	  Negate    =    true;    	non-compiled	[CE]  	37	None	replace
429	[BUG]  [BUGGY]  Negate  if(last  ==  NUMBER_CHAR_NONE)  {  last  =  NUMBER_CHAR_SIGN;  continue;  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negate  if(last  ==  NUMBER_CHAR_NONE)  {  last  =  NUMBER_CHAR_SIGN;  continue;  }  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negate  if(last  ==  NUMBER_CHAR_NONE)  {  last  =  NUMBER_CHAR_SIGN;  continue;  }	  Negate    =    true;    	non-compiled	[CE]  	37	None	replace
430	[BUG]  [BUGGY]  Negate  if(last  ==  NUMBER_CHAR_NONE)  {  Negate  =  true;  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negate  if(last  ==  NUMBER_CHAR_NONE)  {  Negate  =  true;  }  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negate  if(last  ==  NUMBER_CHAR_NONE)  {  Negate  =  true;  }	  Negate    =    true;    	non-compiled	[CE]  	37	None	replace
431	[BUG]  [BUGGY]  Negate  if(last  ==  NUMBER_CHAR_EXP_DIGIT)  {  Negate  =  true;  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negate  if(last  ==  NUMBER_CHAR_EXP_DIGIT)  {  Negate  =  true;  }  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negate  if(last  ==  NUMBER_CHAR_EXP_DIGIT)  {  Negate  =  true;  }	  Negate    =    true;    	non-compiled	[CE]  	37	None	replace
432	[BUG]  [BUGGY]  Negate  if(last  ==  NUMBER_CHAR_NONE)  {  last  =  NUMBER_CHAR_DECIMAL;  continue;  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negate  if(last  ==  NUMBER_CHAR_NONE)  {  last  =  NUMBER_CHAR_DECIMAL;  continue;  }  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negate  if(last  ==  NUMBER_CHAR_NONE)  {  last  =  NUMBER_CHAR_DECIMAL;  continue;  }	  Negate    =    true;    	non-compiled	[CE]  	37	None	replace
433	[BUG]  [BUGGY]  NegativeFailure.prependOrResetInternal();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.prependOrResetInternal();  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.prependOrResetInternal();	  NegativeFailure.resetInternal();    	non-compiled	[CE]  	42	None	replace
434	[BUG]  [BUGGY]  NegativeFailure.setInternalChar(c);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.setInternalChar(c);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.setInternalChar(c);	  NegativeFailure.resetInternal();    	non-compiled	[CE]  	42	None	replace
435	[BUG]  [BUGGY]  NegativeFailure.setInternal(last);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.setInternal(last);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.setInternal(last);	  NegativeFailure.resetInternal();    	non-compiled	[CE]  	42	None	replace
436	[BUG]  [BUGGY]  Negative  :  false;  last  =  NUMBER_CHAR_EXP_SIGN;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  :  false;  last  =  NUMBER_CHAR_EXP_SIGN;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  :  false;  last  =  NUMBER_CHAR_EXP_SIGN;	  Negative    :    true;    	non-compiled	[CE]  	18	None	replace
437	[BUG]  [BUGGY]  Negative  :  false;  last  =  NUMBER_CHAR_SIGN;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  :  false;  last  =  NUMBER_CHAR_SIGN;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  :  false;  last  =  NUMBER_CHAR_SIGN;	  Negative    :    true;    	non-compiled	[CE]  	18	None	replace
438	[BUG]  [BUGGY]  Negative  :  false;  last  =  NUMBER_CHAR_DECIMAL;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  :  false;  last  =  NUMBER_CHAR_DECIMAL;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  :  false;  last  =  NUMBER_CHAR_DECIMAL;	  Negative    :    true;    	non-compiled	[CE]  	18	None	replace
439	[BUG]  [BUGGY]  Negative  :  false;  last  =  NUMBER_CHAR_EXP_DIGIT;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  :  false;  last  =  NUMBER_CHAR_EXP_DIGIT;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  :  false;  last  =  NUMBER_CHAR_EXP_DIGIT;	  Negative    :    true;    	non-compiled	[CE]  	18	None	replace
440	[BUG]  [BUGGY]  Negative  :  false;  last  =  NUMBER_CHAR_NONE;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  :  false;  last  =  NUMBER_CHAR_NONE;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  :  false;  last  =  NUMBER_CHAR_NONE;	  Negative    :    true;    	non-compiled	[CE]  	18	None	replace
441	[BUG]  [BUGGY]  Negative  =  last  +  NUMBER_CHAR_NONE;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =  last  +  NUMBER_CHAR_NONE;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =  last  +  NUMBER_CHAR_NONE;	  Negative    =   "-   "    +    NUMBER_CHAR_NONE;    	non-compiled	[CE]  	50	None	replace
442	[BUG]  [BUGGY]  NegativeFailure.throwInternalException( "Expected  NUMBER_CHAR_FRACTION_DIGIT: ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternalException( "Expected  NUMBER_CHAR_FRACTION_DIGIT: ");  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternalException( "Expected  NUMBER_CHAR_FRACTION_DIGIT: ");	  NegativeFailure.throwInternalException(   "   ");    	non-compiled	[CE]  	8	None	replace
443	[BUG]  [BUGGY]  NegativeFailure.throwInternalException( "Expected  NUMBER_CHAR_FRACTION_DIGIT, ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternalException( "Expected  NUMBER_CHAR_FRACTION_DIGIT, ");  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternalException( "Expected  NUMBER_CHAR_FRACTION_DIGIT, ");	  NegativeFailure.throwInternalException(   "   ");    	non-compiled	[CE]  	8	None	replace
444	[BUG]  [BUGGY]  NegativeFailure.throwInternalException( "Expected  NUMBER_CHAR_FRACTION_DIGIT; ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternalException( "Expected  NUMBER_CHAR_FRACTION_DIGIT; ");  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternalException( "Expected  NUMBER_CHAR_FRACTION_DIGIT; ");	  NegativeFailure.throwInternalException(   "   ");    	non-compiled	[CE]  	8	None	replace
445	[BUG]  [BUGGY]  NegativeFailure.throwInternalException( "Expected  NUMBER_CHAR_FRACTION_DIGIT,  expected  NUMBER_CHAR_NONE. ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternalException( "Expected  NUMBER_CHAR_FRACTION_DIGIT,  expected  NUMBER_CHAR_NONE. ");  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternalException( "Expected  NUMBER_CHAR_FRACTION_DIGIT,  expected  NUMBER_CHAR_NONE. ");	  NegativeFailure.throwInternalException(   "   ");    	non-compiled	[CE]  	8	None	replace
446	[BUG]  [BUGGY]  Negative  =   "Negative  value( "  +  NUMBER_CHAR_EXP_SIGN  + ") ";  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =   "Negative  value( "  +  NUMBER_CHAR_EXP_SIGN  + ") ";  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =   "Negative  value( "  +  NUMBER_CHAR_EXP_SIGN  + ") ";	  Negative    =   "Negative    value   ";    	non-compiled	[CE]  	65	None	replace
447	[BUG]  [BUGGY]  Negative  =  last  +  NUMBER_CHAR_SIGN;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =  last  +  NUMBER_CHAR_SIGN;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =  last  +  NUMBER_CHAR_SIGN;	  Negative    =   "-   "    +    NUMBER_CHAR_SIGN;    	non-compiled	[CE]  	51	None	replace
448	[BUG]  [BUGGY]  NegativeFailure.throwInternal(PEEKED_NULL,  p);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternal(PEEKED_NULL,  p);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternal(PEEKED_NULL,  p);	  NegativeFailure.throwInternal(PEEKED_NULL);    	non-compiled	[CE]  	40	None	replace
449	[BUG]  [BUGGY]  NegativeFailure.throwInternal(last,  PEEKED_NULL);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternal(last,  PEEKED_NULL);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternal(last,  PEEKED_NULL);	  NegativeFailure.throwInternal(PEEKED_NULL);    	non-compiled	[CE]  	40	None	replace
450	[BUG]  [BUGGY]  NegativeFailure.checkState(last  ==  NUMBER_CHAR_SIGN);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkState(last  ==  NUMBER_CHAR_SIGN);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkState(last  ==  NUMBER_CHAR_SIGN);	  NegativeFailure.checkChar(c);    	non-compiled	[CE]  	77	None	replace
451	[BUG]  [BUGGY]  NegativeFailure.checkChar(last,  c);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkChar(last,  c);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkChar(last,  c);	  NegativeFailure.checkChar(c);    	non-compiled	[CE]  	77	None	replace
452	[BUG]  [BUGGY]  NegativeFailure.checkState(last  ==  NUMBER_CHAR_NONE);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkState(last  ==  NUMBER_CHAR_NONE);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkState(last  ==  NUMBER_CHAR_NONE);	  NegativeFailure.checkChar(c);    	non-compiled	[CE]  	77	None	replace
453	[BUG]  [BUGGY]  NegativeFailure.appendInternal(NUMBER_CHAR_DECIMAL);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.appendInternal(NUMBER_CHAR_DECIMAL);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.appendInternal(NUMBER_CHAR_DECIMAL);	  NegativeFailure.beginInternal();    	non-compiled	[CE]  	9	None	replace
454	[BUG]  [BUGGY]  NegativeFailure.appendInternal(NUMBER_CHAR_EXP_SIGN);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.appendInternal(NUMBER_CHAR_EXP_SIGN);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.appendInternal(NUMBER_CHAR_EXP_SIGN);	  NegativeFailure.beginInternal();    	non-compiled	[CE]  	9	None	replace
455	[BUG]  [BUGGY]  NegativeFailure.appendInternal(NUMBER_CHAR_SIGN);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.appendInternal(NUMBER_CHAR_SIGN);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.appendInternal(NUMBER_CHAR_SIGN);	  NegativeFailure.beginInternal();    	non-compiled	[CE]  	9	None	replace
456	[BUG]  [BUGGY]  Negative  =  c;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =  c;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =  c;	  Negative    =   "-   ";    	non-compiled	[CE]  	16	None	replace
457	[BUG]  [BUGGY]  NegativeFailure.detachFromNumber();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.detachFromNumber();  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.detachFromNumber();	  NegativeFailure.breakInternal();    	non-compiled	[CE]  	11	None	replace
458	[BUG]  [BUGGY]  Negative.checkNegative(c  ==  '-');  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative.checkNegative(c  ==  '-');  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.checkNegative(c  ==  '-');	  Negative.checkNegative(true);    	non-compiled	[CE]  	62	None	replace
459	[BUG]  [BUGGY]  Negative.checkNegative(!lenient);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative.checkNegative(!lenient);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.checkNegative(!lenient);	  Negative.checkNegative(true);    	non-compiled	[CE]  	62	None	replace
460	[BUG]  [BUGGY]  Negative.checkNegative(c  ==  '+');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative.checkNegative(c  ==  '+');  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.checkNegative(c  ==  '+');	  Negative.checkNegative(true);    	non-compiled	[CE]  	62	None	replace
461	[BUG]  [BUGGY]  Negative  =  NUMBER_CHAR_EXP_SIGN;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =  NUMBER_CHAR_EXP_SIGN;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =  NUMBER_CHAR_EXP_SIGN;	  Negative    =    null;    	non-compiled	[CE]  	15	None	replace
462	[BUG]  [BUGGY]  Negative  =  NUMBER_CHAR_DECIMAL;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =  NUMBER_CHAR_DECIMAL;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =  NUMBER_CHAR_DECIMAL;	  Negative    =    null;    	non-compiled	[CE]  	15	None	replace
463	[BUG]  [BUGGY]  NegativeFailure.show(last,  NUMBER_CHAR_EXP_SIGN);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.show(last,  NUMBER_CHAR_EXP_SIGN);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.show(last,  NUMBER_CHAR_EXP_SIGN);	  NegativeFailure.break;    	non-compiled	[CE]  	73	None	replace
464	[BUG]  [BUGGY]  NegativeFailure.show(last,  NUMBER_CHAR_NONE);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.show(last,  NUMBER_CHAR_NONE);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.show(last,  NUMBER_CHAR_NONE);	  NegativeFailure.break;    	non-compiled	[CE]  	73	None	replace
465	[BUG]  [BUGGY]  NegativeFailure.show(last,  NUMBER_CHAR_SIGN);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.show(last,  NUMBER_CHAR_SIGN);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.show(last,  NUMBER_CHAR_SIGN);	  NegativeFailure.break;    	non-compiled	[CE]  	73	None	replace
466	[BUG]  [BUGGY]  Negative  =   "Negative  type( ";  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =   "Negative  type( ";  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =   "Negative  type( ";	  Negative    =   "Negative    type   ";    	non-compiled	[CE]  	68	None	replace
467	[BUG]  [BUGGY]  NegativeFailure.throwInternal(p,  i);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternal(p,  i);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternal(p,  i);	  NegativeFailure.throwInternal(p);    	non-compiled	[CE]  	13	None	replace
468	[BUG]  [BUGGY]  NegativeFailure.throwInternalException( "Negative  data ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternalException( "Negative  data ");  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternalException( "Negative  data ");	  NegativeFailure.throwInternalException();    	non-compiled	[CE]  	12	None	replace
469	[BUG]  [BUGGY]  NegativeFailure.throwInternalException( "Expected  NUMBER_CHAR_NONE: "  +  c);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternalException( "Expected  NUMBER_CHAR_NONE: "  +  c);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternalException( "Expected  NUMBER_CHAR_NONE: "  +  c);	  NegativeFailure.throwInternalException();    	non-compiled	[CE]  	12	None	replace
470	[BUG]  [BUGGY]  NegativeFailure.throwInternalException( "Current  token( "  +  c  + ")  does  not  exist. ");  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.throwInternalException( "Current  token( "  +  c  + ")  does  not  exist. ");  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.throwInternalException( "Current  token( "  +  c  + ")  does  not  exist. ");	  NegativeFailure.throwInternalException();    	non-compiled	[CE]  	12	None	replace
471	[BUG]  [BUGGY]  NegativeFailure.checkNegative(negative,  NUMBER_CHAR_EXP_DIGIT);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(negative,  NUMBER_CHAR_EXP_DIGIT);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(negative,  NUMBER_CHAR_EXP_DIGIT);	  NegativeFailure.checkNegative(false,    negative);    	non-compiled	[CE]  	58	None	replace
472	[BUG]  [BUGGY]  NegativeFailure.checkNegative(negative,  negative);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.checkNegative(negative,  negative);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.checkNegative(negative,  negative);	  NegativeFailure.checkNegative(false,    negative);    	non-compiled	[CE]  	58	None	replace
473	[BUG]  [BUGGY]  pos  =  NUMBER_CHAR_SIGN[pos  +  i];  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  pos  =  NUMBER_CHAR_SIGN[pos  +  i];  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	pos  =  NUMBER_CHAR_SIGN[pos  +  i];	  pos    =    buffer[pos    +    i];    	non-compiled	[CE]  	34	None	replace
474	[BUG]  [BUGGY]  pos  =  NUMBER_CHAR_SIGN[p  +  i];  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  pos  =  NUMBER_CHAR_SIGN[p  +  i];  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	pos  =  NUMBER_CHAR_SIGN[p  +  i];	  pos    =    buffer[pos    +    i];    	non-compiled	[CE]  	34	None	replace
475	[BUG]  [BUGGY]  pos  =  buffer[P  +  i];  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  pos  =  buffer[P  +  i];  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	pos  =  buffer[P  +  i];	  pos    =    buffer[pos    +    i];    	non-compiled	[CE]  	34	None	replace
476	[BUG]  [BUGGY]  Negative.checkChar(c);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative.checkChar(c);  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.checkChar(c);	  Negative.checkNegative(c);    	non-compiled	[CE]  	63	None	replace
477	[BUG]  [BUGGY]  Negative  =  last  +  NUMBER_CHAR_EXP_SIGN;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative  =  last  +  NUMBER_CHAR_EXP_SIGN;  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative  =  last  +  NUMBER_CHAR_EXP_SIGN;	  Negative    =   "-   "    +    NUMBER_CHAR_EXP_SIGN;    	non-compiled	[CE]  	48	None	replace
478	[BUG]  [BUGGY]  Negative.negative  = "Negative  value ";  [CE]  [FE]            ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative.negative  = "Negative  value ";  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.negative  = "Negative  value ";	  Negative.negative    =    true;    	non-compiled	[CE]  	36	None	replace
479	[BUG]  [BUGGY]  Negative.negative  = "Negative ";  [CE]  [FE]              ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative.negative  = "Negative ";  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.negative  = "Negative ";	  Negative.negative    =    true;    	non-compiled	[CE]  	36	None	replace
480	[BUG]  [BUGGY]  Negative.negative  = "Negative  value. ";  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative.negative  = "Negative  value. ";  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.negative  = "Negative  value. ";	  Negative.negative    =    true;    	non-compiled	[CE]  	36	None	replace
481	[BUG]  [BUGGY]  Negative.negative  = "Negative  type ";  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  Negative.negative  = "Negative  type ";  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	Negative.negative  = "Negative  type ";	  Negative.negative    =    true;    	non-compiled	[CE]  	36	None	replace
482	[BUG]  [BUGGY]  NegativeFailure.releasePeekSegment();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':  if  (last  ==  NUMBER_CHAR_NONE)  {      [BUGGY]  NegativeFailure.releasePeekSegment();  [BUGGY]      last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  if  (last  ==  NUMBER_CHAR_EXP_E)  {  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	673	673	1	replace	NegativeFailure.releasePeekSegment();	  NegativeFailure.releasePeek();    	non-compiled	[CE]  	74	None	replace
