bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (last  ||  negative  <  NUMBER_CHAR_SIGN)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (last  ||  negative  <  NUMBER_CHAR_SIGN)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (last  ||  negative  <  NUMBER_CHAR_SIGN)  {	  if    (negative    ||    last    <    NUMBER_CHAR_SIGN)    {    	non-compiled	[CE]  	24	None	replace
2	[BUG]  [BUGGY]  if  (negative  ||  last  >=  NUMBER_CHAR_SIGN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (negative  ||  last  >=  NUMBER_CHAR_SIGN)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (negative  ||  last  >=  NUMBER_CHAR_SIGN)  {	  if    (negative    ||    last    <    NUMBER_CHAR_SIGN)    {    	non-compiled	[CE]  	24	None	replace
3	[BUG]  [BUGGY]  if(pos  ==  0)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(pos  ==  0)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(pos  ==  0)  {	  if(pos    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	18	None	replace
4	[BUG]  [BUGGY]  if  (negative  &&  last  <  =  NUMBER_CHAR_SIGN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (negative  &&  last  <  =  NUMBER_CHAR_SIGN)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (negative  &&  last  <  =  NUMBER_CHAR_SIGN)  {	  if    (negative    &&    last    ==    NUMBER_CHAR_SIGN)    {    	non-compiled	[CE]  	29	None	replace
5	[BUG]  [BUGGY]  if  (negative  &&  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (negative  &&  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (negative  &&  last  ==  NUMBER_CHAR_EXP_SIGN)  {	  if    (negative    &&    last    ==    NUMBER_CHAR_SIGN)    {    	non-compiled	[CE]  	29	None	replace
6	[BUG]  [BUGGY]  if  (negative  &&  last  ==  NUMBER_CHAR_FRACTION_DIGIT)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (negative  &&  last  ==  NUMBER_CHAR_FRACTION_DIGIT)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (negative  &&  last  ==  NUMBER_CHAR_FRACTION_DIGIT)  {	  if    (negative    &&    last    ==    NUMBER_CHAR_SIGN)    {    	non-compiled	[CE]  	29	None	replace
7	[BUG]  [BUGGY]  if  (negative  &&  last  >  NUMBER_CHAR_SIGN)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (negative  &&  last  >  NUMBER_CHAR_SIGN)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (negative  &&  last  >  NUMBER_CHAR_SIGN)  {	  if    (negative    &&    last    ==    NUMBER_CHAR_SIGN)    {    	non-compiled	[CE]  	29	None	replace
8	[BUG]  [BUGGY]  if  (negative  ||  last!=  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (negative  ||  last!=  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (negative  ||  last!=  NUMBER_CHAR_EXP_SIGN)  {	  if    (negative    ||    last    <    =    NUMBER_CHAR_SIGN)    {    	non-compiled	[CE]  	21	None	replace
9	[BUG]  [BUGGY]  int  lineNumber  =  pathIndices.size()  -  1;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =  pathIndices.size()  -  1;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =  pathIndices.size()  -  1;	  int    lineNumber    =    stack.size()    -    1;    	non-compiled	[CE]  	41	None	replace
10	[BUG]  [BUGGY]  int  lineNumber  =  buffer.size()  -  1;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =  buffer.size()  -  1;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =  buffer.size()  -  1;	  int    lineNumber    =    stack.size()    -    1;    	non-compiled	[CE]  	41	None	replace
11	[BUG]  [BUGGY]  int  lineNumber  =  stack.size()  +  1;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =  stack.size()  +  1;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =  stack.size()  +  1;	  int    lineNumber    =    stack.size()    -    1;    	non-compiled	[CE]  	41	None	replace
12	[BUG]  [BUGGY]  if(negative  ||  buffer[pos  +  1]  ==  '-')  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(negative  ||  buffer[pos  +  1]  ==  '-')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(negative  ||  buffer[pos  +  1]  ==  '-')  {	  if(negative    ||    buffer[pos    +    i]    ==    '-')    {    	non-compiled	[CE]  	28	None	replace
13	[BUG]  [BUGGY]  if(negative  ||  buffer[p  +  i]  ==  '-')  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(negative  ||  buffer[p  +  i]  ==  '-')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(negative  ||  buffer[p  +  i]  ==  '-')  {	  if(negative    ||    buffer[pos    +    i]    ==    '-')    {    	non-compiled	[CE]  	28	None	replace
14	[BUG]  [BUGGY]  if(last  ||  buffer[pos  +  i]  ==  '-')  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(last  ||  buffer[pos  +  i]  ==  '-')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(last  ||  buffer[pos  +  i]  ==  '-')  {	  if(negative    ||    buffer[pos    +    i]    ==    '-')    {    	non-compiled	[CE]  	28	None	replace
15	[BUG]  [BUGGY]  if(value  ||  buffer[pos  +  i]  ==  '-')  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(value  ||  buffer[pos  +  i]  ==  '-')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(value  ||  buffer[pos  +  i]  ==  '-')  {	  if(negative    ||    buffer[pos    +    i]    ==    '-')    {    	non-compiled	[CE]  	28	None	replace
16	[BUG]  [BUGGY]  if(c  ==  '-'  ||  buffer[pos  +  i]  ==  '-')  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(c  ==  '-'  ||  buffer[pos  +  i]  ==  '-')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(c  ==  '-'  ||  buffer[pos  +  i]  ==  '-')  {	  if(negative    ||    buffer[pos    +    i]    ==    '-')    {    	non-compiled	[CE]  	28	None	replace
17	[BUG]  [BUGGY]  if(c  ==  '.')  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(c  ==  '.')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(c  ==  '.')  {	  if(c    ==    '-')    {    	non-compiled	[CE]  	14	None	replace
18	[BUG]  [BUGGY]  if(last  ==  '-')  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(last  ==  '-')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(last  ==  '-')  {	  if(c    ==    '-')    {    	non-compiled	[CE]  	14	None	replace
19	[BUG]  [BUGGY]  if(c  ==  '-'  ||  c  ==  ':')  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(c  ==  '-'  ||  c  ==  ':')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(c  ==  '-'  ||  c  ==  ':')  {	  if(c    ==    '-')    {    	non-compiled	[CE]  	14	None	replace
20	[BUG]  [BUGGY]  if(c  ==  '+')  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(c  ==  '+')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(c  ==  '+')  {	  if(c    ==    '-')    {    	non-compiled	[CE]  	14	None	replace
21	[BUG]  [BUGGY]  if(c  ==  '-'  ||  c  ==  '.')  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(c  ==  '-'  ||  c  ==  '.')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(c  ==  '-'  ||  c  ==  '.')  {	  if(c    ==    '-')    {    	non-compiled	[CE]  	14	None	replace
22	[BUG]  [BUGGY]  if(negative  ||  buffer[pos  +  1]!=  '-')  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(negative  ||  buffer[pos  +  1]!=  '-')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(negative  ||  buffer[pos  +  1]!=  '-')  {	  if(negative    ||    buffer[pos    +    i]!=    '-')    {    	non-compiled	[CE]  	30	None	replace
23	[BUG]  [BUGGY]  if(negative  ||  buffer[p  +  i]!=  '-')  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(negative  ||  buffer[p  +  i]!=  '-')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(negative  ||  buffer[p  +  i]!=  '-')  {	  if(negative    ||    buffer[pos    +    i]!=    '-')    {    	non-compiled	[CE]  	30	None	replace
24	[BUG]  [BUGGY]  if(last  ||  buffer[pos  +  i]!=  '-')  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(last  ||  buffer[pos  +  i]!=  '-')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(last  ||  buffer[pos  +  i]!=  '-')  {	  if(negative    ||    buffer[pos    +    i]!=    '-')    {    	non-compiled	[CE]  	30	None	replace
25	[BUG]  [BUGGY]  if(pos  >  limit  ||  buffer[pos  +  i]!=  '-')  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(pos  >  limit  ||  buffer[pos  +  i]!=  '-')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(pos  >  limit  ||  buffer[pos  +  i]!=  '-')  {	  if(negative    ||    buffer[pos    +    i]!=    '-')    {    	non-compiled	[CE]  	30	None	replace
26	[BUG]  [BUGGY]  if(value  ||  buffer[pos  +  i]!=  '-')  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(value  ||  buffer[pos  +  i]!=  '-')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(value  ||  buffer[pos  +  i]!=  '-')  {	  if(negative    ||    buffer[pos    +    i]!=    '-')    {    	non-compiled	[CE]  	30	None	replace
27	[BUG]  [BUGGY]  int  lineNumber  =(int)PeekStack[pos  +  2];  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =(int)PeekStack[pos  +  2];  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =(int)PeekStack[pos  +  2];	  int    lineNumber    =(int)PeekStack[pos    +    1];    	non-compiled	[CE]  	6	None	replace
28	[BUG]  [BUGGY]  int  lineNumber  =(int)PeekStack[pos  +  1]  &  0xff;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =(int)PeekStack[pos  +  1]  &  0xff;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =(int)PeekStack[pos  +  1]  &  0xff;	  int    lineNumber    =(int)PeekStack[pos    +    1];    	non-compiled	[CE]  	6	None	replace
29	[BUG]  [BUGGY]  int  lineNumber  =(int)PeekStack[pos  +  1]  &  0xFF;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =(int)PeekStack[pos  +  1]  &  0xFF;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =(int)PeekStack[pos  +  1]  &  0xFF;	  int    lineNumber    =(int)PeekStack[pos    +    1];    	non-compiled	[CE]  	6	None	replace
30	[BUG]  [BUGGY]  int  lineNumber  =(int)peekStack[pos  +  1];  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =(int)peekStack[pos  +  1];  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =(int)peekStack[pos  +  1];	  int    lineNumber    =(int)PeekStack[pos    +    1];    	non-compiled	[CE]  	6	None	replace
31	[BUG]  [BUGGY]  char  lineNumber  =(char)PeekStack[pos  +  1];  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  char  lineNumber  =(char)PeekStack[pos  +  1];  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	char  lineNumber  =(char)PeekStack[pos  +  1];	  int    lineNumber    =(int)PeekStack[pos    +    1];    	non-compiled	[CE]  	6	None	replace
32	[BUG]  [BUGGY]  int  lineNumber  =(int)PeekStack[pos  +  3];  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =(int)PeekStack[pos  +  3];  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =(int)PeekStack[pos  +  3];	  int    lineNumber    =(int)PeekStack[pos    +    1];    	non-compiled	[CE]  	6	None	replace
33	[BUG]  [BUGGY]  int  lineNumber  =(int)PeekStack.peek()  -  1;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =(int)PeekStack.peek()  -  1;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =(int)PeekStack.peek()  -  1;	  int    lineNumber    =(int)PeekStack.peek();    	non-compiled	[CE]  	7	None	replace
34	[BUG]  [BUGGY]  int  lineNumber  =(int)PeekStack.peek()  +  1;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =(int)PeekStack.peek()  +  1;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =(int)PeekStack.peek()  +  1;	  int    lineNumber    =(int)PeekStack.peek();    	non-compiled	[CE]  	7	None	replace
35	[BUG]  [BUGGY]  char  lineNumber  =(char)PeekStack.peek();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  char  lineNumber  =(char)PeekStack.peek();  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	char  lineNumber  =(char)PeekStack.peek();	  int    lineNumber    =(int)PeekStack.peek();    	non-compiled	[CE]  	7	None	replace
36	[BUG]  [BUGGY]  int  lineNumber  =(int)peekStack.peek();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =(int)peekStack.peek();  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =(int)peekStack.peek();	  int    lineNumber    =(int)PeekStack.peek();    	non-compiled	[CE]  	7	None	replace
37	[BUG]  [BUGGY]  int  lineNumber  =(int)PeekStack.peek()  -  10;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =(int)PeekStack.peek()  -  10;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =(int)PeekStack.peek()  -  10;	  int    lineNumber    =(int)PeekStack.peek();    	non-compiled	[CE]  	7	None	replace
38	[BUG]  [BUGGY]  int  lineNumber  =(int)PeekStack.peek()  -  2;  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =(int)PeekStack.peek()  -  2;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =(int)PeekStack.peek()  -  2;	  int    lineNumber    =(int)PeekStack.peek();    	non-compiled	[CE]  	7	None	replace
39	[BUG]  [BUGGY]  if  (pos  >=  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (pos  >=  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (pos  >=  NUMBER_CHAR_EXP_SIGN)  {	  if    (pos    <    =    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	19	None	replace
40	[BUG]  [BUGGY]  if  (pos  <  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (pos  <  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (pos  <  NUMBER_CHAR_EXP_SIGN)  {	  if    (pos    <    =    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	19	None	replace
41	[BUG]  [BUGGY]  if  (p  <  =  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (p  <  =  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (p  <  =  NUMBER_CHAR_EXP_SIGN)  {	  if    (pos    <    =    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	19	None	replace
42	[BUG]  [BUGGY]  if(c  ==  '-'  ||  l  ==  '+')  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(c  ==  '-'  ||  l  ==  '+')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(c  ==  '-'  ||  l  ==  '+')  {	  if(l    ==    '-'    ||    c    ==    '+')    {    	non-compiled	[CE]  	15	None	replace
43	[BUG]  [BUGGY]  if(last  ==  '-'  ||  c  ==  '+')  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(last  ==  '-'  ||  c  ==  '+')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(last  ==  '-'  ||  c  ==  '+')  {	  if(l    ==    '-'    ||    c    ==    '+')    {    	non-compiled	[CE]  	15	None	replace
44	[BUG]  [BUGGY]  if(c  ==  '+'  ||  l  ==  '-')  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(c  ==  '+'  ||  l  ==  '-')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(c  ==  '+'  ||  l  ==  '-')  {	  if(l    ==    '-'    ||    c    ==    '+')    {    	non-compiled	[CE]  	15	None	replace
45	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '+')  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(c  ==  '.'  ||  c  ==  '+')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(c  ==  '.'  ||  c  ==  '+')  {	  if(l    ==    '-'    ||    c    ==    '+')    {    	non-compiled	[CE]  	15	None	replace
46	[BUG]  [BUGGY]  if(p  ==  '-'  ||  p  ==  '+')  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(p  ==  '-'  ||  p  ==  '+')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(p  ==  '-'  ||  p  ==  '+')  {	  if(l    ==    '-'    ||    c    ==    '+')    {    	non-compiled	[CE]  	15	None	replace
47	[BUG]  [BUGGY]  bucket[pos  +  i]  =  c;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  bucket[pos  +  i]  =  c;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	bucket[pos  +  i]  =  c;	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    c;    }    	non-compiled	[CE]  	45	None	replace
48	[BUG]  [BUGGY]  bucket[pos  +  i]  =  buffer[p  +  i];  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  bucket[pos  +  i]  =  buffer[p  +  i];  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	bucket[pos  +  i]  =  buffer[p  +  i];	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    c;    }    	non-compiled	[CE]  	45	None	replace
49	[BUG]  [BUGGY]  bucket[pos  +  i]  =  '-';  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  bucket[pos  +  i]  =  '-';  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	bucket[pos  +  i]  =  '-';	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    c;    }    	non-compiled	[CE]  	45	None	replace
50	[BUG]  [BUGGY]  pend(pos  +  i,  buffer[p  +  i]);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  pend(pos  +  i,  buffer[p  +  i]);  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	pend(pos  +  i,  buffer[p  +  i]);	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    c;    }    	non-compiled	[CE]  	45	None	replace
51	[BUG]  [BUGGY]  bucket[pos  +  i]  =  c.charValue();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  bucket[pos  +  i]  =  c.charValue();  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	bucket[pos  +  i]  =  c.charValue();	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    c;    }    	non-compiled	[CE]  	45	None	replace
52	[BUG]  [BUGGY]  pend(pos  +  i,  buffer[pos  +  i]);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  pend(pos  +  i,  buffer[pos  +  i]);  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	pend(pos  +  i,  buffer[pos  +  i]);	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    c;    }    	non-compiled	[CE]  	45	None	replace
53	[BUG]  [BUGGY]  pend(pos  +  i);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  pend(pos  +  i);  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	pend(pos  +  i);	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    c;    }    	non-compiled	[CE]  	45	None	replace
54	[BUG]  [BUGGY]  int  lineNumber  =(int)PeekStack[pos  +  i];  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =(int)PeekStack[pos  +  i];  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =(int)PeekStack[pos  +  i];	  int    lineNumber    =(int)PeekStack[p    +    i];    	non-compiled	[CE]  	8	None	replace
55	[BUG]  [BUGGY]  int  lineNumber  =(int)PeekStack[p  +  1];  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =(int)PeekStack[p  +  1];  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =(int)PeekStack[p  +  1];	  int    lineNumber    =(int)PeekStack[p    +    i];    	non-compiled	[CE]  	8	None	replace
56	[BUG]  [BUGGY]  char  lineNumber  =(char)PeekStack[p  +  i];  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  char  lineNumber  =(char)PeekStack[p  +  i];  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	char  lineNumber  =(char)PeekStack[p  +  i];	  int    lineNumber    =(int)PeekStack[p    +    i];    	non-compiled	[CE]  	8	None	replace
57	[BUG]  [BUGGY]  int  lineNumber  =(int)PeekStack[p  +  pos];  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =(int)PeekStack[p  +  pos];  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =(int)PeekStack[p  +  pos];	  int    lineNumber    =(int)PeekStack[p    +    i];    	non-compiled	[CE]  	8	None	replace
58	[BUG]  [BUGGY]  int  lineNumber  =(int)peekStack[pos  +  i];  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =(int)peekStack[pos  +  i];  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =(int)peekStack[pos  +  i];	  int    lineNumber    =(int)PeekStack[p    +    i];    	non-compiled	[CE]  	8	None	replace
59	[BUG]  [BUGGY]  int  lineNumber  =(int)PeekStack[p  +  2];  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =(int)PeekStack[p  +  2];  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =(int)PeekStack[p  +  2];	  int    lineNumber    =(int)PeekStack[p    +    i];    	non-compiled	[CE]  	8	None	replace
60	[BUG]  [BUGGY]  if  (negative  ||  last  >=  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (negative  ||  last  >=  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (negative  ||  last  >=  NUMBER_CHAR_EXP_SIGN)  {	  if    (negative    ||    last    <    =    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	35	None	replace
61	[BUG]  [BUGGY]  if  (last  ||  negative!=  NUMBER_CHAR_SIGN)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (last  ||  negative!=  NUMBER_CHAR_SIGN)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (last  ||  negative!=  NUMBER_CHAR_SIGN)  {	  if    (negative    ||    last!=    NUMBER_CHAR_SIGN)    {    	non-compiled	[CE]  	4	None	replace
62	[BUG]  [BUGGY]  if  (negative  ||  last  <  =  NUMBER_CHAR_FLOAT)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (negative  ||  last  <  =  NUMBER_CHAR_FLOAT)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (negative  ||  last  <  =  NUMBER_CHAR_FLOAT)  {	  if    (negative    ||    last    ==    NUMBER_CHAR_FLOAT)    {    	non-compiled	[CE]  	25	None	replace
63	[BUG]  [BUGGY]  if  (last  ||  negative  ==  NUMBER_CHAR_FLOAT)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (last  ||  negative  ==  NUMBER_CHAR_FLOAT)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (last  ||  negative  ==  NUMBER_CHAR_FLOAT)  {	  if    (negative    ||    last    ==    NUMBER_CHAR_FLOAT)    {    	non-compiled	[CE]  	25	None	replace
64	[BUG]  [BUGGY]  if  (last  ||  negative  <  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (last  ||  negative  <  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (last  ||  negative  <  NUMBER_CHAR_EXP_SIGN)  {	  if    (negative    ||    last    <    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	52	None	replace
65	[BUG]  [BUGGY]  if  (last  ||  last  <  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (last  ||  last  <  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (last  ||  last  <  NUMBER_CHAR_EXP_SIGN)  {	  if    (negative    ||    last    <    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	52	None	replace
66	[BUG]  [BUGGY]  if  (pos  <  NUMBER_CHAR_SIGN)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (pos  <  NUMBER_CHAR_SIGN)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (pos  <  NUMBER_CHAR_SIGN)  {	  if    (pos    <    =    NUMBER_CHAR_SIGN)    {    	non-compiled	[CE]  	1	None	replace
67	[BUG]  [BUGGY]  if(!lenient  &&  last  ==  NUMBER_CHAR_SIGN)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(!lenient  &&  last  ==  NUMBER_CHAR_SIGN)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(!lenient  &&  last  ==  NUMBER_CHAR_SIGN)  {	  if(!lenient)    {    	non-compiled	[CE]  	12	None	replace
68	[BUG]  [BUGGY]  if(!lenient  &&  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(!lenient  &&  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(!lenient  &&  last  ==  NUMBER_CHAR_EXP_SIGN)  {	  if(!lenient)    {    	non-compiled	[CE]  	12	None	replace
69	[BUG]  [BUGGY]  if(!lenient  &&  last  ==  NUMBER_CHAR_EXP_LONG)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(!lenient  &&  last  ==  NUMBER_CHAR_EXP_LONG)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(!lenient  &&  last  ==  NUMBER_CHAR_EXP_LONG)  {	  if(!lenient)    {    	non-compiled	[CE]  	12	None	replace
70	[BUG]  [BUGGY]  if(last  ==  NUMBER_CHAR_SIGN  ||!lenient)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(last  ==  NUMBER_CHAR_SIGN  ||!lenient)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(last  ==  NUMBER_CHAR_SIGN  ||!lenient)  {	  if(!lenient)    {    	non-compiled	[CE]  	12	None	replace
71	[BUG]  [BUGGY]  if(!lenient  &&  buffer[pos  +  i]!=  '-')  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(!lenient  &&  buffer[pos  +  i]!=  '-')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(!lenient  &&  buffer[pos  +  i]!=  '-')  {	  if(!lenient)    {    	non-compiled	[CE]  	12	None	replace
72	[BUG]  [BUGGY]  if(!negative)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(!negative)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(!negative)  {	  if(!lenient)    {    	non-compiled	[CE]  	12	None	replace
73	[BUG]  [BUGGY]  if(pos!=  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(pos!=  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(pos!=  NUMBER_CHAR_EXP_SIGN)  {	  if(last!=    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	53	None	replace
74	[BUG]  [BUGGY]  if  (pos  ==  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (pos  ==  NUMBER_CHAR_EXP_E)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (pos  ==  NUMBER_CHAR_EXP_E)  {	  if    (last    ==    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	51	None	replace
75	[BUG]  [BUGGY]  if  (negative  ||  last  ==  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (negative  ||  last  ==  NUMBER_CHAR_EXP_E)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (negative  ||  last  ==  NUMBER_CHAR_EXP_E)  {	  if    (last    ==    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	51	None	replace
76	[BUG]  [BUGGY]  pos  =  p  +  1;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  pos  =  p  +  1;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	pos  =  p  +  1;	  pos    =    pos    +    1;    	non-compiled	[CE]  	40	None	replace
77	[BUG]  [BUGGY]  pos  =  i  +  1;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  pos  =  i  +  1;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	pos  =  i  +  1;	  pos    =    pos    +    1;    	non-compiled	[CE]  	40	None	replace
78	[BUG]  [BUGGY]  pos  =  l  +  1;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  pos  =  l  +  1;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	pos  =  l  +  1;	  pos    =    pos    +    1;    	non-compiled	[CE]  	40	None	replace
79	[BUG]  [BUGGY]  pos  =  c  +  1;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  pos  =  c  +  1;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	pos  =  c  +  1;	  pos    =    pos    +    1;    	non-compiled	[CE]  	40	None	replace
80	[BUG]  [BUGGY]  pos  =  limit  +  1;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  pos  =  limit  +  1;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	pos  =  limit  +  1;	  pos    =    pos    +    1;    	non-compiled	[CE]  	40	None	replace
81	[BUG]  [BUGGY]  pos  =  buffer[pos  +  1];  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  pos  =  buffer[pos  +  1];  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	pos  =  buffer[pos  +  1];	  pos    =    pos    +    1;    	non-compiled	[CE]  	40	None	replace
82	[BUG]  [BUGGY]  last  =  pos  +  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  last  =  pos  +  1;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	last  =  pos  +  1;	  last    =    p    +    1;    	non-compiled	[CE]  	44	None	replace
83	[BUG]  [BUGGY]  last  =  p  +  2;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  last  =  p  +  2;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	last  =  p  +  2;	  last    =    p    +    1;    	non-compiled	[CE]  	44	None	replace
84	[BUG]  [BUGGY]  last  =  p  +  3;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  last  =  p  +  3;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	last  =  p  +  3;	  last    =    p    +    1;    	non-compiled	[CE]  	44	None	replace
85	[BUG]  [BUGGY]  last  =  p  +  4;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  last  =  p  +  4;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	last  =  p  +  4;	  last    =    p    +    1;    	non-compiled	[CE]  	44	None	replace
86	[BUG]  [BUGGY]  last  =  p  +  5;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  last  =  p  +  5;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	last  =  p  +  5;	  last    =    p    +    1;    	non-compiled	[CE]  	44	None	replace
87	[BUG]  [BUGGY]  last  =  i  +  1;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  last  =  i  +  1;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	last  =  i  +  1;	  last    =    p    +    1;    	non-compiled	[CE]  	44	None	replace
88	[BUG]  [BUGGY]  if  (negative  ||  negative  ==  NUMBER_CHAR_SIGN)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (negative  ||  negative  ==  NUMBER_CHAR_SIGN)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (negative  ||  negative  ==  NUMBER_CHAR_SIGN)  {	  if    (last    ||    negative    ==    NUMBER_CHAR_SIGN)    {    	non-compiled	[CE]  	22	None	replace
89	[BUG]  [BUGGY]  if  (negative  ||  buffer[pos  +  i]  ==  NUMBER_CHAR_SIGN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (negative  ||  buffer[pos  +  i]  ==  NUMBER_CHAR_SIGN)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (negative  ||  buffer[pos  +  i]  ==  NUMBER_CHAR_SIGN)  {	  if    (last    ||    negative    ==    NUMBER_CHAR_SIGN)    {    	non-compiled	[CE]  	22	None	replace
90	[BUG]  [BUGGY]  if  (value  ||  negative  ==  NUMBER_CHAR_SIGN)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (value  ||  negative  ==  NUMBER_CHAR_SIGN)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (value  ||  negative  ==  NUMBER_CHAR_SIGN)  {	  if    (last    ||    negative    ==    NUMBER_CHAR_SIGN)    {    	non-compiled	[CE]  	22	None	replace
91	[BUG]  [BUGGY]  int  lineNumber  =  pathIndices.size();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =  pathIndices.size();  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =  pathIndices.size();	  int    lineNumber    =    stack.size();    	non-compiled	[CE]  	38	None	replace
92	[BUG]  [BUGGY]  int  lineNumber  =  stack.size()  -  2;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =  stack.size()  -  2;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =  stack.size()  -  2;	  int    lineNumber    =    stack.size();    	non-compiled	[CE]  	38	None	replace
93	[BUG]  [BUGGY]  int  lineNumber  =  buffer.size();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =  buffer.size();  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =  buffer.size();	  int    lineNumber    =    stack.size();    	non-compiled	[CE]  	38	None	replace
94	[BUG]  [BUGGY]  int  lineNumber  =  stack.length()  -  1;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =  stack.length()  -  1;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =  stack.length()  -  1;	  int    lineNumber    =    stack.size();    	non-compiled	[CE]  	38	None	replace
95	[BUG]  [BUGGY]  if(last  ||  c  ==  '-')  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(last  ||  c  ==  '-')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(last  ||  c  ==  '-')  {	  if(negative    ||    c    ==    '-')    {    	non-compiled	[CE]  	54	None	replace
96	[BUG]  [BUGGY]  if(c  ==  '-'  ||  c  ==  '-')  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(c  ==  '-'  ||  c  ==  '-')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(c  ==  '-'  ||  c  ==  '-')  {	  if(negative    ||    c    ==    '-')    {    	non-compiled	[CE]  	54	None	replace
97	[BUG]  [BUGGY]  bucket[pos  +  i]  =  '.';  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  bucket[pos  +  i]  =  '.';  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	bucket[pos  +  i]  =  '.';	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    '.';    }    	non-compiled	[CE]  	48	None	replace
98	[BUG]  [BUGGY]  bucket[pos  +  i]  =  ',';  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  bucket[pos  +  i]  =  ',';  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	bucket[pos  +  i]  =  ',';	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    '.';    }    	non-compiled	[CE]  	48	None	replace
99	[BUG]  [BUGGY]  bucket[pos  +  i]  =  ';';  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  bucket[pos  +  i]  =  ';';  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	bucket[pos  +  i]  =  ';';	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    '.';    }    	non-compiled	[CE]  	48	None	replace
100	[BUG]  [BUGGY]  bucket[pos  +  i]  =  '!';  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  bucket[pos  +  i]  =  '!';  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	bucket[pos  +  i]  =  '!';	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    '.';    }    	non-compiled	[CE]  	48	None	replace
101	[BUG]  [BUGGY]  if  (negative  ||  last  ==  NUMBER_CHAR_LONG)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (negative  ||  last  ==  NUMBER_CHAR_LONG)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (negative  ||  last  ==  NUMBER_CHAR_LONG)  {	  if    (last    ==    NUMBER_CHAR_LONG)    {    	non-compiled	[CE]  	27	None	replace
102	[BUG]  [BUGGY]  if  (last  <  =  NUMBER_CHAR_LONG)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (last  <  =  NUMBER_CHAR_LONG)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (last  <  =  NUMBER_CHAR_LONG)  {	  if    (last    ==    NUMBER_CHAR_LONG)    {    	non-compiled	[CE]  	27	None	replace
103	[BUG]  [BUGGY]  p  =  l;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  p  =  l;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	p  =  l;	  p    =    pos;    	non-compiled	[CE]  	39	None	replace
104	[BUG]  [BUGGY]  p  =  i;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  p  =  i;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	p  =  i;	  p    =    pos;    	non-compiled	[CE]  	39	None	replace
105	[BUG]  [BUGGY]  p  =  c;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  p  =  c;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	p  =  c;	  p    =    pos;    	non-compiled	[CE]  	39	None	replace
106	[BUG]  [BUGGY]  p  =  0;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  p  =  0;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	p  =  0;	  p    =    pos;    	non-compiled	[CE]  	39	None	replace
107	[BUG]  [BUGGY]  int  lineNumber  =  buffer[pos  +  1];  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =  buffer[pos  +  1];  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =  buffer[pos  +  1];	  int    lineNumber    =    buffer[pos    +    i];    	non-compiled	[CE]  	10	None	replace
108	[BUG]  [BUGGY]  int  lineNumber  =  p[pos  +  i];  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =  p[pos  +  i];  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =  p[pos  +  i];	  int    lineNumber    =    buffer[pos    +    i];    	non-compiled	[CE]  	10	None	replace
109	[BUG]  [BUGGY]  int  lineNumber  =  buffer[pos  +  2];  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =  buffer[pos  +  2];  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =  buffer[pos  +  2];	  int    lineNumber    =    buffer[pos    +    i];    	non-compiled	[CE]  	10	None	replace
110	[BUG]  [BUGGY]  int  lineNumber  =  buffer[pos  +  i]  &  0xff;  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =  buffer[pos  +  i]  &  0xff;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =  buffer[pos  +  i]  &  0xff;	  int    lineNumber    =    buffer[pos    +    i];    	non-compiled	[CE]  	10	None	replace
111	[BUG]  [BUGGY]  char  lineNumber  =  buffer[pos  +  i];  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  char  lineNumber  =  buffer[pos  +  i];  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	char  lineNumber  =  buffer[pos  +  i];	  int    lineNumber    =    buffer[pos    +    i];    	non-compiled	[CE]  	10	None	replace
112	[BUG]  [BUGGY]  bucket[pos  +  i]  =  buffer[pos  +  i];  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  bucket[pos  +  i]  =  buffer[pos  +  i];  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	bucket[pos  +  i]  =  buffer[pos  +  i];	  if(p    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    buffer[pos    +    i]    =    c;    }    	non-compiled	[CE]  	47	None	replace
113	[BUG]  [BUGGY]  bucket[pos]  =  c;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  bucket[pos]  =  c;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	bucket[pos]  =  c;	  if(p    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    buffer[pos    +    i]    =    c;    }    	non-compiled	[CE]  	47	None	replace
114	[BUG]  [BUGGY]  bucket[pos  +  i]  =  '+';  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  bucket[pos  +  i]  =  '+';  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	bucket[pos  +  i]  =  '+';	  if(p    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    buffer[pos    +    i]    =    c;    }    	non-compiled	[CE]  	47	None	replace
115	[BUG]  [BUGGY]  if  (pos  >  NUMBER_CHAR_SIGN)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (pos  >  NUMBER_CHAR_SIGN)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (pos  >  NUMBER_CHAR_SIGN)  {	  if    (pos    >=    NUMBER_CHAR_SIGN)    {    	non-compiled	[CE]  	17	None	replace
116	[BUG]  [BUGGY]  if  (last  >=  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (last  >=  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (last  >=  NUMBER_CHAR_EXP_SIGN)  {	  if    (last    <    =    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	3	None	replace
117	[BUG]  [BUGGY]  if  (last  ||  negative  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (last  ||  negative  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (last  ||  negative  ==  NUMBER_CHAR_EXP_SIGN)  {	  if    (negative    ||    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	20	None	replace
118	[BUG]  [BUGGY]  int  lineNumber  =  stack.length()  +  1;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =  stack.length()  +  1;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =  stack.length()  +  1;	  int    lineNumber    =    stack.length();    	non-compiled	[CE]  	42	None	replace
119	[BUG]  [BUGGY]  int  lineNumber  =  buffer.length();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =  buffer.length();  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =  buffer.length();	  int    lineNumber    =    stack.length();    	non-compiled	[CE]  	42	None	replace
120	[BUG]  [BUGGY]  int  lineNumber  =  c.length();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =  c.length();  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =  c.length();	  int    lineNumber    =    stack.length();    	non-compiled	[CE]  	42	None	replace
121	[BUG]  [BUGGY]  int  lineNumber  =  pathIndices.length();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =  pathIndices.length();  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =  pathIndices.length();	  int    lineNumber    =    stack.length();    	non-compiled	[CE]  	42	None	replace
122	[BUG]  [BUGGY]  int  lineNumber  =  pathIndices.length;  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =  pathIndices.length;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =  pathIndices.length;	  int    lineNumber    =    stack.length();    	non-compiled	[CE]  	42	None	replace
123	[BUG]  [BUGGY]  int  lineNumber  =  pos.length();  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =  pos.length();  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =  pos.length();	  int    lineNumber    =    stack.length();    	non-compiled	[CE]  	42	None	replace
124	[BUG]  [BUGGY]  if  (pos  ==  NUMBER_CHAR_EXP_NONE)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (pos  ==  NUMBER_CHAR_EXP_NONE)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (pos  ==  NUMBER_CHAR_EXP_NONE)  {	  if    (last    ==    NUMBER_CHAR_EXP_NONE)    {    	non-compiled	[CE]  	32	None	replace
125	[BUG]  [BUGGY]  if  (negative  ||  last  ==  NUMBER_CHAR_EXP_NONE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (negative  ||  last  ==  NUMBER_CHAR_EXP_NONE)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (negative  ||  last  ==  NUMBER_CHAR_EXP_NONE)  {	  if    (last    ==    NUMBER_CHAR_EXP_NONE)    {    	non-compiled	[CE]  	32	None	replace
126	[BUG]  [BUGGY]  bucket[pos  +  i]  =  '0';  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  bucket[pos  +  i]  =  '0';  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	bucket[pos  +  i]  =  '0';	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    '-';    }    	non-compiled	[CE]  	49	None	replace
127	[BUG]  [BUGGY]  bucket[pos  +  i]  =  '/';  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  bucket[pos  +  i]  =  '/';  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	bucket[pos  +  i]  =  '/';	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    '-';    }    	non-compiled	[CE]  	49	None	replace
128	[BUG]  [BUGGY]  if  (negative  ||  last  ==  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (negative  ||  last  ==  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (negative  ||  last  ==  NUMBER_CHAR_EXP_DIGIT)  {	  if    (last    ==    NUMBER_CHAR_EXP_DIGIT)    {    	non-compiled	[CE]  	50	None	replace
129	[BUG]  [BUGGY]  if  (pos  ==  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (pos  ==  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (pos  ==  NUMBER_CHAR_EXP_DIGIT)  {	  if    (last    ==    NUMBER_CHAR_EXP_DIGIT)    {    	non-compiled	[CE]  	50	None	replace
130	[BUG]  [BUGGY]  int  lineNumber  =  buffer[p  +  pos];  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =  buffer[p  +  pos];  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =  buffer[p  +  pos];	  int    lineNumber    =    buffer[p    +    i];    	non-compiled	[CE]  	5	None	replace
131	[BUG]  [BUGGY]  int  lineNumber  =  buffer[p  +  1];  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =  buffer[p  +  1];  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =  buffer[p  +  1];	  int    lineNumber    =    buffer[p    +    i];    	non-compiled	[CE]  	5	None	replace
132	[BUG]  [BUGGY]  int  lineNumber  =  pos[p  +  i];  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =  pos[p  +  i];  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =  pos[p  +  i];	  int    lineNumber    =    buffer[p    +    i];    	non-compiled	[CE]  	5	None	replace
133	[BUG]  [BUGGY]  char  lineNumber  =  buffer[p  +  i];  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  char  lineNumber  =  buffer[p  +  i];  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	char  lineNumber  =  buffer[p  +  i];	  int    lineNumber    =    buffer[p    +    i];    	non-compiled	[CE]  	5	None	replace
134	[BUG]  [BUGGY]  int  lineNumber  =  buffer[p  +  i]  &  0xff;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =  buffer[p  +  i]  &  0xff;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =  buffer[p  +  i]  &  0xff;	  int    lineNumber    =    buffer[p    +    i];    	non-compiled	[CE]  	5	None	replace
135	[BUG]  [BUGGY]  int  lineNumber  =  buffer[p  +  c];  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =  buffer[p  +  c];  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =  buffer[p  +  c];	  int    lineNumber    =    buffer[p    +    i];    	non-compiled	[CE]  	5	None	replace
136	[BUG]  [BUGGY]  if  (negative  ||  last  <  =  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (negative  ||  last  <  =  NUMBER_CHAR_DECIMAL)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (negative  ||  last  <  =  NUMBER_CHAR_DECIMAL)  {	  if    (negative    ||    last    ==    NUMBER_CHAR_DECIMAL)    {    	non-compiled	[CE]  	36	None	replace
137	[BUG]  [BUGGY]  if  (negative  ||  last  <  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (negative  ||  last  <  NUMBER_CHAR_DECIMAL)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (negative  ||  last  <  NUMBER_CHAR_DECIMAL)  {	  if    (negative    ||    last    ==    NUMBER_CHAR_DECIMAL)    {    	non-compiled	[CE]  	36	None	replace
138	[BUG]  [BUGGY]  if  (negative  ||  last  ==  NUMBER_CHAR_DIGIT)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (negative  ||  last  ==  NUMBER_CHAR_DIGIT)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (negative  ||  last  ==  NUMBER_CHAR_DIGIT)  {	  if    (negative    ||    last    ==    NUMBER_CHAR_DECIMAL)    {    	non-compiled	[CE]  	36	None	replace
139	[BUG]  [BUGGY]  if  (last  ||  negative  ==  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (last  ||  negative  ==  NUMBER_CHAR_DECIMAL)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (last  ||  negative  ==  NUMBER_CHAR_DECIMAL)  {	  if    (negative    ||    last    ==    NUMBER_CHAR_DECIMAL)    {    	non-compiled	[CE]  	36	None	replace
140	[BUG]  [BUGGY]  parent  ==  null  ||  p  >  0)  {  if(!fillBuffer(pos  +  1))  {  break;  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  parent  ==  null  ||  p  >  0)  {  if(!fillBuffer(pos  +  1))  {  break;  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	parent  ==  null  ||  p  >  0)  {  if(!fillBuffer(pos  +  1))  {  break;  }	  if(p    >    0)    {    if(!fillBuffer(pos    +    1))    {    break;    }    	non-compiled	[CE]  	46	None	replace
141	[BUG]  [BUGGY]  peech(pos)  {  if(!fillBuffer(pos  +  1))  {  break;  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  peech(pos)  {  if(!fillBuffer(pos  +  1))  {  break;  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	peech(pos)  {  if(!fillBuffer(pos  +  1))  {  break;  }	  if(p    >    0)    {    if(!fillBuffer(pos    +    1))    {    break;    }    	non-compiled	[CE]  	46	None	replace
142	[BUG]  [BUGGY]  peech(p  +  i)  {  if(!fillBuffer(pos  +  1))  {  break;  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  peech(p  +  i)  {  if(!fillBuffer(pos  +  1))  {  break;  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	peech(p  +  i)  {  if(!fillBuffer(pos  +  1))  {  break;  }	  if(p    >    0)    {    if(!fillBuffer(pos    +    1))    {    break;    }    	non-compiled	[CE]  	46	None	replace
143	[BUG]  [BUGGY]  peech(p  +  i)  {  if(!fillBuffer(pos  +  i))  {  break;  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  peech(p  +  i)  {  if(!fillBuffer(pos  +  i))  {  break;  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	peech(p  +  i)  {  if(!fillBuffer(pos  +  i))  {  break;  }	  if(p    >    0)    {    if(!fillBuffer(pos    +    1))    {    break;    }    	non-compiled	[CE]  	46	None	replace
144	[BUG]  [BUGGY]  peech(pos)  {  if(!fillBuffer(p  +  1))  {  break;  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  peech(pos)  {  if(!fillBuffer(p  +  1))  {  break;  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	peech(pos)  {  if(!fillBuffer(p  +  1))  {  break;  }	  if(p    >    0)    {    if(!fillBuffer(pos    +    1))    {    break;    }    	non-compiled	[CE]  	46	None	replace
145	[BUG]  [BUGGY]  parent  ==  null  ||  p  >  0)  {  if(!fillBuffer(1))  {  break;  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  parent  ==  null  ||  p  >  0)  {  if(!fillBuffer(1))  {  break;  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	parent  ==  null  ||  p  >  0)  {  if(!fillBuffer(1))  {  break;  }	  if(p    >    0)    {    if(!fillBuffer(pos    +    1))    {    break;    }    	non-compiled	[CE]  	46	None	replace
146	[BUG]  [BUGGY]  parent  ==  null  ||!fillBuffer(pos  +  1))  {  break;  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  parent  ==  null  ||!fillBuffer(pos  +  1))  {  break;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	parent  ==  null  ||!fillBuffer(pos  +  1))  {  break;	  if(p    >    0)    {    if(!fillBuffer(pos    +    1))    {    break;    }    	non-compiled	[CE]  	46	None	replace
147	[BUG]  [BUGGY]  if  (negative  ||  last  ==  NUMBER_CHAR_EXP_L)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (negative  ||  last  ==  NUMBER_CHAR_EXP_L)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (negative  ||  last  ==  NUMBER_CHAR_EXP_L)  {	  if    (last    ==    NUMBER_CHAR_EXP_L)    {    	non-compiled	[CE]  	2	None	replace
148	[BUG]  [BUGGY]  if  (pos  ==  NUMBER_CHAR_EXP_L)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (pos  ==  NUMBER_CHAR_EXP_L)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (pos  ==  NUMBER_CHAR_EXP_L)  {	  if    (last    ==    NUMBER_CHAR_EXP_L)    {    	non-compiled	[CE]  	2	None	replace
149	[BUG]  [BUGGY]  if(c!=  '+'  ||  c  ==  '-')  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(c!=  '+'  ||  c  ==  '-')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(c!=  '+'  ||  c  ==  '-')  {	  if(c    ==    '+'    ||    c    ==    '-')    {    	non-compiled	[CE]  	16	None	replace
150	[BUG]  [BUGGY]  if(c  >=  '+'  ||  c  ==  '-')  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(c  >=  '+'  ||  c  ==  '-')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(c  >=  '+'  ||  c  ==  '-')  {	  if(c    ==    '+'    ||    c    ==    '-')    {    	non-compiled	[CE]  	16	None	replace
151	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  '9')  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(c  <  '0'  ||  c  >  '9')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(c  <  '0'  ||  c  >  '9')  {	  if(c    ==    '+'    ||    c    ==    '-')    {    	non-compiled	[CE]  	16	None	replace
152	[BUG]  [BUGGY]  if(c  ==  '+'  ||  c!=  '-')  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(c  ==  '+'  ||  c!=  '-')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(c  ==  '+'  ||  c!=  '-')  {	  if(c    ==    '+'    ||    c    ==    '-')    {    	non-compiled	[CE]  	16	None	replace
153	[BUG]  [BUGGY]  if(c  <  =  '0'  ||  c  >  '9')  {  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(c  <  =  '0'  ||  c  >  '9')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(c  <  =  '0'  ||  c  >  '9')  {	  if(c    ==    '+'    ||    c    ==    '-')    {    	non-compiled	[CE]  	16	None	replace
154	[BUG]  [BUGGY]  p  =  pos  +  2;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  p  =  pos  +  2;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	p  =  pos  +  2;	  p    =    pos    +    1;    	non-compiled	[CE]  	9	None	replace
155	[BUG]  [BUGGY]  p  =  pos  +  3;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  p  =  pos  +  3;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	p  =  pos  +  3;	  p    =    pos    +    1;    	non-compiled	[CE]  	9	None	replace
156	[BUG]  [BUGGY]  p  =  pos  +  4;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  p  =  pos  +  4;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	p  =  pos  +  4;	  p    =    pos    +    1;    	non-compiled	[CE]  	9	None	replace
157	[BUG]  [BUGGY]  p  =  i  +  1;  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  p  =  i  +  1;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	p  =  i  +  1;	  p    =    pos    +    1;    	non-compiled	[CE]  	9	None	replace
158	[BUG]  [BUGGY]  p  =  l  +  1;  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  p  =  l  +  1;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	p  =  l  +  1;	  p    =    pos    +    1;    	non-compiled	[CE]  	9	None	replace
159	[BUG]  [BUGGY]  int  lineNumber  =(int)Math.floor(pos  +  i);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =(int)Math.floor(pos  +  i);  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =(int)Math.floor(pos  +  i);	  int    lineNumber    =(int)Math.floor(p    +    i);    	non-compiled	[CE]  	11	None	replace
160	[BUG]  [BUGGY]  char  lineNumber  =(char)Math.floor(p  +  i);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  char  lineNumber  =(char)Math.floor(p  +  i);  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	char  lineNumber  =(char)Math.floor(p  +  i);	  int    lineNumber    =(int)Math.floor(p    +    i);    	non-compiled	[CE]  	11	None	replace
161	[BUG]  [BUGGY]  int  lineNumber  =(int)Math.floor(p  +  1);  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =(int)Math.floor(p  +  1);  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =(int)Math.floor(p  +  1);	  int    lineNumber    =(int)Math.floor(p    +    i);    	non-compiled	[CE]  	11	None	replace
162	[BUG]  [BUGGY]  int  lineNumber  =(int)Math.ceil(p  +  1);  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =(int)Math.ceil(p  +  1);  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =(int)Math.ceil(p  +  1);	  int    lineNumber    =(int)Math.floor(p    +    i);    	non-compiled	[CE]  	11	None	replace
163	[BUG]  [BUGGY]  int  lineNumber  =(int)Math.ceil(p  +  i);  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =(int)Math.ceil(p  +  i);  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =(int)Math.ceil(p  +  i);	  int    lineNumber    =(int)Math.floor(p    +    i);    	non-compiled	[CE]  	11	None	replace
164	[BUG]  [BUGGY]  int  lineNumber  =(int)Math.floor(buffer,  p  +  i);  [CE]  [FE]                                            ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =(int)Math.floor(buffer,  p  +  i);  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =(int)Math.floor(buffer,  p  +  i);	  int    lineNumber    =(int)Math.floor(p    +    i);    	non-compiled	[CE]  	11	None	replace
165	[BUG]  [BUGGY]  int  lineNumber  =(int)Math.rint(p  +  i);  [CE]  [FE]                                              ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =(int)Math.rint(p  +  i);  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =(int)Math.rint(p  +  i);	  int    lineNumber    =(int)Math.floor(p    +    i);    	non-compiled	[CE]  	11	None	replace
166	[BUG]  [BUGGY]  if  (pos  ==  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (pos  ==  NUMBER_CHAR_DECIMAL)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (pos  ==  NUMBER_CHAR_DECIMAL)  {	  if    (last    ==    NUMBER_CHAR_DECIMAL)    {    	non-compiled	[CE]  	26	None	replace
167	[BUG]  [BUGGY]  if  (last  <  =  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (last  <  =  NUMBER_CHAR_DECIMAL)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (last  <  =  NUMBER_CHAR_DECIMAL)  {	  if    (last    ==    NUMBER_CHAR_DECIMAL)    {    	non-compiled	[CE]  	26	None	replace
168	[BUG]  [BUGGY]  if(p  ==  0  ||  c  ==  '-')  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(p  ==  0  ||  c  ==  '-')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(p  ==  0  ||  c  ==  '-')  {	  if    (p    ==    0)    {    	non-compiled	[CE]  	43	None	replace
169	[BUG]  [BUGGY]  if(last  ==  0)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(last  ==  0)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(last  ==  0)  {	  if    (p    ==    0)    {    	non-compiled	[CE]  	43	None	replace
170	[BUG]  [BUGGY]  if(p  ==  0  ||  c  ==  '+')  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(p  ==  0  ||  c  ==  '+')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(p  ==  0  ||  c  ==  '+')  {	  if    (p    ==    0)    {    	non-compiled	[CE]  	43	None	replace
171	[BUG]  [BUGGY]  if(c!=  '-'  ||  c  ==  '+')  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(c!=  '-'  ||  c  ==  '+')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(c!=  '-'  ||  c  ==  '+')  {	  if(c    ==    '-'    ||    c    ==    '+')    {    	non-compiled	[CE]  	13	None	replace
172	[BUG]  [BUGGY]  if(c  >=  '-'  ||  c  ==  '+')  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(c  >=  '-'  ||  c  ==  '+')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(c  >=  '-'  ||  c  ==  '+')  {	  if(c    ==    '-'    ||    c    ==    '+')    {    	non-compiled	[CE]  	13	None	replace
173	[BUG]  [BUGGY]  if  (p  >=  NUMBER_CHAR_SIGN)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (p  >=  NUMBER_CHAR_SIGN)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (p  >=  NUMBER_CHAR_SIGN)  {	  if    (pos    >=    NUMBER_CHAR_SIGN)    {    	non-compiled	[CE]  	17	None	replace
174	[BUG]  [BUGGY]  if  (negative  &&  last  <  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (negative  &&  last  <  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (negative  &&  last  <  NUMBER_CHAR_EXP_SIGN)  {	  if    (negative    ||    last    <    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	52	None	replace
175	[BUG]  [BUGGY]  if  (negative  ||  last  >  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (negative  ||  last  >  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (negative  ||  last  >  NUMBER_CHAR_EXP_SIGN)  {	  if    (negative    ||    last    <    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	52	None	replace
176	[BUG]  [BUGGY]  if  (negative  &&  last  ==  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (negative  &&  last  ==  NUMBER_CHAR_DECIMAL)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (negative  &&  last  ==  NUMBER_CHAR_DECIMAL)  {	  if    (negative    ||    last    ==    NUMBER_CHAR_DECIMAL)    {    	non-compiled	[CE]  	36	None	replace
177	[BUG]  [BUGGY]  if(last  ==  NUMBER_CHAR_DIGIT)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(last  ==  NUMBER_CHAR_DIGIT)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(last  ==  NUMBER_CHAR_DIGIT)  {	  if(last!=    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	53	None	replace
178	[BUG]  [BUGGY]  pendChildren(pos,  buffer[pos  +  i]);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  pendChildren(pos,  buffer[pos  +  i]);  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	pendChildren(pos,  buffer[pos  +  i]);	  if(p    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    buffer[pos    +    i]    =    c;    }    	non-compiled	[CE]  	47	None	replace
179	[BUG]  [BUGGY]  if  (p  <  =  NUMBER_CHAR_SIGN)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (p  <  =  NUMBER_CHAR_SIGN)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (p  <  =  NUMBER_CHAR_SIGN)  {	  if    (pos    <    =    NUMBER_CHAR_SIGN)    {    	non-compiled	[CE]  	1	None	replace
180	[BUG]  [BUGGY]  if(negative  ||!lenient)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(negative  ||!lenient)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(negative  ||!lenient)  {	  if(!lenient)    {    	non-compiled	[CE]  	12	None	replace
181	[BUG]  [BUGGY]  if(!negative  ||!lenient)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(!negative  ||!lenient)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(!negative  ||!lenient)  {	  if(!lenient)    {    	non-compiled	[CE]  	12	None	replace
182	[BUG]  [BUGGY]  if(negative  ||  c  ==  '-'  ||  c  ==  '+')  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(negative  ||  c  ==  '-'  ||  c  ==  '+')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(negative  ||  c  ==  '-'  ||  c  ==  '+')  {	  if(negative    ||    c    ==    '-')    {    	non-compiled	[CE]  	54	None	replace
183	[BUG]  [BUGGY]  if(last  ==  NUMBER_CHAR_SIGN  ||  c  ==  '-')  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(last  ==  NUMBER_CHAR_SIGN  ||  c  ==  '-')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(last  ==  NUMBER_CHAR_SIGN  ||  c  ==  '-')  {	  if(negative    ||    c    ==    '-')    {    	non-compiled	[CE]  	54	None	replace
184	[BUG]  [BUGGY]  if(negative  ||  c  ==  '-'  ||  c  ==  ':')  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(negative  ||  c  ==  '-'  ||  c  ==  ':')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(negative  ||  c  ==  '-'  ||  c  ==  ':')  {	  if(negative    ||    c    ==    '-')    {    	non-compiled	[CE]  	54	None	replace
185	[BUG]  [BUGGY]  if(negative  ||  c  ==  '-'  ||  c  ==  '/')  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(negative  ||  c  ==  '-'  ||  c  ==  '/')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(negative  ||  c  ==  '-'  ||  c  ==  '/')  {	  if(negative    ||    c    ==    '-')    {    	non-compiled	[CE]  	54	None	replace
186	[BUG]  [BUGGY]  int  lineNumber  =(int)Math.floor(buffer[pos  +  i]);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =(int)Math.floor(buffer[pos  +  i]);  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =(int)Math.floor(buffer[pos  +  i]);	  int    lineNumber    =(int)Math.floor(p    +    i);    	non-compiled	[CE]  	11	None	replace
187	[BUG]  [BUGGY]  int  lineNumber  =(int)Math.floor(buffer[p  +  i]);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =(int)Math.floor(buffer[p  +  i]);  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =(int)Math.floor(buffer[p  +  i]);	  int    lineNumber    =(int)Math.floor(p    +    i);    	non-compiled	[CE]  	11	None	replace
188	[BUG]  [BUGGY]  int  lineNumber  =(int)Math.floor(buffer,  pos  +  i);  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =(int)Math.floor(buffer,  pos  +  i);  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =(int)Math.floor(buffer,  pos  +  i);	  int    lineNumber    =(int)Math.floor(p    +    i);    	non-compiled	[CE]  	11	None	replace
189	[BUG]  [BUGGY]  if(c  ==  '-'  ||  c  ==  '/')  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(c  ==  '-'  ||  c  ==  '/')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(c  ==  '-'  ||  c  ==  '/')  {	  if(c    ==    '-')    {    	non-compiled	[CE]  	14	None	replace
190	[BUG]  [BUGGY]  if(c  ==  '-'  ||  c  ==  '%')  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(c  ==  '-'  ||  c  ==  '%')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(c  ==  '-'  ||  c  ==  '%')  {	  if(c    ==    '-')    {    	non-compiled	[CE]  	14	None	replace
191	[BUG]  [BUGGY]  int  lineNumber  =  buffer[p  +  i  +  1];  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =  buffer[p  +  i  +  1];  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =  buffer[p  +  i  +  1];	  int    lineNumber    =    buffer[p    +    i];    	non-compiled	[CE]  	5	None	replace
192	[BUG]  [BUGGY]  int  lineNumber  =(int)pathIndices.peek();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =(int)pathIndices.peek();  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =(int)pathIndices.peek();	  int    lineNumber    =(int)PeekStack.peek();    	non-compiled	[CE]  	7	None	replace
193	[BUG]  [BUGGY]  if  (negative  ||  last  <  =  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (negative  ||  last  <  =  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (negative  ||  last  <  =  NUMBER_CHAR_EXP_DIGIT)  {	  if    (negative    ||    last    ==    NUMBER_CHAR_FRACTION_DIGIT)    {    	non-compiled	[CE]  	23	None	replace
194	[BUG]  [BUGGY]  if  (last  ==  NUMBER_CHAR_LONG  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (last  ==  NUMBER_CHAR_LONG  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (last  ==  NUMBER_CHAR_LONG  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {	  if    (last    ==    NUMBER_CHAR_LONG)    {    	non-compiled	[CE]  	27	None	replace
195	[BUG]  [BUGGY]  int  lineNumber  =  buffer[pos  +  i  +  1];  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =  buffer[pos  +  i  +  1];  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =  buffer[pos  +  i  +  1];	  int    lineNumber    =    buffer[pos    +    i];    	non-compiled	[CE]  	10	None	replace
196	[BUG]  [BUGGY]  int  lineNumber  =  buffer[pos  +  1);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =  buffer[pos  +  1);  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =  buffer[pos  +  1);	  int    lineNumber    =    buffer[pos    +    i];    	non-compiled	[CE]  	10	None	replace
197	[BUG]  [BUGGY]  if(p  ==  -1)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(p  ==  -1)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(p  ==  -1)  {	  if    (p    ==    0)    {    	non-compiled	[CE]  	43	None	replace
198	[BUG]  [BUGGY]  if(negative  ||  buffer[pos  +  1)  ==  '-')  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(negative  ||  buffer[pos  +  1)  ==  '-')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(negative  ||  buffer[pos  +  1)  ==  '-')  {	  if(negative    ||    buffer[pos    +    i]!=    '-')    {    	non-compiled	[CE]  	30	None	replace
199	[BUG]  [BUGGY]  if(negative  &&  buffer[pos  +  i]!=  '-')  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(negative  &&  buffer[pos  +  i]!=  '-')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(negative  &&  buffer[pos  +  i]!=  '-')  {	  if(negative    ||    buffer[pos    +    i]!=    '-')    {    	non-compiled	[CE]  	30	None	replace
200	[BUG]  [BUGGY]  int  lineNumber  =(int)pathStack[pos  +  1];  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =(int)pathStack[pos  +  1];  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =(int)pathStack[pos  +  1];	  int    lineNumber    =(int)PeekStack[pos    +    1];    	non-compiled	[CE]  	6	None	replace
201	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(c  ==  'e'  ||  c  ==  'E')  {	  if(c    ==    '+'    ||    c    ==    '-')    {    	non-compiled	[CE]  	16	None	replace
202	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(c  ==  '.'  ||  c  ==  ',')  {	  if(c    ==    '+'    ||    c    ==    '-')    {    	non-compiled	[CE]  	16	None	replace
203	[BUG]  [BUGGY]  if  (negative  &&  last  ==  NUMBER_CHAR_FLOAT)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (negative  &&  last  ==  NUMBER_CHAR_FLOAT)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (negative  &&  last  ==  NUMBER_CHAR_FLOAT)  {	  if    (negative    ||    last    ==    NUMBER_CHAR_FLOAT)    {    	non-compiled	[CE]  	25	None	replace
204	[BUG]  [BUGGY]  int  lineNumber  =(int)pathStack[p  +  i];  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =(int)pathStack[p  +  i];  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =(int)pathStack[p  +  i];	  int    lineNumber    =(int)PeekStack[p    +    i];    	non-compiled	[CE]  	8	None	replace
205	[BUG]  [BUGGY]  int  lineNumber  =(int)buffer[p  +  i];  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =(int)buffer[p  +  i];  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =(int)buffer[p  +  i];	  int    lineNumber    =(int)PeekStack[p    +    i];    	non-compiled	[CE]  	8	None	replace
206	[BUG]  [BUGGY]  pos  =  pos  +  2;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  pos  =  pos  +  2;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	pos  =  pos  +  2;	  pos    =    pos    +    1;    	non-compiled	[CE]  	40	None	replace
207	[BUG]  [BUGGY]  if(pos  +  1  <  limit  ||  buffer[pos  +  1]  ==  '-')  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(pos  +  1  <  limit  ||  buffer[pos  +  1]  ==  '-')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(pos  +  1  <  limit  ||  buffer[pos  +  1]  ==  '-')  {	  if(negative    ||    buffer[pos    +    i]    ==    '-')    {    	non-compiled	[CE]  	28	None	replace
208	[BUG]  [BUGGY]  allowNegative(false)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  c;  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  allowNegative(false)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  c;  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	allowNegative(false)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  c;  }	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    c;    }    	non-compiled	[CE]  	45	None	replace
209	[BUG]  [BUGGY]  allowNegative(false)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '-';  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  allowNegative(false)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '-';  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	allowNegative(false)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '-';  }	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    c;    }    	non-compiled	[CE]  	45	None	replace
210	[BUG]  [BUGGY]  allowNegatives(c)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '-';  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  allowNegatives(c)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '-';  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	allowNegatives(c)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '-';  }	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    c;    }    	non-compiled	[CE]  	45	None	replace
211	[BUG]  [BUGGY]  allowNegative(false)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '+';  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  allowNegative(false)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '+';  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	allowNegative(false)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '+';  }	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    c;    }    	non-compiled	[CE]  	45	None	replace
212	[BUG]  [BUGGY]  allowNegatives(c)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '+';  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  allowNegatives(c)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '+';  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	allowNegatives(c)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '+';  }	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    c;    }    	non-compiled	[CE]  	45	None	replace
213	[BUG]  [BUGGY]  allowNegative(false)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  NUMBER_CHAR_SIGN;  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  allowNegative(false)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  NUMBER_CHAR_SIGN;  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	allowNegative(false)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  NUMBER_CHAR_SIGN;  }	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    c;    }    	non-compiled	[CE]  	45	None	replace
214	[BUG]  [BUGGY]  if  (negative  &&  last!=  NUMBER_CHAR_SIGN)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (negative  &&  last!=  NUMBER_CHAR_SIGN)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (negative  &&  last!=  NUMBER_CHAR_SIGN)  {	  if    (negative    ||    last!=    NUMBER_CHAR_SIGN)    {    	non-compiled	[CE]  	4	None	replace
215	[BUG]  [BUGGY]  if(c  <  '-'  ||  c  >  '+')  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(c  <  '-'  ||  c  >  '+')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(c  <  '-'  ||  c  >  '+')  {	  if(c    ==    '-'    ||    c    ==    '+')    {    	non-compiled	[CE]  	13	None	replace
216	[BUG]  [BUGGY]  int  lineNumber  =  stack.length()  -  2;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =  stack.length()  -  2;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =  stack.length()  -  2;	  int    lineNumber    =    stack.length();    	non-compiled	[CE]  	42	None	replace
217	[BUG]  [BUGGY]  int  lineNumber  =  stack.indexOf('-')-  1;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =  stack.indexOf('-')-  1;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =  stack.indexOf('-')-  1;	  int    lineNumber    =    stack.size()    -    1;    	non-compiled	[CE]  	41	None	replace
218	[BUG]  [BUGGY]  int  lineNumber  =  stack.indexOf('-',  c)-  1;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =  stack.indexOf('-',  c)-  1;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =  stack.indexOf('-',  c)-  1;	  int    lineNumber    =    stack.size()    -    1;    	non-compiled	[CE]  	41	None	replace
219	[BUG]  [BUGGY]  if  (negative  &&  last  <  NUMBER_CHAR_SIGN)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (negative  &&  last  <  NUMBER_CHAR_SIGN)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (negative  &&  last  <  NUMBER_CHAR_SIGN)  {	  if    (negative    ||    last    <    NUMBER_CHAR_SIGN)    {    	non-compiled	[CE]  	24	None	replace
220	[BUG]  [BUGGY]  allowNegatives(p)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '.';  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  allowNegatives(p)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '.';  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	allowNegatives(p)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '.';  }	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    '.';    }    	non-compiled	[CE]  	48	None	replace
221	[BUG]  [BUGGY]  allowNegatives(false)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '.';  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  allowNegatives(false)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '.';  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	allowNegatives(false)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '.';  }	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    '.';    }    	non-compiled	[CE]  	48	None	replace
222	[BUG]  [BUGGY]  allowNegatives(p)  {  for(int  i  =  0;  i  <  limit  +  1;  ++i)  {  buffer[pos  +  i]  =  '.';  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  allowNegatives(p)  {  for(int  i  =  0;  i  <  limit  +  1;  ++i)  {  buffer[pos  +  i]  =  '.';  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	allowNegatives(p)  {  for(int  i  =  0;  i  <  limit  +  1;  ++i)  {  buffer[pos  +  i]  =  '.';  }	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    '.';    }    	non-compiled	[CE]  	48	None	replace
223	[BUG]  [BUGGY]  allowNegatives(false)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[p  +  i]  =  '.';  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  allowNegatives(false)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[p  +  i]  =  '.';  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	allowNegatives(false)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[p  +  i]  =  '.';  }	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    '.';    }    	non-compiled	[CE]  	48	None	replace
224	[BUG]  [BUGGY]  allowNegatives(p)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[pos  +  i]  =  '.';  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  allowNegatives(p)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[pos  +  i]  =  '.';  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	allowNegatives(p)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[pos  +  i]  =  '.';  }	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    '.';    }    	non-compiled	[CE]  	48	None	replace
225	[BUG]  [BUGGY]  allowNegatives(p)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  ',';  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  allowNegatives(p)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  ',';  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	allowNegatives(p)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  ',';  }	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    '.';    }    	non-compiled	[CE]  	48	None	replace
226	[BUG]  [BUGGY]  if  (negative  &&  last  <  =  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (negative  &&  last  <  =  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (negative  &&  last  <  =  NUMBER_CHAR_EXP_SIGN)  {	  if    (negative    ||    last    <    =    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	35	None	replace
227	[BUG]  [BUGGY]  allowNegatives(p)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '-';  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  allowNegatives(p)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '-';  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	allowNegatives(p)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '-';  }	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    '-';    }    	non-compiled	[CE]  	49	None	replace
228	[BUG]  [BUGGY]  allowNegatives(false)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '-';  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  allowNegatives(false)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '-';  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	allowNegatives(false)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '-';  }	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    '-';    }    	non-compiled	[CE]  	49	None	replace
229	[BUG]  [BUGGY]  allowNegatives(p)  {  for(int  i  =  0;  i  <  limit  +  1;  ++i)  {  buffer[pos  +  i]  =  '-';  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  allowNegatives(p)  {  for(int  i  =  0;  i  <  limit  +  1;  ++i)  {  buffer[pos  +  i]  =  '-';  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	allowNegatives(p)  {  for(int  i  =  0;  i  <  limit  +  1;  ++i)  {  buffer[pos  +  i]  =  '-';  }	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    '-';    }    	non-compiled	[CE]  	49	None	replace
230	[BUG]  [BUGGY]  allowNegatives(false)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[p  +  i]  =  '-';  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  allowNegatives(false)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[p  +  i]  =  '-';  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	allowNegatives(false)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[p  +  i]  =  '-';  }	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    '-';    }    	non-compiled	[CE]  	49	None	replace
231	[BUG]  [BUGGY]  allowNegatives(p)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '/';  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  allowNegatives(p)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '/';  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	allowNegatives(p)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '/';  }	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    '-';    }    	non-compiled	[CE]  	49	None	replace
232	[BUG]  [BUGGY]  allowNegatives(p)  {  for(int  i  =  0;  pos  <  limit;  ++i)  {  buffer[pos  +  i]  =  '-';  }  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  allowNegatives(p)  {  for(int  i  =  0;  pos  <  limit;  ++i)  {  buffer[pos  +  i]  =  '-';  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	allowNegatives(p)  {  for(int  i  =  0;  pos  <  limit;  ++i)  {  buffer[pos  +  i]  =  '-';  }	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    '-';    }    	non-compiled	[CE]  	49	None	replace
233	[BUG]  [BUGGY]  if(pos  >  0)  {  if(!fillBuffer(pos  +  1))  {  break;  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(pos  >  0)  {  if(!fillBuffer(pos  +  1))  {  break;  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(pos  >  0)  {  if(!fillBuffer(pos  +  1))  {  break;  }	  if(p    >    0)    {    if(!fillBuffer(pos    +    1))    {    break;    }    	non-compiled	[CE]  	46	None	replace
234	[BUG]  [BUGGY]  if(pos  >  0)  {  if(!fillBuffer(p  +  1))  {  break;  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(pos  >  0)  {  if(!fillBuffer(p  +  1))  {  break;  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(pos  >  0)  {  if(!fillBuffer(p  +  1))  {  break;  }	  if(p    >    0)    {    if(!fillBuffer(pos    +    1))    {    break;    }    	non-compiled	[CE]  	46	None	replace
235	[BUG]  [BUGGY]  if(pos  >  0)  {  if(!fillBuffer(1))  {  break;  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(pos  >  0)  {  if(!fillBuffer(1))  {  break;  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(pos  >  0)  {  if(!fillBuffer(1))  {  break;  }	  if(p    >    0)    {    if(!fillBuffer(pos    +    1))    {    break;    }    	non-compiled	[CE]  	46	None	replace
236	[BUG]  [BUGGY]  if(p  >  0)  {  if(!fillBuffer(1))  {  break;  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(p  >  0)  {  if(!fillBuffer(1))  {  break;  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(p  >  0)  {  if(!fillBuffer(1))  {  break;  }	  if(p    >    0)    {    if(!fillBuffer(pos    +    1))    {    break;    }    	non-compiled	[CE]  	46	None	replace
237	[BUG]  [BUGGY]  if(p  >  0)  {  if(!fillBuffer(pos  +  1)||  buffer[pos  +  1]  ==  '-')  {  break;  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(p  >  0)  {  if(!fillBuffer(pos  +  1)||  buffer[pos  +  1]  ==  '-')  {  break;  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(p  >  0)  {  if(!fillBuffer(pos  +  1)||  buffer[pos  +  1]  ==  '-')  {  break;  }	  if(p    >    0)    {    if(!fillBuffer(pos    +    1))    {    break;    }    	non-compiled	[CE]  	46	None	replace
238	[BUG]  [BUGGY]  if(p  >  0)  {  if(!fillBuffer(0))  {  break;  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(p  >  0)  {  if(!fillBuffer(0))  {  break;  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(p  >  0)  {  if(!fillBuffer(0))  {  break;  }	  if(p    >    0)    {    if(!fillBuffer(pos    +    1))    {    break;    }    	non-compiled	[CE]  	46	None	replace
239	[BUG]  [BUGGY]  if(negative  ||  buffer[pos  +  1)!=  '-')  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(negative  ||  buffer[pos  +  1)!=  '-')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(negative  ||  buffer[pos  +  1)!=  '-')  {	  if(negative    ||    buffer[pos    +    i]!=    '-')    {    	non-compiled	[CE]  	30	None	replace
240	[BUG]  [BUGGY]  if(pos  +  1  <  limit  ||  buffer[pos  +  1]!=  '-')  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(pos  +  1  <  limit  ||  buffer[pos  +  1]!=  '-')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(pos  +  1  <  limit  ||  buffer[pos  +  1]!=  '-')  {	  if(negative    ||    buffer[pos    +    i]!=    '-')    {    	non-compiled	[CE]  	30	None	replace
241	[BUG]  [BUGGY]  last  =  l  +  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  last  =  l  +  1;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	last  =  l  +  1;	  last    =    p    +    1;    	non-compiled	[CE]  	44	None	replace
242	[BUG]  [BUGGY]  if(l  ==  '-')  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '-';  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(l  ==  '-')  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '-';  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(l  ==  '-')  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '-';  }	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    '-';    }    	non-compiled	[CE]  	49	None	replace
243	[BUG]  [BUGGY]  if(l  ==  '.')  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '-';  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(l  ==  '.')  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '-';  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(l  ==  '.')  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '-';  }	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    '-';    }    	non-compiled	[CE]  	49	None	replace
244	[BUG]  [BUGGY]  if(l  ==  '+')  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '-';  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(l  ==  '+')  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '-';  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(l  ==  '+')  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '-';  }	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    '-';    }    	non-compiled	[CE]  	49	None	replace
245	[BUG]  [BUGGY]  if(p  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[pos  +  i]  =  '-';  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(p  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[pos  +  i]  =  '-';  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(p  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[pos  +  i]  =  '-';  }	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    '-';    }    	non-compiled	[CE]  	49	None	replace
246	[BUG]  [BUGGY]  if(p  >  0)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '/';  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(p  >  0)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '/';  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(p  >  0)  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '/';  }	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    '-';    }    	non-compiled	[CE]  	49	None	replace
247	[BUG]  [BUGGY]  if(pos  >  0)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(pos  >  0)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(pos  >  0)  {	  if    (p    ==    0)    {    	non-compiled	[CE]  	43	None	replace
248	[BUG]  [BUGGY]  if(p  >  0)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(p  >  0)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(p  >  0)  {	  if    (p    ==    0)    {    	non-compiled	[CE]  	43	None	replace
249	[BUG]  [BUGGY]  if(p  ==  0  ||  c  ==  '.')  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(p  ==  0  ||  c  ==  '.')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(p  ==  0  ||  c  ==  '.')  {	  if    (p    ==    0)    {    	non-compiled	[CE]  	43	None	replace
250	[BUG]  [BUGGY]  pos  =  last  +  1;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  pos  =  last  +  1;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	pos  =  last  +  1;	  pos    =    pos    +    1;    	non-compiled	[CE]  	40	None	replace
251	[BUG]  [BUGGY]  p  =  limit  +  1;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  p  =  limit  +  1;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	p  =  limit  +  1;	  p    =    pos    +    1;    	non-compiled	[CE]  	9	None	replace
252	[BUG]  [BUGGY]  int  lineNumber  =  stack.getLength()  -  1;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =  stack.getLength()  -  1;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =  stack.getLength()  -  1;	  int    lineNumber    =    stack.size()    -    1;    	non-compiled	[CE]  	41	None	replace
253	[BUG]  [BUGGY]  int  lineNumber  =  stack.getLength();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =  stack.getLength();  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =  stack.getLength();	  int    lineNumber    =    stack.size()    -    1;    	non-compiled	[CE]  	41	None	replace
254	[BUG]  [BUGGY]  if(last  ==  NUMBER_CHAR_SIGN  ||  buffer[pos  +  i]  ==  '-')  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(last  ==  NUMBER_CHAR_SIGN  ||  buffer[pos  +  i]  ==  '-')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(last  ==  NUMBER_CHAR_SIGN  ||  buffer[pos  +  i]  ==  '-')  {	  if(negative    ||    buffer[pos    +    i]    ==    '-')    {    	non-compiled	[CE]  	28	None	replace
255	[BUG]  [BUGGY]  if(lenient  ||  buffer[pos  +  i]  ==  '-')  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(lenient  ||  buffer[pos  +  i]  ==  '-')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(lenient  ||  buffer[pos  +  i]  ==  '-')  {	  if(negative    ||    buffer[pos    +    i]    ==    '-')    {    	non-compiled	[CE]  	28	None	replace
256	[BUG]  [BUGGY]  if(pos  >  0)  {  if(!fillBuffer(0))  {  break;  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(pos  >  0)  {  if(!fillBuffer(0))  {  break;  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(pos  >  0)  {  if(!fillBuffer(0))  {  break;  }	  if(p    >    0)    {    if(!fillBuffer(pos    +    1))    {    break;    }    	non-compiled	[CE]  	46	None	replace
257	[BUG]  [BUGGY]  if(l  ==  '.')  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '.';  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(l  ==  '.')  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '.';  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(l  ==  '.')  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '.';  }	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    '.';    }    	non-compiled	[CE]  	48	None	replace
258	[BUG]  [BUGGY]  if(l  ==  '-')  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '.';  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(l  ==  '-')  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '.';  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(l  ==  '-')  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '.';  }	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    '.';    }    	non-compiled	[CE]  	48	None	replace
259	[BUG]  [BUGGY]  if(l  ==  '+')  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '.';  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(l  ==  '+')  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '.';  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(l  ==  '+')  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '.';  }	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    '.';    }    	non-compiled	[CE]  	48	None	replace
260	[BUG]  [BUGGY]  if(p  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer[pos  +  i]  =  '.';  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(p  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer[pos  +  i]  =  '.';  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(p  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer[pos  +  i]  =  '.';  }	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    '.';    }    	non-compiled	[CE]  	48	None	replace
261	[BUG]  [BUGGY]  if(p  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[pos  +  i]  =  '.';  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(p  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[pos  +  i]  =  '.';  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(p  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[pos  +  i]  =  '.';  }	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    '.';    }    	non-compiled	[CE]  	48	None	replace
262	[BUG]  [BUGGY]  if(p  >  0)  {  int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '.';  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(p  >  0)  {  int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '.';  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(p  >  0)  {  int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  '.';  }	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    '.';    }    	non-compiled	[CE]  	48	None	replace
263	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '-')  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(c  ==  '.'  ||  c  ==  '-')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(c  ==  '.'  ||  c  ==  '-')  {	  if(c    ==    '+'    ||    c    ==    '-')    {    	non-compiled	[CE]  	16	None	replace
264	[BUG]  [BUGGY]  int  lineNumber  =  stack.length  -  1;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =  stack.length  -  1;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =  stack.length  -  1;	  int    lineNumber    =    stack.length();    	non-compiled	[CE]  	42	None	replace
265	[BUG]  [BUGGY]  if  (pos  <  limit)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (pos  <  limit)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (pos  <  limit)  {	  if    (pos    <    =    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	19	None	replace
266	[BUG]  [BUGGY]  if  (pos  <  =  limit)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (pos  <  =  limit)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (pos  <  =  limit)  {	  if    (pos    <    =    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	19	None	replace
267	[BUG]  [BUGGY]  if  (negative  ||  last!=  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (negative  ||  last!=  NUMBER_CHAR_DECIMAL)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (negative  ||  last!=  NUMBER_CHAR_DECIMAL)  {	  if    (negative    ||    last    ==    NUMBER_CHAR_DECIMAL)    {    	non-compiled	[CE]  	36	None	replace
268	[BUG]  [BUGGY]  if(l  ==  '-')  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  c;  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(l  ==  '-')  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  c;  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(l  ==  '-')  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  c;  }	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    c;    }    	non-compiled	[CE]  	45	None	replace
269	[BUG]  [BUGGY]  if(c  ==  '-')  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  c;  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(c  ==  '-')  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  c;  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(c  ==  '-')  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  c;  }	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    c;    }    	non-compiled	[CE]  	45	None	replace
270	[BUG]  [BUGGY]  if(l  ==  '.')  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  c;  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(l  ==  '.')  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  c;  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(l  ==  '.')  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  c;  }	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    c;    }    	non-compiled	[CE]  	45	None	replace
271	[BUG]  [BUGGY]  if(p  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[pos  +  i]  =  c;  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(p  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[pos  +  i]  =  c;  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(p  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[pos  +  i]  =  c;  }	  if(p    >    0)    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    c;    }    	non-compiled	[CE]  	45	None	replace
272	[BUG]  [BUGGY]  int  lineNumber  =  stack.indexOf('-');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =  stack.indexOf('-');  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =  stack.indexOf('-');	  int    lineNumber    =    stack.size();    	non-compiled	[CE]  	38	None	replace
273	[BUG]  [BUGGY]  int  lineNumber  =(int)pathIndices[pos  +  1];  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =(int)pathIndices[pos  +  1];  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =(int)pathIndices[pos  +  1];	  int    lineNumber    =(int)PeekStack[pos    +    1];    	non-compiled	[CE]  	6	None	replace
274	[BUG]  [BUGGY]  int  lineNumber  =(int)PeekStack[pos  +  1]  -  1;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =(int)PeekStack[pos  +  1]  -  1;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =(int)PeekStack[pos  +  1]  -  1;	  int    lineNumber    =(int)PeekStack[pos    +    1];    	non-compiled	[CE]  	6	None	replace
275	[BUG]  [BUGGY]  if(!lenient  &&!fillBuffer(pos  +  1))  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(!lenient  &&!fillBuffer(pos  +  1))  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(!lenient  &&!fillBuffer(pos  +  1))  {	  if(!lenient)    {    	non-compiled	[CE]  	12	None	replace
276	[BUG]  [BUGGY]  if(!lenient  &&  c  ==  '-')  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(!lenient  &&  c  ==  '-')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(!lenient  &&  c  ==  '-')  {	  if(!lenient)    {    	non-compiled	[CE]  	12	None	replace
277	[BUG]  [BUGGY]  if(!lenient  &&  last  ==  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(!lenient  &&  last  ==  NUMBER_CHAR_DECIMAL)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(!lenient  &&  last  ==  NUMBER_CHAR_DECIMAL)  {	  if(!lenient)    {    	non-compiled	[CE]  	12	None	replace
278	[BUG]  [BUGGY]  if(l  ==  '-')  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer[pos  +  i]  =  c;  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(l  ==  '-')  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer[pos  +  i]  =  c;  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(l  ==  '-')  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer[pos  +  i]  =  c;  }	  if(p    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    buffer[pos    +    i]    =    c;    }    	non-compiled	[CE]  	47	None	replace
279	[BUG]  [BUGGY]  if(p  >  0)  {  for(int  i  =  1;  i  <  len;  ++i)  {  buffer[pos  +  i]  =  c;  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(p  >  0)  {  for(int  i  =  1;  i  <  len;  ++i)  {  buffer[pos  +  i]  =  c;  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(p  >  0)  {  for(int  i  =  1;  i  <  len;  ++i)  {  buffer[pos  +  i]  =  c;  }	  if(p    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    buffer[pos    +    i]    =    c;    }    	non-compiled	[CE]  	47	None	replace
280	[BUG]  [BUGGY]  if(p  >  0)  {  for(int  i  =  0,  len  =  buffer.length;  ++i)  {  buffer[pos  +  i]  =  c;  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(p  >  0)  {  for(int  i  =  0,  len  =  buffer.length;  ++i)  {  buffer[pos  +  i]  =  c;  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(p  >  0)  {  for(int  i  =  0,  len  =  buffer.length;  ++i)  {  buffer[pos  +  i]  =  c;  }	  if(p    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    buffer[pos    +    i]    =    c;    }    	non-compiled	[CE]  	47	None	replace
281	[BUG]  [BUGGY]  if(p  >  0)  {  for(int  i  =  0;  i  <  limits;  ++i)  {  buffer[pos  +  i]  =  c;  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(p  >  0)  {  for(int  i  =  0;  i  <  limits;  ++i)  {  buffer[pos  +  i]  =  c;  }  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(p  >  0)  {  for(int  i  =  0;  i  <  limits;  ++i)  {  buffer[pos  +  i]  =  c;  }	  if(p    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    buffer[pos    +    i]    =    c;    }    	non-compiled	[CE]  	47	None	replace
282	[BUG]  [BUGGY]  int  lineNumber  =  buffer[pos  +  i]  &  0xFF;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  int  lineNumber  =  buffer[pos  +  i]  &  0xFF;  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	int  lineNumber  =  buffer[pos  +  i]  &  0xFF;	  int    lineNumber    =    buffer[pos    +    i];    	non-compiled	[CE]  	10	None	replace
283	[BUG]  [BUGGY]  if(p  ==  '-'  ||  c  ==  '+')  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(p  ==  '-'  ||  c  ==  '+')  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(p  ==  '-'  ||  c  ==  '+')  {	  if(l    ==    '-'    ||    c    ==    '+')    {    	non-compiled	[CE]  	15	None	replace
284	[BUG]  [BUGGY]  if  (last  <  =  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if  (last  <  =  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if  (last  <  =  NUMBER_CHAR_EXP_DIGIT)  {	  if    (last    ==    NUMBER_CHAR_EXP_DIGIT)    {    	non-compiled	[CE]  	50	None	replace
285	[BUG]  [BUGGY]  if(last  ==  NUMBER_CHAR_SEXP_SIGN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!fillBuffer(i  +  1))  {  break;  }  p  =  pos;  l  =  limit;  }  char  c  =  buffer[p  +  i];  switch  (c)  {  case  '-':      [BUGGY]  if(last  ==  NUMBER_CHAR_SEXP_SIGN)  {  [BUGGY]      negative  =  true;  last  =  NUMBER_CHAR_SIGN;  continue;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E)  {  last  =  NUMBER_CHAR_EXP_SIGN;  continue;  }  return  PEEKED_NONE;  case  '+':  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.31622776601683794	672	672	1	replace	if(last  ==  NUMBER_CHAR_SEXP_SIGN)  {	  if(pos    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	18	None	replace
