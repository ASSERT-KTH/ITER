bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BIGINT  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BIGINT  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BIGINT  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_BIGINT    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	27	None	replace
2	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUFFER  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BUFFER  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BUFFER  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_BIGINT    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	27	None	replace
3	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_STRING  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_STRING  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_STRING  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_BIGINT    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	27	None	replace
4	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_BIGINT    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	27	None	replace
5	[BUG]  [BUGGY]  pos  =  doPeek();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  pos  =  doPeek();  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	pos  =  doPeek();	  if(p    ==    PEEKED_BUFFERED)    {    pos    =    doPeek();    }    	non-compiled	[CE]  	40	None	replace
6	[BUG]  [BUGGY]  else  if(p  ==  PEEKED_BUFFERED)  {  pos  =  doPeek();  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  else  if(p  ==  PEEKED_BUFFERED)  {  pos  =  doPeek();  }  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	else  if(p  ==  PEEKED_BUFFERED)  {  pos  =  doPeek();  }	  if(p    ==    PEEKED_BUFFERED)    {    pos    =    doPeek();    }    	non-compiled	[CE]  	40	None	replace
7	[BUG]  [BUGGY]  else  if(p  ==  PEEKED_BUFFERED)  {  pos  =  doSingleQuotedValue();  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  else  if(p  ==  PEEKED_BUFFERED)  {  pos  =  doSingleQuotedValue();  }  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	else  if(p  ==  PEEKED_BUFFERED)  {  pos  =  doSingleQuotedValue();  }	  if(p    ==    PEEKED_BUFFERED)    {    pos    =    doPeek();    }    	non-compiled	[CE]  	40	None	replace
8	[BUG]  [BUGGY]  pos  =  doSingleQuotedValue();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  pos  =  doSingleQuotedValue();  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	pos  =  doSingleQuotedValue();	  if(p    ==    PEEKED_BUFFERED)    {    pos    =    doPeek();    }    	non-compiled	[CE]  	40	None	replace
9	[BUG]  [BUGGY]  else  if(p  ==  PEEKED_BUFFERED)  {  pos  =  doLong();  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  else  if(p  ==  PEEKED_BUFFERED)  {  pos  =  doLong();  }  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	else  if(p  ==  PEEKED_BUFFERED)  {  pos  =  doLong();  }	  if(p    ==    PEEKED_BUFFERED)    {    pos    =    doPeek();    }    	non-compiled	[CE]  	40	None	replace
10	[BUG]  [BUGGY]  else  if(p  ==  PEEKED_BUFFERED)  {  pos  =  doInt();  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  else  if(p  ==  PEEKED_BUFFERED)  {  pos  =  doInt();  }  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	else  if(p  ==  PEEKED_BUFFERED)  {  pos  =  doInt();  }	  if(p    ==    PEEKED_BUFFERED)    {    pos    =    doPeek();    }    	non-compiled	[CE]  	40	None	replace
11	[BUG]  [BUGGY]  else  if(p  ==  PEEKED_BUFFERED)  {  pos  =  doSecond();  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  else  if(p  ==  PEEKED_BUFFERED)  {  pos  =  doSecond();  }  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	else  if(p  ==  PEEKED_BUFFERED)  {  pos  =  doSecond();  }	  if(p    ==    PEEKED_BUFFERED)    {    pos    =    doPeek();    }    	non-compiled	[CE]  	40	None	replace
12	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BIGINT  ||  peekedString!=  null)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BIGINT  ||  peekedString!=  null)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BIGINT  ||  peekedString!=  null)  {	  }    else    if(p    ==    PEEKED_BIGINT    &&    peekedString!=    null)    {    	non-compiled	[CE]  	44	None	replace
13	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUFFER  ||  peekedString!=  null)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BUFFER  ||  peekedString!=  null)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BUFFER  ||  peekedString!=  null)  {	  }    else    if(p    ==    PEEKED_BIGINT    &&    peekedString!=    null)    {    	non-compiled	[CE]  	44	None	replace
14	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  ||  result  ==  null)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  ||  result  ==  null)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BUFFERED  ||  result  ==  null)  {	  }    else    if(p    ==    PEEKED_BUFFERED    &&    result    ==    null)    {    	non-compiled	[CE]  	16	None	replace
15	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  &&  result!=  null)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  &&  result!=  null)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BUFFERED  &&  result!=  null)  {	  }    else    if(p    ==    PEEKED_BUFFERED    &&    result    ==    null)    {    	non-compiled	[CE]  	16	None	replace
16	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	39	None	replace
17	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BOOLEAN_QUOTED)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BOOLEAN_QUOTED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BOOLEAN_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	39	None	replace
18	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BEGIN_QUOTED)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BEGIN_QUOTED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BEGIN_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	39	None	replace
19	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_UNQUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_UNQUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_UNQUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	39	None	replace
20	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  &&  p  ==  PEEKED_UNQUOTED)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  &&  p  ==  PEEKED_UNQUOTED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BUFFERED  &&  p  ==  PEEKED_UNQUOTED)  {	  }    else    if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_UNQUOTED)    {    	non-compiled	[CE]  	21	None	replace
21	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  &&  p  ==  PEEKED_BEGIN_ARRAY)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  &&  p  ==  PEEKED_BEGIN_ARRAY)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BUFFERED  &&  p  ==  PEEKED_BEGIN_ARRAY)  {	  }    else    if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_BEGIN_ARRAY)    {    	non-compiled	[CE]  	34	None	replace
22	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTE)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTE)  {	  }    else    if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_BEGIN_ARRAY)    {    	non-compiled	[CE]  	34	None	replace
23	[BUG]  [BUGGY]  result  =  nextUnquotedValue('   "');  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  result  =  nextUnquotedValue('   "');  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	result  =  nextUnquotedValue('   "');	  result    =    nextQuotedValue('       "');    	non-compiled	[CE]  	4	None	replace
24	[BUG]  [BUGGY]  result  =  nextSingLEQUOTEDValue('   "');  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  result  =  nextSingLEQUOTEDValue('   "');  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	result  =  nextSingLEQUOTEDValue('   "');	  result    =    nextQuotedValue('       "');    	non-compiled	[CE]  	4	None	replace
25	[BUG]  [BUGGY]  result  =  nextSingleQuotedValue('   "');  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  result  =  nextSingleQuotedValue('   "');  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	result  =  nextSingleQuotedValue('   "');	  result    =    nextQuotedValue('       "');    	non-compiled	[CE]  	4	None	replace
26	[BUG]  [BUGGY]  result  =  nextSingleQuotedValue('.');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  result  =  nextSingleQuotedValue('.');  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	result  =  nextSingleQuotedValue('.');	  result    =    nextSingleQuotedValue(''');    	non-compiled	[CE]  	3	None	replace
27	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  &&  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  &&  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BUFFERED  &&  p  ==  PEEKED_SINGLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	18	None	replace
28	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUCKET  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BUCKET  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BUCKET  ||  p  ==  PEEKED_SINGLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	18	None	replace
29	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_SINGLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	18	None	replace
30	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_OBJECT)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_OBJECT)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_OBJECT)  {	  }    else    if(p    ==    PEEKED_BUFFER)    {    	non-compiled	[CE]  	22	None	replace
31	[BUG]  [BUGGY]  result  =  nextSingleQUOTEDValue(''');  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  result  =  nextSingleQUOTEDValue(''');  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	result  =  nextSingleQUOTEDValue(''');	  result    =    nextValue(''');    	non-compiled	[CE]  	7	None	replace
32	[BUG]  [BUGGY]  result  =  nextSingLEQUOTEDValue(''');  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  result  =  nextSingLEQUOTEDValue(''');  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	result  =  nextSingLEQUOTEDValue(''');	  result    =    nextValue(''');    	non-compiled	[CE]  	7	None	replace
33	[BUG]  [BUGGY]  result  =  nextQuotedValue('[');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  result  =  nextQuotedValue('[');  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	result  =  nextQuotedValue('[');	  if(p    ==    PEEKED_BUFFERED)    {    pos    =    doPeek();    }    else    {    result    =    nextQuotedValue(''');    }    	non-compiled	[CE]  	41	None	replace
34	[BUG]  [BUGGY]  Result  result  =  nextQuotedValue(''');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  Result  result  =  nextQuotedValue(''');  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	Result  result  =  nextQuotedValue(''');	  if(p    ==    PEEKED_BUFFERED)    {    pos    =    doPeek();    }    else    {    result    =    nextQuotedValue(''');    }    	non-compiled	[CE]  	41	None	replace
35	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  &&  p  ==  PEEKED_DOUBLE)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  &&  p  ==  PEEKED_DOUBLE)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BUFFERED  &&  p  ==  PEEKED_DOUBLE)  {	  }    else    if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_DOUBLE)    {    	non-compiled	[CE]  	25	None	replace
36	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_DOUBLE  ||  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_DOUBLE  ||  p  ==  PEEKED_BUFFERED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_DOUBLE  ||  p  ==  PEEKED_BUFFERED)  {	  }    else    if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_DOUBLE)    {    	non-compiled	[CE]  	25	None	replace
37	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_DOUBLE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_DOUBLE)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_DOUBLE)  {	  }    else    if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_DOUBLE)    {    	non-compiled	[CE]  	25	None	replace
38	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BLOCK  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BLOCK  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BLOCK  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_BLOCK)    {    	non-compiled	[CE]  	31	None	replace
39	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BLOCK  ||  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BLOCK  ||  p  ==  PEEKED_BUFFERED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BLOCK  ||  p  ==  PEEKED_BUFFERED)  {	  }    else    if(p    ==    PEEKED_BLOCK)    {    	non-compiled	[CE]  	31	None	replace
40	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BLOCK  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BLOCK  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BLOCK  ||  p  ==  PEEKED_SINGLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_BLOCK)    {    	non-compiled	[CE]  	31	None	replace
41	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_DECIMAL)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_DECIMAL)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_DECIMAL)  {	  }    else    if(p    ==    NUMBER_CHAR_QUOTED)    {    	non-compiled	[CE]  	26	None	replace
42	[BUG]  [BUGGY]  pos  =  nextUnquotedValue(''');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  pos  =  nextUnquotedValue(''');  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	pos  =  nextUnquotedValue(''');	  pos    =    nextQuotedValue(''');    	non-compiled	[CE]  	37	None	replace
43	[BUG]  [BUGGY]  pos  =  nextQuotedValue('   "');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  pos  =  nextQuotedValue('   "');  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	pos  =  nextQuotedValue('   "');	  pos    =    nextQuotedValue(''');    	non-compiled	[CE]  	37	None	replace
44	[BUG]  [BUGGY]  pos  =  nextUnquotedValue('   "');  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  pos  =  nextUnquotedValue('   "');  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	pos  =  nextUnquotedValue('   "');	  pos    =    nextQuotedValue(''');    	non-compiled	[CE]  	37	None	replace
45	[BUG]  [BUGGY]  pos  =  nextUnquotedValue();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  pos  =  nextUnquotedValue();  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	pos  =  nextUnquotedValue();	  pos    =    nextQuotedValue(''');    	non-compiled	[CE]  	37	None	replace
46	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  ||  peekedString  ==  null)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  ||  peekedString  ==  null)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BUFFERED  ||  peekedString  ==  null)  {	  }    else    if(p    ==    PEEKED_BUFFERED    &&    peekedString    ==    null)    {    	non-compiled	[CE]  	13	None	replace
47	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  &&  p  ==  PEEKED_BOOLEAN)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  &&  p  ==  PEEKED_BOOLEAN)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BUFFERED  &&  p  ==  PEEKED_BOOLEAN)  {	  }    else    if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_BOOLEAN)    {    	non-compiled	[CE]  	8	None	replace
48	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_BUFFERED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_BUFFERED)  {	  }    else    if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_BOOLEAN)    {    	non-compiled	[CE]  	8	None	replace
49	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_OBJECT)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_OBJECT)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_OBJECT)  {	  }    else    if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_BOOLEAN)    {    	non-compiled	[CE]  	8	None	replace
50	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BIGINT  &&  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BIGINT  &&  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BIGINT  &&  p  ==  PEEKED_SINGLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_BIGINT    ||    p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	29	None	replace
51	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUFFER  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BUFFER  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BUFFER  ||  p  ==  PEEKED_SINGLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_BIGINT    ||    p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	29	None	replace
52	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_DECIMAL  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_DECIMAL  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_DECIMAL  ||  p  ==  PEEKED_SINGLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_BIGINT    ||    p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	29	None	replace
53	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BACKSLASH  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BACKSLASH  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BACKSLASH  ||  p  ==  PEEKED_SINGLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_BACKSLASH    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	19	None	replace
54	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BACKSLASH  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BACKSLASH  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BACKSLASH  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_BACKSLASH    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	19	None	replace
55	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BACKSLASH)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BACKSLASH)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BACKSLASH)  {	  }    else    if(p    ==    PEEKED_BACKSLASH    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	19	None	replace
56	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BACKSLASH  ||  p  ==  PEEKED_UNQUOTED)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BACKSLASH  ||  p  ==  PEEKED_UNQUOTED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BACKSLASH  ||  p  ==  PEEKED_UNQUOTED)  {	  }    else    if(p    ==    PEEKED_BACKSLASH    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	19	None	replace
57	[BUG]  [BUGGY]  result  =  nextSingleQuotedValue();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  result  =  nextSingleQuotedValue();  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	result  =  nextSingleQuotedValue();	  result    =    nextUnquotedValue();    	non-compiled	[CE]  	6	None	replace
58	[BUG]  [BUGGY]  result  =  nextQuotedValue();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  result  =  nextQuotedValue();  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	result  =  nextQuotedValue();	  result    =    nextUnquotedValue();    	non-compiled	[CE]  	6	None	replace
59	[BUG]  [BUGGY]  result  =  nextSingLEQUOTEDValue();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  result  =  nextSingLEQUOTEDValue();  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	result  =  nextSingLEQUOTEDValue();	  result    =    nextUnquotedValue();    	non-compiled	[CE]  	6	None	replace
60	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_FRACTION_DIGIT)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_FRACTION_DIGIT)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_FRACTION_DIGIT)  {	  }    else    if(p    ==    NUMBER_CHAR_SIGN)    {    	non-compiled	[CE]  	23	None	replace
61	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_UNQUOTED)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_UNQUOTED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_UNQUOTED)  {	  }    else    if(p    ==    PEEKED_BUCKET)    {    	non-compiled	[CE]  	32	None	replace
62	[BUG]  [BUGGY]  Result  =  nextUnquotedValue(''');  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  Result  =  nextUnquotedValue(''');  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	Result  =  nextUnquotedValue(''');	  Result    =    nextQuotedValue(''');    	non-compiled	[CE]  	5	None	replace
63	[BUG]  [BUGGY]  Result  =  nextUnquotedValue('   "');  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  Result  =  nextUnquotedValue('   "');  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	Result  =  nextUnquotedValue('   "');	  Result    =    nextQuotedValue(''');    	non-compiled	[CE]  	5	None	replace
64	[BUG]  [BUGGY]  Result  =  nextUnquotedValue();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  Result  =  nextUnquotedValue();  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	Result  =  nextUnquotedValue();	  Result    =    nextQuotedValue(''');    	non-compiled	[CE]  	5	None	replace
65	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_BUFFERED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_BUFFERED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	38	None	replace
66	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BOOLEAN)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BOOLEAN)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BOOLEAN)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	38	None	replace
67	[BUG]  [BUGGY]  }  else  if(p  >=  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  >=  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  >=  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    >=    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	24	None	replace
68	[BUG]  [BUGGY]  }  else  if(p  <  =  PEEKED_BUFFERED)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  <  =  PEEKED_BUFFERED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  <  =  PEEKED_BUFFERED)  {	  }    else    if(p    >=    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	24	None	replace
69	[BUG]  [BUGGY]  }  else  if(p!=  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p!=  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p!=  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p!=    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	9	None	replace
70	[BUG]  [BUGGY]  result  =  nextUnquotedValue('  ');  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  result  =  nextUnquotedValue('  ');  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	result  =  nextUnquotedValue('  ');	  result    =    nextQuotedValue('    ');    	non-compiled	[CE]  	36	None	replace
71	[BUG]  [BUGGY]  result  =  nextQuotedValue('  ',  PEEKED_DOUBLE_QUOTED);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  result  =  nextQuotedValue('  ',  PEEKED_DOUBLE_QUOTED);  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	result  =  nextQuotedValue('  ',  PEEKED_DOUBLE_QUOTED);	  result    =    nextQuotedValue('    ');    	non-compiled	[CE]  	36	None	replace
72	[BUG]  [BUGGY]  result  =  nextSingLEQUOTEDValue('  ');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  result  =  nextSingLEQUOTEDValue('  ');  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	result  =  nextSingLEQUOTEDValue('  ');	  result    =    nextQuotedValue('    ');    	non-compiled	[CE]  	36	None	replace
73	[BUG]  [BUGGY]  result  =  nextSingleQuotedValue('  ');  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  result  =  nextSingleQuotedValue('  ');  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	result  =  nextSingleQuotedValue('  ');	  result    =    nextQuotedValue('    ');    	non-compiled	[CE]  	36	None	replace
74	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  &&  p  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  &&  p  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BUFFERED  &&  p  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_BUFFERED    &&    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	17	None	replace
75	[BUG]  [BUGGY]  }  else  if(p!=  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p!=  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p!=  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_BUFFERED    &&    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	17	None	replace
76	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  &&  p!=  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  &&  p!=  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BUFFERED  &&  p!=  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_BUFFERED    &&    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	17	None	replace
77	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_BIGINT)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_BIGINT)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_BIGINT)  {	  }    else    if(p    ==    PEEKED_BIGINT    ||    p    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	28	None	replace
78	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BIGINT  &&  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BIGINT  &&  p  ==  PEEKED_BUFFERED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BIGINT  &&  p  ==  PEEKED_BUFFERED)  {	  }    else    if(p    ==    PEEKED_BIGINT    ||    p    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	28	None	replace
79	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  ||  peekedString.length()  ==  0)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  ||  peekedString.length()  ==  0)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BUFFERED  ||  peekedString.length()  ==  0)  {	  }    else    if(p    ==    PEEKED_BUFFERED    ||    peekedString!=    null)    {    	non-compiled	[CE]  	12	None	replace
80	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  ||  peekedString  >=  null)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  ||  peekedString  >=  null)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BUFFERED  ||  peekedString  >=  null)  {	  }    else    if(p    ==    PEEKED_BUFFERED    ||    peekedString!=    null)    {    	non-compiled	[CE]  	12	None	replace
81	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  ||  peekedString  =  null)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  ||  peekedString  =  null)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BUFFERED  ||  peekedString  =  null)  {	  }    else    if(p    ==    PEEKED_BUFFERED    ||    peekedString!=    null)    {    	non-compiled	[CE]  	12	None	replace
82	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_DOUBLE_QUOTED  &&  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_DOUBLE_QUOTED  &&  p  ==  PEEKED_BUFFERED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_DOUBLE_QUOTED  &&  p  ==  PEEKED_BUFFERED)  {	  }    else    if(p    ==    PEEKED_DOUBLE_QUOTED    ||    p    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	11	None	replace
83	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_STRING  ||  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_STRING  ||  p  ==  PEEKED_BUFFERED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_STRING  ||  p  ==  PEEKED_BUFFERED)  {	  }    else    if(p    ==    PEEKED_DOUBLE_QUOTED    ||    p    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	11	None	replace
84	[BUG]  [BUGGY]  Result  =  nextQuotedValue('   "');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  Result  =  nextQuotedValue('   "');  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	Result  =  nextQuotedValue('   "');	  if(p    ==    PEEKED_BUFFERED)    {    pos    =    doPeek();    }    else    {    result    =    nextQuotedValue('       "');    }    	non-compiled	[CE]  	42	None	replace
85	[BUG]  [BUGGY]  Result  result  =  nextQuotedValue('   "');  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  Result  result  =  nextQuotedValue('   "');  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	Result  result  =  nextQuotedValue('   "');	  if(p    ==    PEEKED_BUFFERED)    {    pos    =    doPeek();    }    else    {    result    =    nextQuotedValue('       "');    }    	non-compiled	[CE]  	42	None	replace
86	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_FLOAT)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_FLOAT)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_FLOAT)  {	  }    else    if(p    ==    NUMBER_CHAR_SINGLE_QUOTED)    {    	non-compiled	[CE]  	10	None	replace
87	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUCKET  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BUCKET  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BUCKET  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_BUCKET    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	20	None	replace
88	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  ||  peekedString  <  null)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  ||  peekedString  <  null)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BUFFERED  ||  peekedString  <  null)  {	  }    else    if(p    ==    PEEKED_BUFFERED    &&    peekedString    <    null)    {    	non-compiled	[CE]  	15	None	replace
89	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  &&  peekedString  [Delete]  null)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  &&  peekedString  [Delete]  null)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BUFFERED  &&  peekedString  [Delete]  null)  {	  }    else    if(p    ==    PEEKED_BUFFERED    &&    peekedString    <    null)    {    	non-compiled	[CE]  	15	None	replace
90	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_BEGIN_ARRAY)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_BEGIN_ARRAY)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_BEGIN_ARRAY)  {	  }    else    if(p    ==    PEEKED_BEGIN_ARRAY    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	35	None	replace
91	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BEGIN_ARRAY  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BEGIN_ARRAY  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BEGIN_ARRAY  ||  p  ==  PEEKED_SINGLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_BEGIN_ARRAY    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	35	None	replace
92	[BUG]  [BUGGY]  }  else  if(p  <  PEEKED_BUFFERED)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  <  PEEKED_BUFFERED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  <  PEEKED_BUFFERED)  {	  }    else    if(p    >=    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	24	None	replace
93	[BUG]  [BUGGY]  }  else  if(p  >  PEEKED_BUFFERED)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  >  PEEKED_BUFFERED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  >  PEEKED_BUFFERED)  {	  }    else    if(p    >=    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	24	None	replace
94	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_MINUS  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_MINUS  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_MINUS  ||  p  ==  PEEKED_SINGLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	39	None	replace
95	[BUG]  [BUGGY]  result  =  nextQuotedValue(''+  PEEKED_DOUBLE_QUOTED);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  result  =  nextQuotedValue(''+  PEEKED_DOUBLE_QUOTED);  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	result  =  nextQuotedValue(''+  PEEKED_DOUBLE_QUOTED);	  result    =    nextQuotedValue('    ');    	non-compiled	[CE]  	36	None	replace
96	[BUG]  [BUGGY]  result  =  nextQuotedValue(''+  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  result  =  nextQuotedValue(''+  1);  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	result  =  nextQuotedValue(''+  1);	  result    =    nextQuotedValue('    ');    	non-compiled	[CE]  	36	None	replace
97	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BEGIN_ARRAY)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BEGIN_ARRAY)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BEGIN_ARRAY)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	38	None	replace
98	[BUG]  [BUGGY]  result  =  nextQuotedValue('   "',  PEEKED_DOUBLE_QUOTED);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  result  =  nextQuotedValue('   "',  PEEKED_DOUBLE_QUOTED);  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	result  =  nextQuotedValue('   "',  PEEKED_DOUBLE_QUOTED);	  result    =    nextQuotedValue('       "');    	non-compiled	[CE]  	4	None	replace
99	[BUG]  [BUGGY]  }  else  if(p  ==  NUMBER_CHAR_SIGN  ||  p  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  NUMBER_CHAR_SIGN  ||  p  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  NUMBER_CHAR_SIGN  ||  p  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(p    ==    NUMBER_CHAR_SIGN)    {    	non-compiled	[CE]  	23	None	replace
100	[BUG]  [BUGGY]  }  else  if(p  ==  NUMBER_CHAR_SIGN  ||  p  ==  NUMBER_CHAR_FRACTION_DIGIT)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  NUMBER_CHAR_SIGN  ||  p  ==  NUMBER_CHAR_FRACTION_DIGIT)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  NUMBER_CHAR_SIGN  ||  p  ==  NUMBER_CHAR_FRACTION_DIGIT)  {	  }    else    if(p    ==    NUMBER_CHAR_SIGN)    {    	non-compiled	[CE]  	23	None	replace
101	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BEGIN_ARRAY  ||  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BEGIN_ARRAY  ||  p  ==  PEEKED_BUFFERED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BEGIN_ARRAY  ||  p  ==  PEEKED_BUFFERED)  {	  }    else    if(p    ==    PEEKED_DOUBLE_QUOTED    ||    p    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	11	None	replace
102	[BUG]  [BUGGY]  result  =  nextQuotedValue(']');  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  result  =  nextQuotedValue(']');  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	result  =  nextQuotedValue(']');	  result    =    nextUnquotedValue();    	non-compiled	[CE]  	6	None	replace
103	[BUG]  [BUGGY]  }  else  if(p  ==  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  NUMBER_CHAR_DECIMAL)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  NUMBER_CHAR_DECIMAL)  {	  }    else    if(p    ==    NUMBER_CHAR_QUOTED)    {    	non-compiled	[CE]  	26	None	replace
104	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_FUNCTION)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_FUNCTION)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_FUNCTION)  {	  }    else    if(p!=    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	9	None	replace
105	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BACKSLASH  ||  p  ==  PEEKED_BEGIN_ARRAY)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BACKSLASH  ||  p  ==  PEEKED_BEGIN_ARRAY)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BACKSLASH  ||  p  ==  PEEKED_BEGIN_ARRAY)  {	  }    else    if(p    ==    PEEKED_BACKSLASH    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	19	None	replace
106	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BACKSLASH  ||  p  ==  PEEKED_BOOLEAN_QUOTED)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BACKSLASH  ||  p  ==  PEEKED_BOOLEAN_QUOTED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BACKSLASH  ||  p  ==  PEEKED_BOOLEAN_QUOTED)  {	  }    else    if(p    ==    PEEKED_BACKSLASH    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	19	None	replace
107	[BUG]  [BUGGY]  pos  =  nextQuotedValue('[');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  pos  =  nextQuotedValue('[');  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	pos  =  nextQuotedValue('[');	  pos    =    nextQuotedValue(''');    	non-compiled	[CE]  	37	None	replace
108	[BUG]  [BUGGY]  pos  =  nextQuotedValue('-');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  pos  =  nextQuotedValue('-');  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	pos  =  nextQuotedValue('-');	  pos    =    nextQuotedValue(''');    	non-compiled	[CE]  	37	None	replace
109	[BUG]  [BUGGY]  pos  =  nextQuotedValue(']');  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  pos  =  nextQuotedValue(']');  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	pos  =  nextQuotedValue(']');	  pos    =    nextQuotedValue(''');    	non-compiled	[CE]  	37	None	replace
110	[BUG]  [BUGGY]  pos  =  nextQuotedValue(':');  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  pos  =  nextQuotedValue(':');  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	pos  =  nextQuotedValue(':');	  pos    =    nextQuotedValue(''');    	non-compiled	[CE]  	37	None	replace
111	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BEGIN_ARRAY  ||  p  ==  PEEKED_BUCKET)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BEGIN_ARRAY  ||  p  ==  PEEKED_BUCKET)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BEGIN_ARRAY  ||  p  ==  PEEKED_BUCKET)  {	  }    else    if(p    ==    PEEKED_BUCKET    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	20	None	replace
112	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_STRING  ||  p  ==  PEEKED_BUCKET)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_STRING  ||  p  ==  PEEKED_BUCKET)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_STRING  ||  p  ==  PEEKED_BUCKET)  {	  }    else    if(p    ==    PEEKED_BUCKET    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	20	None	replace
113	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUCKET  ||  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BUCKET  ||  p  ==  PEEKED_BUFFERED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BUCKET  ||  p  ==  PEEKED_BUFFERED)  {	  }    else    if(p    ==    PEEKED_BUCKET)    {    	non-compiled	[CE]  	32	None	replace
114	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_DOUBLE  ||  p  ==  PEEKED_BUFFER)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_DOUBLE  ||  p  ==  PEEKED_BUFFER)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_DOUBLE  ||  p  ==  PEEKED_BUFFER)  {	  }    else    if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_DOUBLE)    {    	non-compiled	[CE]  	25	None	replace
115	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_BEGIN_OBJECT)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_BEGIN_OBJECT)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_BEGIN_OBJECT)  {	  }    else    if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_BEGIN_ARRAY)    {    	non-compiled	[CE]  	34	None	replace
116	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BACKSLASH  ||  p  ==  PEEKED_BOOLEAN)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BACKSLASH  ||  p  ==  PEEKED_BOOLEAN)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BACKSLASH  ||  p  ==  PEEKED_BOOLEAN)  {	  }    else    if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_BOOLEAN)    {    	non-compiled	[CE]  	8	None	replace
117	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_BLOCK)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_BLOCK)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_BLOCK)  {	  }    else    if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_BOOLEAN)    {    	non-compiled	[CE]  	8	None	replace
118	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BACKSLASH  &&  peekedString  <  null)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BACKSLASH  &&  peekedString  <  null)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BACKSLASH  &&  peekedString  <  null)  {	  }    else    if(p    ==    PEEKED_BUFFERED    &&    peekedString    <    null)    {    	non-compiled	[CE]  	15	None	replace
119	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BIGINT  &&  peekedString  ==  null)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BIGINT  &&  peekedString  ==  null)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BIGINT  &&  peekedString  ==  null)  {	  }    else    if(p    ==    PEEKED_BIGINT    &&    peekedString!=    null)    {    	non-compiled	[CE]  	44	None	replace
120	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BOOLEAN  &&  peekedString!=  null)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BOOLEAN  &&  peekedString!=  null)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BOOLEAN  &&  peekedString!=  null)  {	  }    else    if(p    ==    PEEKED_BIGINT    &&    peekedString!=    null)    {    	non-compiled	[CE]  	44	None	replace
121	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  &&  result  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  &&  result  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BUFFERED  &&  result  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_BUFFERED    &&    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	17	None	replace
122	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_SINGLE)  {	  }    else    if(p    ==    NUMBER_CHAR_SINGLE_QUOTED)    {    	non-compiled	[CE]  	10	None	replace
123	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BACKSLASH  ||  peekedString!=  null)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BACKSLASH  ||  peekedString!=  null)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BACKSLASH  ||  peekedString!=  null)  {	  }    else    if(p    ==    PEEKED_BUFFERED    ||    peekedString!=    null)    {    	non-compiled	[CE]  	12	None	replace
124	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUCKET  ||  peekedString!=  null)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BUCKET  ||  peekedString!=  null)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BUCKET  ||  peekedString!=  null)  {	  }    else    if(p    ==    PEEKED_BUFFERED    ||    peekedString!=    null)    {    	non-compiled	[CE]  	12	None	replace
125	[BUG]  [BUGGY]  pos  =  doFloating();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  pos  =  doFloating();  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	pos  =  doFloating();	  if(p    ==    PEEKED_BUFFERED)    {    pos    =    doPeek();    }    	non-compiled	[CE]  	40	None	replace
126	[BUG]  [BUGGY]  pos  =  doFloat();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  pos  =  doFloat();  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	pos  =  doFloat();	  if(p    ==    PEEKED_BUFFERED)    {    pos    =    doPeek();    }    	non-compiled	[CE]  	40	None	replace
127	[BUG]  [BUGGY]  pos  =  doHorizontalPeek();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  pos  =  doHorizontalPeek();  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	pos  =  doHorizontalPeek();	  if(p    ==    PEEKED_BUFFERED)    {    pos    =    doPeek();    }    	non-compiled	[CE]  	40	None	replace
128	[BUG]  [BUGGY]  pos  =  doLong();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  pos  =  doLong();  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	pos  =  doLong();	  if(p    ==    PEEKED_BUFFERED)    {    pos    =    doPeek();    }    	non-compiled	[CE]  	40	None	replace
129	[BUG]  [BUGGY]  pos  =  doUpper();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  pos  =  doUpper();  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	pos  =  doUpper();	  if(p    ==    PEEKED_BUFFERED)    {    pos    =    doPeek();    }    	non-compiled	[CE]  	40	None	replace
130	[BUG]  [BUGGY]  pos  =  doBuffer();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  pos  =  doBuffer();  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	pos  =  doBuffer();	  if(p    ==    PEEKED_BUFFERED)    {    pos    =    doPeek();    }    	non-compiled	[CE]  	40	None	replace
131	[BUG]  [BUGGY]  result  =  nextSingleQuotedValue('-');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  result  =  nextSingleQuotedValue('-');  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	result  =  nextSingleQuotedValue('-');	  result    =    nextSingleQuotedValue(''');    	non-compiled	[CE]  	3	None	replace
132	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_STRING  &&  peekedString.length()  >  0)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_STRING  &&  peekedString.length()  >  0)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_STRING  &&  peekedString.length()  >  0)  {	  }    else    if(p    ==    PEEKED_STRING)    {    	non-compiled	[CE]  	30	None	replace
133	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_STRING  &&  peekedString!=  null)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_STRING  &&  peekedString!=  null)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_STRING  &&  peekedString!=  null)  {	  }    else    if(p    ==    PEEKED_STRING)    {    	non-compiled	[CE]  	30	None	replace
134	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BEGIN_ARRAY)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BEGIN_ARRAY)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BEGIN_ARRAY)  {	  }    else    if(p    ==    PEEKED_STRING)    {    	non-compiled	[CE]  	30	None	replace
135	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BIGINT  ||  p  ==  PEEKED_SOLE_QUOTED)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BIGINT  ||  p  ==  PEEKED_SOLE_QUOTED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BIGINT  ||  p  ==  PEEKED_SOLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_BIGINT    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	27	None	replace
136	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  &&  p  ==  PEEKED_STRING)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  &&  p  ==  PEEKED_STRING)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BUFFERED  &&  p  ==  PEEKED_STRING)  {	  }    else    if(p    ==    PEEKED_BUFFERED    &&    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	17	None	replace
137	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BEGIN_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BEGIN_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BEGIN_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	39	None	replace
138	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  &&  peekedString  <  =  null)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  &&  peekedString  <  =  null)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BUFFERED  &&  peekedString  <  =  null)  {	  }    else    if(p    ==    PEEKED_BUFFERED    &&    peekedString    <    null)    {    	non-compiled	[CE]  	15	None	replace
139	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  &&  result  ==  null  &&  peekedString!=  null)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  &&  result  ==  null  &&  peekedString!=  null)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BUFFERED  &&  result  ==  null  &&  peekedString!=  null)  {	  }    else    if(p    ==    PEEKED_BUFFERED    &&    result    ==    null)    {    	non-compiled	[CE]  	16	None	replace
140	[BUG]  [BUGGY]  }  else  if(p!=  PEEKED_BUFFERED  &&  peekedString!=  null)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p!=  PEEKED_BUFFERED  &&  peekedString!=  null)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p!=  PEEKED_BUFFERED  &&  peekedString!=  null)  {	  }    else    if(p!=    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	9	None	replace
141	[BUG]  [BUGGY]  }  else  if(p!=  PEEKED_BUFFERED  &&  peekedString.length()  >  0)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p!=  PEEKED_BUFFERED  &&  peekedString.length()  >  0)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p!=  PEEKED_BUFFERED  &&  peekedString.length()  >  0)  {	  }    else    if(p!=    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	9	None	replace
142	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BIGINT  ||  p  ==  PEEKED_BOOLEAN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BIGINT  ||  p  ==  PEEKED_BOOLEAN)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BIGINT  ||  p  ==  PEEKED_BOOLEAN)  {	  }    else    if(p    ==    PEEKED_BIGINT    ||    p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	29	None	replace
143	[BUG]  [BUGGY]  pos  =  doFloatingPoint();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  pos  =  doFloatingPoint();  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	pos  =  doFloatingPoint();	  if(p    ==    PEEKED_BUFFERED)    {    pos    =    doPeek();    }    	non-compiled	[CE]  	40	None	replace
144	[BUG]  [BUGGY]  pos  =  doDouble();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  pos  =  doDouble();  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	pos  =  doDouble();	  if(p    ==    PEEKED_BUFFERED)    {    pos    =    doPeek();    }    	non-compiled	[CE]  	40	None	replace
145	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BIGINT  &&  peekedString  <  null)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BIGINT  &&  peekedString  <  null)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BIGINT  &&  peekedString  <  null)  {	  }    else    if(p    ==    PEEKED_BIGINT    &&    peekedString!=    null)    {    	non-compiled	[CE]  	44	None	replace
146	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BRIDGE)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BRIDGE)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BRIDGE)  {	  }    else    if(p    ==    NUMBER_CHAR_SINGLE_QUOTED)    {    	non-compiled	[CE]  	10	None	replace
147	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  +  peekedString!=  null)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  +  peekedString!=  null)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BUFFERED  +  peekedString!=  null)  {	  }    else    if(p    ==    PEEKED_BUFFERED    ||    peekedString!=    null)    {    	non-compiled	[CE]  	12	None	replace
148	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BACKSLASH  ||  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BACKSLASH  ||  p  ==  PEEKED_BUFFERED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BACKSLASH  ||  p  ==  PEEKED_BUFFERED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	38	None	replace
149	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BACKSLASH  ||  p  ==  PEEKED_STANDARD_QUOTED)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BACKSLASH  ||  p  ==  PEEKED_STANDARD_QUOTED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BACKSLASH  ||  p  ==  PEEKED_STANDARD_QUOTED)  {	  }    else    if(p    ==    PEEKED_BACKSLASH    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	19	None	replace
150	[BUG]  [BUGGY]  result  =  nextSingleQuotedValue('/');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  result  =  nextSingleQuotedValue('/');  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	result  =  nextSingleQuotedValue('/');	  result    =    nextSingleQuotedValue(''');    	non-compiled	[CE]  	3	None	replace
151	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_QUOTED)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_QUOTED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_QUOTED)  {	  }    else    if(p    ==    PEEKED_QUOTED)    {    	non-compiled	[CE]  	33	None	replace
152	[BUG]  [BUGGY]  result  =  nextValue('   "');  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  result  =  nextValue('   "');  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	result  =  nextValue('   "');	  result    =    nextValue(''');    	non-compiled	[CE]  	7	None	replace
153	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BRIDGE  ||  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');      [BUGGY]  }  else  if(p  ==  PEEKED_BRIDGE  ||  p  ==  PEEKED_BUFFERED)  {  [BUGGY]      result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5	816	816	1	replace	}  else  if(p  ==  PEEKED_BRIDGE  ||  p  ==  PEEKED_BUFFERED)  {	  }    else    if(p    ==    PEEKED_BIGINT    ||    p    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	28	None	replace
