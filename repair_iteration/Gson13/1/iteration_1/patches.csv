bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  value);  [CE]  cannot  find  symbol  value  [FE]                ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathNames,  value);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  value);	  result    =    Long.toString(pathNames);    	non-compiled	[CE]  cannot  find  symbol  value	6	None	replace
2	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathNames);  [CE]  no  suitable  method  found  for  toString(char[],String[])  [FE]                  ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(buffer,  pathNames);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathNames);	  result    =    Long.toString(pathNames);    	non-compiled	[CE]  no  suitable  method  found  for  toString(char[],String[])	6	None	replace
3	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  pathIndices[stackSize  -  1]);  [CE]  no  suitable  method  found  for  toString(String[],int)  [FE]                    ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathNames,  pathIndices[stackSize  -  1]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  pathIndices[stackSize  -  1]);	  result    =    Long.toString(pathNames);    	non-compiled	[CE]  no  suitable  method  found  for  toString(String[],int)	6	None	replace
4	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  buffer);  [CE]  no  suitable  method  found  for  toString(String[],char[])  [FE]                      ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathNames,  buffer);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  buffer);	  result    =    Long.toString(pathNames);    	non-compiled	[CE]  no  suitable  method  found  for  toString(String[],char[])	6	None	replace
5	[BUG]  [BUGGY]  result  =  Long.toString(peekedString,  pathNames);  [CE]  no  suitable  method  found  for  toString(String,String[])  [FE]                        ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(peekedString,  pathNames);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(peekedString,  pathNames);	  result    =    Long.toString(pathNames);    	non-compiled	[CE]  no  suitable  method  found  for  toString(String,String[])	6	None	replace
6	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  value);  [CE]  cannot  find  symbol  value  [FE]                          ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices,  value);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  value);	  result    =    Long.toString(pathNames);    	non-compiled	[CE]  cannot  find  symbol  value	6	None	replace
7	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  pathNames);  [CE]  no  suitable  method  found  for  toString(int[],String[])  [FE]                            ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices,  pathNames);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  pathNames);	  result    =    Long.toString(pathNames);    	non-compiled	[CE]  no  suitable  method  found  for  toString(int[],String[])	6	None	replace
8	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[pos]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	add	result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[pos]);	  	compilable	  [FE]  ComparisonFailure  	2	1	add
9	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[pos]);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[pos]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[pos]);	  	compilable	  [FE]  ComparisonFailure  	2	1	add
10	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos]);  Result  =  Long.toString(pathIndices[pos]);  [CE]  cannot  find  symbol  Result  [FE]      ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos]);  Result  =  Long.toString(pathIndices[pos]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos]);    Result  =  Long.toString(pathIndices[pos]);	  	non-compiled	[CE]  cannot  find  symbol  Result	2	None	add
11	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[p]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	add	result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[p]);	  	compilable	  [FE]  ComparisonFailure  	2	1	add
12	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[p]);  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[p]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[p]);	  	compilable	  [FE]  ComparisonFailure  	2	1	add
13	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos]);  results  =  Long.toString(pathIndices[pos]);  [CE]  cannot  find  symbol  results  [FE]          ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos]);  results  =  Long.toString(pathIndices[pos]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos]);    results  =  Long.toString(pathIndices[pos]);	  	non-compiled	[CE]  cannot  find  symbol  results	2	None	add
14	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[position]);  [CE]  cannot  find  symbol  position  [FE]            ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[position]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[position]);	  	non-compiled	[CE]  cannot  find  symbol  position	2	None	add
15	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  -  1]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	add	result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[pos  -  1]);	  	compilable	  [FE]  ComparisonFailure  	13	1	add
16	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  -  1]);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  -  1]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[pos  -  1]);	  	compilable	  [FE]  ComparisonFailure  	13	1	add
17	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]);  Result  =  Long.toString(pathIndices[pos  -  1]);  [CE]  cannot  find  symbol  Result  [FE]      ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]);  Result  =  Long.toString(pathIndices[pos  -  1]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos    -    1]);    Result  =  Long.toString(pathIndices[pos  -  1]);	  	non-compiled	[CE]  cannot  find  symbol  Result	13	None	add
18	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[p  -  1]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	add	result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[p  -  1]);	  	compilable	  [FE]  ComparisonFailure  	13	1	add
19	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[p  -  1]);  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[p  -  1]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[p  -  1]);	  	compilable	  [FE]  ComparisonFailure  	13	1	add
20	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  -  2]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	add	result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[pos  -  2]);	  	compilable	  [FE]  ComparisonFailure  	13	1	add
21	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  -  2]);  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  -  2]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[pos  -  2]);	  	compilable	  [FE]  ComparisonFailure  	13	1	add
22	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]);  results  =  Long.toString(pathIndices[pos  -  1]);  [CE]  cannot  find  symbol  results  [FE]            ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]);  results  =  Long.toString(pathIndices[pos  -  1]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos    -    1]);    results  =  Long.toString(pathIndices[pos  -  1]);	  	non-compiled	[CE]  cannot  find  symbol  results	13	None	add
23	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(p);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	add	result  =  Long.toString(p);	  result    =    Long.toString(path);    	compilable	  [FE]  ComparisonFailure  	5	1	replace
24	[BUG]  [BUGGY]  result  =  Long.toString(p);  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(p);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(p);	  result    =    Long.toString(path);    	compilable	  [FE]  ComparisonFailure  	5	1	replace
25	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices);  [CE]  no  suitable  method  found  for  toString(int[])  [FE]                ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices);	  result    =    Long.toString(path);    	non-compiled	[CE]  no  suitable  method  found  for  toString(int[])	5	None	replace
26	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  PEEKED_LONG);  [CE]  no  suitable  method  found  for  toString(char[],int)  [FE]                  ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(buffer,  PEEKED_LONG);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  PEEKED_LONG);	  result    =    Long.toString(path);    	non-compiled	[CE]  no  suitable  method  found  for  toString(char[],int)	5	None	replace
27	[BUG]  [BUGGY]  result  =  Long.toString(pEEKED_LONG);  [CE]  cannot  find  symbol  pEEKED_LONG  [FE]                    ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pEEKED_LONG);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pEEKED_LONG);	  result    =    Long.toString(path);    	non-compiled	[CE]  cannot  find  symbol  pEEKED_LONG	5	None	replace
28	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  PEEKED_DOUBLE_QUOTED);  [CE]  no  suitable  method  found  for  toString(char[],int)  [FE]    ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(buffer,  PEEKED_DOUBLE_QUOTED);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  PEEKED_DOUBLE_QUOTED);	  result    =    Long.toString(peekedNumberLength);    	non-compiled	[CE]  no  suitable  method  found  for  toString(char[],int)	12	None	replace
29	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pos);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	add	result  =  Long.toString(pos);	  result    =    Long.toString(peekedNumberLength);    	compilable	  [FE]  ComparisonFailure  	12	1	replace
30	[BUG]  [BUGGY]  result  =  Long.toString(pos);  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pos);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pos);	  result    =    Long.toString(peekedNumberLength);    	compilable	  [FE]  ComparisonFailure  	12	1	replace
31	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  PEEKED_BUFFERED);  [CE]  no  suitable  method  found  for  toString(char[],int)  [FE]        ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(buffer,  PEEKED_BUFFERED);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  PEEKED_BUFFERED);	  result    =    Long.toString(peekedNumberLength);    	non-compiled	[CE]  no  suitable  method  found  for  toString(char[],int)	12	None	replace
32	[BUG]  [BUGGY]  result  =  nextLongValue();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  nextLongValue();  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLongValue();	      	non-compiled	[CE]  cannot  find  symbol	9	None	replace
33	[BUG]  [BUGGY]  result  =  nextQuotedValue(''');  [CE]  empty  character  literal  [FE]                      ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  nextQuotedValue(''');  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextQuotedValue(''');	      	non-compiled	[CE]  empty  character  literal	9	None	replace
34	[BUG]  [BUGGY]  result  =  nextLongValue(''');  [CE]  empty  character  literal  [FE]                        ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  nextLongValue(''');  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLongValue(''');	      	non-compiled	[CE]  empty  character  literal	9	None	replace
35	[BUG]  [BUGGY]  result  =  nextLong(buffer,  pos);  [CE]  method  nextLong  in  class  JsonReader  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  nextLong(buffer,  pos);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  pos);	      	non-compiled	[CE]  method  nextLong  in  class  JsonReader  cannot  be  applied  to  given  types;	9	None	replace
36	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                            ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  nextUnquotedValue();  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	add	result  =  nextUnquotedValue();	      	compilable	  [FE]  ComparisonFailure  	9	1	replace
37	[BUG]  [BUGGY]  result  =  nextUnquotedValue();  [FE]  ComparisonFailure  [FE]                            ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  nextUnquotedValue();  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextUnquotedValue();	      	compilable	  [FE]  ComparisonFailure  	9	1	replace
38	[BUG]  [BUGGY]  result  =  nextUnquotedValue(''');  [CE]  empty  character  literal  [FE]                              ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  nextUnquotedValue(''');  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextUnquotedValue(''');	      	non-compiled	[CE]  empty  character  literal	9	None	replace
39	[BUG]  [BUGGY]  result  =  nextLong(buffer,  pos,  PEEKED_LONG);  [CE]  method  nextLong  in  class  JsonReader  cannot  be  applied  to  given  types;  [FE]                                ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  nextLong(buffer,  pos,  PEEKED_LONG);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  pos,  PEEKED_LONG);	      	non-compiled	[CE]  method  nextLong  in  class  JsonReader  cannot  be  applied  to  given  types;	9	None	replace
40	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  peekedString);  [CE]  no  suitable  method  found  for  toString(char[],String)  [FE]            ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(buffer,  peekedString);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  peekedString);	  result    =    Long.toString(peekedString);    	non-compiled	[CE]  no  suitable  method  found  for  toString(char[],String)	4	None	replace
41	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  peedString);  [CE]  cannot  find  symbol  peedString  [FE]              ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(buffer,  peedString);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  peedString);	  result    =    Long.toString(peekedString);    	non-compiled	[CE]  cannot  find  symbol  peedString	4	None	replace
42	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  negativeString);  [CE]  cannot  find  symbol  negativeString  [FE]                ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(buffer,  negativeString);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  negativeString);	  result    =    Long.toString(peekedString);    	non-compiled	[CE]  cannot  find  symbol  negativeString	4	None	replace
43	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  squeezedString);  [CE]  cannot  find  symbol  squeezedString  [FE]                  ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(buffer,  squeezedString);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  squeezedString);	  result    =    Long.toString(peekedString);    	non-compiled	[CE]  cannot  find  symbol  squeezedString	4	None	replace
44	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  piekedString);  [CE]  cannot  find  symbol  piekedString  [FE]                    ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(buffer,  piekedString);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  piekedString);	  result    =    Long.toString(peekedString);    	non-compiled	[CE]  cannot  find  symbol  piekedString	4	None	replace
45	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  value);  [CE]  cannot  find  symbol  value  [FE]                      ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(buffer,  value);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  value);	  result    =    Long.toString(peekedString);    	non-compiled	[CE]  cannot  find  symbol  value	4	None	replace
46	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos]);  [CE]  no  suitable  method  found  for  toString(char[],int)  [FE]    ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathIndices[pos]);	  result    =    Long.toString(pathIndices[pos]);    	non-compiled	[CE]  no  suitable  method  found  for  toString(char[],int)	3	None	replace
47	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos++]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	add	result  =  Long.toString(pathIndices[pos++]);	  result    =    Long.toString(pathIndices[pos]);    	compilable	  [FE]  ComparisonFailure  	3	1	replace
48	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos++]);  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos++]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos++]);	  result    =    Long.toString(pathIndices[pos]);    	compilable	  [FE]  ComparisonFailure  	3	1	replace
49	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos]  +  1);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	add	result  =  Long.toString(pathIndices[pos]  +  1);	  result    =    Long.toString(pathIndices[pos]);    	compilable	  [FE]  ComparisonFailure  	3	1	replace
50	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos]  +  1);  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos]  +  1);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos]  +  1);	  result    =    Long.toString(pathIndices[pos]);    	compilable	  [FE]  ComparisonFailure  	3	1	replace
51	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos]  -  1);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	add	result  =  Long.toString(pathIndices[pos]  -  1);	  result    =    Long.toString(pathIndices[pos]);    	compilable	  [FE]  ComparisonFailure  	3	1	replace
52	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos]  -  1);  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos]  -  1);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos]  -  1);	  result    =    Long.toString(pathIndices[pos]);    	compilable	  [FE]  ComparisonFailure  	3	1	replace
53	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathIndices);  [CE]  no  suitable  method  found  for  toString(char[],int[])  [FE]        ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(buffer,  pathIndices);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathIndices);	  result    =    Long.toString(buffer);    	non-compiled	[CE]  no  suitable  method  found  for  toString(char[],int[])	10	None	replace
54	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  peekedNumberLength);  [CE]  no  suitable  method  found  for  toString(char[],int)  [FE]          ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(buffer,  peekedNumberLength);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  peekedNumberLength);	  result    =    Long.toString(buffer);    	non-compiled	[CE]  no  suitable  method  found  for  toString(char[],int)	10	None	replace
55	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  buffer);  [CE]  no  suitable  method  found  for  toString(int[],char[])  [FE]            ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices,  buffer);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  buffer);	  result    =    Long.toString(buffer);    	non-compiled	[CE]  no  suitable  method  found  for  toString(int[],char[])	10	None	replace
56	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[stackSize  -  1]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	add	result  =  Long.toString(pathIndices[stackSize  -  1]);	  result    =    Long.toString(pathIndices[pos    -    1]);    	compilable	  [FE]  ComparisonFailure  	14	1	replace
57	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[stackSize  -  1]);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[stackSize  -  1]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[stackSize  -  1]);	  result    =    Long.toString(pathIndices[pos    -    1]);    	compilable	  [FE]  ComparisonFailure  	14	1	replace
58	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos  -  1]);  [CE]  no  suitable  method  found  for  toString(char[],int)  [FE]      ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos  -  1]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathIndices[pos  -  1]);	  result    =    Long.toString(pathIndices[pos    -    1]);    	non-compiled	[CE]  no  suitable  method  found  for  toString(char[],int)	14	None	replace
59	[BUG]  [BUGGY]  Result  =  Long.toString(pathIndices[stackSize  -  1]);  [CE]  cannot  find  symbol  Result  [FE]        ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  Result  =  Long.toString(pathIndices[stackSize  -  1]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	Result  =  Long.toString(pathIndices[stackSize  -  1]);	  result    =    Long.toString(pathIndices[pos    -    1]);    	non-compiled	[CE]  cannot  find  symbol  Result	14	None	replace
60	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  1);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	add	result  =  Long.toString(pathIndices[pos  -  1]  +  1);	  result    =    Long.toString(pathIndices[pos    -    1]);    	compilable	  [FE]  AssertionFailedError  	14	25	replace
61	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  1);  [FE]  AssertionFailedError  [FE]          ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  1);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  -  1]  +  1);	  result    =    Long.toString(pathIndices[pos    -    1]);    	compilable	  [FE]  AssertionFailedError  	14	25	replace
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Integer.toString(pathIndices[pos  -  1]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	add	result  =  Integer.toString(pathIndices[pos  -  1]);	  result    =    Long.toString(pathIndices[pos    -    1]);    	compilable	  [FE]  AssertionFailedError  	14	25	replace
63	[BUG]  [BUGGY]  result  =  Integer.toString(pathIndices[pos  -  1]);  [FE]  AssertionFailedError  [FE]            ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Integer.toString(pathIndices[pos  -  1]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Integer.toString(pathIndices[pos  -  1]);	  result    =    Long.toString(pathIndices[pos    -    1]);    	compilable	  [FE]  AssertionFailedError  	14	25	replace
64	[BUG]  [BUGGY]  result  =  Long.toString(peekedString[pos  -  1]);  [CE]  array  required,  but  String  found  [FE]              ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(peekedString[pos  -  1]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(peekedString[pos  -  1]);	  result    =    Long.toString(pathIndices[pos    -    1]);    	non-compiled	[CE]  array  required,  but  String  found	14	None	replace
65	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  peekedNumberLength);  [CE]  no  suitable  method  found  for  toString(char[],int,int)  [FE]          ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(buffer,  pos,  peekedNumberLength);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  peekedNumberLength);	  result    =    Long.toString(buffer,    pos);    	non-compiled	[CE]  no  suitable  method  found  for  toString(char[],int,int)	15	None	replace
66	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  value);  [CE]  cannot  find  symbol  value  [FE]            ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(buffer,  pos,  value);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  value);	  result    =    Long.toString(buffer,    pos);    	non-compiled	[CE]  cannot  find  symbol  value	15	None	replace
67	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  pathIndices);  [CE]  no  suitable  method  found  for  toString(char[],int,int[])  [FE]              ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(buffer,  pos,  pathIndices);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  pathIndices);	  result    =    Long.toString(buffer,    pos);    	non-compiled	[CE]  no  suitable  method  found  for  toString(char[],int,int[])	15	None	replace
68	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  PEEKED_LONG);  [CE]  no  suitable  method  found  for  toString(char[],int,int)  [FE]                ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(buffer,  pos,  PEEKED_LONG);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  PEEKED_LONG);	  result    =    Long.toString(buffer,    pos);    	non-compiled	[CE]  no  suitable  method  found  for  toString(char[],int,int)	15	None	replace
69	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  PEEKED_DOUBLE_QUOTED);  [CE]  no  suitable  method  found  for  toString(char[],int,int)  [FE]                  ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(buffer,  pos,  PEEKED_DOUBLE_QUOTED);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  PEEKED_DOUBLE_QUOTED);	  result    =    Long.toString(buffer,    pos);    	non-compiled	[CE]  no  suitable  method  found  for  toString(char[],int,int)	15	None	replace
70	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  pathNames);  [CE]  no  suitable  method  found  for  toString(char[],int,String[])  [FE]                    ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(buffer,  pos,  pathNames);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  pathNames);	  result    =    Long.toString(buffer,    pos);    	non-compiled	[CE]  no  suitable  method  found  for  toString(char[],int,String[])	15	None	replace
71	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  PEEKED_BUFFER);  [CE]  cannot  find  symbol  PEEKED_BUFFER  [FE]                      ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(buffer,  pos,  PEEKED_BUFFER);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  PEEKED_BUFFER);	  result    =    Long.toString(buffer,    pos);    	non-compiled	[CE]  cannot  find  symbol  PEEKED_BUFFER	15	None	replace
72	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	add	result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);	  	compilable	  [FE]  AssertionFailedError  	11	3	add
73	[BUG]  [BUGGY]  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);	  	compilable	  [FE]  AssertionFailedError  	11	3	add
74	[BUG]  [BUGGY]  result  =  Long.toString(peekedNumberLength);  Result  =  Long.toString(peekedNumberLength);  [CE]  cannot  find  symbol  Result  [FE]      ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(peekedNumberLength);  Result  =  Long.toString(peekedNumberLength);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(peekedNumberLength);    Result  =  Long.toString(peekedNumberLength);	  	non-compiled	[CE]  cannot  find  symbol  Result	11	None	add
75	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	add	result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);	  	compilable	  [FE]  AssertionFailedError  	11	3	add
76	[BUG]  [BUGGY]  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);  [FE]  AssertionFailedError  [FE]        ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);	  	compilable	  [FE]  AssertionFailedError  	11	3	add
77	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_LONG)  {  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	add	result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_LONG)  {	  	compilable	  [FE]  AssertionFailedError  	11	25	add
78	[BUG]  [BUGGY]  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_LONG)  {  [FE]  AssertionFailedError  [FE]          ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_LONG)  {  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_LONG)  {	  	compilable	  [FE]  AssertionFailedError  	11	25	add
79	[BUG]  [BUGGY]  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  final  String  buffer  =  new  String(buffer,  pos,  peekedNumberLength);  [CE]  no  suitable  constructor  found  for  String(String,int,int)  [FE]            ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  final  String  buffer  =  new  String(buffer,  pos,  peekedNumberLength);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  final  String  buffer  =  new  String(buffer,  pos,  peekedNumberLength);	  	non-compiled	[CE]  no  suitable  constructor  found  for  String(String,int,int)	11	None	add
80	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	add	result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {	  	compilable	  [FE]  AssertionFailedError  	11	25	add
81	[BUG]  [BUGGY]  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  [FE]  AssertionFailedError  [FE]              ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {	  	compilable	  [FE]  AssertionFailedError  	11	25	add
82	[BUG]  [BUGGY]  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  final  String  buffer  =  new  String(buffer,  pos,  0,  peekedNumberLength);  [CE]  no  suitable  constructor  found  for  String(String,int,int,int)  [FE]                ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  final  String  buffer  =  new  String(buffer,  pos,  0,  peekedNumberLength);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  final  String  buffer  =  new  String(buffer,  pos,  0,  peekedNumberLength);	  	non-compiled	[CE]  no  suitable  constructor  found  for  String(String,int,int,int)	11	None	add
83	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[stackSize  +  1]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	add	result  =  Long.toString(pathIndices[stackSize  +  1]);	  result    =    Long.toString(pathIndices[pos    +    1]);    	compilable	  [FE]  AssertionFailedError  	8	25	replace
84	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[stackSize  +  1]);  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[stackSize  +  1]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[stackSize  +  1]);	  result    =    Long.toString(pathIndices[pos    +    1]);    	compilable	  [FE]  AssertionFailedError  	8	25	replace
85	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos  +  2]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	add	result  =  Long.toString(pathIndices[pos  +  2]);	  result    =    Long.toString(pathIndices[pos    +    1]);    	compilable	  [FE]  AssertionFailedError  	8	25	replace
86	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  2]);  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos  +  2]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  +  2]);	  result    =    Long.toString(pathIndices[pos    +    1]);    	compilable	  [FE]  AssertionFailedError  	8	25	replace
87	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  -  1);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  -  1);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  +  1]  -  1);	  result    =    Long.toString(pathIndices[pos    +    1]);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
88	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos  +  1]);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos  +  1]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathIndices[pos  +  1]);	  result    =    Long.toString(pathIndices[pos    +    1]);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
89	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  3]);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos  +  3]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  +  3]);	  result    =    Long.toString(pathIndices[pos    +    1]);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
90	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]);  result  =  Long.toString(pathIndices[pos  +  1]);  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]);  result  =  Long.toString(pathIndices[pos  +  1]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos    +    1]);    result  =  Long.toString(pathIndices[pos  +  1]);	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
91	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]);  Result  =  Long.toString(pathIndices[pos  +  1]);  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]);  Result  =  Long.toString(pathIndices[pos  +  1]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos    +    1]);    Result  =  Long.toString(pathIndices[pos  +  1]);	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
92	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]);  result  =  Long.toString(pathIndices[pos  +  2]);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]);  result  =  Long.toString(pathIndices[pos  +  2]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos    +    1]);    result  =  Long.toString(pathIndices[pos  +  2]);	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
93	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]);  result  =  Long.toString(pathIndices[pos  +  1));  [CE]  ']'  expected  [FE]          ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]);  result  =  Long.toString(pathIndices[pos  +  1));  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos    +    1]);    result  =  Long.toString(pathIndices[pos  +  1));	  	non-compiled	[CE]  ']'  expected	7	None	add
94	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]);  results  =  Long.toString(pathIndices[pos  +  1]);  [CE]  ']'  expected  [FE]            ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]);  results  =  Long.toString(pathIndices[pos  +  1]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos    +    1]);    results  =  Long.toString(pathIndices[pos  +  1]);	  	non-compiled	[CE]  ']'  expected	7	None	add
95	[BUG]  [BUGGY]  result  =  Long.toString(MIN_INCOMPLETE_INTEGER);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(MIN_INCOMPLETE_INTEGER);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(MIN_INCOMPLETE_INTEGER);	  result    =    Long.toString(value);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
96	[BUG]  [BUGGY]  result  =  Long.toString(min_INCOMPLETE_INTEGER);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(min_INCOMPLETE_INTEGER);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(min_INCOMPLETE_INTEGER);	  result    =    Long.toString(value);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
97	[BUG]  [BUGGY]  result  =  Long.toString(newValue);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(newValue);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(newValue);	  result    =    Long.toString(value);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
98	[BUG]  [BUGGY]  result  =  Long.toString(prototype);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(prototype);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(prototype);	  result    =    Long.toString(value);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
99	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  +  ''');  [CE]  empty  character  literal  [FE]    ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  +  ''');  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  +  1]  +  ''');	  result    =    Long.toString(pathIndices[pos    +    1]);    	non-compiled	[CE]  empty  character  literal	8	None	replace
100	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  -  buffer);  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  -  buffer);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  +  1]  -  buffer);	  result    =    Long.toString(pathIndices[pos    +    1]);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
101	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos]);  res  =  Long.toString(pathIndices[pos]);  [CE]  empty  character  literal  [FE]    ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos]);  res  =  Long.toString(pathIndices[pos]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos]);    res  =  Long.toString(pathIndices[pos]);	  	non-compiled	[CE]  empty  character  literal	2	None	add
102	[BUG]  [BUGGY]  result  =  nextQuotedValue();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  nextQuotedValue();  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextQuotedValue();	      	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
103	[BUG]  [BUGGY]  result  =  nextQuotedValue('  ');  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  nextQuotedValue('  ');  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextQuotedValue('  ');	      	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
104	[BUG]  [BUGGY]  result  =  Long.toString(pathNames[pos  -  1]);  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathNames[pos  -  1]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames[pos  -  1]);	  result    =    Long.toString(pathIndices[pos    -    1]);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
105	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  length);  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  length);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  -  1]  +  length);	  result    =    Long.toString(pathIndices[pos    -    1]);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
106	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  0,  peekedNumberLength);  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(buffer,  0,  peekedNumberLength);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  0,  peekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
107	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[0]);  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[0]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[0]);	  result    =    Long.toString(pathIndices[pos]);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
108	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  pos);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathNames,  pos);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  pos);	  result    =    Long.toString(pathNames);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
109	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  pathIndices);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathNames,  pathIndices);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  pathIndices);	  result    =    Long.toString(pathNames);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
110	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  peekedNumberLength);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathNames,  peekedNumberLength);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  peekedNumberLength);	  result    =    Long.toString(pathNames);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
111	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  stack);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathNames,  stack);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  stack);	  result    =    Long.toString(pathNames);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
112	[BUG]  [BUGGY]  result  =  Long.toString(peekedNumberLength);  results  =  Long.toString(peekedNumberLength);  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(peekedNumberLength);  results  =  Long.toString(peekedNumberLength);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(peekedNumberLength);    results  =  Long.toString(peekedNumberLength);	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
113	[BUG]  [BUGGY]  result  =  Long.toString(peekedNumberLength);  pos  =  Long.toString(peekedNumberLength);  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(peekedNumberLength);  pos  =  Long.toString(peekedNumberLength);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(peekedNumberLength);    pos  =  Long.toString(peekedNumberLength);	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
114	[BUG]  [BUGGY]  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekNumberLength);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekNumberLength);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekNumberLength);	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
115	[BUG]  [BUGGY]  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peerkedNumberLength);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peerkedNumberLength);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peerkedNumberLength);	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
116	[BUG]  [BUGGY]  result  =  Long.toString(peekedNumberLength);  résultat  =  Long.toString(peekedNumberLength);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(peekedNumberLength);  résultat  =  Long.toString(peekedNumberLength);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(peekedNumberLength);    résultat  =  Long.toString(peekedNumberLength);	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
117	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  peekedLength);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(buffer,  pos,  peekedLength);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  peekedLength);	  result    =    Long.toString(buffer,    pos);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
118	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  buffer);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(buffer,  pos,  buffer);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  buffer);	  result    =    Long.toString(buffer,    pos);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
119	[BUG]  [BUGGY]  result  =  Long.toString(nextValue);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(nextValue);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(nextValue);	  result    =    Long.toString(value);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
120	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]);  result  =  Long.toString(pathIndices[pos  +  1]).toString();  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]);  result  =  Long.toString(pathIndices[pos  +  1]).toString();  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos    +    1]);    result  =  Long.toString(pathIndices[pos  +  1]).toString();	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
121	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]);  result  =  Long.toString(pathIndices[p  +  1]);  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]);  result  =  Long.toString(pathIndices[p  +  1]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos    +    1]);    result  =  Long.toString(pathIndices[p  +  1]);	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
122	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]);  result  =  Long.toString(pathIndices[position  +  1]);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]);  result  =  Long.toString(pathIndices[position  +  1]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos    +    1]);    result  =  Long.toString(pathIndices[position  +  1]);	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
123	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[position  -  1]);  [CE]  empty  character  literal  [FE]    ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[position  -  1]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[position  -  1]);	  	non-compiled	[CE]  empty  character  literal	13	None	add
124	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  peeredString);  [CE]  empty  character  literal  [FE]            ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(buffer,  peeredString);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  peeredString);	  result    =    Long.toString(peekedString);    	non-compiled	[CE]  empty  character  literal	4	None	replace
125	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  keywordUpper);  [CE]  empty  character  literal  [FE]              ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(buffer,  keywordUpper);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  keywordUpper);	  result    =    Long.toString(peekedString);    	non-compiled	[CE]  empty  character  literal	4	None	replace
126	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  position);  [CE]  empty  character  literal  [FE]        ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(buffer,  position);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  position);	  result    =    Long.toString(buffer);    	non-compiled	[CE]  empty  character  literal	10	None	replace
127	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos  +  1]);  [CE]  [FE]    ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(buffer,  pos  +  1]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos  +  1]);	  result    =    Long.toString(pathIndices[pos    +    1]);    	non-compiled	[CE]  	8	None	replace
128	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  key);  [CE]  empty  character  literal  [FE]          ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(buffer,  pos,  key);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  key);	  result    =    Long.toString(buffer,    pos);    	non-compiled	[CE]  empty  character  literal	15	None	replace
129	[BUG]  [BUGGY]  result  =  Long.toString(peek(),  buffer);  [CE]  'try'  without  'catch'  or  'finally'  [FE]        ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(peek(),  buffer);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(peek(),  buffer);	  result    =    Long.toString(buffer);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	10	None	replace
130	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  PEEKED_LONG);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathNames,  PEEKED_LONG);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  PEEKED_LONG);	  result    =    Long.toString(pathNames);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	6	None	replace
131	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  keyword);  [CE]  'try'  without  'catch'  or  'finally'  [FE]            ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(buffer,  keyword);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  keyword);	  result    =    Long.toString(peekedString);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	4	None	replace
132	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  negative);  [CE]  'try'  without  'catch'  or  'finally'  [FE]              ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices,  negative);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  negative);	  result    =    Long.toString(peekedString);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	4	None	replace
133	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  keywordNames);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(buffer,  keywordNames);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  keywordNames);	  result    =    Long.toString(peekedString);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	4	None	replace
134	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  len);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(buffer,  len);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  len);	  result    =    Long.toString(peekedString);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	4	None	replace
135	[BUG]  [BUGGY]  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength).toString();  [CE]  'try'  without  'catch'  or  'finally'  [FE]    ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength).toString();  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength).toString();	  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	11	None	add
136	[BUG]  [BUGGY]  result  =  Long.toString(peekedNumberLength);  result  =  Integer.toString(peekedNumberLength);  [CE]  'try'  without  'catch'  or  'finally'  [FE]      ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(peekedNumberLength);  result  =  Integer.toString(peekedNumberLength);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(peekedNumberLength);    result  =  Integer.toString(peekedNumberLength);	  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	11	None	add
137	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos]);  pos  =  Long.toString(pathIndices[pos]);  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos]);  pos  =  Long.toString(pathIndices[pos]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos]);    pos  =  Long.toString(pathIndices[pos]);	  	non-compiled	[CE]  ';'  expected	2	None	add
138	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]);  pos  =  Long.toString(pathIndices[pos  +  1]);  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]);  pos  =  Long.toString(pathIndices[pos  +  1]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos    +    1]);    pos  =  Long.toString(pathIndices[pos  +  1]);	  	non-compiled	[CE]  ';'  expected	7	None	add
139	[BUG]  [BUGGY]  result  =  Integer.toString(pathIndices[stackSize  -  1]);  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Integer.toString(pathIndices[stackSize  -  1]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Integer.toString(pathIndices[stackSize  -  1]);	  result    =    Long.toString(pathIndices[pos    -    1]);    	non-compiled	[CE]  ';'  expected	14	None	replace
140	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos  -  1]);  [CE]  ')'  expected  [FE]      ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(buffer,  pos  -  1]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos  -  1]);	  result    =    Long.toString(pathIndices[pos    -    1]);    	non-compiled	[CE]  ')'  expected	14	None	replace
141	[BUG]  [BUGGY]  result  =  Long.toString(stackSize);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(stackSize);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(stackSize);	  result    =    Long.toString(path);    	non-compiled	[CE]  ';'  expected	5	None	replace
142	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  +  1]);  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  +  1]);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[pos  +  1]);	  	non-compiled	[CE]  ')'  expected	13	None	add
143	[BUG]  [BUGGY]  result  =  nextLong(buffer);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  nextLong(buffer);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer);	      	non-compiled	[CE]  <identifier>  expected	9	None	replace
144	[BUG]  [BUGGY]  result  =  nextLong(buffer,  pos,  peekedNumberLength);  [CE]  empty  character  literal  [FE]                      ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  nextLong(buffer,  pos,  peekedNumberLength);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  pos,  peekedNumberLength);	      	non-compiled	[CE]  empty  character  literal	9	None	replace
145	[BUG]  [BUGGY]  result  =  nextLong(buffer,  pos  +  1,  peekedNumberLength);  [CE]  empty  character  literal  [FE]                        ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  nextLong(buffer,  pos  +  1,  peekedNumberLength);  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  pos  +  1,  peekedNumberLength);	      	non-compiled	[CE]  empty  character  literal	9	None	replace
146	[BUG]  [BUGGY]  result  =  nextLongValue();  pos  +=  peekedNumberLength;  [CE]  empty  character  literal  [FE]                          ComparisonFailure    [CONTEXT]    if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {    [BUGGY]  result  =  nextLongValue();  pos  +=  peekedNumberLength;  [BUGGY]    }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLongValue();  pos  +=  peekedNumberLength;	      	non-compiled	[CE]  empty  character  literal	9	None	replace
