bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  0,  len);  [CE]  empty  character  literal  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  0,  len);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  0,  len);	  result    =    Long.toString(buffer,    len);    	non-compiled	[CE]  empty  character  literal	134	None	replace
2	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  len  +  1);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  len  +  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  len  +  1);	  result    =    Long.toString(buffer,    len);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	134	None	replace
3	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  1);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  1);	  result    =    Long.toString(buffer,    len);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	134	None	replace
4	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  0);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  0);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  0);	  result    =    Long.toString(buffer,    len);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	134	None	replace
5	[BUG]  [BUGGY]  Result  =  Long.toString(pathIndices[pos  +  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  Result  =  Long.toString(pathIndices[pos  +  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	Result  =  Long.toString(pathIndices[pos  +  1]);	  result    =    Long.toString(pathIndices[pos    +    1]);    Result    =    Long.toString(pathIndices[pos    +    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	91	None	replace
6	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  pathSize  +  1]);  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  pathSize  +  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  pathSize  +  1]);	  result    =    Long.toString(pathIndices[pos    +    1]);    Result    =    Long.toString(pathIndices[pos    +    1]);    	non-compiled	[CE]  ')'  expected	91	None	replace
7	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1],  pathNames[pos  +  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1],  pathNames[pos  +  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  +  1],  pathNames[pos  +  1]);	  result    =    Long.toString(pathIndices[pos    +    1]);    Result    =    Long.toString(pathIndices[pos    +    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	91	None	replace
8	[BUG]  [BUGGY]  result  =  Long.toString(peekedNumberLength);  rsultat  =  Long.toString(peekedNumberLength);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(peekedNumberLength);  rsultat  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(peekedNumberLength);  rsultat  =  Long.toString(peekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    résultat    =    Long.toString(peekedNumberLength);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	116	None	replace
9	[BUG]  [BUGGY]  rsultat  =  Long.toString(peekedNumberLength);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  rsultat  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	rsultat  =  Long.toString(peekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    résultat    =    Long.toString(peekedNumberLength);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	116	None	replace
10	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  4]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]    AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  4]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  +  4]);	  result    =    Long.toString(pathIndices[pos    +    2]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	86	None	replace
11	[BUG]  [BUGGY]  result  =  nextLong(''');  [CE]  empty  character  literal  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(''');  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(''');	  result    =    nextQuotedValue(''');    	non-compiled	[CE]  empty  character  literal	33	None	replace
12	[BUG]  [BUGGY]  result  =  nextLong(buffer,  pos,  PEEKED_BUFFERED);  [CE]  empty  character  literal  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(buffer,  pos,  PEEKED_BUFFERED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  pos,  PEEKED_BUFFERED);	  result    =    nextLong(buffer,    pos,    peekedNumberLength);    	non-compiled	[CE]  empty  character  literal	144	None	replace
13	[BUG]  [BUGGY]  result  =  nextString(buffer,  pos,  peekedNumberLength);  [CE]  empty  character  literal  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextString(buffer,  pos,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextString(buffer,  pos,  peekedNumberLength);	  result    =    nextLong(buffer,    pos,    peekedNumberLength);    	non-compiled	[CE]  empty  character  literal	144	None	replace
14	[BUG]  [BUGGY]  result  =  nextLong(buffer,  pos,  peekedNumberLength  +  1);  [CE]  empty  character  literal  [FE]                              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(buffer,  pos,  peekedNumberLength  +  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  pos,  peekedNumberLength  +  1);	  result    =    nextLong(buffer,    pos,    peekedNumberLength);    	non-compiled	[CE]  empty  character  literal	144	None	replace
15	[BUG]  [BUGGY]  result  =  nextLong(buffer,  pos,  0,  PEEKEDNumberLength);  [CE]  empty  character  literal  [FE]                                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(buffer,  pos,  0,  PEEKEDNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  pos,  0,  PEEKEDNumberLength);	  result    =    nextLong(buffer,    pos,    peekedNumberLength);    	non-compiled	[CE]  empty  character  literal	144	None	replace
16	[BUG]  [BUGGY]  result  =  nextLong(buffer,  pos,  1);  [CE]  empty  character  literal  [FE]                                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(buffer,  pos,  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  pos,  1);	  result    =    nextLong(buffer,    pos,    peekedNumberLength);    	non-compiled	[CE]  empty  character  literal	144	None	replace
17	[BUG]  [BUGGY]  result  =  Long.toString(peekedString,  keywordNames);  [CE]  empty  character  literal  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(peekedString,  keywordNames);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(peekedString,  keywordNames);	  result    =    Long.toString(buffer,    keywordNames);    	non-compiled	[CE]  empty  character  literal	133	None	replace
18	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  keywordNames);  [CE]  empty  character  literal  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  keywordNames);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  keywordNames);	  result    =    Long.toString(buffer,    keywordNames);    	non-compiled	[CE]  empty  character  literal	133	None	replace
19	[BUG]  [BUGGY]  result  =  Integer.toString(pathIndices[pos  +  1]);  [CE]  empty  character  literal  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Integer.toString(pathIndices[pos  +  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Integer.toString(pathIndices[pos  +  1]);	  result    =    Long.toString(pathIndices[pos    +    1]);    result    =    Long.toString(pathIndices[position    +    1]);    	non-compiled	[CE]  empty  character  literal	122	None	replace
20	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[position  +  1]);  [CE]  empty  character  literal  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[position  +  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[position  +  1]);	  result    =    Long.toString(pathIndices[pos    +    1]);    result    =    Long.toString(pathIndices[position    +    1]);    	non-compiled	[CE]  empty  character  literal	122	None	replace
21	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  length);  [CE]  empty  character  literal  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  length);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  length);	  result    =    Long.toString(prototype);    	non-compiled	[CE]  empty  character  literal	98	None	replace
22	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  name);  [CE]  empty  character  literal  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  name);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  name);	  result    =    Long.toString(prototype);    	non-compiled	[CE]  empty  character  literal	98	None	replace
23	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  prototype);  [CE]  empty  character  literal  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  prototype);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  prototype);	  result    =    Long.toString(prototype);    	non-compiled	[CE]  empty  character  literal	98	None	replace
24	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  type);  [CE]  empty  character  literal  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  type);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  type);	  result    =    Long.toString(prototype);    	non-compiled	[CE]  empty  character  literal	98	None	replace
25	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]).toString();  [CE]  empty  character  literal  [FE]        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]).toString();  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  +  1]).toString();	  result    =    Long.toString(pathIndices[pos    +    1]);    result    =    Long.toString(pathIndices[pos    +    1]).toString();    	non-compiled	[CE]  empty  character  literal	120	None	replace
26	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  2]).toString();  [CE]  empty  character  literal  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  2]).toString();  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  +  2]).toString();	  result    =    Long.toString(pathIndices[pos    +    1]);    result    =    Long.toString(pathIndices[pos    +    1]).toString();    	non-compiled	[CE]  empty  character  literal	120	None	replace
27	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  pathSize  +  1]).toString();  [CE]  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  pathSize  +  1]).toString();  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  pathSize  +  1]).toString();	  result    =    Long.toString(pathIndices[pos    +    1]);    result    =    Long.toString(pathIndices[pos    +    1]).toString();    	non-compiled	[CE]  	120	None	replace
28	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos++]).toString();  [CE]  empty  character  literal  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos++]).toString();  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos++]).toString();	  result    =    Long.toString(pathIndices[pos    +    1]);    result    =    Long.toString(pathIndices[pos    +    1]).toString();    	non-compiled	[CE]  empty  character  literal	120	None	replace
29	[BUG]  [BUGGY]  Result  =  Long.toString(pathIndices[pos  +  1]).toString();  [CE]  empty  character  literal  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  Result  =  Long.toString(pathIndices[pos  +  1]).toString();  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	Result  =  Long.toString(pathIndices[pos  +  1]).toString();	  result    =    Long.toString(pathIndices[pos    +    1]);    result    =    Long.toString(pathIndices[pos    +    1]).toString();    	non-compiled	[CE]  empty  character  literal	120	None	replace
30	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  [CE]  empty  character  literal  [FE]    AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);    }    else    if    (p    ==    PEEKED_SINGLE_QUOTED)    {    result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);	  	non-compiled	[CE]  empty  character  literal	80	None	add
31	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  Result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  [CE]  'try'  without  'catch'  or  'finally'  [FE]      AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  Result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);    }    else    if    (p    ==    PEEKED_SINGLE_QUOTED)    {    Result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);	  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	80	None	add
32	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);    }    else    if    (p    ==    PEEKED_SINGLE_QUOTED)    {    result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {	  	non-compiled	[CE]  not  a  statement	80	None	add
33	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  Long.toString(peekedNumberLength);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);    }    else    if    (p    ==    PEEKED_SINGLE_QUOTED)    {    result  =  Long.toString(peekedNumberLength);	  	non-compiled	[CE]  not  a  statement	80	None	add
34	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  Long.toString(peekNumberLength);  result  =  Long.toString(peekedNumberLength);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  Long.toString(peekNumberLength);  result  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);    }    else    if    (p    ==    PEEKED_SINGLE_QUOTED)    {    result  =  Long.toString(peekNumberLength);  result  =  Long.toString(peekedNumberLength);	  	non-compiled	[CE]  not  a  statement	80	None	add
35	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength;  [CE]  [FE]              AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength;  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);    }    else    if    (p    ==    PEEKED_SINGLE_QUOTED)    {    result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength;	  	non-compiled	[CE]  	80	None	add
36	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  Result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  Result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);    }    else    if    (p    ==    PEEKED_SINGLE_QUOTED)    {    Result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {	  	non-compiled	[CE]  not  a  statement	80	None	add
37	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);    }    else    if    (p    ==    PEEKED_SINGLE_QUOTED)    {    result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {	  	non-compiled	[CE]  	80	None	add
38	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  PEEKED_BUFFERED);  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  PEEKED_BUFFERED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  PEEKED_BUFFERED);	  result    =    Long.toString(buffer,    PEEKED_BUFFERED);    	non-compiled	[CE]  not  a  statement	31	None	replace
39	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathIndices,  PEEKED_BUFFERED);  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathIndices,  PEEKED_BUFFERED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathIndices,  PEEKED_BUFFERED);	  result    =    Long.toString(buffer,    PEEKED_BUFFERED);    	non-compiled	[CE]  not  a  statement	31	None	replace
40	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  PEEKED_LONG,  PEEKED_BUFFERED);  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  PEEKED_LONG,  PEEKED_BUFFERED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  PEEKED_LONG,  PEEKED_BUFFERED);	  result    =    Long.toString(buffer,    PEEKED_BUFFERED);    	non-compiled	[CE]  not  a  statement	31	None	replace
41	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathNames,  PEEKED_BUFFERED);  [CE]  empty  character  literal  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathNames,  PEEKED_BUFFERED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathNames,  PEEKED_BUFFERED);	  result    =    Long.toString(buffer,    PEEKED_BUFFERED);    	non-compiled	[CE]  empty  character  literal	31	None	replace
42	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  0,  PEEKED_BUFFERED);  [CE]  empty  character  literal  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  0,  PEEKED_BUFFERED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  0,  PEEKED_BUFFERED);	  result    =    Long.toString(buffer,    PEEKED_BUFFERED);    	non-compiled	[CE]  empty  character  literal	31	None	replace
43	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  PEEKED_BUFFERED,  pathNames);  [CE]  empty  character  literal  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  PEEKED_BUFFERED,  pathNames);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  PEEKED_BUFFERED,  pathNames);	  result    =    Long.toString(buffer,    PEEKED_BUFFERED);    	non-compiled	[CE]  empty  character  literal	31	None	replace
44	[BUG]  [BUGGY]  result  =  nextLongValue().longValue();  [CE]  empty  character  literal  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLongValue().longValue();  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLongValue().longValue();	  result    =    nextLongValue();    	non-compiled	[CE]  empty  character  literal	32	None	replace
45	[BUG]  [BUGGY]  result  =  nextLongValue(PEEKED_LONG);  [CE]  empty  character  literal  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLongValue(PEEKED_LONG);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLongValue(PEEKED_LONG);	  result    =    nextLongValue();    	non-compiled	[CE]  empty  character  literal	32	None	replace
46	[BUG]  [BUGGY]  result  =  nextLongValue(PEEKED_DOUBLE_QUOTED);  [CE]  empty  character  literal  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLongValue(PEEKED_DOUBLE_QUOTED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLongValue(PEEKED_DOUBLE_QUOTED);	  result    =    nextLongValue();    	non-compiled	[CE]  empty  character  literal	32	None	replace
47	[BUG]  [BUGGY]  result  =  nextLongValue(PEEKED_BUFFERED);  [CE]  empty  character  literal  [FE]                              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLongValue(PEEKED_BUFFERED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLongValue(PEEKED_BUFFERED);	  result    =    nextLongValue();    	non-compiled	[CE]  empty  character  literal	32	None	replace
48	[BUG]  [BUGGY]  result  =  nextLongValue(PEEKED_SINGLE_QUOTED);  [CE]  empty  character  literal  [FE]                                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLongValue(PEEKED_SINGLE_QUOTED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLongValue(PEEKED_SINGLE_QUOTED);	  result    =    nextLongValue();    	non-compiled	[CE]  empty  character  literal	32	None	replace
49	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  stack);  [CE]  empty  character  literal  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  stack);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  stack);	  result    =    Long.toString(pathIndices);    	non-compiled	[CE]  empty  character  literal	25	None	replace
50	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  pathNames[stackSize  -  1]);  [CE]  empty  character  literal  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  pathNames[stackSize  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  pathNames[stackSize  -  1]);	  result    =    Long.toString(pathIndices);    	non-compiled	[CE]  empty  character  literal	25	None	replace
51	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  peeked);  [CE]  empty  character  literal  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  peeked);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  peeked);	  result    =    Long.toString(pathIndices);    	non-compiled	[CE]  empty  character  literal	25	None	replace
52	[BUG]  [BUGGY]  result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[pos]);  [CE]  empty  character  literal  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[pos]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(pathIndices[pos]);        result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[pos]);	  	non-compiled	[CE]  empty  character  literal	8	None	add
53	[BUG]  [BUGGY]  result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[pos]);  Result  =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[pos]);  [CE]  empty  character  literal  [FE]      ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[pos]);  Result  =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[pos]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(pathIndices[pos]);        result    =    Long.toString(pathIndices[pos]);    Result  =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[pos]);	  	non-compiled	[CE]  empty  character  literal	8	None	add
54	[BUG]  [BUGGY]  result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[pos]);  result  =  Integer.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[pos]);  [CE]  empty  character  literal  [FE]        ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[pos]);  result  =  Integer.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[pos]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(pathIndices[pos]);        result    =    Long.toString(pathIndices[pos]);    result  =  Integer.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[pos]);	  	non-compiled	[CE]  empty  character  literal	8	None	add
55	[BUG]  [BUGGY]  result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[position]);  result  =  Long.toString(pathIndices[pos]);  [CE]  empty  character  literal  [FE]          ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[position]);  result  =  Long.toString(pathIndices[pos]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(pathIndices[pos]);        result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[position]);  result  =  Long.toString(pathIndices[pos]);	  	non-compiled	[CE]  empty  character  literal	8	None	add
56	[BUG]  [BUGGY]  result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[pos]);  =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[pos]);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[pos]);  =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[pos]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(pathIndices[pos]);        result    =    Long.toString(pathIndices[pos]);    =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[pos]);	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
57	[BUG]  [BUGGY]  result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[pos]);  result  =  long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[pos]);  [CE]  class  expected  [FE]              ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[pos]);  result  =  long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[pos]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(pathIndices[pos]);        result    =    Long.toString(pathIndices[pos]);    result  =  long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[pos]);	  	non-compiled	[CE]  class  expected	8	None	add
58	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  0,  peekedNumberLength);  [CE]  empty  character  literal  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  0,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  0,  peekedNumberLength);	  result    =    Long.toString(buffer,    pos,    peekedLength);    	non-compiled	[CE]  empty  character  literal	117	None	replace
59	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos  +  1,  peekedLength);  [CE]  empty  character  literal  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos  +  1,  peekedLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos  +  1,  peekedLength);	  result    =    Long.toString(buffer,    pos,    peekedLength);    	non-compiled	[CE]  empty  character  literal	117	None	replace
60	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  peekedNumberLength  +  1);  [CE]  empty  character  literal  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  peekedNumberLength  +  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  peekedNumberLength  +  1);	  result    =    Long.toString(buffer,    pos,    peekedLength);    	non-compiled	[CE]  empty  character  literal	117	None	replace
61	[BUG]  [BUGGY]  result  =  long.toString(pathIndices[pos  +  1]);  [CE]  class  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  long.toString(pathIndices[pos  +  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  long.toString(pathIndices[pos  +  1]);	  result    =    Long.toString(pathIndices[pos    +    1]);    results    =    Long.toString(pathIndices[pos    +    1]);    	non-compiled	[CE]  class  expected	94	None	replace
62	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathIndices[stackSize  +  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathIndices[stackSize  +  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathIndices[stackSize  +  1]);	  result    =    Long.toString(buffer,    pathIndices[pos    +    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	88	None	replace
63	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos  +  1]  -  1);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos  +  1]  -  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathIndices[pos  +  1]  -  1);	  result    =    Long.toString(buffer,    pathIndices[pos    +    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	88	None	replace
64	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  pathIndices[pos  +  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  pathIndices[pos  +  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  pathIndices[pos  +  1]);	  result    =    Long.toString(buffer,    pathIndices[pos    +    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	88	None	replace
65	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos  +  1],  peeked);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos  +  1],  peeked);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathIndices[pos  +  1],  peeked);	  result    =    Long.toString(buffer,    pathIndices[pos    +    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	88	None	replace
66	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos  +  2]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos  +  2]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathIndices[pos  +  2]);	  result    =    Long.toString(buffer,    pathIndices[pos    +    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	88	None	replace
67	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathNames[pos  +  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathNames[pos  +  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathNames[pos  +  1]);	  result    =    Long.toString(buffer,    pathIndices[pos    +    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	88	None	replace
68	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  peekedLong);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  peekedLong);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  peekedLong);	  result    =    Long.toString(buffer,    squeezedString);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	43	None	replace
69	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  peekedNumber);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  peekedNumber);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  peekedNumber);	  result    =    Long.toString(buffer,    squeezedString);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	43	None	replace
70	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[stackSize  +  1]);  result  =  Long.toString(pathIndices[stackSize  +  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]    AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[stackSize  +  1]);  result  =  Long.toString(pathIndices[stackSize  +  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[stackSize    +    1]);    result  =  Long.toString(pathIndices[stackSize  +  1]);	  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	83	None	add
71	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[stackSize  +  1]);  Result  =  Long.toString(pathIndices[stackSize  +  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]      AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[stackSize  +  1]);  Result  =  Long.toString(pathIndices[stackSize  +  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[stackSize    +    1]);    Result  =  Long.toString(pathIndices[stackSize  +  1]);	  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	83	None	add
72	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[stackSize  +  1]);  result  =  Long.toString(pathIndices[stackSize  +  1)]);  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[stackSize  +  1]);  result  =  Long.toString(pathIndices[stackSize  +  1)]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[stackSize    +    1]);    result  =  Long.toString(pathIndices[stackSize  +  1)]);	  	non-compiled	[CE]  ']'  expected	83	None	add
73	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[stackSize  +  1]);  result  =  Long.toString(pathIndices[stackSize  +  2]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]          AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[stackSize  +  1]);  result  =  Long.toString(pathIndices[stackSize  +  2]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[stackSize    +    1]);    result  =  Long.toString(pathIndices[stackSize  +  2]);	  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	83	None	add
74	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[stackSize  +  1]);  result  =  Long.toString(pathIndices[stackSize  +  1]));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[stackSize  +  1]);  result  =  Long.toString(pathIndices[stackSize  +  1]));  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[stackSize    +    1]);    result  =  Long.toString(pathIndices[stackSize  +  1]));	  	non-compiled	[CE]  ';'  expected	83	None	add
75	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[stackSize]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[stackSize]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[stackSize]);	  result    =    Long.toString(stackSize);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	141	None	replace
76	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[stackSize  -  1]++);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[stackSize  -  1]++);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[stackSize  -  1]++);	  result    =    Long.toString(stackSize);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	141	None	replace
77	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[stackSize  -  1]  +  1);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[stackSize  -  1]  +  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[stackSize  -  1]  +  1);	  result    =    Long.toString(stackSize);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	141	None	replace
78	[BUG]  [BUGGY]  result  =  Integer.toString(buffer,  pathIndices[pos  -  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]    AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Integer.toString(buffer,  pathIndices[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Integer.toString(buffer,  pathIndices[pos  -  1]);	  result    =    Integer.toString(pathIndices[pos    -    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	63	None	replace
79	[BUG]  [BUGGY]  Result  =  Integer.toString(pathIndices[stackSize  -  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]      AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  Result  =  Integer.toString(pathIndices[stackSize  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	Result  =  Integer.toString(pathIndices[stackSize  -  1]);	  result    =    Integer.toString(pathIndices[pos    -    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	63	None	replace
80	[BUG]  [BUGGY]  result  =  Integer.toString(pathIndices[pos  -  1]  +  1);  [CE]  'try'  without  'catch'  or  'finally'  [FE]        AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Integer.toString(pathIndices[pos  -  1]  +  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Integer.toString(pathIndices[pos  -  1]  +  1);	  result    =    Integer.toString(pathIndices[pos    -    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	63	None	replace
81	[BUG]  [BUGGY]  result  =  Integer.toString(pathNames[pos  -  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]          AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Integer.toString(pathNames[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Integer.toString(pathNames[pos  -  1]);	  result    =    Integer.toString(pathIndices[pos    -    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	63	None	replace
82	[BUG]  [BUGGY]  result  =  new  String(buffer,  pos,  0,  peekedNumberLength);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  new  String(buffer,  pos,  0,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  new  String(buffer,  pos,  0,  peekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    result    =    Long.toString(peekedNumberLength);    final    String    buffer    =    new    String(buffer,    pos,    0,    peekedNumberLength);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	82	None	replace
83	[BUG]  [BUGGY]  result  =  Long.toString(peekedNumberLength);  final  String  buffer  =  new  String(buffer,  pos,  0,  peekedNumberLength);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(peekedNumberLength);  final  String  buffer  =  new  String(buffer,  pos,  0,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(peekedNumberLength);  final  String  buffer  =  new  String(buffer,  pos,  0,  peekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    result    =    Long.toString(peekedNumberLength);    final    String    buffer    =    new    String(buffer,    pos,    0,    peekedNumberLength);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	82	None	replace
84	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos);  final  String  buffer  =  new  String(buffer,  pos,  0,  peekedNumberLength);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos);  final  String  buffer  =  new  String(buffer,  pos,  0,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos);  final  String  buffer  =  new  String(buffer,  pos,  0,  peekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    result    =    Long.toString(peekedNumberLength);    final    String    buffer    =    new    String(buffer,    pos,    0,    peekedNumberLength);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	82	None	replace
85	[BUG]  [BUGGY]  result  =  Long.toString(peekedNumber);  final  String  buffer  =  new  String(buffer,  pos,  0,  peekedNumberLength);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(peekedNumber);  final  String  buffer  =  new  String(buffer,  pos,  0,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(peekedNumber);  final  String  buffer  =  new  String(buffer,  pos,  0,  peekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    result    =    Long.toString(peekedNumberLength);    final    String    buffer    =    new    String(buffer,    pos,    0,    peekedNumberLength);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	82	None	replace
86	[BUG]  [BUGGY]  result  =  Long.toString(peekedNumberLength  +  1);  final  String  buffer  =  new  String(buffer,  pos,  0,  peekedNumberLength);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(peekedNumberLength  +  1);  final  String  buffer  =  new  String(buffer,  pos,  0,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(peekedNumberLength  +  1);  final  String  buffer  =  new  String(buffer,  pos,  0,  peekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    result    =    Long.toString(peekedNumberLength);    final    String    buffer    =    new    String(buffer,    pos,    0,    peekedNumberLength);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	82	None	replace
87	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos]  +  2);  [CE]  empty  character  literal  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos]  +  2);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos]  +  2);	  result    =    Long.toString(pathIndices[pos]    +    1);    	non-compiled	[CE]  empty  character  literal	50	None	replace
88	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos]  +  4);  [CE]  empty  character  literal  [FE]      ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos]  +  4);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos]  +  4);	  result    =    Long.toString(pathIndices[pos]    +    1);    	non-compiled	[CE]  empty  character  literal	50	None	replace
89	[BUG]  [BUGGY]  result  =  Long.toString(PEEKED_LONG);  [CE]  empty  character  literal  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(PEEKED_LONG);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(PEEKED_LONG);	  result    =    Long.toString(p);    	non-compiled	[CE]  empty  character  literal	24	None	replace
90	[BUG]  [BUGGY]  result  =  nextLong();  [CE]  empty  character  literal  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong();  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong();	  result    =    nextQuotedValue();    	non-compiled	[CE]  empty  character  literal	102	None	replace
91	[BUG]  [BUGGY]  result  =  nextLong(PEEKED_LONG);  [CE]  empty  character  literal  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(PEEKED_LONG);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(PEEKED_LONG);	  result    =    nextQuotedValue();    	non-compiled	[CE]  empty  character  literal	102	None	replace
92	[BUG]  [BUGGY]  result  =  nextQuotedValue(PEEKED_LONG);  [CE]  empty  character  literal  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextQuotedValue(PEEKED_LONG);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextQuotedValue(PEEKED_LONG);	  result    =    nextQuotedValue();    	non-compiled	[CE]  empty  character  literal	102	None	replace
93	[BUG]  [BUGGY]  result  =  long.toString(pathIndices[pos  -  1]);  [CE]  class  expected  [FE]        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  long.toString(pathIndices[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  long.toString(pathIndices[pos  -  1]);	  result    =    Long.toString(pathIndices[pos    -    1]);    result    =    Long.toString(pathIndices[pos    +    1]);    	non-compiled	[CE]  class  expected	142	None	replace
94	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  peekedNumber);  [CE]  empty  character  literal  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  peekedNumber);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  peekedNumber);	  result    =    Long.toString(buffer,    pos,    key);    	non-compiled	[CE]  empty  character  literal	128	None	replace
95	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  shortValue);  [CE]  empty  character  literal  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  shortValue);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  shortValue);	  result    =    Long.toString(buffer,    pos,    key);    	non-compiled	[CE]  empty  character  literal	128	None	replace
96	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  lenient);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  lenient);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  lenient);	  result    =    Long.toString(pathIndices,    negative);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	132	None	replace
97	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  PEEKED_BUFFERED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  PEEKED_BUFFERED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  PEEKED_BUFFERED);	  result    =    Long.toString(pathIndices,    negative);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	132	None	replace
98	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  PEEKED_LONG);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  PEEKED_LONG);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  PEEKED_LONG);	  result    =    Long.toString(pathIndices,    negative);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	132	None	replace
99	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  peekedLong);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  peekedLong);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  peekedLong);	  result    =    Long.toString(pathIndices,    value);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	6	None	replace
100	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  MIN_INCOMPLETE_INTEGER);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  MIN_INCOMPLETE_INTEGER);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  MIN_INCOMPLETE_INTEGER);	  result    =    Long.toString(pathIndices,    value);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	6	None	replace
101	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  newValue);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  newValue);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  newValue);	  result    =    Long.toString(pathIndices,    value);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	6	None	replace
102	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  long);  [CE]  '.class'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  long);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  long);	  result    =    Long.toString(pathIndices,    value);    	non-compiled	[CE]  '.class'  expected	6	None	replace
103	[BUG]  [BUGGY]  result  =  Integer.toString(pathIndices[pos]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Integer.toString(pathIndices[pos]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Integer.toString(pathIndices[pos]);	  result    =    Long.toString(pathIndices[pos]);    result    =    Long.toString(pathIndices[p]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	12	None	replace
104	[BUG]  [BUGGY]  result  =  Long.toString(pathNames[pos]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]      ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames[pos]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames[pos]);	  result    =    Long.toString(pathIndices[pos]);    result    =    Long.toString(pathIndices[p]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	12	None	replace
105	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[p]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]        ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[p]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[p]);	  result    =    Long.toString(pathIndices[pos]);    result    =    Long.toString(pathIndices[p]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	12	None	replace
106	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos  +  1);  [CE]  'try'  without  'catch'  or  'finally'  [FE]        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos  +  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos  +  1);	  result    =    Long.toString(buffer,    pos    +    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	127	None	replace
107	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos  +  1,  peekedNumberLength);  [CE]  'try'  without  'catch'  or  'finally'  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos  +  1,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos  +  1,  peekedNumberLength);	  result    =    Long.toString(buffer,    pos    +    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	127	None	replace
108	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos  +  2]);  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos  +  2]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos  +  2]);	  result    =    Long.toString(buffer,    pos    +    1]);    	non-compiled	[CE]  ')'  expected	127	None	replace
109	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos  +  3]);  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos  +  3]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos  +  3]);	  result    =    Long.toString(buffer,    pos    +    1]);    	non-compiled	[CE]  ')'  expected	127	None	replace
110	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos  +  1,  peekedNumberLength  +  1]);  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos  +  1,  peekedNumberLength  +  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos  +  1,  peekedNumberLength  +  1]);	  result    =    Long.toString(buffer,    pos    +    1]);    	non-compiled	[CE]  ')'  expected	127	None	replace
111	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos  +  1,  PEEKED_BUFFERED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos  +  1,  PEEKED_BUFFERED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos  +  1,  PEEKED_BUFFERED);	  result    =    Long.toString(buffer,    pos    +    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	127	None	replace
112	[BUG]  [BUGGY]  result  =  Long.toString(PEEKED_BUFFER);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(PEEKED_BUFFER);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(PEEKED_BUFFER);	  result    =    Long.toString(pEEKED_LONG);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	27	None	replace
113	[BUG]  [BUGGY]  result  =  Long.toString(pEEKED_DOUBLE);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pEEKED_DOUBLE);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pEEKED_DOUBLE);	  result    =    Long.toString(pEEKED_LONG);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	27	None	replace
114	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  nextValue);  [CE]  empty  character  literal  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  nextValue);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  nextValue);	  result    =    Long.toString(nextValue);    	non-compiled	[CE]  empty  character  literal	119	None	replace
115	[BUG]  [BUGGY]  result  =  Long.toString(nextQuotedValue);  [CE]  empty  character  literal  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(nextQuotedValue);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(nextQuotedValue);	  result    =    Long.toString(nextValue);    	non-compiled	[CE]  empty  character  literal	119	None	replace
116	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  buffer,  peekedNumberLength);  [CE]  empty  character  literal  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  buffer,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  buffer,  peekedNumberLength);	  result    =    Long.toString(pathNames,    buffer);    	non-compiled	[CE]  empty  character  literal	4	None	replace
117	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  buffer,  PEEKED_DOUBLE_QUOTED);  [CE]  empty  character  literal  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  buffer,  PEEKED_DOUBLE_QUOTED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  buffer,  PEEKED_DOUBLE_QUOTED);	  result    =    Long.toString(pathNames,    buffer);    	non-compiled	[CE]  empty  character  literal	4	None	replace
118	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  buffer,  PEEKED_LONG);  [CE]  empty  character  literal  [FE]                              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  buffer,  PEEKED_LONG);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  buffer,  PEEKED_LONG);	  result    =    Long.toString(pathNames,    buffer);    	non-compiled	[CE]  empty  character  literal	4	None	replace
119	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  buffer,  pos);  [CE]  empty  character  literal  [FE]                                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  buffer,  pos);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  buffer,  pos);	  result    =    Long.toString(pathNames,    buffer);    	non-compiled	[CE]  empty  character  literal	4	None	replace
120	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  buffer,  PEEKED_BUFFERED);  [CE]  empty  character  literal  [FE]                                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  buffer,  PEEKED_BUFFERED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  buffer,  PEEKED_BUFFERED);	  result    =    Long.toString(pathNames,    buffer);    	non-compiled	[CE]  empty  character  literal	4	None	replace
121	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  pathNames,  value);  [CE]  empty  character  literal  [FE]                                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  pathNames,  value);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  pathNames,  value);	  result    =    Long.toString(pathIndices,    pathNames);    	non-compiled	[CE]  empty  character  literal	7	None	replace
122	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  pathNames,  PEEKED_LONG);  [CE]  empty  character  literal  [FE]                                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  pathNames,  PEEKED_LONG);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  pathNames,  PEEKED_LONG);	  result    =    Long.toString(pathIndices,    pathNames);    	non-compiled	[CE]  empty  character  literal	7	None	replace
123	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  pathNames,  buffer);  [CE]  empty  character  literal  [FE]                                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  pathNames,  buffer);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  pathNames,  buffer);	  result    =    Long.toString(pathIndices,    pathNames);    	non-compiled	[CE]  empty  character  literal	7	None	replace
124	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathIndices,  pathNames);  [CE]  empty  character  literal  [FE]                                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathIndices,  pathNames);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathIndices,  pathNames);	  result    =    Long.toString(pathIndices,    pathNames);    	non-compiled	[CE]  empty  character  literal	7	None	replace
125	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  pathNames,  p);  [CE]  empty  character  literal  [FE]                                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  pathNames,  p);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  pathNames,  p);	  result    =    Long.toString(pathIndices,    pathNames);    	non-compiled	[CE]  empty  character  literal	7	None	replace
126	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  pathNames,  stack);  [CE]  empty  character  literal  [FE]                                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  pathNames,  stack);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  pathNames,  stack);	  result    =    Long.toString(pathIndices,    pathNames);    	non-compiled	[CE]  empty  character  literal	7	None	replace
127	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  peekedLong);  [CE]  empty  character  literal  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  peekedLong);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  peekedLong);	  result    =    Long.toString(pathNames,    value);    	non-compiled	[CE]  empty  character  literal	1	None	replace
128	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  newValue);  [CE]  empty  character  literal  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  newValue);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  newValue);	  result    =    Long.toString(pathNames,    value);    	non-compiled	[CE]  empty  character  literal	1	None	replace
129	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  MIN_INCOMPLETE_INTEGER);  [CE]  empty  character  literal  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  MIN_INCOMPLETE_INTEGER);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  MIN_INCOMPLETE_INTEGER);	  result    =    Long.toString(pathNames,    value);    	non-compiled	[CE]  empty  character  literal	1	None	replace
130	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  long);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  long);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  long);	  result    =    Long.toString(pathNames,    value);    	non-compiled	[CE]  	1	None	replace
131	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  PEEKED_BUFFERED);  [CE]  empty  character  literal  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  PEEKED_BUFFERED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  PEEKED_BUFFERED);	  result    =    Long.toString(pathNames,    value);    	non-compiled	[CE]  empty  character  literal	1	None	replace
132	[BUG]  [BUGGY]  result  =  Long.toString(peekedNumberLength);  final  String  buffer  =  new  String(buffer,  pos,  peekedNumberLength);  [CE]  empty  character  literal  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(peekedNumberLength);  final  String  buffer  =  new  String(buffer,  pos,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(peekedNumberLength);  final  String  buffer  =  new  String(buffer,  pos,  peekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    result    =    Long.toString(peekedNumberLength);    final    String    buffer    =    new    String(buffer,    pos,    peekedNumberLength);    	non-compiled	[CE]  empty  character  literal	79	None	replace
133	[BUG]  [BUGGY]  result  =  new  String(buffer,  pos,  peekedNumberLength);  [CE]  empty  character  literal  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  new  String(buffer,  pos,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  new  String(buffer,  pos,  peekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    result    =    Long.toString(peekedNumberLength);    final    String    buffer    =    new    String(buffer,    pos,    peekedNumberLength);    	non-compiled	[CE]  empty  character  literal	79	None	replace
134	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos);  final  String  buffer  =  new  String(buffer,  pos,  peekedNumberLength);  [CE]  empty  character  literal  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos);  final  String  buffer  =  new  String(buffer,  pos,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos);  final  String  buffer  =  new  String(buffer,  pos,  peekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    result    =    Long.toString(peekedNumberLength);    final    String    buffer    =    new    String(buffer,    pos,    peekedNumberLength);    	non-compiled	[CE]  empty  character  literal	79	None	replace
135	[BUG]  [BUGGY]  result  =  Long.toString(peekedNumber);  final  String  buffer  =  new  String(buffer,  pos,  peekedNumberLength);  [CE]  empty  character  literal  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(peekedNumber);  final  String  buffer  =  new  String(buffer,  pos,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(peekedNumber);  final  String  buffer  =  new  String(buffer,  pos,  peekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    result    =    Long.toString(peekedNumberLength);    final    String    buffer    =    new    String(buffer,    pos,    peekedNumberLength);    	non-compiled	[CE]  empty  character  literal	79	None	replace
136	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos]);  final  String  buffer  =  new  String(buffer,  pos,  peekedNumberLength);  [CE]  empty  character  literal  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos]);  final  String  buffer  =  new  String(buffer,  pos,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos]);  final  String  buffer  =  new  String(buffer,  pos,  peekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    result    =    Long.toString(peekedNumberLength);    final    String    buffer    =    new    String(buffer,    pos,    peekedNumberLength);    	non-compiled	[CE]  empty  character  literal	79	None	replace
137	[BUG]  [BUGGY]  result  =  new  String(buffer,  pos,  PEEKED_LONG);  [CE]  empty  character  literal  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  new  String(buffer,  pos,  PEEKED_LONG);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  new  String(buffer,  pos,  PEEKED_LONG);	  result    =    Long.toString(peekedNumberLength);    result    =    Long.toString(peekedNumberLength);    final    String    buffer    =    new    String(buffer,    pos,    peekedNumberLength);    	non-compiled	[CE]  empty  character  literal	79	None	replace
138	[BUG]  [BUGGY]  res  =  Long.toString(pathIndices[pos]);  [CE]  empty  character  literal  [FE]        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  res  =  Long.toString(pathIndices[pos]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	res  =  Long.toString(pathIndices[pos]);	  result    =    Long.toString(pathIndices[pos]);    res    =    Long.toString(pathIndices[pos]);    	non-compiled	[CE]  empty  character  literal	101	None	replace
139	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos],  value);  [CE]  empty  character  literal  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos],  value);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos],  value);	  result    =    Long.toString(pathIndices[pos]);    res    =    Long.toString(pathIndices[pos]);    	non-compiled	[CE]  empty  character  literal	101	None	replace
140	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  p);  [CE]  empty  character  literal  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  p);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  p);	  result    =    Long.toString(buffer,    keyword);    	non-compiled	[CE]  empty  character  literal	131	None	replace
141	[BUG]  [BUGGY]  result  =  nextUnquotedValue();  result  =  nextUnquotedValue();  [CE]  empty  character  literal  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextUnquotedValue();  result  =  nextUnquotedValue();  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    nextUnquotedValue();    result  =  nextUnquotedValue();	  	non-compiled	[CE]  empty  character  literal	36	None	add
142	[BUG]  [BUGGY]  result  =  nextUnquotedValue();  Result  =  nextUnquotedValue();  [CE]  empty  character  literal  [FE]      ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextUnquotedValue();  Result  =  nextUnquotedValue();  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    nextUnquotedValue();    Result  =  nextUnquotedValue();	  	non-compiled	[CE]  empty  character  literal	36	None	add
143	[BUG]  [BUGGY]  result  =  nextUnquotedValue();  result  =  nUnquotedValue();  [CE]  empty  character  literal  [FE]        ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextUnquotedValue();  result  =  nUnquotedValue();  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    nextUnquotedValue();    result  =  nUnquotedValue();	  	non-compiled	[CE]  empty  character  literal	36	None	add
144	[BUG]  [BUGGY]  result  =  nextUnquotedValue();  result  =  firstUnquotedValue();  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextUnquotedValue();  result  =  firstUnquotedValue();  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    nextUnquotedValue();    result  =  firstUnquotedValue();	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
145	[BUG]  [BUGGY]  result  =  nextUnquotedValue();  result  =  NumberUnquotedValue();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextUnquotedValue();  result  =  NumberUnquotedValue();  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    nextUnquotedValue();    result  =  NumberUnquotedValue();	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
146	[BUG]  [BUGGY]  result  =  nextUnquotedValue();  result  =  lastQuotedValue();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextUnquotedValue();  result  =  lastQuotedValue();  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    nextUnquotedValue();    result  =  lastQuotedValue();	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
147	[BUG]  [BUGGY]  result  =  nextUnquotedValue();  result  =  nextUnquotedValue(''');  [CE]  empty  character  literal  [FE]                ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextUnquotedValue();  result  =  nextUnquotedValue(''');  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    nextUnquotedValue();    result  =  nextUnquotedValue(''');	  	non-compiled	[CE]  empty  character  literal	36	None	add
148	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[stackSize  +  1]  -  1);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[stackSize  +  1]  -  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[stackSize  +  1]  -  1);	  result    =    Long.toString(pathIndices[pos    +    1]    -    1);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
149	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[stackSize  -  1]  -  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[stackSize  -  1]  -  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[stackSize  -  1]  -  1);	  result    =    Long.toString(pathIndices[pos    +    1]    -    1);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
150	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  -  2);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  -  2);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  +  1]  -  2);	  result    =    Long.toString(pathIndices[pos    +    1]    -    1);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
151	[BUG]  [BUGGY]  Result  =  Long.toString(buffer,  pos,  peekedNumberLength);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  Result  =  Long.toString(buffer,  pos,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	Result  =  Long.toString(buffer,  pos,  peekedNumberLength);	  result    =    Long.toString(buffer,    peekedNumberLength);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
152	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  p,  peekedNumberLength);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  p,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  p,  peekedNumberLength);	  result    =    Long.toString(buffer,    peekedNumberLength);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
153	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  buffer,  peekedNumberLength);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  buffer,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  buffer,  peekedNumberLength);	  result    =    Long.toString(buffer,    peekedNumberLength);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
154	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos  +  peekedNumberLength);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos  +  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos  +  peekedNumberLength);	  result    =    Long.toString(buffer,    peekedNumberLength);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
155	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  newValue);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  newValue);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  newValue);	  result    =    Long.toString(newValue);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
156	[BUG]  [BUGGY]  result  =  Long.toString(newValue,  value);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(newValue,  value);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(newValue,  value);	  result    =    Long.toString(newValue);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
157	[BUG]  [BUGGY]  result  =  Long.toString(nextValue());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(nextValue());  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(nextValue());	  result    =    Long.toString(newValue);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
158	[BUG]  [BUGGY]  result  =  Integer.toString(pathIndices[pos  +  1]);  pos  =  Long.toString(pathIndices[pos  +  1]);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Integer.toString(pathIndices[pos  +  1]);  pos  =  Long.toString(pathIndices[pos  +  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Integer.toString(pathIndices[pos  +  1]);  pos  =  Long.toString(pathIndices[pos  +  1]);	  result    =    Long.toString(pathIndices[pos    +    1]);    pos    =    Long.toString(pathIndices[pos    +    1]);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
159	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]);  pos  =  Long.toString(pathIndices[pos  +  2]);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]);  pos  =  Long.toString(pathIndices[pos  +  2]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  +  1]);  pos  =  Long.toString(pathIndices[pos  +  2]);	  result    =    Long.toString(pathIndices[pos    +    1]);    pos    =    Long.toString(pathIndices[pos    +    1]);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
160	[BUG]  [BUGGY]  result  =  String.valueOf(pathIndices[pos  +  1]);  pos  =  Long.toString(pathIndices[pos  +  1]);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  String.valueOf(pathIndices[pos  +  1]);  pos  =  Long.toString(pathIndices[pos  +  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  String.valueOf(pathIndices[pos  +  1]);  pos  =  Long.toString(pathIndices[pos  +  1]);	  result    =    Long.toString(pathIndices[pos    +    1]);    pos    =    Long.toString(pathIndices[pos    +    1]);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
161	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos++]);  pos  =  Long.toString(pathIndices[pos++]);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos++]);  pos  =  Long.toString(pathIndices[pos++]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos++]);  pos  =  Long.toString(pathIndices[pos++]);	  result    =    Long.toString(pathIndices[pos    +    1]);    pos    =    Long.toString(pathIndices[pos    +    1]);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
162	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathNames,  peekedNumberLength);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathNames,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathNames,  peekedNumberLength);	  result    =    Long.toString(pathNames,    peekedNumberLength);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
163	[BUG]  [BUGGY]  result  =  Long.toString(peekedNumberLength,  pathNames[pos]);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(peekedNumberLength,  pathNames[pos]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(peekedNumberLength,  pathNames[pos]);	  result    =    Long.toString(pathNames,    peekedNumberLength);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
164	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  peekedNumberLength  +  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  peekedNumberLength  +  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  peekedNumberLength  +  1);	  result    =    Long.toString(pathNames,    peekedNumberLength);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
165	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  peekedNumberLength  -  1);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  peekedNumberLength  -  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  peekedNumberLength  -  1);	  result    =    Long.toString(pathNames,    peekedNumberLength);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
166	[BUG]  [BUGGY]  result  =  Long.toString(peekedNumber,  pathNames[pos]);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(peekedNumber,  pathNames[pos]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(peekedNumber,  pathNames[pos]);	  result    =    Long.toString(pathNames,    peekedNumberLength);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
167	[BUG]  [BUGGY]  result  =  Long.toString(p);  result  =  Long.toString(p);  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(p);  result  =  Long.toString(p);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(p);    result  =  Long.toString(p);	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
168	[BUG]  [BUGGY]  result  =  Long.toString(p);  result  =  Long.toString(p);  }  else  if  (p  ==  PEEKED_LONG)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(p);  result  =  Long.toString(p);  }  else  if  (p  ==  PEEKED_LONG)  {  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(p);    result  =  Long.toString(p);  }  else  if  (p  ==  PEEKED_LONG)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
169	[BUG]  [BUGGY]  result  =  Long.toString(p);  Result  =  Long.toString(p);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(p);  Result  =  Long.toString(p);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(p);    Result  =  Long.toString(p);	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
170	[BUG]  [BUGGY]  result  =  Long.toString(p);  result  =  Long.toString(p);  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(p);  result  =  Long.toString(p);  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(p);    result  =  Long.toString(p);  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
171	[BUG]  [BUGGY]  result  =  Long.toString(p);  result  =  Long.toString(p);  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(p);  result  =  Long.toString(p);  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(p);    result  =  Long.toString(p);  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
172	[BUG]  [BUGGY]  result  =  Long.toString(p);  result  =  Long.toString(p);  pos  =  NUMBER_CHAR_SINGLE_QUOTED;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(p);  result  =  Long.toString(p);  pos  =  NUMBER_CHAR_SINGLE_QUOTED;  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(p);    result  =  Long.toString(p);  pos  =  NUMBER_CHAR_SINGLE_QUOTED;	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
173	[BUG]  [BUGGY]  result  =  Long.toString(p);  result  =  Long.toString(p);  }  else  if  (p  ==  PEEKED_BIGINT)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(p);  result  =  Long.toString(p);  }  else  if  (p  ==  PEEKED_BIGINT)  {  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(p);    result  =  Long.toString(p);  }  else  if  (p  ==  PEEKED_BIGINT)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
174	[BUG]  [BUGGY]  Result  =  Long.toString(pathIndices[pos  -  1]);  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  Result  =  Long.toString(pathIndices[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	Result  =  Long.toString(pathIndices[pos  -  1]);	  result    =    Long.toString(pathIndices[pos    -    1]);    result    =    Long.toString(pathIndices[pos    -    1]);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
175	[BUG]  [BUGGY]  result  =  Integer.toString(pathIndices[pos  -  1]);  result  =  Integer.toString(pathIndices[pos  -  1]);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Integer.toString(pathIndices[pos  -  1]);  result  =  Integer.toString(pathIndices[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Integer.toString(pathIndices[pos    -    1]);    result  =  Integer.toString(pathIndices[pos  -  1]);	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
176	[BUG]  [BUGGY]  result  =  Integer.toString(pathIndices[pos  -  1]);  Result  =  Integer.toString(pathIndices[pos  -  1]);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Integer.toString(pathIndices[pos  -  1]);  Result  =  Integer.toString(pathIndices[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Integer.toString(pathIndices[pos    -    1]);    Result  =  Integer.toString(pathIndices[pos  -  1]);	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
177	[BUG]  [BUGGY]  result  =  Integer.toString(pathIndices[pos  -  1]);  results  =  Integer.toString(pathIndices[pos  -  1]);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Integer.toString(pathIndices[pos  -  1]);  results  =  Integer.toString(pathIndices[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Integer.toString(pathIndices[pos    -    1]);    results  =  Integer.toString(pathIndices[pos  -  1]);	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
178	[BUG]  [BUGGY]  result  =  Integer.toString(pathIndices[pos  -  1]);  =  Integer.toString(pathIndices[pos  -  1]);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Integer.toString(pathIndices[pos  -  1]);  =  Integer.toString(pathIndices[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Integer.toString(pathIndices[pos    -    1]);    =  Integer.toString(pathIndices[pos  -  1]);	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
179	[BUG]  [BUGGY]  result  =  Integer.toString(pathIndices[pos  -  1]);  result  =  Integer.toString(pathIndices[pos  -  1]));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Integer.toString(pathIndices[pos  -  1]);  result  =  Integer.toString(pathIndices[pos  -  1]));  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Integer.toString(pathIndices[pos    -    1]);    result  =  Integer.toString(pathIndices[pos  -  1]));	  	non-compiled	[CE]  ';'  expected	62	None	add
180	[BUG]  [BUGGY]  results  =  Long.toString(peekedNumberLength);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  results  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	results  =  Long.toString(peekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    result    =    Long.toString(peekedNumberLength);result    =    Long.toString(peekedNumberLength);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
181	[BUG]  [BUGGY]  result  =  Long.toString(peechekedNumberLength);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(peechekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(peechekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    result    =    Long.toString(peekedNumberLength);result    =    Long.toString(peekedNumberLength);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
182	[BUG]  [BUGGY]  Result  =  Long.toString(peekedNumberLength);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  Result  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	Result  =  Long.toString(peekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    result    =    Long.toString(peekedNumberLength);result    =    Long.toString(peekedNumberLength);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
183	[BUG]  [BUGGY]  result  =  Long.toString(peelekedNumberLength);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(peelekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(peelekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    result    =    Long.toString(peekedNumberLength);result    =    Long.toString(peekedNumberLength);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
184	[BUG]  [BUGGY]  result  =  Long.toString(peerkedNumberLength);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(peerkedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(peerkedNumberLength);	  result    =    Long.toString(peekedNumberLength);    result    =    Long.toString(peekedNumberLength);result    =    Long.toString(peekedNumberLength);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
185	[BUG]  [BUGGY]  résultat  =  Long.toString(peekedNumberLength);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  résultat  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	résultat  =  Long.toString(peekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    result    =    Long.toString(peekedNumberLength);result    =    Long.toString(peekedNumberLength);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
186	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos  -  1]  +  1);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos  -  1]  +  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathIndices[pos  -  1]  +  1);	  result    =    Long.toString(pathIndices[pos    -    1]    +    1);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
187	[BUG]  [BUGGY]  Result  =  Long.toString(pathIndices[stackSize  -  1]  +  1);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  Result  =  Long.toString(pathIndices[stackSize  -  1]  +  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	Result  =  Long.toString(pathIndices[stackSize  -  1]  +  1);	  result    =    Long.toString(pathIndices[pos    -    1]    +    1);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
188	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  2);  [CE]  'try'  without  'catch'  or  'finally'  [FE]        AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  2);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  -  1]  +  2);	  result    =    Long.toString(pathIndices[pos    -    1]    +    1);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	61	None	replace
189	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  4);  [CE]  'try'  without  'catch'  or  'finally'  [FE]          AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  4);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  -  1]  +  4);	  result    =    Long.toString(pathIndices[pos    -    1]    +    1);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	61	None	replace
190	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  128);  [CE]  'try'  without  'catch'  or  'finally'  [FE]            AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  128);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  -  1]  +  128);	  result    =    Long.toString(pathIndices[pos    -    1]    +    1);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	61	None	replace
191	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos[pos  -  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos[pos  -  1]);	  result    =    Long.toString(peekedString[pos    -    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	64	None	replace
192	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  peekedString[pos  -  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  peekedString[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  peekedString[pos  -  1]);	  result    =    Long.toString(peekedString[pos    -    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	64	None	replace
193	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathNames[pos  -  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathNames[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathNames[pos  -  1]);	  result    =    Long.toString(peekedString[pos    -    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	64	None	replace
194	[BUG]  [BUGGY]  Result  =  Long.toString(pathIndices[pos]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  Result  =  Long.toString(pathIndices[pos]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	Result  =  Long.toString(pathIndices[pos]);	  result    =    Long.toString(pathIndices[pos]);    Result    =    Long.toString(pathIndices[pos]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	10	None	replace
195	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  pathSize[pos]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  pathSize[pos]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  pathSize[pos]);	  result    =    Long.toString(pathIndices[pos]);    Result    =    Long.toString(pathIndices[pos]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	10	None	replace
196	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos],  buffer);  [CE]  'try'  without  'catch'  or  'finally'  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos],  buffer);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos],  buffer);	  result    =    Long.toString(pathIndices[pos]);    Result    =    Long.toString(pathIndices[pos]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	10	None	replace
197	[BUG]  [BUGGY]  result  =  nextLongValue('  ');  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLongValue('  ');  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLongValue('  ');	  result    =    nextQuotedValue('    ');    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	103	None	replace
198	[BUG]  [BUGGY]  result  =  nextQuotedValue('  ',  PEEKED_DOUBLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextQuotedValue('  ',  PEEKED_DOUBLE_QUOTED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextQuotedValue('  ',  PEEKED_DOUBLE_QUOTED);	  result    =    nextQuotedValue('    ');    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	103	None	replace
199	[BUG]  [BUGGY]  result  =  nextLong('  ');  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong('  ');  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong('  ');	  result    =    nextQuotedValue('    ');    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	103	None	replace
200	[BUG]  [BUGGY]  Result  =  Long.toString(pathIndices[peeked  -  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  Result  =  Long.toString(pathIndices[peeked  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	Result  =  Long.toString(pathIndices[peeked  -  1]);	  Result    =    Long.toString(pathIndices[stackSize    -    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	59	None	replace
201	[BUG]  [BUGGY]  Result  =  Long.toString(pathIndices[peekedSize  -  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  Result  =  Long.toString(pathIndices[peekedSize  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	Result  =  Long.toString(pathIndices[peekedSize  -  1]);	  Result    =    Long.toString(pathIndices[stackSize    -    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	59	None	replace
202	[BUG]  [BUGGY]  Result  =  Long.toString(pathIndices[PEEKED_LONG  -  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  Result  =  Long.toString(pathIndices[PEEKED_LONG  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	Result  =  Long.toString(pathIndices[PEEKED_LONG  -  1]);	  Result    =    Long.toString(pathIndices[stackSize    -    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	59	None	replace
203	[BUG]  [BUGGY]  Result  =  Long.toString(pathIndices[peekSize  -  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  Result  =  Long.toString(pathIndices[peekSize  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	Result  =  Long.toString(pathIndices[peekSize  -  1]);	  Result    =    Long.toString(pathIndices[stackSize    -    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	59	None	replace
204	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,peekedString);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,peekedString);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,peekedString);	  result    =    Long.toString(peekedString,    pathNames);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	5	None	replace
205	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  peekedString,  pathNames);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  peekedString,  pathNames);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  peekedString,  pathNames);	  result    =    Long.toString(peekedString,    pathNames);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	5	None	replace
206	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  piekedString);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  piekedString);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  piekedString);	  result    =    Long.toString(peekedString,    pathNames);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	5	None	replace
207	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  peeked);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  peeked);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  peeked);	  result    =    Long.toString(peekedString,    pathNames);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	5	None	replace
208	[BUG]  [BUGGY]  result  =  Integer.toString(peekedNumberLength);  [CE]  'try'  without  'catch'  or  'finally'  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Integer.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Integer.toString(peekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    result    =    Integer.toString(peekedNumberLength);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	136	None	replace
209	[BUG]  [BUGGY]  result  =  Integer.toString(PEEKED_LONG);  [CE]  'try'  without  'catch'  or  'finally'  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Integer.toString(PEEKED_LONG);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Integer.toString(PEEKED_LONG);	  result    =    Long.toString(peekedNumberLength);    result    =    Integer.toString(peekedNumberLength);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	136	None	replace
210	[BUG]  [BUGGY]  Result  =  Long.toString(pathIndices[pos  +  1]);  result  =  Long.toString(pathIndices[pos  +  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  Result  =  Long.toString(pathIndices[pos  +  1]);  result  =  Long.toString(pathIndices[pos  +  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	Result  =  Long.toString(pathIndices[pos  +  1]);  result  =  Long.toString(pathIndices[pos  +  1]);	  result    =    Long.toString(pathIndices[pos    +    1]);    result    =    Long.toString(pathIndices[pos    +    1));    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	93	None	replace
211	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1],  pathNames[pos  +  1));  [CE]  ']'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1],  pathNames[pos  +  1));  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  +  1],  pathNames[pos  +  1));	  result    =    Long.toString(pathIndices[pos    +    1]);    result    =    Long.toString(pathIndices[pos    +    1));    	non-compiled	[CE]  ']'  expected	93	None	replace
212	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  peekedLong);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  peekedLong);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  peekedLong);	  result    =    Long.toString(buffer,    pos,    value);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	66	None	replace
213	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  peekedString);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  peekedString);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  peekedString);	  result    =    Long.toString(buffer,    peekedString);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	40	None	replace
214	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  PEEKED_LONG,  peekedString);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  PEEKED_LONG,  peekedString);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  PEEKED_LONG,  peekedString);	  result    =    Long.toString(buffer,    peekedString);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	40	None	replace
215	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathIndices,  peekedString);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathIndices,  peekedString);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathIndices,  peekedString);	  result    =    Long.toString(buffer,    peekedString);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	40	None	replace
216	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathNames,  peekedString);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathNames,  peekedString);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathNames,  peekedString);	  result    =    Long.toString(buffer,    peekedString);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	40	None	replace
217	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  0,  peekedString);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  0,  peekedString);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  0,  peekedString);	  result    =    Long.toString(buffer,    peekedString);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	40	None	replace
218	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  peekedNumber,  PEEKED_LONG);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  peekedNumber,  PEEKED_LONG);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  peekedNumber,  PEEKED_LONG);	  result    =    Long.toString(buffer,    peekedString);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	40	None	replace
219	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  position,  peekedString);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  position,  peekedString);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  position,  peekedString);	  result    =    Long.toString(buffer,    peekedString);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	40	None	replace
220	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  pathIndices,  false);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  pathIndices,  false);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  pathIndices,  false);	  result    =    Long.toString(pathNames,    pathIndices);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	109	None	replace
221	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  pathIndices,  PEEKED_DOUBLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  pathIndices,  PEEKED_DOUBLE_QUOTED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  pathIndices,  PEEKED_DOUBLE_QUOTED);	  result    =    Long.toString(pathNames,    pathIndices);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	109	None	replace
222	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  pathIndices,  peeked);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  pathIndices,  peeked);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  pathIndices,  peeked);	  result    =    Long.toString(pathNames,    pathIndices);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	109	None	replace
223	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  pathIndices,  PEEKED_LONG);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  pathIndices,  PEEKED_LONG);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  pathIndices,  PEEKED_LONG);	  result    =    Long.toString(pathNames,    pathIndices);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	109	None	replace
224	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  pathIndices,  true);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  pathIndices,  true);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  pathIndices,  true);	  result    =    Long.toString(pathNames,    pathIndices);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	109	None	replace
225	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  pathIndices,  PEEKED_BUFFERED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  pathIndices,  PEEKED_BUFFERED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  pathIndices,  PEEKED_BUFFERED);	  result    =    Long.toString(pathNames,    pathIndices);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	109	None	replace
226	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  2]);  result  =  Long.toString(pathIndices[pos  +  2]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]    AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  2]);  result  =  Long.toString(pathIndices[pos  +  2]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos    +    2]);    result  =  Long.toString(pathIndices[pos  +  2]);	  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	85	None	add
227	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  2]);  Result  =  Long.toString(pathIndices[pos  +  2]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]      AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  2]);  Result  =  Long.toString(pathIndices[pos  +  2]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos    +    2]);    Result  =  Long.toString(pathIndices[pos  +  2]);	  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	85	None	add
228	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  2]);  result  =  Long.toString(pathIndices[pos  +  3]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]        AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  2]);  result  =  Long.toString(pathIndices[pos  +  3]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos    +    2]);    result  =  Long.toString(pathIndices[pos  +  3]);	  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	85	None	add
229	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  2]);  result  =  Long.toString(pathIndices[pos  +  4]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]          AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  2]);  result  =  Long.toString(pathIndices[pos  +  4]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos    +    2]);    result  =  Long.toString(pathIndices[pos  +  4]);	  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	85	None	add
230	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  2]);  result  =  Long.toString(pathIndices[pos  +  2)]);  [CE]  ']'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  2]);  result  =  Long.toString(pathIndices[pos  +  2)]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos    +    2]);    result  =  Long.toString(pathIndices[pos  +  2)]);	  	non-compiled	[CE]  ']'  expected	85	None	add
231	[BUG]  [BUGGY]  result  =  nextLong(buffer,  pos,  PEEKED_DOUBLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(buffer,  pos,  PEEKED_DOUBLE_QUOTED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  pos,  PEEKED_DOUBLE_QUOTED);	  result    =    nextLong(buffer,    pos);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	35	None	replace
232	[BUG]  [BUGGY]  result  =  nextLong(buffer,  pos,  PEEKED_DOUBLE_QUOTE);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(buffer,  pos,  PEEKED_DOUBLE_QUOTE);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  pos,  PEEKED_DOUBLE_QUOTE);	  result    =    nextLong(buffer,    pos);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	35	None	replace
233	[BUG]  [BUGGY]  result  =  nextLong(buffer,  pos,  pathIndices);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(buffer,  pos,  pathIndices);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  pos,  pathIndices);	  result    =    nextLong(buffer,    pos);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	35	None	replace
234	[BUG]  [BUGGY]  result  =  nextLong(buffer,  pos,  PEEKED_SINGLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(buffer,  pos,  PEEKED_SINGLE_QUOTED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  pos,  PEEKED_SINGLE_QUOTED);	  result    =    nextLong(buffer,    pos);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	35	None	replace
235	[BUG]  [BUGGY]  result  =  nextLong(buffer,  pos,  PEEKED_BOOLEAN);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(buffer,  pos,  PEEKED_BOOLEAN);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  pos,  PEEKED_BOOLEAN);	  result    =    nextLong(buffer,    pos);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	35	None	replace
236	[BUG]  [BUGGY]  result  =  Integer.toString(pathIndices[stackSize  +  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]    AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Integer.toString(pathIndices[stackSize  +  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Integer.toString(pathIndices[stackSize  +  1]);	  result    =    Long.toString(pathIndices[stackSize    +    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	84	None	replace
237	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[stackSize  /  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]      AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[stackSize  /  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[stackSize  /  1]);	  result    =    Long.toString(pathIndices[stackSize    +    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	84	None	replace
238	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  MIN_INCOMPLETE_INTEGER);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  MIN_INCOMPLETE_INTEGER);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  MIN_INCOMPLETE_INTEGER);	  result    =    Long.toString(buffer,    value);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	45	None	replace
239	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  1);  result  =  Long.toString(pathIndices[pos  -  1]  +  1);  [CE]  'try'  without  'catch'  or  'finally'  [FE]    AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  1);  result  =  Long.toString(pathIndices[pos  -  1]  +  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos    -    1]    +    1);    result  =  Long.toString(pathIndices[pos  -  1]  +  1);	  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	60	None	add
240	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  1);  Result  =  Long.toString(pathIndices[pos  -  1]  +  1);  [CE]  'try'  without  'catch'  or  'finally'  [FE]      AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  1);  Result  =  Long.toString(pathIndices[pos  -  1]  +  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos    -    1]    +    1);    Result  =  Long.toString(pathIndices[pos  -  1]  +  1);	  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	60	None	add
241	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  1);  result  =  Long.toString(pathIndices[pos  -  1]  +  1));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  1);  result  =  Long.toString(pathIndices[pos  -  1]  +  1));  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos    -    1]    +    1);    result  =  Long.toString(pathIndices[pos  -  1]  +  1));	  	non-compiled	[CE]  ';'  expected	60	None	add
242	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  1);  result  =  Long.toString(pathIndices[position  -  1]  +  1);  [CE]  'try'  without  'catch'  or  'finally'  [FE]          AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  1);  result  =  Long.toString(pathIndices[position  -  1]  +  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos    -    1]    +    1);    result  =  Long.toString(pathIndices[position  -  1]  +  1);	  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	60	None	add
243	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  1);  result  =  Long.toString(pathIndices[p  -  1]  +  1);  [CE]  'try'  without  'catch'  or  'finally'  [FE]            AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  1);  result  =  Long.toString(pathIndices[p  -  1]  +  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos    -    1]    +    1);    result  =  Long.toString(pathIndices[p  -  1]  +  1);	  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	60	None	add
244	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  0,  peekedNumberLength  -  1);  [CE]  'try'  without  'catch'  or  'finally'  [FE]        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  0,  peekedNumberLength  -  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  0,  peekedNumberLength  -  1);	  result    =    Long.toString(buffer,    0,    peekedNumberLength);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	106	None	replace
245	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  0,  pos);  [CE]  'try'  without  'catch'  or  'finally'  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  0,  pos);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  0,  pos);	  result    =    Long.toString(buffer,    0,    peekedNumberLength);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	106	None	replace
246	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  0,  peekedNumberLength  +  1);  [CE]  'try'  without  'catch'  or  'finally'  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  0,  peekedNumberLength  +  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  0,  peekedNumberLength  +  1);	  result    =    Long.toString(buffer,    0,    peekedNumberLength);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	106	None	replace
247	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  0,  peekedNumberLength,  value);  [CE]  'try'  without  'catch'  or  'finally'  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  0,  peekedNumberLength,  value);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  0,  peekedNumberLength,  value);	  result    =    Long.toString(buffer,    0,    peekedNumberLength);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	106	None	replace
248	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  0,  peekedNumberLength,  pos);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  0,  peekedNumberLength,  pos);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  0,  peekedNumberLength,  pos);	  result    =    Long.toString(buffer,    0,    peekedNumberLength);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	106	None	replace
249	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  0);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  0);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  0);	  result    =    Long.toString(pathNames,    PEEKED_LONG);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	130	None	replace
250	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  PEEKED_BUFFER);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  PEEKED_BUFFER);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  PEEKED_BUFFER);	  result    =    Long.toString(pathNames,    PEEKED_LONG);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	130	None	replace
251	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  1);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  1);	  result    =    Long.toString(pathNames,    PEEKED_LONG);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	130	None	replace
252	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  PEEKED_BEGIN_ARRAY);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  PEEKED_BEGIN_ARRAY);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  PEEKED_BEGIN_ARRAY);	  result    =    Long.toString(pathNames,    PEEKED_LONG);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	130	None	replace
253	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  JsonToken.VALUE_STRING);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  JsonToken.VALUE_STRING);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  JsonToken.VALUE_STRING);	  result    =    Long.toString(pathNames,    PEEKED_LONG);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	130	None	replace
254	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  PEEKED_DOUBLE_QUOTED,  value);  [CE]  'try'  without  'catch'  or  'finally'  [FE]        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  PEEKED_DOUBLE_QUOTED,  value);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  PEEKED_DOUBLE_QUOTED,  value);	  result    =    Long.toString(buffer,    PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	28	None	replace
255	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  PEEKED_DOUBLE_QUOTED,  pathNames);  [CE]  'try'  without  'catch'  or  'finally'  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  PEEKED_DOUBLE_QUOTED,  pathNames);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  PEEKED_DOUBLE_QUOTED,  pathNames);	  result    =    Long.toString(buffer,    PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	28	None	replace
256	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  PEEKED_DOUBLE_QUOTED,  pathIndices);  [CE]  'try'  without  'catch'  or  'finally'  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  PEEKED_DOUBLE_QUOTED,  pathIndices);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  PEEKED_DOUBLE_QUOTED,  pathIndices);	  result    =    Long.toString(buffer,    PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	28	None	replace
257	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  0,  PEEKED_DOUBLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  0,  PEEKED_DOUBLE_QUOTED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  0,  PEEKED_DOUBLE_QUOTED);	  result    =    Long.toString(buffer,    PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	28	None	replace
258	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathNames,  PEEKED_DOUBLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathNames,  PEEKED_DOUBLE_QUOTED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathNames,  PEEKED_DOUBLE_QUOTED);	  result    =    Long.toString(buffer,    PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	28	None	replace
259	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathIndices,  PEEKED_DOUBLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathIndices,  PEEKED_DOUBLE_QUOTED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathIndices,  PEEKED_DOUBLE_QUOTED);	  result    =    Long.toString(buffer,    PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	28	None	replace
260	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  pathIndices[pos  -  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  pathIndices[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  pathIndices[pos  -  1]);	  result    =    Long.toString(buffer,    pathIndices[pos    -    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	58	None	replace
261	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathIndices[stackSize  -  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathIndices[stackSize  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathIndices[stackSize  -  1]);	  result    =    Long.toString(buffer,    pathIndices[pos    -    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	58	None	replace
262	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos  -  1],  peeked);  [CE]  'try'  without  'catch'  or  'finally'  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos  -  1],  peeked);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathIndices[pos  -  1],  peeked);	  result    =    Long.toString(buffer,    pathIndices[pos    -    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	58	None	replace
263	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  pathIndices[p  -  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  pathIndices[p  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  pathIndices[p  -  1]);	  result    =    Long.toString(buffer,    pathIndices[pos    -    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	58	None	replace
264	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos  -  1],  value);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos  -  1],  value);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathIndices[pos  -  1],  value);	  result    =    Long.toString(buffer,    pathIndices[pos    -    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	58	None	replace
265	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  buffer[pos  -  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  buffer[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  buffer[pos  -  1]);	  result    =    Long.toString(buffer,    pathIndices[pos    -    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	58	None	replace
266	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos  -  1);  [CE]  'try'  without  'catch'  or  'finally'  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos  -  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos  -  1);	  result    =    Long.toString(buffer,    pos    -    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	140	None	replace
267	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos  -  1],  pathIndices[stackSize  -  1]);  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos  -  1],  pathIndices[stackSize  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos  -  1],  pathIndices[stackSize  -  1]);	  result    =    Long.toString(buffer,    pos    -    1]);    	non-compiled	[CE]  ')'  expected	140	None	replace
268	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos  -  2]);  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos  -  2]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos  -  2]);	  result    =    Long.toString(buffer,    pos    -    1]);    	non-compiled	[CE]  ')'  expected	140	None	replace
269	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos  -  1],  peekedNumberLength);  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos  -  1],  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos  -  1],  peekedNumberLength);	  result    =    Long.toString(buffer,    pos    -    1]);    	non-compiled	[CE]  ')'  expected	140	None	replace
270	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos  -  1  +  1]);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos  -  1  +  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos  -  1  +  1]);	  result    =    Long.toString(buffer,    pos    -    1]);    	non-compiled	[CE]  ')'  expected	140	None	replace
271	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  stack,  peekedNumberLength);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  stack,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  stack,  peekedNumberLength);	  result    =    Long.toString(pathNames,    stack);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	111	None	replace
272	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  stack,  PEEKED_BUFFERED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  stack,  PEEKED_BUFFERED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  stack,  PEEKED_BUFFERED);	  result    =    Long.toString(pathNames,    stack);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	111	None	replace
273	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  stack,  peekedLong);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  stack,  peekedLong);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  stack,  peekedLong);	  result    =    Long.toString(pathNames,    stack);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	111	None	replace
274	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  stack,  PEEKED_DOUBLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  stack,  PEEKED_DOUBLE_QUOTED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  stack,  PEEKED_DOUBLE_QUOTED);	  result    =    Long.toString(pathNames,    stack);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	111	None	replace
275	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  stack[stackSize  -  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  stack[stackSize  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  stack[stackSize  -  1]);	  result    =    Long.toString(pathNames,    stack);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	111	None	replace
276	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  stack,  p);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  stack,  p);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  stack,  p);	  result    =    Long.toString(pathNames,    stack);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	111	None	replace
277	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  stack,  0);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  stack,  0);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  stack,  0);	  result    =    Long.toString(pathNames,    stack);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	111	None	replace
278	[BUG]  [BUGGY]  result  =  nextLongValue();  pos  +=  PEEKED_DOUBLE_QUOTED;  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLongValue();  pos  +=  PEEKED_DOUBLE_QUOTED;  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLongValue();  pos  +=  PEEKED_DOUBLE_QUOTED;	  result    =    nextLongValue();    pos    +=    peekedNumberLength;    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	146	None	replace
279	[BUG]  [BUGGY]  result  =  nextLongValue();  pos  +=  PEEKED_BUFFERED;  [CE]  empty  character  literal  [FE]                                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLongValue();  pos  +=  PEEKED_BUFFERED;  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLongValue();  pos  +=  PEEKED_BUFFERED;	  result    =    nextLongValue();    pos    +=    peekedNumberLength;    	non-compiled	[CE]  empty  character  literal	146	None	replace
280	[BUG]  [BUGGY]  result  =  nextBigIntegerValue();  pos  +=  peekedNumberLength;  [CE]  empty  character  literal  [FE]                                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextBigIntegerValue();  pos  +=  peekedNumberLength;  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextBigIntegerValue();  pos  +=  peekedNumberLength;	  result    =    nextLongValue();    pos    +=    peekedNumberLength;    	non-compiled	[CE]  empty  character  literal	146	None	replace
281	[BUG]  [BUGGY]  result  =  nextUnquotedValue();  pos  +=  peekedNumberLength;  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextUnquotedValue();  pos  +=  peekedNumberLength;  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextUnquotedValue();  pos  +=  peekedNumberLength;	  result    =    nextLongValue();    pos    +=    peekedNumberLength;    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	146	None	replace
282	[BUG]  [BUGGY]  result  =  nextLongValue();  pos  +=  PEEKED_SINGLE_QUOTED;  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLongValue();  pos  +=  PEEKED_SINGLE_QUOTED;  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLongValue();  pos  +=  PEEKED_SINGLE_QUOTED;	  result    =    nextLongValue();    pos    +=    peekedNumberLength;    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	146	None	replace
283	[BUG]  [BUGGY]  result  =  nextLongValue();  pos  +=  PEEKED_BOOLEAN;  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLongValue();  pos  +=  PEEKED_BOOLEAN;  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLongValue();  pos  +=  PEEKED_BOOLEAN;	  result    =    nextLongValue();    pos    +=    peekedNumberLength;    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	146	None	replace
284	[BUG]  [BUGGY]  result  =  Integer.toString(pathIndices[stackSize  -  1]  +  1);  [CE]  'try'  without  'catch'  or  'finally'  [FE]        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Integer.toString(pathIndices[stackSize  -  1]  +  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Integer.toString(pathIndices[stackSize  -  1]  +  1);	  result    =    Integer.toString(pathIndices[stackSize    -    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	139	None	replace
285	[BUG]  [BUGGY]  result  =  Integer.toString(pathIndices[stackSize  -  1]++);  [CE]  'try'  without  'catch'  or  'finally'  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Integer.toString(pathIndices[stackSize  -  1]++);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Integer.toString(pathIndices[stackSize  -  1]++);	  result    =    Integer.toString(pathIndices[stackSize    -    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	139	None	replace
286	[BUG]  [BUGGY]  result  =  Integer.toString(pathIndices[peekedNumber  -  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Integer.toString(pathIndices[peekedNumber  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Integer.toString(pathIndices[peekedNumber  -  1]);	  result    =    Integer.toString(pathIndices[stackSize    -    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	139	None	replace
287	[BUG]  [BUGGY]  result  =  Integer.toString(pathIndices[peekSize  -  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Integer.toString(pathIndices[peekSize  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Integer.toString(pathIndices[peekSize  -  1]);	  result    =    Integer.toString(pathIndices[stackSize    -    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	139	None	replace
288	[BUG]  [BUGGY]  result  =  Integer.toString(pathIndices[stackSize  -  1]  +  2);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Integer.toString(pathIndices[stackSize  -  1]  +  2);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Integer.toString(pathIndices[stackSize  -  1]  +  2);	  result    =    Integer.toString(pathIndices[stackSize    -    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	139	None	replace
289	[BUG]  [BUGGY]  result  =  Long.parseLong(buffer,  pos);  [CE]  'try'  without  'catch'  or  'finally'  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.parseLong(buffer,  pos);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.parseLong(buffer,  pos);	  result    =    Long.toString(pos);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	30	None	replace
290	[BUG]  [BUGGY]  result  =  Integer.toString(buffer,  pos);  [CE]  'try'  without  'catch'  or  'finally'  [FE]      ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Integer.toString(buffer,  pos);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Integer.toString(buffer,  pos);	  result    =    Long.toString(pos);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	30	None	replace
291	[BUG]  [BUGGY]  result  =  Long.valueOf(buffer,  pos);  [CE]  'try'  without  'catch'  or  'finally'  [FE]        ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.valueOf(buffer,  pos);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.valueOf(buffer,  pos);	  result    =    Long.toString(pos);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	30	None	replace
292	[BUG]  [BUGGY]  result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[p]);  result  =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[p]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[p]);  result  =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[p]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(pathIndices[pos]);        result    =    Long.toString(pathIndices[p]);    result  =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[p]);	  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	11	None	add
293	[BUG]  [BUGGY]  result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[p]);  Result  =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[p]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]      ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[p]);  Result  =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[p]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(pathIndices[pos]);        result    =    Long.toString(pathIndices[p]);    Result  =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[p]);	  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	11	None	add
294	[BUG]  [BUGGY]  result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[p]);  result  =  Integer.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[p]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]        ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[p]);  result  =  Integer.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[p]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(pathIndices[pos]);        result    =    Long.toString(pathIndices[p]);    result  =  Integer.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[p]);	  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	11	None	add
295	[BUG]  [BUGGY]  result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[p]);  =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[p]);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[p]);  =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[p]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(pathIndices[pos]);        result    =    Long.toString(pathIndices[p]);    =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[p]);	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
296	[BUG]  [BUGGY]  result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[p]);  result  =  long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[p]);  [CE]  class  expected  [FE]            ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[p]);  result  =  long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[p]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(pathIndices[pos]);        result    =    Long.toString(pathIndices[p]);    result  =  long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[p]);	  	non-compiled	[CE]  class  expected	11	None	add
297	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[p  +  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[p  +  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[p  +  1]);	  result    =    Long.toString(pathIndices[pos    +    1]);    result    =    Long.toString(pathIndices[p    +    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	121	None	replace
298	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  pathSize[pos  +  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  pathSize[pos  +  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  pathSize[pos  +  1]);	  result    =    Long.toString(pathIndices[pos    +    1]);    result    =    Long.toString(pathIndices[p    +    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	121	None	replace
299	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  lenient);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  lenient);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  lenient);	  result    =    Long.toString(buffer,    negativeString);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	42	None	replace
300	[BUG]  [BUGGY]  result  =  Integer.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  -  2]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Integer.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  -  2]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Integer.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  -  2]);	  result    =    Long.toString(pathIndices[pos    -    1]);    result    =    Long.toString(pathIndices[pos    -    2]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	21	None	replace
301	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  -  2]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]      ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  -  2]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  -  2]);	  result    =    Long.toString(pathIndices[pos    -    1]);    result    =    Long.toString(pathIndices[pos    -    2]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	21	None	replace
302	[BUG]  [BUGGY]  Result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  -  2]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]        ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  Result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  -  2]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	Result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  -  2]);	  result    =    Long.toString(pathIndices[pos    -    1]);    result    =    Long.toString(pathIndices[pos    -    2]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	21	None	replace
303	[BUG]  [BUGGY]  Result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[stackSize  -  2]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]          ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  Result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[stackSize  -  2]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	Result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[stackSize  -  2]);	  result    =    Long.toString(pathIndices[pos    -    1]);    result    =    Long.toString(pathIndices[pos    -    2]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	21	None	replace
304	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  PEEKED_LONG,  value);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  PEEKED_LONG,  value);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  PEEKED_LONG,  value);	  result    =    Long.toString(buffer,    PEEKED_LONG);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	26	None	replace
305	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  PEEKED_LONG,  pathIndices);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  PEEKED_LONG,  pathIndices);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  PEEKED_LONG,  pathIndices);	  result    =    Long.toString(buffer,    PEEKED_LONG);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	26	None	replace
306	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  PEEKED_LONG,  peekedNumberLength);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  PEEKED_LONG,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  PEEKED_LONG,  peekedNumberLength);	  result    =    Long.toString(buffer,    PEEKED_LONG);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	26	None	replace
307	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  0,  PEEKED_LONG);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  0,  PEEKED_LONG);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  0,  PEEKED_LONG);	  result    =    Long.toString(buffer,    PEEKED_LONG);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	26	None	replace
308	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  PEEKED_LONG,  pathNames);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  PEEKED_LONG,  pathNames);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  PEEKED_LONG,  pathNames);	  result    =    Long.toString(buffer,    PEEKED_LONG);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	26	None	replace
309	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  value,  PEEKED_LONG);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  value,  PEEKED_LONG);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  value,  PEEKED_LONG);	  result    =    Long.toString(buffer,    PEEKED_LONG);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	26	None	replace
310	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[stackSize  -  1]);  result  =  Long.toString(pathIndices[stackSize  -  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[stackSize  -  1]);  result  =  Long.toString(pathIndices[stackSize  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[stackSize    -    1]);    result  =  Long.toString(pathIndices[stackSize  -  1]);	  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	56	None	add
311	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[stackSize  -  1]);  Result  =  Long.toString(pathIndices[stackSize  -  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]      ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[stackSize  -  1]);  Result  =  Long.toString(pathIndices[stackSize  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[stackSize    -    1]);    Result  =  Long.toString(pathIndices[stackSize  -  1]);	  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	56	None	add
312	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[stackSize  -  1]);  result  =  Long.toString(pathIndices[stackSize  -  1)]);  [CE]  ']'  expected  [FE]        ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[stackSize  -  1]);  result  =  Long.toString(pathIndices[stackSize  -  1)]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[stackSize    -    1]);    result  =  Long.toString(pathIndices[stackSize  -  1)]);	  	non-compiled	[CE]  ']'  expected	56	None	add
313	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[stackSize  -  1]);  result  =  Long.toString(pathIndices[stackSize  -  1]));  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[stackSize  -  1]);  result  =  Long.toString(pathIndices[stackSize  -  1]));  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[stackSize    -    1]);    result  =  Long.toString(pathIndices[stackSize  -  1]));	  	non-compiled	[CE]  ';'  expected	56	None	add
314	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[stackSize  -  1]);  results  =  Long.toString(pathIndices[stackSize  -  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]            ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[stackSize  -  1]);  results  =  Long.toString(pathIndices[stackSize  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[stackSize    -    1]);    results  =  Long.toString(pathIndices[stackSize  -  1]);	  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	56	None	add
315	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos);  pos  =  Long.toString(peekedNumberLength);  [CE]  'try'  without  'catch'  or  'finally'  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos);  pos  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos);  pos  =  Long.toString(peekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    pos    =    Long.toString(peekedNumberLength);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	113	None	replace
316	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  peedNumberLength);  pos  =  Long.toString(peekedNumberLength);  [CE]  'try'  without  'catch'  or  'finally'  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  peedNumberLength);  pos  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  peedNumberLength);  pos  =  Long.toString(peekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    pos    =    Long.toString(peekedNumberLength);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	113	None	replace
317	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  PEEKED_BUFFERED);  pos  =  Long.toString(peekedNumberLength);  [CE]  'try'  without  'catch'  or  'finally'  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  PEEKED_BUFFERED);  pos  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  PEEKED_BUFFERED);  pos  =  Long.toString(peekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    pos    =    Long.toString(peekedNumberLength);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	113	None	replace
318	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  value);  pos  =  Long.toString(peekedNumberLength);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  value);  pos  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  value);  pos  =  Long.toString(peekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    pos    =    Long.toString(peekedNumberLength);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	113	None	replace
319	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  PEEKED_LONG);  pos  =  Long.toString(peekedNumberLength);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  PEEKED_LONG);  pos  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  PEEKED_LONG);  pos  =  Long.toString(peekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    pos    =    Long.toString(peekedNumberLength);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	113	None	replace
320	[BUG]  [BUGGY]  result  =  Long.toString(buffer);  pos  =  Long.toString(peekedNumberLength);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer);  pos  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer);  pos  =  Long.toString(peekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    pos    =    Long.toString(peekedNumberLength);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	113	None	replace
321	[BUG]  [BUGGY]  result  =  Long.toString(peekedNumberLength).toString();  [CE]  'try'  without  'catch'  or  'finally'  [FE]        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(peekedNumberLength).toString();  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(peekedNumberLength).toString();	  result    =    Long.toString(peekedNumberLength);    result    =    Long.toString(peekedNumberLength).toString();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	135	None	replace
322	[BUG]  [BUGGY]  result  =  Long.toString(pathNames[pos]).toString();  [CE]  'try'  without  'catch'  or  'finally'  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames[pos]).toString();  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames[pos]).toString();	  result    =    Long.toString(peekedNumberLength);    result    =    Long.toString(peekedNumberLength).toString();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	135	None	replace
323	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  0,  pos).toString();  [CE]  'try'  without  'catch'  or  'finally'  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  0,  pos).toString();  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  0,  pos).toString();	  result    =    Long.toString(peekedNumberLength);    result    =    Long.toString(peekedNumberLength).toString();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	135	None	replace
324	[BUG]  [BUGGY]  result  =  new  String(buffer,  pos,  PEEKED_BUFFERED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]    AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  new  String(buffer,  pos,  PEEKED_BUFFERED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  new  String(buffer,  pos,  PEEKED_BUFFERED);	  result    =    Long.toString(peekedNumberLength);    result    =    Long.toString(peekedNumberLength);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	73	None	replace
325	[BUG]  [BUGGY]  result  =  nextLong(buffer,  pos  +  1,  PEEKED_BUFFERED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(buffer,  pos  +  1,  PEEKED_BUFFERED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  pos  +  1,  PEEKED_BUFFERED);	  result    =    nextLong(buffer,    pos    +    1,    peekedNumberLength);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	145	None	replace
326	[BUG]  [BUGGY]  result  =  nextString(buffer,  pos  +  1,  peekedNumberLength);  [CE]  empty  character  literal  [FE]                              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextString(buffer,  pos  +  1,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextString(buffer,  pos  +  1,  peekedNumberLength);	  result    =    nextLong(buffer,    pos    +    1,    peekedNumberLength);    	non-compiled	[CE]  empty  character  literal	145	None	replace
327	[BUG]  [BUGGY]  result  =  nextInt(buffer,  pos  +  1,  peekedNumberLength);  [CE]  empty  character  literal  [FE]                                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextInt(buffer,  pos  +  1,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextInt(buffer,  pos  +  1,  peekedNumberLength);	  result    =    nextLong(buffer,    pos    +    1,    peekedNumberLength);    	non-compiled	[CE]  empty  character  literal	145	None	replace
328	[BUG]  [BUGGY]  result  =  nextLong(buffer,  pos  +  1,  PEEKED_DOUBLE_QUOTED);  [CE]  empty  character  literal  [FE]                                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(buffer,  pos  +  1,  PEEKED_DOUBLE_QUOTED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  pos  +  1,  PEEKED_DOUBLE_QUOTED);	  result    =    nextLong(buffer,    pos    +    1,    peekedNumberLength);    	non-compiled	[CE]  empty  character  literal	145	None	replace
329	[BUG]  [BUGGY]  result  =  nextBoolean(buffer,  pos  +  1,  peekedNumberLength);  [CE]  empty  character  literal  [FE]                                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextBoolean(buffer,  pos  +  1,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextBoolean(buffer,  pos  +  1,  peekedNumberLength);	  result    =    nextLong(buffer,    pos    +    1,    peekedNumberLength);    	non-compiled	[CE]  empty  character  literal	145	None	replace
330	[BUG]  [BUGGY]  result  =  nextLong(buffer,  pos  +  1,  peekedNumberLength,  PEEKED_DOUBLE_QUOTED);  [CE]  empty  character  literal  [FE]                                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(buffer,  pos  +  1,  peekedNumberLength,  PEEKED_DOUBLE_QUOTED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  pos  +  1,  peekedNumberLength,  PEEKED_DOUBLE_QUOTED);	  result    =    nextLong(buffer,    pos    +    1,    peekedNumberLength);    	non-compiled	[CE]  empty  character  literal	145	None	replace
331	[BUG]  [BUGGY]  result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[p  -  1]);  result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[p  -  1]);  [CE]  empty  character  literal  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[p  -  1]);  result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[p  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(pathIndices[pos        -        1]);        result    =    Long.toString(pathIndices[p    -    1]);    result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[p  -  1]);	  	non-compiled	[CE]  empty  character  literal	18	None	add
332	[BUG]  [BUGGY]  result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[p  -  1]);  Result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[p  -  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]      ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[p  -  1]);  Result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[p  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(pathIndices[pos        -        1]);        result    =    Long.toString(pathIndices[p    -    1]);    Result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[p  -  1]);	  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	18	None	add
333	[BUG]  [BUGGY]  result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[p  -  1]);  result  =  Integer.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[p  -  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]        ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[p  -  1]);  result  =  Integer.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[p  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(pathIndices[pos        -        1]);        result    =    Long.toString(pathIndices[p    -    1]);    result  =  Integer.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[p  -  1]);	  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	18	None	add
334	[BUG]  [BUGGY]  result  =  nextLong(buffer,  pos,  PEEKED_LONG,  peekedNumberLength);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(buffer,  pos,  PEEKED_LONG,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  pos,  PEEKED_LONG,  peekedNumberLength);	  result    =    nextLong(buffer,    pos,    PEEKED_LONG);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	39	None	replace
335	[BUG]  [BUGGY]  result  =  nextLong(buffer,  pos,  PEEKED_BUFFERED,  PEEKED_LONG);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(buffer,  pos,  PEEKED_BUFFERED,  PEEKED_LONG);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  pos,  PEEKED_BUFFERED,  PEEKED_LONG);	  result    =    nextLong(buffer,    pos,    PEEKED_LONG);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	39	None	replace
336	[BUG]  [BUGGY]  result  =  nextLong(buffer,  pos,  PEEKED_LONG,  value);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(buffer,  pos,  PEEKED_LONG,  value);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  pos,  PEEKED_LONG,  value);	  result    =    nextLong(buffer,    pos,    PEEKED_LONG);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	39	None	replace
337	[BUG]  [BUGGY]  result  =  nextLong(buffer,  pos,  PEEKED_LONG,  pathIndices);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(buffer,  pos,  PEEKED_LONG,  pathIndices);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  pos,  PEEKED_LONG,  pathIndices);	  result    =    nextLong(buffer,    pos,    PEEKED_LONG);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	39	None	replace
338	[BUG]  [BUGGY]  result  =  nextLong(buffer,  pos,  PEEKED_BUCKET);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(buffer,  pos,  PEEKED_BUCKET);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  pos,  PEEKED_BUCKET);	  result    =    nextLong(buffer,    pos,    PEEKED_LONG);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	39	None	replace
339	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos++]);  result  =  Long.toString(pathIndices[pos++]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos++]);  result  =  Long.toString(pathIndices[pos++]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos++]);    result  =  Long.toString(pathIndices[pos++]);	  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	47	None	add
340	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos++]);  Result  =  Long.toString(pathIndices[pos++]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]      ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos++]);  Result  =  Long.toString(pathIndices[pos++]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos++]);    Result  =  Long.toString(pathIndices[pos++]);	  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	47	None	add
341	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos++]);  result  =  Long.toString(pathIndices[pos++]).toString();  [CE]  'try'  without  'catch'  or  'finally'  [FE]        ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos++]);  result  =  Long.toString(pathIndices[pos++]).toString();  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos++]);    result  =  Long.toString(pathIndices[pos++]).toString();	  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	47	None	add
342	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos++]);  results  =  Long.toString(pathIndices[pos++]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]          ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos++]);  results  =  Long.toString(pathIndices[pos++]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos++]);    results  =  Long.toString(pathIndices[pos++]);	  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	47	None	add
343	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos++]);  result  =  Long.toString(pathIndices[p++]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]            ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos++]);  result  =  Long.toString(pathIndices[p++]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos++]);    result  =  Long.toString(pathIndices[p++]);	  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	47	None	add
344	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[0],  pathNames[stackSize  -  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[0],  pathNames[stackSize  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[0],  pathNames[stackSize  -  1]);	  result    =    Long.toString(pathIndices[0]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	107	None	replace
345	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[1]);	  result    =    Long.toString(pathIndices[0]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	107	None	replace
346	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[0]  +  1);  [CE]  'try'  without  'catch'  or  'finally'  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[0]  +  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[0]  +  1);	  result    =    Long.toString(pathIndices[0]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	107	None	replace
347	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[0],  PEEKED_DOUBLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[0],  PEEKED_DOUBLE_QUOTED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[0],  PEEKED_DOUBLE_QUOTED);	  result    =    Long.toString(pathIndices[0]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	107	None	replace
348	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[0]  -  1);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[0]  -  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[0]  -  1);	  result    =    Long.toString(pathIndices[0]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	107	None	replace
349	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[0],  PEEKED_LONG);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[0],  PEEKED_LONG);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[0],  PEEKED_LONG);	  result    =    Long.toString(pathIndices[0]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	107	None	replace
350	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos]  -  1);  result  =  Long.toString(pathIndices[pos]  -  1);  [CE]  'try'  without  'catch'  or  'finally'  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos]  -  1);  result  =  Long.toString(pathIndices[pos]  -  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos]    -    1);    result  =  Long.toString(pathIndices[pos]  -  1);	  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	51	None	add
351	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos]  -  1);  Result  =  Long.toString(pathIndices[pos]  -  1);  [CE]  'try'  without  'catch'  or  'finally'  [FE]      ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos]  -  1);  Result  =  Long.toString(pathIndices[pos]  -  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos]    -    1);    Result  =  Long.toString(pathIndices[pos]  -  1);	  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	51	None	add
352	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos]  -  1);  results  =  Long.toString(pathIndices[pos]  -  1);  [CE]  'try'  without  'catch'  or  'finally'  [FE]        ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos]  -  1);  results  =  Long.toString(pathIndices[pos]  -  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos]    -    1);    results  =  Long.toString(pathIndices[pos]  -  1);	  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	51	None	add
353	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos]  -  1);  result  =  Long.toString(pathIndices[pos]  -  2);  [CE]  'try'  without  'catch'  or  'finally'  [FE]          ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos]  -  1);  result  =  Long.toString(pathIndices[pos]  -  2);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos]    -    1);    result  =  Long.toString(pathIndices[pos]  -  2);	  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	51	None	add
354	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos]  -  1);  result  =  Long.toString(pathIndices[pos]  -  1));  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos]  -  1);  result  =  Long.toString(pathIndices[pos]  -  1));  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos]    -    1);    result  =  Long.toString(pathIndices[pos]  -  1));	  	non-compiled	[CE]  ';'  expected	51	None	add
355	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathIndices,  value);  [CE]  'try'  without  'catch'  or  'finally'  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathIndices,  value);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathIndices,  value);	  result    =    Long.toString(buffer,    pathIndices);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	53	None	replace
356	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathNames,  pathIndices);  [CE]  'try'  without  'catch'  or  'finally'  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathNames,  pathIndices);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathNames,  pathIndices);	  result    =    Long.toString(buffer,    pathIndices);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	53	None	replace
357	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathIndices,  pos);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathIndices,  pos);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathIndices,  pos);	  result    =    Long.toString(buffer,    pathIndices);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	53	None	replace
358	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathIndices,  PEEKED_LONG);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathIndices,  PEEKED_LONG);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathIndices,  PEEKED_LONG);	  result    =    Long.toString(buffer,    pathIndices);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	53	None	replace
359	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[stackSize]  -  1);  [CE]  'try'  without  'catch'  or  'finally'  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[stackSize]  -  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[stackSize]  -  1);	  result    =    Long.toString(pathIndices[pos]    -    1);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	52	None	replace
360	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos]  -  2);  [CE]  'try'  without  'catch'  or  'finally'  [FE]      ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos]  -  2);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos]  -  2);	  result    =    Long.toString(pathIndices[pos]    -    1);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	52	None	replace
361	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos]  -  1);  [CE]  'try'  without  'catch'  or  'finally'  [FE]        ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos]  -  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathIndices[pos]  -  1);	  result    =    Long.toString(pathIndices[pos]    -    1);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	52	None	replace
362	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  min_INCOMPLETE_INTEGER);  [CE]  'try'  without  'catch'  or  'finally'  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  min_INCOMPLETE_INTEGER);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  min_INCOMPLETE_INTEGER);	  result    =    Long.toString(min_INCOMPLETE_INTEGER);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	96	None	replace
363	[BUG]  [BUGGY]  result  =  Long.toString(pathNames[0]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames[0]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames[0]);	  result    =    Long.toString(min_INCOMPLETE_INTEGER);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	96	None	replace
364	[BUG]  [BUGGY]  result  =  Long.toString(pathNames[i]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames[i]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames[i]);	  result    =    Long.toString(MIN_INCOMPLETE_INTEGER);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	95	None	replace
365	[BUG]  [BUGGY]  Results  =  Long.toString(pathIndices[pos  -  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  Results  =  Long.toString(pathIndices[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	Results  =  Long.toString(pathIndices[pos  -  1]);	  result    =    Long.toString(pathIndices[pos    -    1]);    results    =    Long.toString(pathIndices[pos    -    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	22	None	replace
366	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]);  results  =  Long.toString(pathIndices[stackSize  -  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]);  results  =  Long.toString(pathIndices[stackSize  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  -  1]);  results  =  Long.toString(pathIndices[stackSize  -  1]);	  result    =    Long.toString(pathIndices[pos    -    1]);    results    =    Long.toString(pathIndices[pos    -    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	22	None	replace
367	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  PEEKED_BUFFERED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  PEEKED_BUFFERED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  -  1]  +  PEEKED_BUFFERED);	  result    =    Long.toString(pathIndices[pos    -    1]);    results    =    Long.toString(pathIndices[pos    -    1]);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	22	None	replace
368	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  PEEKED_BOOLEAN);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  PEEKED_BOOLEAN);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  PEEKED_BOOLEAN);	  result    =    Long.toString(buffer,    pos,    PEEKED_BUFFER);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	71	None	replace
369	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  [CE]  'try'  without  'catch'  or  'finally'  [FE]    AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);	  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	72	None	add
370	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  Result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  [CE]  'try'  without  'catch'  or  'finally'  [FE]      AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  Result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);    Result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);	  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	72	None	add
371	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekNumberLength);  result  =  Long.toString(peekedNumberLength);  [CE]  'try'  without  'catch'  or  'finally'  [FE]        AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekNumberLength);  result  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekNumberLength);  result  =  Long.toString(peekedNumberLength);	  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	72	None	add
372	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  result  =  Integer.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  [CE]  'try'  without  'catch'  or  'finally'  [FE]          AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  result  =  Integer.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);    result  =  Integer.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);	  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	72	None	add
373	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peechedNumberLength);  result  =  Long.toString(peekedNumberLength);  [CE]  'try'  without  'catch'  or  'finally'  [FE]            AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peechedNumberLength);  result  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peechedNumberLength);  result  =  Long.toString(peekedNumberLength);	  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	72	None	add
374	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength;  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength;  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength;	  	non-compiled	[CE]  ')'  expected	72	None	add
375	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  result  =  long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  [CE]  class  expected  [FE]                AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  result  =  long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);    result  =  long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);	  	non-compiled	[CE]  class  expected	72	None	add
376	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peedNumberLength);  result  =  Long.toString(peekedNumberLength);  [CE]  class  expected  [FE]                  AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peedNumberLength);  result  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peedNumberLength);  result  =  Long.toString(peekedNumberLength);	  	non-compiled	[CE]  class  expected	72	None	add
377	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  position  +  1);  [CE]  'try'  without  'catch'  or  'finally'  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  position  +  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  position  +  1);	  result    =    Long.toString(buffer,    position);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	126	None	replace
378	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  position  -  1);  [CE]  'try'  without  'catch'  or  'finally'  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  position  -  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  position  -  1);	  result    =    Long.toString(buffer,    position);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	126	None	replace
379	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  0,  position);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  0,  position);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  0,  position);	  result    =    Long.toString(buffer,    position);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	126	None	replace
380	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  position  +  2);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  position  +  2);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  position  +  2);	  result    =    Long.toString(buffer,    position);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	126	None	replace
381	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  position  +  3);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  position  +  3);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  position  +  3);	  result    =    Long.toString(buffer,    position);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	126	None	replace
382	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  position  +  4);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  position  +  4);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  position  +  4);	  result    =    Long.toString(buffer,    position);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	126	None	replace
383	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);  [CE]  class  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);	  	non-compiled	[CE]  class  expected	75	None	add
384	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberL  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberL  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberL	  	non-compiled	[CE]  ')'  expected	75	None	add
385	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength	  	non-compiled	[CE]  ')'  expected	75	None	add
386	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);  Result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);  [CE]  class  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);  Result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);result    =    Long.toString(peekedNumberLength);    Result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);	  	non-compiled	[CE]  class  expected	75	None	add
387	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peelekedNumberLength);  [CE]  class  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peelekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peelekedNumberLength);	  	non-compiled	[CE]  class  expected	75	None	add
388	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLenth);  [CE]  class  expected  [FE]              AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLenth);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLenth);	  	non-compiled	[CE]  class  expected	75	None	add
389	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength;  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength;  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength;	  	non-compiled	[CE]  ')'  expected	75	None	add
390	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLeng  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLeng  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLeng	  	non-compiled	[CE]  ')'  expected	75	None	add
391	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[stackSize  -  1]  +  length);  [CE]  'try'  without  'catch'  or  'finally'  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[stackSize  -  1]  +  length);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[stackSize  -  1]  +  length);	  result    =    Long.toString(pathIndices[pos    -    1]    +    length);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	105	None	replace
392	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  PEEKED_LONG);  [CE]  unclosed  character  literal  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  PEEKED_LONG);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  -  1]  +  PEEKED_LONG);	  result    =    Long.toString(pathIndices[pos    -    1]    +    length);    	non-compiled	[CE]  unclosed  character  literal	105	None	replace
393	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  length,  peekedNumberLength);  [CE]  class  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  length,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  -  1]  +  length,  peekedNumberLength);	  result    =    Long.toString(pathIndices[pos    -    1]    +    length);    	non-compiled	[CE]  class  expected	105	None	replace
394	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  PEEKED_DOUBLE_QUOTED);  [CE]  class  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  PEEKED_DOUBLE_QUOTED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  -  1]  +  PEEKED_DOUBLE_QUOTED);	  result    =    Long.toString(pathIndices[pos    -    1]    +    length);    	non-compiled	[CE]  class  expected	105	None	replace
395	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  buffer);  [CE]  class  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  buffer);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  -  1]  +  buffer);	  result    =    Long.toString(pathIndices[pos    -    1]    +    length);    	non-compiled	[CE]  class  expected	105	None	replace
396	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  length,  peeked);  [CE]  class  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  length,  peeked);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  -  1]  +  length,  peeked);	  result    =    Long.toString(pathIndices[pos    -    1]    +    length);    	non-compiled	[CE]  class  expected	105	None	replace
397	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  /  ''');  [CE]  class  expected  [FE]        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  /  ''');  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  +  1]  /  ''');	  result    =    Long.toString(pathIndices[pos    +    1]    +    ''');    	non-compiled	[CE]  class  expected	99	None	replace
398	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  +  ''',  PEEKED_DOUBLE_QUOTED);  [CE]  class  expected  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  +  ''',  PEEKED_DOUBLE_QUOTED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  +  1]  +  ''',  PEEKED_DOUBLE_QUOTED);	  result    =    Long.toString(pathIndices[pos    +    1]    +    ''');    	non-compiled	[CE]  class  expected	99	None	replace
399	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  +  ''',  pathNames[stackSize  -  1]);  [CE]  class  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  +  ''',  pathNames[stackSize  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  +  1]  +  ''',  pathNames[stackSize  -  1]);	  result    =    Long.toString(pathIndices[pos    +    1]    +    ''');    	non-compiled	[CE]  class  expected	99	None	replace
400	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  -  ''');  [CE]  class  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  -  ''');  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  +  1]  -  ''');	  result    =    Long.toString(pathIndices[pos    +    1]    +    ''');    	non-compiled	[CE]  class  expected	99	None	replace
401	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  +  ''',  value);  [CE]  class  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  +  ''',  value);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  +  1]  +  ''',  value);	  result    =    Long.toString(pathIndices[pos    +    1]    +    ''');    	non-compiled	[CE]  class  expected	99	None	replace
402	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  +  ''',  PEEKED_LONG);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  +  ''',  PEEKED_LONG);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  +  1]  +  ''',  PEEKED_LONG);	  result    =    Long.toString(pathIndices[pos    +    1]    +    ''');    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
403	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  pathIndices[pos  -  1]);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  pathIndices[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  pathIndices[pos  -  1]);	  result    =    Long.toString(pathNames,    pathIndices[stackSize    -    1]);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
404	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  pathIndices[peekedSize  -  1]);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  pathIndices[peekedSize  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  pathIndices[peekedSize  -  1]);	  result    =    Long.toString(pathNames,    pathIndices[stackSize    -    1]);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
405	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  pathIndices[peekedNumber  -  1]);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  pathIndices[peekedNumber  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  pathIndices[peekedNumber  -  1]);	  result    =    Long.toString(pathNames,    pathIndices[stackSize    -    1]);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
406	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  pathIndices[peekSize  -  1]);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  pathIndices[peekSize  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  pathIndices[peekSize  -  1]);	  result    =    Long.toString(pathNames,    pathIndices[stackSize    -    1]);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
407	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  pathIndices[stackSize  -  1]  +  suffix);  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  pathIndices[stackSize  -  1]  +  suffix);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  pathIndices[stackSize  -  1]  +  suffix);	  result    =    Long.toString(pathNames,    pathIndices[stackSize    -    1]);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
408	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  pathIndices[stackSize  -  1]  +  PEEKED_LONG);  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  pathIndices[stackSize  -  1]  +  PEEKED_LONG);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  pathIndices[stackSize  -  1]  +  PEEKED_LONG);	  result    =    Long.toString(pathNames,    pathIndices[stackSize    -    1]);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
409	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos++]  +  1);  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos++]  +  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos++]  +  1);	  result    =    Long.toString(pathIndices[pos++]);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
410	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos++],  buffer);  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos++],  buffer);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos++],  buffer);	  result    =    Long.toString(pathIndices[pos++]);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
411	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos++]  -  1);  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos++]  -  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos++]  -  1);	  result    =    Long.toString(pathIndices[pos++]);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
412	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos++]  &  0xff);  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos++]  &  0xff);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos++]  &  0xff);	  result    =    Long.toString(pathIndices[pos++]);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
413	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos++]  &  0xFF);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos++]  &  0xFF);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos++]  &  0xFF);	  result    =    Long.toString(pathIndices[pos++]);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
414	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos++],  buf);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos++],  buf);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos++],  buf);	  result    =    Long.toString(pathIndices[pos++]);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
415	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[p  -  1]);  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[p  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[p  -  1]);	  result    =    Long.toString(pathIndices[pos    -    1]);    result    =    Long.toString(pathIndices[p    -    1]);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
416	[BUG]  [BUGGY]  Result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[stackSize  -  1]);  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  Result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[stackSize  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	Result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[stackSize  -  1]);	  result    =    Long.toString(pathIndices[pos    -    1]);    result    =    Long.toString(pathIndices[p    -    1]);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
417	[BUG]  [BUGGY]  result  =  Integer.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[stackSize  -  1]);  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Integer.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[stackSize  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Integer.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[stackSize  -  1]);	  result    =    Long.toString(pathIndices[pos    -    1]);    result    =    Long.toString(pathIndices[p    -    1]);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
418	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[position]);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[position]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[position]);	  result    =    Long.toString(pathIndices[pos]);    result    =    Long.toString(pathIndices[position]);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
419	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[i]);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[i]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[i]);	  result    =    Long.toString(pathIndices[pos]);    result    =    Long.toString(pathIndices[position]);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
420	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[peeked  -  1]);  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[peeked  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[peeked  -  1]);	  result    =    Long.toString(pathIndices[stackSize    -    1]);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
421	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[peekedNumber  -  1]);  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[peekedNumber  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[peekedNumber  -  1]);	  result    =    Long.toString(pathIndices[stackSize    -    1]);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
422	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[stackSize  -  1]  +  PEEKED_DOUBLE_QUOTED);  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[stackSize  -  1]  +  PEEKED_DOUBLE_QUOTED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[stackSize  -  1]  +  PEEKED_DOUBLE_QUOTED);	  result    =    Long.toString(pathIndices[stackSize    -    1]);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
423	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  PEEKED_LONG,  value);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  PEEKED_LONG,  value);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  PEEKED_LONG,  value);	  result    =    Long.toString(buffer,    pos,    PEEKED_LONG);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
424	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  PEEKED_LONG,  peekedNumberLength);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  PEEKED_LONG,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  PEEKED_LONG,  peekedNumberLength);	  result    =    Long.toString(buffer,    pos,    PEEKED_LONG);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
425	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  PEEKED_LONG,  pathNames);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  PEEKED_LONG,  pathNames);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  PEEKED_LONG,  pathNames);	  result    =    Long.toString(buffer,    pos,    PEEKED_LONG);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
426	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  PEEKED_LONG,  pathIndices);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  PEEKED_LONG,  pathIndices);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  PEEKED_LONG,  pathIndices);	  result    =    Long.toString(buffer,    pos,    PEEKED_LONG);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
427	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  pathNames,  PEEKED_LONG);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  pathNames,  PEEKED_LONG);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  pathNames,  PEEKED_LONG);	  result    =    Long.toString(buffer,    pos,    PEEKED_LONG);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
428	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  PEEKED_BUCKET);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  PEEKED_BUCKET);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  PEEKED_BUCKET);	  result    =    Long.toString(buffer,    pos,    PEEKED_LONG);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
429	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[position  -  1]);  [CE]  illegal  start  of  type  [FE]        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[position  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[position  -  1]);	  result    =    Long.toString(pathIndices[pos    -    1]);    result    =    Long.toString(pathIndices[position    -    1]);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
430	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  peekedNumberLength,  value);  [CE]  class  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  peekedNumberLength,  value);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  peekedNumberLength,  value);	  result    =    Long.toString(buffer,    pos,    peekedNumberLength);    	non-compiled	[CE]  class  expected	65	None	replace
431	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  PEEKED_BUFFERED,  peekedNumberLength);  [CE]  class  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  PEEKED_BUFFERED,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  PEEKED_BUFFERED,  peekedNumberLength);	  result    =    Long.toString(buffer,    pos,    peekedNumberLength);    	non-compiled	[CE]  class  expected	65	None	replace
432	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  pathNames,  peekedNumberLength);  [CE]  class  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  pathNames,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  pathNames,  peekedNumberLength);	  result    =    Long.toString(buffer,    pos,    peekedNumberLength);    	non-compiled	[CE]  class  expected	65	None	replace
433	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  value,  peekedNumberLength);  [CE]  class  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  value,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  value,  peekedNumberLength);	  result    =    Long.toString(buffer,    pos,    peekedNumberLength);    	non-compiled	[CE]  class  expected	65	None	replace
434	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  peekedNumberLength,  PEEKED_BUFFERED);  [CE]  class  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  peekedNumberLength,  PEEKED_BUFFERED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  peekedNumberLength,  PEEKED_BUFFERED);	  result    =    Long.toString(buffer,    pos,    peekedNumberLength);    	non-compiled	[CE]  class  expected	65	None	replace
435	[BUG]  [BUGGY]  result  =  nextQuotedValue('   "');  [CE]  class  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextQuotedValue('   "');  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextQuotedValue('   "');	  result    =    Long.toString(peekedNumberLength);    result    =    Long.toString(peekedNumberLength);    }    else    if    (p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  class  expected	81	None	replace
436	[BUG]  [BUGGY]  result  =  nextQuotedValue(''',  pos);  [CE]  class  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextQuotedValue(''',  pos);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextQuotedValue(''',  pos);	  result    =    Long.toString(peekedNumberLength);    result    =    Long.toString(peekedNumberLength);    }    else    if    (p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  class  expected	81	None	replace
437	[BUG]  [BUGGY]  result  =  nextLong(buffer,  PEEKED_DOUBLE_QUOTED);  [CE]  class  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(buffer,  PEEKED_DOUBLE_QUOTED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  PEEKED_DOUBLE_QUOTED);	  result    =    nextLong(buffer);    	non-compiled	[CE]  class  expected	143	None	replace
438	[BUG]  [BUGGY]  result  =  nextLong(pos);  [CE]  class  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(pos);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(pos);	  result    =    nextLong(buffer);    	non-compiled	[CE]  class  expected	143	None	replace
439	[BUG]  [BUGGY]  result  =  nextLong(PEEKED_DOUBLE_QUOTED);  [CE]  class  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(PEEKED_DOUBLE_QUOTED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(PEEKED_DOUBLE_QUOTED);	  result    =    nextLong(buffer);    	non-compiled	[CE]  class  expected	143	None	replace
440	[BUG]  [BUGGY]  result  =  nextLong(buffer,  PEEKED_BUFFERED);  [CE]  class  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(buffer,  PEEKED_BUFFERED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  PEEKED_BUFFERED);	  result    =    nextLong(buffer);    	non-compiled	[CE]  class  expected	143	None	replace
441	[BUG]  [BUGGY]  result  =  nextLong(PEEKED_BUFFERED);  [CE]  class  expected  [FE]                                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(PEEKED_BUFFERED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(PEEKED_BUFFERED);	  result    =    nextLong(buffer);    	non-compiled	[CE]  class  expected	143	None	replace
442	[BUG]  [BUGGY]  result  =  nextLong(peekedString);  [CE]  class  expected  [FE]                                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(peekedString);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(peekedString);	  result    =    nextLong(buffer);    	non-compiled	[CE]  class  expected	143	None	replace
443	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  [CE]  class  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);    }    else    if    (p    ==    PEEKED_LONG)    {    result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);	  	non-compiled	[CE]  class  expected	77	None	add
444	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_LONG)  {  Result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  [CE]  class  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_LONG)  {  Result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);    }    else    if    (p    ==    PEEKED_LONG)    {    Result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);	  	non-compiled	[CE]  class  expected	77	None	add
445	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_LONG)  {  [CE]  class  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_LONG)  {  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);    }    else    if    (p    ==    PEEKED_LONG)    {    result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_LONG)  {	  	non-compiled	[CE]  class  expected	77	None	add
446	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength;  [CE]  class  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength;  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);    }    else    if    (p    ==    PEEKED_LONG)    {    result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength;	  	non-compiled	[CE]  class  expected	77	None	add
447	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekNumberLength);  result  =  Long.toString(peekedNumberLength);  [CE]  'else'  without  'if'  [FE]            AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekNumberLength);  result  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);    }    else    if    (p    ==    PEEKED_LONG)    {    result  =  Long.toString(peekNumberLength);  result  =  Long.toString(peekedNumberLength);	  	non-compiled	[CE]  'else'  without  'if'	77	None	add
448	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedNumberLength);  [CE]  'else'  without  'if'  [FE]              AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);    }    else    if    (p    ==    PEEKED_LONG)    {    result  =  Long.toString(peekedNumberLength);	  	non-compiled	[CE]  'else'  without  'if'	77	None	add
449	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peechedNumberLength);  result  =  Long.toString(peekedNumberLength);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peechedNumberLength);  result  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);    }    else    if    (p    ==    PEEKED_LONG)    {    result  =  Long.toString(peechedNumberLength);  result  =  Long.toString(peekedNumberLength);	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
450	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Integer.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Integer.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);    }    else    if    (p    ==    PEEKED_LONG)    {    result  =  Integer.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
451	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  buffer,  pos);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  buffer,  pos);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  buffer,  pos);	  result    =    Long.toString(pathIndices,    buffer);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
452	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  buffer,  PEEKED_DOUBLE_QUOTED);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  buffer,  PEEKED_DOUBLE_QUOTED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  buffer,  PEEKED_DOUBLE_QUOTED);	  result    =    Long.toString(pathIndices,    buffer);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
453	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  buffer,  pathNames[stackSize  -  1]);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  buffer,  pathNames[stackSize  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  buffer,  pathNames[stackSize  -  1]);	  result    =    Long.toString(pathIndices,    buffer);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
454	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  buffer,  PEEKED_LONG);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  buffer,  PEEKED_LONG);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  buffer,  PEEKED_LONG);	  result    =    Long.toString(pathIndices,    buffer);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
455	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  buffer,  pathSize);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  buffer,  pathSize);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  buffer,  pathSize);	  result    =    Long.toString(pathIndices,    buffer);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
456	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  pathNames[pos]);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  pathNames[pos]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  pathNames[pos]);	  result    =    Long.toString(pathIndices[pos]);    results    =    Long.toString(pathIndices[pos]);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
457	[BUG]  [BUGGY]  Results  =  Long.toString(pathIndices[pos]);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  Results  =  Long.toString(pathIndices[pos]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	Results  =  Long.toString(pathIndices[pos]);	  result    =    Long.toString(pathIndices[pos]);    results    =    Long.toString(pathIndices[pos]);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
458	[BUG]  [BUGGY]  result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  -  1]);  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(pathIndices[pos        -        1]);        result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  -  1]);	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
459	[BUG]  [BUGGY]  result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[pos  -  1]);  Result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  -  1]);  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[pos  -  1]);  Result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(pathIndices[pos        -        1]);        result    =    Long.toString(pathIndices[pos    -    1]);    Result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  -  1]);	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
460	[BUG]  [BUGGY]  result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Integer.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  -  1]);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Integer.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(pathIndices[pos        -        1]);        result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Integer.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  -  1]);	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
461	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  pathNames,  value);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  pathNames,  value);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  pathNames,  value);	  result    =    Long.toString(buffer,    pos,    pathNames);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
462	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  pathNames,  PEEKED_BUFFERED);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  pathNames,  PEEKED_BUFFERED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  pathNames,  PEEKED_BUFFERED);	  result    =    Long.toString(buffer,    pos,    pathNames);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
463	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  pathNames,  PEEKED_DOUBLE_QUOTED);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  pathNames,  PEEKED_DOUBLE_QUOTED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  pathNames,  PEEKED_DOUBLE_QUOTED);	  result    =    Long.toString(buffer,    pos,    pathNames);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
464	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  pathNames,  null);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  pathNames,  null);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  pathNames,  null);	  result    =    Long.toString(buffer,    pos,    pathNames);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
465	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  pathNames,  false);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  pathNames,  false);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  pathNames,  false);	  result    =    Long.toString(buffer,    pos,    pathNames);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
466	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  pathIndices,  value);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  pathIndices,  value);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  pathIndices,  value);	  result    =    Long.toString(buffer,    pos,    pathIndices);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
467	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  pathNames,  pathIndices);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  pathNames,  pathIndices);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  pathNames,  pathIndices);	  result    =    Long.toString(buffer,    pos,    pathIndices);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
468	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  pathIndices,  PEEKED_BUFFERED);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  pathIndices,  PEEKED_BUFFERED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  pathIndices,  PEEKED_BUFFERED);	  result    =    Long.toString(buffer,    pos,    pathIndices);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
469	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  pathIndices,  false);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  pathIndices,  false);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  pathIndices,  false);	  result    =    Long.toString(buffer,    pos,    pathIndices);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
470	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  pathIndices,  PEEKED_LONG);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  pathIndices,  PEEKED_LONG);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  pathIndices,  PEEKED_LONG);	  result    =    Long.toString(buffer,    pos,    pathIndices);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
471	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  pathIndices,  PEEKED_DOUBLE_QUOTED);  [CE]  'else'  without  'if'  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  pathIndices,  PEEKED_DOUBLE_QUOTED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  pathIndices,  PEEKED_DOUBLE_QUOTED);	  result    =    Long.toString(buffer,    pos,    pathIndices);    	non-compiled	[CE]  'else'  without  'if'	67	None	replace
472	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  pathIndices,  null);  [CE]  'else'  without  'if'  [FE]                              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  pathIndices,  null);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  pathIndices,  null);	  result    =    Long.toString(buffer,    pos,    pathIndices);    	non-compiled	[CE]  'else'  without  'if'	67	None	replace
473	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  -  buffer,  peekedNumberLength);  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  -  buffer,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  +  1]  -  buffer,  peekedNumberLength);	  result    =    Long.toString(pathIndices[pos    +    1]    -    buffer);    	non-compiled	[CE]  'else'  without  'if'	100	None	replace
474	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos  +  1]  -  PEEKED_LONG);  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos  +  1]  -  PEEKED_LONG);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathIndices[pos  +  1]  -  PEEKED_LONG);	  result    =    Long.toString(pathIndices[pos    +    1]    -    buffer);    	non-compiled	[CE]  'else'  without  'if'	100	None	replace
475	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos  +  1]  -  buffer);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos  +  1]  -  buffer);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathIndices[pos  +  1]  -  buffer);	  result    =    Long.toString(pathIndices[pos    +    1]    -    buffer);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
476	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos  +  1]  -  PEEKED_BUFFERED);  [CE]  class  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos  +  1]  -  PEEKED_BUFFERED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathIndices[pos  +  1]  -  PEEKED_BUFFERED);	  result    =    Long.toString(pathIndices[pos    +    1]    -    buffer);    	non-compiled	[CE]  class  expected	100	None	replace
477	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[stackSize  +  1]  -  buffer);  [CE]  class  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[stackSize  +  1]  -  buffer);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[stackSize  +  1]  -  buffer);	  result    =    Long.toString(pathIndices[pos    +    1]    -    buffer);    	non-compiled	[CE]  class  expected	100	None	replace
478	[BUG]  [BUGGY]  result  =  Long.toString(buffer[pos  +  1]  -  pathIndices);  [CE]  class  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer[pos  +  1]  -  pathIndices);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer[pos  +  1]  -  pathIndices);	  result    =    Long.toString(pathIndices[pos    +    1]    -    buffer);    	non-compiled	[CE]  class  expected	100	None	replace
479	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  -  PEEKED_BUFFERED);  [CE]  class  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  -  PEEKED_BUFFERED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  +  1]  -  PEEKED_BUFFERED);	  result    =    Long.toString(pathIndices[pos    +    1]    -    buffer);    	non-compiled	[CE]  class  expected	100	None	replace
480	[BUG]  [BUGGY]  result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[pos  -  2]);  result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  -  2]);  [CE]  orphaned  case  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[pos  -  2]);  result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  -  2]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(pathIndices[pos        -        1]);        result    =    Long.toString(pathIndices[pos    -    2]);    result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  -  2]);	  	non-compiled	[CE]  orphaned  case	20	None	add
481	[BUG]  [BUGGY]  result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[pos  -  2]);  Result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  -  2]);  [CE]  orphaned  case  [FE]      ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[pos  -  2]);  Result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  -  2]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(pathIndices[pos        -        1]);        result    =    Long.toString(pathIndices[pos    -    2]);    Result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  -  2]);	  	non-compiled	[CE]  orphaned  case	20	None	add
482	[BUG]  [BUGGY]  result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[pos  -  2]);  result  =  Integer.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  -  2]);  [CE]  empty  character  literal  [FE]        ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[pos  -  2]);  result  =  Integer.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  -  2]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(pathIndices[pos        -        1]);        result    =    Long.toString(pathIndices[pos    -    2]);    result  =  Integer.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  -  2]);	  	non-compiled	[CE]  empty  character  literal	20	None	add
483	[BUG]  [BUGGY]  result  =  Long.toString(peek(),  buffer,  peekedNumberLength);  [CE]  empty  character  literal  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(peek(),  buffer,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(peek(),  buffer,  peekedNumberLength);	  result    =    Long.toString(peek(),    buffer);    	non-compiled	[CE]  empty  character  literal	129	None	replace
484	[BUG]  [BUGGY]  result  =  Long.toString(peek(),  buffer,  PEEKED_DOUBLE_QUOTED);  [CE]  empty  character  literal  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(peek(),  buffer,  PEEKED_DOUBLE_QUOTED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(peek(),  buffer,  PEEKED_DOUBLE_QUOTED);	  result    =    Long.toString(peek(),    buffer);    	non-compiled	[CE]  empty  character  literal	129	None	replace
485	[BUG]  [BUGGY]  result  =  Long.toString(peek(),  buffer,  PEEKED_LONG);  [CE]  empty  character  literal  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(peek(),  buffer,  PEEKED_LONG);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(peek(),  buffer,  PEEKED_LONG);	  result    =    Long.toString(peek(),    buffer);    	non-compiled	[CE]  empty  character  literal	129	None	replace
486	[BUG]  [BUGGY]  result  =  Long.toString(peek(),  buffer,  pos);  [CE]  empty  character  literal  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(peek(),  buffer,  pos);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(peek(),  buffer,  pos);	  result    =    Long.toString(peek(),    buffer);    	non-compiled	[CE]  empty  character  literal	129	None	replace
487	[BUG]  [BUGGY]  result  =  Long.toString(nextQuotedValue(),  buffer);  [CE]  empty  character  literal  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(nextQuotedValue(),  buffer);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(nextQuotedValue(),  buffer);	  result    =    Long.toString(peek(),    buffer);    	non-compiled	[CE]  empty  character  literal	129	None	replace
488	[BUG]  [BUGGY]  result  =  Long.toString(peek(),  buffer,  PEEKED_BUFFERED);  [CE]  empty  character  literal  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(peek(),  buffer,  PEEKED_BUFFERED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(peek(),  buffer,  PEEKED_BUFFERED);	  result    =    Long.toString(peek(),    buffer);    	non-compiled	[CE]  empty  character  literal	129	None	replace
489	[BUG]  [BUGGY]  result  =  Long.toString(pathNames[pos]);  pos  =  Long.toString(pathIndices[pos]);  [CE]  empty  character  literal  [FE]        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames[pos]);  pos  =  Long.toString(pathIndices[pos]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames[pos]);  pos  =  Long.toString(pathIndices[pos]);	  result    =    Long.toString(pathIndices[pos]);    pos    =    Long.toString(pathIndices[pos]);    	non-compiled	[CE]  empty  character  literal	137	None	replace
490	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos]);  pos  =  Long.toString(pathNames[pos]);  [CE]  empty  character  literal  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos]);  pos  =  Long.toString(pathNames[pos]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos]);  pos  =  Long.toString(pathNames[pos]);	  result    =    Long.toString(pathIndices[pos]);    pos    =    Long.toString(pathIndices[pos]);    	non-compiled	[CE]  empty  character  literal	137	None	replace
491	[BUG]  [BUGGY]  result  =  Integer.toString(pathIndices[pos]);  pos  =  Long.toString(pathIndices[pos]);  [CE]  empty  character  literal  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Integer.toString(pathIndices[pos]);  pos  =  Long.toString(pathIndices[pos]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Integer.toString(pathIndices[pos]);  pos  =  Long.toString(pathIndices[pos]);	  result    =    Long.toString(pathIndices[pos]);    pos    =    Long.toString(pathIndices[pos]);    	non-compiled	[CE]  empty  character  literal	137	None	replace
492	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[0]);  pos  =  Long.toString(pathIndices[1]);  [CE]  empty  character  literal  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[0]);  pos  =  Long.toString(pathIndices[1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[0]);  pos  =  Long.toString(pathIndices[1]);	  result    =    Long.toString(pathIndices[pos]);    pos    =    Long.toString(pathIndices[pos]);    	non-compiled	[CE]  empty  character  literal	137	None	replace
493	[BUG]  [BUGGY]  result  =  String.valueOf(pathIndices[pos]);  pos  =  Long.toString(pathIndices[pos]);  [CE]  empty  character  literal  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  String.valueOf(pathIndices[pos]);  pos  =  Long.toString(pathIndices[pos]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  String.valueOf(pathIndices[pos]);  pos  =  Long.toString(pathIndices[pos]);	  result    =    Long.toString(pathIndices[pos]);    pos    =    Long.toString(pathIndices[pos]);    	non-compiled	[CE]  empty  character  literal	137	None	replace
494	[BUG]  [BUGGY]  result  =  Long.toString(pathNames[stackSize  -  1]);  [CE]  empty  character  literal  [FE]        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames[stackSize  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames[stackSize  -  1]);	  result    =    Long.toString(pathNames[pos    -    1]);    	non-compiled	[CE]  empty  character  literal	104	None	replace
495	[BUG]  [BUGGY]  result  =  Long.toString(pathNames[pos  -  1]  +  PEEKED_DOUBLE_QUOTED);  [CE]  empty  character  literal  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames[pos  -  1]  +  PEEKED_DOUBLE_QUOTED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames[pos  -  1]  +  PEEKED_DOUBLE_QUOTED);	  result    =    Long.toString(pathNames[pos    -    1]);    	non-compiled	[CE]  empty  character  literal	104	None	replace
496	[BUG]  [BUGGY]  result  =  Long.toString(pathNames[buffer,  pos  -  1]);  [CE]  empty  character  literal  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames[buffer,  pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames[buffer,  pos  -  1]);	  result    =    Long.toString(pathNames[pos    -    1]);    	non-compiled	[CE]  empty  character  literal	104	None	replace
497	[BUG]  [BUGGY]  result  =  Long.toString(pathNames[pos  -  1]  +  PEEKED_LONG);  [CE]  empty  character  literal  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames[pos  -  1]  +  PEEKED_LONG);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames[pos  -  1]  +  PEEKED_LONG);	  result    =    Long.toString(pathNames[pos    -    1]);    	non-compiled	[CE]  empty  character  literal	104	None	replace
498	[BUG]  [BUGGY]  result  =  Long.toString(pathNames[pos  -  1]  +  suffix);  [CE]  empty  character  literal  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames[pos  -  1]  +  suffix);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames[pos  -  1]  +  suffix);	  result    =    Long.toString(pathNames[pos    -    1]);    	non-compiled	[CE]  empty  character  literal	104	None	replace
499	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1],  pathNames[pos  -  1]);  [CE]  empty  character  literal  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1],  pathNames[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  -  1],  pathNames[pos  -  1]);	  result    =    Long.toString(pathIndices[pos    -    1]);    Result    =    Long.toString(pathIndices[pos    -    1]);    	non-compiled	[CE]  empty  character  literal	17	None	replace
500	[BUG]  [BUGGY]  result  =  Long.toString(peekNumberLength);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(peekNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(peekNumberLength);	  result    =    Long.toString(peekedNumberLength);    result    =    Long.toString(peekNumberLength);    	non-compiled	[CE]  ';'  expected	114	None	replace
501	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  PEEKED_DOUBLE_QUOTED,  value);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  PEEKED_DOUBLE_QUOTED,  value);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  PEEKED_DOUBLE_QUOTED,  value);	  result    =    Long.toString(buffer,    pos,    PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  ';'  expected	69	None	replace
502	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  PEEKED_DOUBLE_QUOTED,  pathNames);  [CE]  class  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  PEEKED_DOUBLE_QUOTED,  pathNames);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  PEEKED_DOUBLE_QUOTED,  pathNames);	  result    =    Long.toString(buffer,    pos,    PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  class  expected	69	None	replace
503	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  PEEKED_DOUBLE_QUOTED,  peekedNumberLength);  [CE]  class  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  PEEKED_DOUBLE_QUOTED,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  PEEKED_DOUBLE_QUOTED,  peekedNumberLength);	  result    =    Long.toString(buffer,    pos,    PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  class  expected	69	None	replace
504	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  PEEKED_DOUBLE_QUOTED,  pathIndices);  [CE]  class  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  PEEKED_DOUBLE_QUOTED,  pathIndices);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  PEEKED_DOUBLE_QUOTED,  pathIndices);	  result    =    Long.toString(buffer,    pos,    PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  class  expected	69	None	replace
505	[BUG]  [BUGGY]  result  =  nextLongValue('.');  [CE]  class  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLongValue('.');  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLongValue('.');	  result    =    nextLongValue(''');    	non-compiled	[CE]  class  expected	34	None	replace
506	[BUG]  [BUGGY]  result  =  nextLongValue('   "');  [CE]  class  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLongValue('   "');  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLongValue('   "');	  result    =    nextLongValue(''');    	non-compiled	[CE]  class  expected	34	None	replace
507	[BUG]  [BUGGY]  result  =  nextLongValue('-');  [CE]  class  expected  [FE]                                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLongValue('-');  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLongValue('-');	  result    =    nextLongValue(''');    	non-compiled	[CE]  class  expected	34	None	replace
508	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  pathIndices[pos]);  [CE]  class  expected  [FE]        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  pathIndices[pos]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  pathIndices[pos]);	  result    =    Long.toString(buffer,    pathIndices[pos]);    	non-compiled	[CE]  class  expected	46	None	replace
509	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  buffer[pos]);  [CE]  class  expected  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  buffer[pos]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  buffer[pos]);	  result    =    Long.toString(buffer,    pathIndices[pos]);    	non-compiled	[CE]  class  expected	46	None	replace
510	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  pathIndices[p]);  [CE]  class  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  pathIndices[p]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  pathIndices[p]);	  result    =    Long.toString(buffer,    pathIndices[pos]);    	non-compiled	[CE]  class  expected	46	None	replace
511	[BUG]  [BUGGY]  Result  =  Long.toString(buffer,  pos,  pathIndices[pos]);  [CE]  class  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  Result  =  Long.toString(buffer,  pos,  pathIndices[pos]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	Result  =  Long.toString(buffer,  pos,  pathIndices[pos]);	  result    =    Long.toString(buffer,    pathIndices[pos]);    	non-compiled	[CE]  class  expected	46	None	replace
512	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos],  value);  [CE]  class  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos],  value);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathIndices[pos],  value);	  result    =    Long.toString(buffer,    pathIndices[pos]);    	non-compiled	[CE]  class  expected	46	None	replace
513	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  0,  pathIndices[pos]);  [CE]  class  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  0,  pathIndices[pos]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  0,  pathIndices[pos]);	  result    =    Long.toString(buffer,    pathIndices[pos]);    	non-compiled	[CE]  class  expected	46	None	replace
514	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  p,  pathIndices[pos]);  [CE]  class  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  p,  pathIndices[pos]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  p,  pathIndices[pos]);	  result    =    Long.toString(buffer,    pathIndices[pos]);    	non-compiled	[CE]  class  expected	46	None	replace
515	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathNames,  value);  [CE]  class  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathNames,  value);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathNames,  value);	  result    =    Long.toString(buffer,    pathNames);    	non-compiled	[CE]  class  expected	2	None	replace
516	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathNames,  PEEKED_LONG);  [CE]  class  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathNames,  PEEKED_LONG);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathNames,  PEEKED_LONG);	  result    =    Long.toString(buffer,    pathNames);    	non-compiled	[CE]  class  expected	2	None	replace
517	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathNames,  pos);  [CE]  class  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathNames,  pos);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathNames,  pos);	  result    =    Long.toString(buffer,    pathNames);    	non-compiled	[CE]  class  expected	2	None	replace
518	[BUG]  [BUGGY]  Result  =  Long.toString(buffer,  pos);  [CE]  class  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  Result  =  Long.toString(buffer,  pos);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	Result  =  Long.toString(buffer,  pos);	  result    =    Long.toString(pathNames,    pos);    	non-compiled	[CE]  class  expected	108	None	replace
519	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  buf,  pos);  [CE]  class  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  buf,  pos);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  buf,  pos);	  result    =    Long.toString(pathNames,    pos);    	non-compiled	[CE]  class  expected	108	None	replace
520	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  pos  +  1);  [CE]  class  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  pos  +  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  pos  +  1);	  result    =    Long.toString(pathNames,    pos);    	non-compiled	[CE]  class  expected	108	None	replace
521	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos]  +  1);  result  =  Long.toString(pathIndices[pos]  +  1);  [CE]  class  expected  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos]  +  1);  result  =  Long.toString(pathIndices[pos]  +  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos]    +    1);    result  =  Long.toString(pathIndices[pos]  +  1);	  	non-compiled	[CE]  class  expected	49	None	add
522	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos]  +  1);  Result  =  Long.toString(pathIndices[pos]  +  1);  [CE]  class  expected  [FE]      ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos]  +  1);  Result  =  Long.toString(pathIndices[pos]  +  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos]    +    1);    Result  =  Long.toString(pathIndices[pos]  +  1);	  	non-compiled	[CE]  class  expected	49	None	add
523	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos]  +  1);  result  =  Long.toString(pathIndices[pos]  +  1));  [CE]  class  expected  [FE]        ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos]  +  1);  result  =  Long.toString(pathIndices[pos]  +  1));  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos]    +    1);    result  =  Long.toString(pathIndices[pos]  +  1));	  	non-compiled	[CE]  class  expected	49	None	add
524	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos]  +  1);  result  =  Long.toString(pathIndices[pos]  +  2);  [CE]  class  expected  [FE]          ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos]  +  1);  result  =  Long.toString(pathIndices[pos]  +  2);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos]    +    1);    result  =  Long.toString(pathIndices[pos]  +  2);	  	non-compiled	[CE]  class  expected	49	None	add
525	[BUG]  [BUGGY]  result  =  Long.toString(pos);  result  =  Long.toString(pos);  [CE]  class  expected  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pos);  result  =  Long.toString(pos);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pos);    result  =  Long.toString(pos);	  	non-compiled	[CE]  class  expected	29	None	add
526	[BUG]  [BUGGY]  result  =  Long.toString(pos);  Result  =  Long.toString(pos);  [CE]  class  expected  [FE]      ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pos);  Result  =  Long.toString(pos);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pos);    Result  =  Long.toString(pos);	  	non-compiled	[CE]  class  expected	29	None	add
527	[BUG]  [BUGGY]  result  =  Long.toString(pos);  result  =  Long.toString(p);  [CE]  class  expected  [FE]        ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pos);  result  =  Long.toString(p);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pos);    result  =  Long.toString(p);	  	non-compiled	[CE]  class  expected	29	None	add
528	[BUG]  [BUGGY]  result  =  Long.toString(pos);  result  =  Long.toString(position);  [CE]  class  expected  [FE]          ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pos);  result  =  Long.toString(position);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pos);    result  =  Long.toString(position);	  	non-compiled	[CE]  class  expected	29	None	add
529	[BUG]  [BUGGY]  result  =  Long.toString(pos);  pos  =  Long.toString(pos);  [CE]  class  expected  [FE]            ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pos);  pos  =  Long.toString(pos);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pos);    pos  =  Long.toString(pos);	  	non-compiled	[CE]  class  expected	29	None	add
530	[BUG]  [BUGGY]  result  =  Long.toString(pos);  results  =  Long.toString(pos);  [CE]  class  expected  [FE]              ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pos);  results  =  Long.toString(pos);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pos);    results  =  Long.toString(pos);	  	non-compiled	[CE]  class  expected	29	None	add
531	[BUG]  [BUGGY]  result  =  Long.toString(pos);  result  =  Long.toString(pos));  [CE]  class  expected  [FE]                ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pos);  result  =  Long.toString(pos));  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pos);    result  =  Long.toString(pos));	  	non-compiled	[CE]  class  expected	29	None	add
532	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  pathIndices,  peekedNumberLength);  [CE]  class  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  pathIndices,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  pathIndices,  peekedNumberLength);	  result    =    Long.toString(pathNames,    pathIndices);    	non-compiled	[CE]  class  expected	109	None	replace
533	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  pathIndices,  pos);  [CE]  class  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  pathIndices,  pos);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  pathIndices,  pos);	  result    =    Long.toString(pathNames,    pathIndices);    	non-compiled	[CE]  class  expected	109	None	replace
534	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  pathIndices,  0);  [CE]  class  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  pathIndices,  0);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  pathIndices,  0);	  result    =    Long.toString(pathNames,    pathIndices);    	non-compiled	[CE]  class  expected	109	None	replace
535	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  pathIndices,  null);  [CE]  class  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  pathIndices,  null);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  pathIndices,  null);	  result    =    Long.toString(pathNames,    pathIndices);    	non-compiled	[CE]  class  expected	109	None	replace
536	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  pathIndices,  buffer);  [CE]  class  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  pathIndices,  buffer);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  pathIndices,  buffer);	  result    =    Long.toString(pathNames,    pathIndices);    	non-compiled	[CE]  class  expected	109	None	replace
537	[BUG]  [BUGGY]  result  =  Integer.toString(pathIndices[pos  -  1]);  res  =  Integer.toString(pathIndices[pos  -  1]);  [CE]  class  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Integer.toString(pathIndices[pos  -  1]);  res  =  Integer.toString(pathIndices[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Integer.toString(pathIndices[pos    -    1]);    res  =  Integer.toString(pathIndices[pos  -  1]);	  	non-compiled	[CE]  class  expected	62	None	add
538	[BUG]  [BUGGY]  result  =  Integer.toString(pathIndices[pos  -  1]);  result  =  Integer.toString(pathIndices[p  -  1]);  [CE]  class  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Integer.toString(pathIndices[pos  -  1]);  result  =  Integer.toString(pathIndices[p  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Integer.toString(pathIndices[pos    -    1]);    result  =  Integer.toString(pathIndices[p  -  1]);	  	non-compiled	[CE]  class  expected	62	None	add
539	[BUG]  [BUGGY]  result  =  Integer.toString(pathIndices[pos  -  1]);  result  =  Integer.toString(pathIndices[position  -  1]);  [CE]  class  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Integer.toString(pathIndices[pos  -  1]);  result  =  Integer.toString(pathIndices[position  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Integer.toString(pathIndices[pos    -    1]);    result  =  Integer.toString(pathIndices[position  -  1]);	  	non-compiled	[CE]  class  expected	62	None	add
540	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[n  -  1]);  [CE]  class  expected  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[n  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[n  -  1]);	  result    =    Long.toString(pathIndices[pos    -    1]);    Result    =    Long.toString(pathIndices[pos    -    1]);    	non-compiled	[CE]  class  expected	17	None	replace
541	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  peekedNumber,  pathIndices);  [CE]  class  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  peekedNumber,  pathIndices);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  peekedNumber,  pathIndices);	  result    =    Long.toString(buffer,    peekedString);    	non-compiled	[CE]  class  expected	40	None	replace
542	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  null,  peekedString);  [CE]  class  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  null,  peekedString);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  null,  peekedString);	  result    =    Long.toString(buffer,    peekedString);    	non-compiled	[CE]  class  expected	40	None	replace
543	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  peekedNumber,  pathNames);  [CE]  class  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  peekedNumber,  pathNames);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  peekedNumber,  pathNames);	  result    =    Long.toString(buffer,    peekedString);    	non-compiled	[CE]  class  expected	40	None	replace
544	[BUG]  [BUGGY]  result  =  Long.toString(p);  result  =  Long.toString(p).toString();  [CE]  class  expected  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(p);  result  =  Long.toString(p).toString();  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(p);    result  =  Long.toString(p).toString();	  	non-compiled	[CE]  class  expected	23	None	add
545	[BUG]  [BUGGY]  result  =  Long.toString(p);  result  =  Long.toString(p);  pos  =  Long.toString(p);  [CE]  class  expected  [FE]      ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(p);  result  =  Long.toString(p);  pos  =  Long.toString(p);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(p);    result  =  Long.toString(p);  pos  =  Long.toString(p);	  	non-compiled	[CE]  class  expected	23	None	add
546	[BUG]  [BUGGY]  result  =  Long.toString(p);  pos  =  Long.toString(p);  result  =  Long.toString(p);  [CE]  class  expected  [FE]        ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(p);  pos  =  Long.toString(p);  result  =  Long.toString(p);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(p);    pos  =  Long.toString(p);  result  =  Long.toString(p);	  	non-compiled	[CE]  class  expected	23	None	add
547	[BUG]  [BUGGY]  result  =  Long.toString(p);  result  =  Long.toString(p);  pos  =  Short.toString(p);  [CE]  class  expected  [FE]          ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(p);  result  =  Long.toString(p);  pos  =  Short.toString(p);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(p);    result  =  Long.toString(p);  pos  =  Short.toString(p);	  	non-compiled	[CE]  class  expected	23	None	add
548	[BUG]  [BUGGY]  result  =  Long.toString(p);  result  =  Long.toHexString(p);  [CE]  class  expected  [FE]            ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(p);  result  =  Long.toHexString(p);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(p);    result  =  Long.toHexString(p);	  	non-compiled	[CE]  class  expected	23	None	add
549	[BUG]  [BUGGY]  result  =  nextLong(buffer,  pos,  PEEKED_BLOCK);  [CE]  class  expected  [FE]                                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(buffer,  pos,  PEEKED_BLOCK);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  pos,  PEEKED_BLOCK);	  result    =    nextLong(buffer,    pos,    PEEKED_LONG);    	non-compiled	[CE]  class  expected	39	None	replace
550	[BUG]  [BUGGY]  result  =  nextLong(buffer,  pos,  PEEKED_LONG,  pathNames);  [CE]  class  expected  [FE]                                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(buffer,  pos,  PEEKED_LONG,  pathNames);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  pos,  PEEKED_LONG,  pathNames);	  result    =    nextLong(buffer,    pos,    PEEKED_LONG);    	non-compiled	[CE]  class  expected	39	None	replace
551	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  1);  [CE]  class  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  1);	  result    =    Long.toString(buffer,    pos,    peekedLength);    	non-compiled	[CE]  class  expected	117	None	replace
552	[BUG]  [BUGGY]  result  =  nextLongValue();  pos  +=  peekedNumberLength  +  1;  [CE]  class  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLongValue();  pos  +=  peekedNumberLength  +  1;  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLongValue();  pos  +=  peekedNumberLength  +  1;	  result    =    nextLongValue();    pos    +=    peekedNumberLength;    	non-compiled	[CE]  class  expected	146	None	replace
553	[BUG]  [BUGGY]  result  =  nextLongValue();  pos  +=  12;  [CE]  class  expected  [FE]                                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLongValue();  pos  +=  12;  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLongValue();  pos  +=  12;	  result    =    nextLongValue();    pos    +=    peekedNumberLength;    	non-compiled	[CE]  class  expected	146	None	replace
554	[BUG]  [BUGGY]  result  =  nextLongValue();  pos  +=  4;  [CE]  class  expected  [FE]                                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLongValue();  pos  +=  4;  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLongValue();  pos  +=  4;	  result    =    nextLongValue();    pos    +=    peekedNumberLength;    	non-compiled	[CE]  class  expected	146	None	replace
555	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  0,  pathIndices.length);  [CE]  class  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  0,  pathIndices.length);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  0,  pathIndices.length);	  result    =    Long.toString(buffer,    PEEKED_BUFFERED);    	non-compiled	[CE]  class  expected	31	None	replace
556	[BUG]  [BUGGY]  result  =  Long.toString(peekedString,  pathIndices[pos  -  1]);  [CE]  class  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(peekedString,  pathIndices[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(peekedString,  pathIndices[pos  -  1]);	  result    =    Long.toString(peekedString[pos    -    1]);    	non-compiled	[CE]  class  expected	64	None	replace
557	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  pathNames[pos  -  1]);  [CE]  class  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  pathNames[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  pathNames[pos  -  1]);	  result    =    Long.toString(peekedString[pos    -    1]);    	non-compiled	[CE]  class  expected	64	None	replace
558	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos]  +  ''');  [CE]  class  expected  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos]  +  ''');  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos]  +  ''');	  result    =    Long.toString(pathIndices[pos]    +    1);    	non-compiled	[CE]  class  expected	50	None	replace
559	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[stackSize  -  1]);  res  =  Long.toString(pathIndices[stackSize  -  1]);  [CE]  class  expected  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[stackSize  -  1]);  res  =  Long.toString(pathIndices[stackSize  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[stackSize    -    1]);    res  =  Long.toString(pathIndices[stackSize  -  1]);	  	non-compiled	[CE]  class  expected	56	None	add
560	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  negative);  [CE]  class  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  negative);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  negative);	  result    =    Long.toString(pathIndices,    negative);    	non-compiled	[CE]  class  expected	132	None	replace
561	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  pos);  [CE]  class  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  pos);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  pos);	  result    =    Long.toString(pathIndices,    negative);    	non-compiled	[CE]  class  expected	132	None	replace
562	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  p);  [CE]  class  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  p);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  p);	  result    =    Long.toString(pathIndices,    negative);    	non-compiled	[CE]  class  expected	132	None	replace
563	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  false);  [CE]  class  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  false);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  false);	  result    =    Long.toString(pathIndices,    negative);    	non-compiled	[CE]  class  expected	132	None	replace
564	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos  +  1]  -  1,  peekedNumberLength);  [CE]  class  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos  +  1]  -  1,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathIndices[pos  +  1]  -  1,  peekedNumberLength);	  result    =    Long.toString(buffer,    pathIndices[pos    +    1]);    	non-compiled	[CE]  class  expected	88	None	replace
565	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos  +  1]  +  ''');  [CE]  class  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos  +  1]  +  ''');  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathIndices[pos  +  1]  +  ''');	  result    =    Long.toString(buffer,    pathIndices[pos    +    1]);    	non-compiled	[CE]  class  expected	88	None	replace
566	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  squeezedString);  [CE]  class  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  squeezedString);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  squeezedString);	  result    =    Long.toString(peekedString,    pathNames);    	non-compiled	[CE]  class  expected	5	None	replace
567	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  peer);  [CE]  class  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  peer);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  peer);	  result    =    Long.toString(peekedString,    pathNames);    	non-compiled	[CE]  class  expected	5	None	replace
568	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  stack,  pathIndices[stackSize  -  1]);  [CE]  class  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  stack,  pathIndices[stackSize  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  stack,  pathIndices[stackSize  -  1]);	  result    =    Long.toString(pathNames,    pathIndices[stackSize    -    1]);    	non-compiled	[CE]  class  expected	3	None	replace
569	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  pathIndices[peekedNumberLength  -  1]);  [CE]  class  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  pathIndices[peekedNumberLength  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  pathIndices[peekedNumberLength  -  1]);	  result    =    Long.toString(pathNames,    pathIndices[stackSize    -    1]);    	non-compiled	[CE]  class  expected	3	None	replace
570	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  buffer,  pathIndices[stackSize  -  1]);  [CE]  orphaned  default  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  buffer,  pathIndices[stackSize  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  buffer,  pathIndices[stackSize  -  1]);	  result    =    Long.toString(pathNames,    pathIndices[stackSize    -    1]);    	non-compiled	[CE]  orphaned  default	3	None	replace
571	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  position  +  1,  peekedNumberLength);  [CE]  orphaned  default  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  position  +  1,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  position  +  1,  peekedNumberLength);	  result    =    Long.toString(buffer,    position);    	non-compiled	[CE]  orphaned  default	126	None	replace
572	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos  +  1,  peekedNumberLength)+  1;  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos  +  1,  peekedNumberLength)+  1;  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos  +  1,  peekedNumberLength)+  1;	  result    =    Long.toString(buffer,    pos    +    1]);    	non-compiled	[CE]  ';'  expected	127	None	replace
573	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  10);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  10);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  10);	  result    =    Long.toString(buffer,    len);    	non-compiled	[CE]  ';'  expected	134	None	replace
574	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  128);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  128);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  128);	  result    =    Long.toString(buffer,    len);    	non-compiled	[CE]  ';'  expected	134	None	replace
575	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  -  buffer,  peekedNumberSize);  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  -  buffer,  peekedNumberSize);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  +  1]  -  buffer,  peekedNumberSize);	  result    =    Long.toString(pathIndices[pos    +    1]    -    buffer);    	non-compiled	[CE]  ';'  expected	100	None	replace
576	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  -  buffer,  peekedNumber);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  -  buffer,  peekedNumber);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  +  1]  -  buffer,  peekedNumber);	  result    =    Long.toString(pathIndices[pos    +    1]    -    buffer);    	non-compiled	[CE]  ';'  expected	100	None	replace
577	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  str);  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  str);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  -  1]  +  str);	  result    =    Long.toString(pathIndices[pos    -    1]    +    length);    	non-compiled	[CE]  ';'  expected	105	None	replace
578	[BUG]  [BUGGY]  Result  result  =  Long.toString(pathIndices[pos  -  1]);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  Result  result  =  Long.toString(pathIndices[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	Result  result  =  Long.toString(pathIndices[pos  -  1]);	  result    =    Long.toString(pathIndices[pos    -    1]);    results    =    Long.toString(pathIndices[pos    -    1]);    	non-compiled	[CE]  ';'  expected	22	None	replace
579	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  peekedNumberLength);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  peekedNumberLength);	  result    =    Long.toString(pathIndices,    value);    	non-compiled	[CE]  ';'  expected	6	None	replace
580	[BUG]  [BUGGY]  result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  -  1]);  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(pathIndices[pos        -        1]);        result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[pos  -  1]);	  	non-compiled	[CE]  ';'  expected	15	None	add
581	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  long);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  long);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  long);	  result    =    Long.toString(buffer,    pos,    value);    	non-compiled	[CE]  ';'  expected	66	None	replace
582	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  stack,  peekedNumber);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  stack,  peekedNumber);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  stack,  peekedNumber);	  result    =    Long.toString(pathNames,    stack);    	non-compiled	[CE]  ';'  expected	111	None	replace
583	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  stack,  pos);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  stack,  pos);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  stack,  pos);	  result    =    Long.toString(pathNames,    stack);    	non-compiled	[CE]  ';'  expected	111	None	replace
584	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peerkedNumberLength);  result  =  Long.toString(peekedNumberLength);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peerkedNumberLength);  result  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);    }    else    if    (p    ==    PEEKED_LONG)    {    result  =  Long.toString(peerkedNumberLength);  result  =  Long.toString(peekedNumberLength);	  	non-compiled	[CE]  ';'  expected	77	None	add
585	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);    }    else    if    (p    ==    PEEKED_LONG)    {    result  =  long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);	  	non-compiled	[CE]  ';'  expected	77	None	add
586	[BUG]  [BUGGY]  result  =  nextQuotedValue('  ',  PEEKED_LONG);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextQuotedValue('  ',  PEEKED_LONG);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextQuotedValue('  ',  PEEKED_LONG);	  result    =    nextQuotedValue('    ');    	non-compiled	[CE]  ';'  expected	103	None	replace
587	[BUG]  [BUGGY]  result  =  nextQuotedValue('  ',  peekedString);  [CE]  'else'  without  'if'  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextQuotedValue('  ',  peekedString);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextQuotedValue('  ',  peekedString);	  result    =    nextQuotedValue('    ');    	non-compiled	[CE]  'else'  without  'if'	103	None	replace
588	[BUG]  [BUGGY]  result  =  nextQuotedValue('  ',  PEEKED_BUFFERED);  [CE]  'else'  without  'if'  [FE]                              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextQuotedValue('  ',  PEEKED_BUFFERED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextQuotedValue('  ',  PEEKED_BUFFERED);	  result    =    nextQuotedValue('    ');    	non-compiled	[CE]  'else'  without  'if'	103	None	replace
589	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  NUMBER_CHAR_LONG);  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  NUMBER_CHAR_LONG);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  NUMBER_CHAR_LONG);	  result    =    Long.toString(pathNames,    value);    	non-compiled	[CE]  'else'  without  'if'	1	None	replace
590	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  0,  peekedNumberLength);  pos  =  Long.toString(peekedNumberLength);  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  0,  peekedNumberLength);  pos  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  0,  peekedNumberLength);  pos  =  Long.toString(peekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    pos    =    Long.toString(peekedNumberLength);    	non-compiled	[CE]  'else'  without  'if'	113	None	replace
591	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  0,  pos);  pos  =  Long.toString(peekedNumberLength);  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  0,  pos);  pos  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  0,  pos);  pos  =  Long.toString(peekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    pos    =    Long.toString(peekedNumberLength);    	non-compiled	[CE]  'else'  without  'if'	113	None	replace
592	[BUG]  [BUGGY]  result  =  nextLong(buffer,  pos,  value);  [CE]  'else'  without  'if'  [FE]                              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(buffer,  pos,  value);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  pos,  value);	  result    =    nextLong(buffer,    pos);    	non-compiled	[CE]  'else'  without  'if'	35	None	replace
593	[BUG]  [BUGGY]  result  =  nextLong(buffer,  pos,  pi);  [CE]  'else'  without  'if'  [FE]                                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(buffer,  pos,  pi);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  pos,  pi);	  result    =    nextLong(buffer,    pos);    	non-compiled	[CE]  'else'  without  'if'	35	None	replace
594	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peerkedNumberLength);  result  =  Long.toString(peekedNumberLength);  [CE]  'else'  without  'if'  [FE]    AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peerkedNumberLength);  result  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peerkedNumberLength);  result  =  Long.toString(peekedNumberLength);	  	non-compiled	[CE]  'else'  without  'if'	72	None	add
595	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  0,  pathIndices);  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  0,  pathIndices);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  0,  pathIndices);	  result    =    Long.toString(buffer,    pathIndices);    	non-compiled	[CE]  not  a  statement	53	None	replace
596	[BUG]  [BUGGY]  Result  =  Long.toString(buffer,  pos,  pathIndices);  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  Result  =  Long.toString(buffer,  pos,  pathIndices);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	Result  =  Long.toString(buffer,  pos,  pathIndices);	  result    =    Long.toString(buffer,    pathIndices);    	non-compiled	[CE]  not  a  statement	53	None	replace
597	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[peekedNumberLength  +  1]);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[peekedNumberLength  +  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[peekedNumberLength  +  1]);	  result    =    Long.toString(pathIndices[stackSize    +    1]);    	non-compiled	[CE]  not  a  statement	84	None	replace
598	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[stackSize  +  1]  +  ''');  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[stackSize  +  1]  +  ''');  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[stackSize  +  1]  +  ''');	  result    =    Long.toString(pathIndices[stackSize    +    1]);    	non-compiled	[CE]  not  a  statement	84	None	replace
599	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[stackSize  *  1]);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[stackSize  *  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[stackSize  *  1]);	  result    =    Long.toString(pathIndices[stackSize    +    1]);    	non-compiled	[CE]  not  a  statement	84	None	replace
600	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  JsonReader.VALUE_STRING);  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  JsonReader.VALUE_STRING);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  JsonReader.VALUE_STRING);	  result    =    Long.toString(pathNames,    PEEKED_LONG);    	non-compiled	[CE]  not  a  statement	130	None	replace
601	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  0,  pathNames.length);  [CE]  not  a  statement  [FE]        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  0,  pathNames.length);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  0,  pathNames.length);	  result    =    Long.toString(buffer,    0,    peekedNumberLength);    	non-compiled	[CE]  not  a  statement	106	None	replace
602	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  NUMBER_CHAR_DECIMAL);  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  NUMBER_CHAR_DECIMAL);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  NUMBER_CHAR_DECIMAL);	  result    =    Long.toString(min_INCOMPLETE_INTEGER);    	non-compiled	[CE]  not  a  statement	96	None	replace
603	[BUG]  [BUGGY]  result  =  Long.toString(pathNames[pos  +  1]);  pos  =  Long.toString(pathIndices[pos  +  1]);  [CE]  not  a  statement  [FE]        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames[pos  +  1]);  pos  =  Long.toString(pathIndices[pos  +  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames[pos  +  1]);  pos  =  Long.toString(pathIndices[pos  +  1]);	  result    =    Long.toString(pathIndices[pos    +    1]);    pos    =    Long.toString(pathIndices[pos    +    1]);    	non-compiled	[CE]  not  a  statement	138	None	replace
604	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]);  pos  =  Long.toString(pathNames[pos  +  1]);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]);  pos  =  Long.toString(pathNames[pos  +  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  +  1]);  pos  =  Long.toString(pathNames[pos  +  1]);	  result    =    Long.toString(pathIndices[pos    +    1]);    pos    =    Long.toString(pathIndices[pos    +    1]);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
605	[BUG]  [BUGGY]  pos  =  Long.toString(pathIndices[pos  +  1]);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  pos  =  Long.toString(pathIndices[pos  +  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	pos  =  Long.toString(pathIndices[pos  +  1]);	  result    =    Long.toString(pathIndices[pos    +    1]);    pos    =    Long.toString(pathIndices[pos    +    1]);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
606	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[0]);  pos  =  Long.toString(pathIndices[0]);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[0]);  pos  =  Long.toString(pathIndices[0]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[0]);  pos  =  Long.toString(pathIndices[0]);	  result    =    Long.toString(pathIndices[pos    +    1]);    pos    =    Long.toString(pathIndices[pos    +    1]);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
607	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos  +  1,  buffer);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos  +  1,  buffer);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos  +  1,  buffer);	  result    =    Long.toString(buffer,    pos,    buffer);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
608	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  buffer.length);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  buffer.length);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  buffer.length);	  result    =    Long.toString(buffer,    pos,    buffer);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
609	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  stack,  buffer);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  stack,  buffer);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  stack,  buffer);	  result    =    Long.toString(pathIndices,    buffer);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
610	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  pos,  buffer);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  pos,  buffer);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  pos,  buffer);	  result    =    Long.toString(pathIndices,    buffer);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
611	[BUG]  [BUGGY]  result  =  nextLong(buffer,  pos  +  1,  peekedNumberLength  +  1);  [CE]  class  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(buffer,  pos  +  1,  peekedNumberLength  +  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  pos  +  1,  peekedNumberLength  +  1);	  result    =    nextLong(buffer,    pos    +    1,    peekedNumberLength);    	non-compiled	[CE]  class  expected	145	None	replace
612	[BUG]  [BUGGY]  result  =  nextLong(buffer,  pos  +  1,  peekedNumberLength  -  1);  [CE]  class  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(buffer,  pos  +  1,  peekedNumberLength  -  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  pos  +  1,  peekedNumberLength  -  1);	  result    =    nextLong(buffer,    pos    +    1,    peekedNumberLength);    	non-compiled	[CE]  class  expected	145	None	replace
613	[BUG]  [BUGGY]  result  =  nextLong(buffer,  pos  +  1,  pathNames);  [CE]  class  expected  [FE]                                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(buffer,  pos  +  1,  pathNames);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  pos  +  1,  pathNames);	  result    =    nextLong(buffer,    pos    +    1,    peekedNumberLength);    	non-compiled	[CE]  class  expected	145	None	replace
614	[BUG]  [BUGGY]  result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[pos]);  [CE]  class  expected  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[pos]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(pathIndices[pos]);        result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[pos]);	  	non-compiled	[CE]  class  expected	8	None	add
615	[BUG]  [BUGGY]  result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[position]);  [CE]  class  expected  [FE]      ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[position]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(pathIndices[pos]);        result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[position]);	  	non-compiled	[CE]  class  expected	8	None	add
616	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLity);  [CE]  class  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLity);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLity);	  	non-compiled	[CE]  class  expected	75	None	add
617	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLo  [CE]  class  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLo  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLo	  	non-compiled	[CE]  class  expected	75	None	add
618	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos]  +  1);  result  =  Long.toString(pathIndices[position]  +  1);  [CE]  class  expected  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos]  +  1);  result  =  Long.toString(pathIndices[position]  +  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos]    +    1);    result  =  Long.toString(pathIndices[position]  +  1);	  	non-compiled	[CE]  class  expected	49	None	add
619	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos]  +  1);  result  =  Long.toString(pathIndices[p]  +  1);  [CE]  class  expected  [FE]      ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos]  +  1);  result  =  Long.toString(pathIndices[p]  +  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos]    +    1);    result  =  Long.toString(pathIndices[p]  +  1);	  	non-compiled	[CE]  class  expected	49	None	add
620	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  pathSize  -  1]);  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  pathSize  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  pathSize  -  1]);	  result    =    Long.toString(pathIndices[pos    +    1]);    Result    =    Long.toString(pathIndices[pos    +    1]);    	non-compiled	[CE]  'else'  without  'if'	91	None	replace
621	[BUG]  [BUGGY]  result  =  Long.toString(pathNames[pos  +  1]);  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames[pos  +  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames[pos  +  1]);	  result    =    Long.toString(pathIndices[pos    +    1]);    Result    =    Long.toString(pathIndices[pos    +    1]);    	non-compiled	[CE]  'else'  without  'if'	91	None	replace
622	[BUG]  [BUGGY]  result  =  Long.toString(pathNames[pos  -  1]  +  length);  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames[pos  -  1]  +  length);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames[pos  -  1]  +  length);	  result    =    Long.toString(pathNames[pos    -    1]);    	non-compiled	[CE]  'else'  without  'if'	104	None	replace
623	[BUG]  [BUGGY]  result  =  Long.toString(pathNames[pos  -  1]  +  1);  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames[pos  -  1]  +  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames[pos  -  1]  +  1);	  result    =    Long.toString(pathNames[pos    -    1]);    	non-compiled	[CE]  'else'  without  'if'	104	None	replace
624	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  PEEKED_BUFFERED,  PEEKED_LONG);  [CE]  'else'  without  'if'  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  PEEKED_BUFFERED,  PEEKED_LONG);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  PEEKED_BUFFERED,  PEEKED_LONG);	  result    =    Long.toString(buffer,    PEEKED_LONG);    	non-compiled	[CE]  'else'  without  'if'	26	None	replace
625	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  1,  pathNames[pos  +  1]);  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  1,  pathNames[pos  +  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  -  1]  +  1,  pathNames[pos  +  1]);	  result    =    Long.toString(pathIndices[pos    -    1]);    result    =    Long.toString(pathIndices[pos    +    1]);    	non-compiled	[CE]  'else'  without  'if'	142	None	replace
626	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  1]);  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  -  1]  +  1]);	  result    =    Long.toString(pathIndices[pos    -    1]);    result    =    Long.toString(pathIndices[pos    +    1]);    	non-compiled	[CE]  ';'  expected	142	None	replace
627	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  0,  peekedNumberLength).toString();  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  0,  peekedNumberLength).toString();  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  0,  peekedNumberLength).toString();	  result    =    Long.toString(peekedNumberLength);    result    =    Long.toString(peekedNumberLength).toString();    	non-compiled	[CE]  ';'  expected	135	None	replace
628	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  pathIndices,  peekedNumberLength);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  pathIndices,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  pathIndices,  peekedNumberLength);	  result    =    Long.toString(buffer,    pos,    pathIndices);    	non-compiled	[CE]  ';'  expected	67	None	replace
629	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  pathIndices,  len);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  pathIndices,  len);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  pathIndices,  len);	  result    =    Long.toString(buffer,    pos,    pathIndices);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
630	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  pathIndices,  buffer);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  pathIndices,  buffer);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  pathIndices,  buffer);	  result    =    Long.toString(buffer,    pos,    pathIndices);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
631	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  1);  res  =  Long.toString(pathIndices[pos  -  1]  +  1);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  1);  res  =  Long.toString(pathIndices[pos  -  1]  +  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos    -    1]    +    1);    res  =  Long.toString(pathIndices[pos  -  1]  +  1);	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
632	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  0,  pathNames);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  0,  pathNames);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  0,  pathNames);	  result    =    Long.toString(buffer,    keywordNames);    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
633	[BUG]  [BUGGY]  result  =  Long.toString(value);  final  String  buffer  =  new  String(buffer,  pos,  peekedNumberLength);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(value);  final  String  buffer  =  new  String(buffer,  pos,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(value);  final  String  buffer  =  new  String(buffer,  pos,  peekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    result    =    Long.toString(peekedNumberLength);    final    String    buffer    =    new    String(buffer,    pos,    peekedNumberLength);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
634	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos  -  1  +  1);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos  -  1  +  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos  -  1  +  1);	  result    =    Long.toString(buffer,    pos    -    1]);    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
635	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathNames,  p);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathNames,  p);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathNames,  p);	  result    =    Long.toString(buffer,    pathNames);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
636	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  NUMBER_CHAR_LONG);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  NUMBER_CHAR_LONG);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  NUMBER_CHAR_LONG);	  result    =    Long.toString(buffer,    pos,    PEEKED_BUFFER);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
637	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos]  -  1);  result  =  Long.toString(pathIndices[position]  -  1);  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos]  -  1);  result  =  Long.toString(pathIndices[position]  -  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos]    -    1);    result  =  Long.toString(pathIndices[position]  -  1);	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
638	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  2]);  result  =  Long.toString(pathIndices[position  +  2]);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  2]);  result  =  Long.toString(pathIndices[position  +  2]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos    +    2]);    result  =  Long.toString(pathIndices[position  +  2]);	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
639	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  pathSize  -  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  pathSize  -  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  pathSize  -  1);	  result    =    Long.toString(pathIndices[pos    +    1]);    result    =    Long.toString(pathIndices[pos    +    1));    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
640	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1],  pathNames[pos  +  2]);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1],  pathNames[pos  +  2]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  +  1],  pathNames[pos  +  2]);	  result    =    Long.toString(pathIndices[pos    +    1]);    result    =    Long.toString(pathIndices[pos    +    2]);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
641	[BUG]  [BUGGY]  result  =  nextLongValue('/');  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLongValue('/');  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLongValue('/');	  result    =    nextLongValue(''');    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
642	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[stackSize  +  1]);  res  =  Long.toString(pathIndices[stackSize  +  1]);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[stackSize  +  1]);  res  =  Long.toString(pathIndices[stackSize  +  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[stackSize    +    1]);    res  =  Long.toString(pathIndices[stackSize  +  1]);	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
643	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[stackSize  +  1]);  result  =  Long.toString(pathIndices[stackSize  +  1));  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[stackSize  +  1]);  result  =  Long.toString(pathIndices[stackSize  +  1));  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[stackSize    +    1]);    result  =  Long.toString(pathIndices[stackSize  +  1));	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
644	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[stackSize  +  1]);  result  =  Long.toString(pathIndices[stackSize  +  1)];  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[stackSize  +  1]);  result  =  Long.toString(pathIndices[stackSize  +  1)];  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[stackSize    +    1]);    result  =  Long.toString(pathIndices[stackSize  +  1)];	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
645	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[stackSize  +  1]);  results  =  Long.toString(pathIndices[stackSize  +  1]);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[stackSize  +  1]);  results  =  Long.toString(pathIndices[stackSize  +  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[stackSize    +    1]);    results  =  Long.toString(pathIndices[stackSize  +  1]);	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
646	[BUG]  [BUGGY]  result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[p]);  result  =  Long.toString(pathIndices[pos]);  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[p]);  result  =  Long.toString(pathIndices[pos]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(pathIndices[pos]);        result    =    Long.toString(pathIndices[p]);    result  =  Long.toString(pathIndices[pos]);	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
647	[BUG]  [BUGGY]  result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[p]);  result  =  Long.toString(pathIndices[position]);  result  =  Long.toString(pathIndices[p]);  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[p]);  result  =  Long.toString(pathIndices[position]);  result  =  Long.toString(pathIndices[p]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(pathIndices[pos]);        result    =    Long.toString(pathIndices[p]);    result  =  Long.toString(pathIndices[position]);  result  =  Long.toString(pathIndices[p]);	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
648	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  +  ''',  peekedNumberLength);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  +  ''',  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  +  1]  +  ''',  peekedNumberLength);	  result    =    Long.toString(pathIndices[pos    +    1]    +    ''');    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
649	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  &  ''');  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  &  ''');  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  +  1]  &  ''');	  result    =    Long.toString(pathIndices[pos    +    1]    +    ''');    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
650	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  +  ''',  buffer);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  +  ''',  buffer);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  +  1]  +  ''',  buffer);	  result    =    Long.toString(pathIndices[pos    +    1]    +    ''');    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
651	[BUG]  [BUGGY]  result  =  Long.toString(newValue,  peekedNumberLength);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(newValue,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(newValue,  peekedNumberLength);	  result    =    Long.toString(newValue);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
652	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos++]  +  ''');  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos++]  +  ''');  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos++]  +  ''');	  result    =    Long.toString(pathIndices[pos++]);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
653	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos++]  &  0xfff);  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos++]  &  0xfff);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos++]  &  0xfff);	  result    =    Long.toString(pathIndices[pos++]);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
654	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos++]  &  0xffff);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos++]  &  0xffff);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos++]  &  0xffff);	  result    =    Long.toString(pathIndices[pos++]);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
655	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  pathSize);  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  pathSize);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  pathSize);	  result    =    Long.toString(pathIndices);    	non-compiled	[CE]  'else'  without  'if'	25	None	replace
656	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[0],  pathNames[1]);  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[0],  pathNames[1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[0],  pathNames[1]);	  result    =    Long.toString(pathIndices[0]);    	non-compiled	[CE]  'else'  without  'if'	107	None	replace
657	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[0],  pathNames[peekSize  -  1]);  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[0],  pathNames[peekSize  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[0],  pathNames[peekSize  -  1]);	  result    =    Long.toString(pathIndices[0]);    	non-compiled	[CE]  'else'  without  'if'	107	None	replace
658	[BUG]  [BUGGY]  result  =  Long.toString(pathNames[pos  +  1]).toString();  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames[pos  +  1]).toString();  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames[pos  +  1]).toString();	  result    =    Long.toString(pathIndices[pos    +    1]);    result    =    Long.toString(pathIndices[pos    +    1]).toString();    	non-compiled	[CE]  'else'  without  'if'	120	None	replace
659	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]),  pathNames[pos  +  1]).toString();  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]),  pathNames[pos  +  1]).toString();  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  +  1]),  pathNames[pos  +  1]).toString();	  result    =    Long.toString(pathIndices[pos    +    1]);    result    =    Long.toString(pathIndices[pos    +    1]).toString();    	non-compiled	[CE]  'else'  without  'if'	120	None	replace
660	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  pathSize  -  1]).toString();  [CE]  class  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  pathSize  -  1]).toString();  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  pathSize  -  1]).toString();	  result    =    Long.toString(pathIndices[pos    +    1]);    result    =    Long.toString(pathIndices[pos    +    1]).toString();    	non-compiled	[CE]  class  expected	120	None	replace
661	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[0]).toString();  [CE]  class  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[0]).toString();  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[0]).toString();	  result    =    Long.toString(pathIndices[pos    +    1]);    result    =    Long.toString(pathIndices[pos    +    1]).toString();    	non-compiled	[CE]  class  expected	120	None	replace
662	[BUG]  [BUGGY]  result  =  Integer.toString(pathIndices[pos  -  1]  +  16);  [CE]  class  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Integer.toString(pathIndices[pos  -  1]  +  16);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Integer.toString(pathIndices[pos  -  1]  +  16);	  result    =    Integer.toString(pathIndices[pos    -    1]);    	non-compiled	[CE]  class  expected	63	None	replace
663	[BUG]  [BUGGY]  result  =  Long.toString(peek(),  pathIndices);  [CE]  class  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(peek(),  pathIndices);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(peek(),  pathIndices);	  result    =    Long.toString(peek(),    buffer);    	non-compiled	[CE]  class  expected	129	None	replace
664	[BUG]  [BUGGY]  result  =  Long.toString(peek(),  pathNames);  [CE]  class  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(peek(),  pathNames);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(peek(),  pathNames);	  result    =    Long.toString(peek(),    buffer);    	non-compiled	[CE]  class  expected	129	None	replace
665	[BUG]  [BUGGY]  result  =  Long.toString(nextValue(),  buffer);  [CE]  class  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(nextValue(),  buffer);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(nextValue(),  buffer);	  result    =    Long.toString(peek(),    buffer);    	non-compiled	[CE]  class  expected	129	None	replace
666	[BUG]  [BUGGY]  result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[p  -  1]);  result  =  Long.toString(pathIndices[pos  -  1]);  [CE]  class  expected  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[p  -  1]);  result  =  Long.toString(pathIndices[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(pathIndices[pos        -        1]);        result    =    Long.toString(pathIndices[p    -    1]);    result  =  Long.toString(pathIndices[pos  -  1]);	  	non-compiled	[CE]  class  expected	18	None	add
667	[BUG]  [BUGGY]  result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[pos  -  2]);  result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[position  -  2]);  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[pos  -  2]);  result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[position  -  2]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(pathIndices[pos        -        1]);        result    =    Long.toString(pathIndices[pos    -    2]);    result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[position  -  2]);	  	non-compiled	[CE]  'else'  without  'if'	20	None	add
668	[BUG]  [BUGGY]  result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[pos  -  2]);  result  =  Long.toString(pathIndices[pos  -  1]);  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[pos  -  2]);  result  =  Long.toString(pathIndices[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(pathIndices[pos        -        1]);        result    =    Long.toString(pathIndices[pos    -    2]);    result  =  Long.toString(pathIndices[pos  -  1]);	  	non-compiled	[CE]  'else'  without  'if'	20	None	add
669	[BUG]  [BUGGY]  result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[pos  -  2]);  result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[p  -  2]);  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[pos  -  2]);  result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[p  -  2]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(pathIndices[pos        -        1]);        result    =    Long.toString(pathIndices[pos    -    2]);    result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[p  -  2]);	  	non-compiled	[CE]  'else'  without  'if'	20	None	add
670	[BUG]  [BUGGY]  result  =  nextLong(buffer,  pos,  0,  peekedNumberLength);  [CE]  'else'  without  'if'  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(buffer,  pos,  0,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  pos,  0,  peekedNumberLength);	  result    =    nextLong(buffer,    pos,    peekedNumberLength);    	non-compiled	[CE]  'else'  without  'if'	144	None	replace
671	[BUG]  [BUGGY]  result  =  nextLong(buffer,  pos,  0);  [CE]  'else'  without  'if'  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(buffer,  pos,  0);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  pos,  0);	  result    =    nextLong(buffer,    pos,    peekedNumberLength);    	non-compiled	[CE]  'else'  without  'if'	144	None	replace
672	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  ''');  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  ''');  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  -  1]  +  ''');	  result    =    Long.toString(pathIndices[pos    -    1]);    result    =    Long.toString(pathIndices[pos    -    1]);    	non-compiled	[CE]  'else'  without  'if'	16	None	replace
673	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[peekedNumberLength  -  1]);  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[peekedNumberLength  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[peekedNumberLength  -  1]);	  result    =    Long.toString(pathIndices[stackSize    -    1]);    	non-compiled	[CE]  'else'  without  'if'	57	None	replace
674	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[peekSize  -  1]);  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[peekSize  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[peekSize  -  1]);	  result    =    Long.toString(pathIndices[stackSize    -    1]);    	non-compiled	[CE]  'else'  without  'if'	57	None	replace
675	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[nextQuotedValue()  -  1]);  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[nextQuotedValue()  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[nextQuotedValue()  -  1]);	  result    =    Long.toString(pathIndices[stackSize    -    1]);    	non-compiled	[CE]  'else'  without  'if'	57	None	replace
676	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[peekedSize  -  1]);  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[peekedSize  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[peekedSize  -  1]);	  result    =    Long.toString(pathIndices[stackSize    -    1]);    	non-compiled	[CE]  'else'  without  'if'	57	None	replace
677	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[PEEKED_LONG  -  1]);  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[PEEKED_LONG  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[PEEKED_LONG  -  1]);	  result    =    Long.toString(pathIndices[stackSize    -    1]);    	non-compiled	[CE]  'else'  without  'if'	57	None	replace
678	[BUG]  [BUGGY]  result  =  Long.toString(nextQuotedValue());  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(nextQuotedValue());  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(nextQuotedValue());	  result    =    Long.toString(nextValue);    	non-compiled	[CE]  'else'  without  'if'	119	None	replace
679	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  pathNames,  pos);  [CE]  'else'  without  'if'  [FE]                                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  pathNames,  pos);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  pathNames,  pos);	  result    =    Long.toString(pathIndices,    pathNames);    	non-compiled	[CE]  'else'  without  'if'	7	None	replace
680	[BUG]  [BUGGY]  result  =  nextLong(buffer,  peekedNumberLength);  [CE]  'else'  without  'if'  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(buffer,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  peekedNumberLength);	  result    =    nextLong(buffer);    	non-compiled	[CE]  'else'  without  'if'	143	None	replace
681	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  pathNames,  len);  [CE]  'else'  without  'if'  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  pathNames,  len);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  pathNames,  len);	  result    =    Long.toString(buffer,    pos,    pathNames);    	non-compiled	[CE]  'else'  without  'if'	70	None	replace
682	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  pathNames,  buffer.length);  [CE]  'else'  without  'if'  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  pathNames,  buffer.length);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  pathNames,  buffer.length);	  result    =    Long.toString(buffer,    pos,    pathNames);    	non-compiled	[CE]  'else'  without  'if'	70	None	replace
683	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  pathNames,  negative);  [CE]  'else'  without  'if'  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  pathNames,  negative);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  pathNames,  negative);	  result    =    Long.toString(buffer,    pos,    pathNames);    	non-compiled	[CE]  'else'  without  'if'	70	None	replace
684	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  pathIndices[stackSize  -  1]);  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  pathIndices[stackSize  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  pathIndices[stackSize  -  1]);	  result    =    Long.toString(buffer,    pathIndices[pos    -    1]);    	non-compiled	[CE]  'else'  without  'if'	58	None	replace
685	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  p,  pathIndices[pos  -  1]);  [CE]  empty  character  literal  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  p,  pathIndices[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  p,  pathIndices[pos  -  1]);	  result    =    Long.toString(buffer,    pathIndices[pos    -    1]);    	non-compiled	[CE]  empty  character  literal	58	None	replace
686	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos  -  1],  peekedNumberLength);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos  -  1],  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathIndices[pos  -  1],  peekedNumberLength);	  result    =    Long.toString(buffer,    pathIndices[pos    -    1]);    	non-compiled	[CE]  ';'  expected	58	None	replace
687	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  0,  pathIndices[pos  -  1]);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  0,  pathIndices[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  0,  pathIndices[pos  -  1]);	  result    =    Long.toString(buffer,    pathIndices[pos    -    1]);    	non-compiled	[CE]  ';'  expected	58	None	replace
688	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  Long.toString(peerkedNumberLength);  result  =  Long.toString(peekedNumberLength);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  Long.toString(peerkedNumberLength);  result  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);    }    else    if    (p    ==    PEEKED_SINGLE_QUOTED)    {    result  =  Long.toString(peerkedNumberLength);  result  =  Long.toString(peekedNumberLength);	  	non-compiled	[CE]  ';'  expected	80	None	add
689	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  Long.toString(peekedNumberLength);res  =  Long.toString(peekedNumberLength);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  Long.toString(peekedNumberLength);res  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);    }    else    if    (p    ==    PEEKED_SINGLE_QUOTED)    {    result  =  Long.toString(peekedNumberLength);res  =  Long.toString(peekedNumberLength);	  	non-compiled	[CE]  ';'  expected	80	None	add
690	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  PEEKED_LONG,  PEEKED_DOUBLE_QUOTED);  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  PEEKED_LONG,  PEEKED_DOUBLE_QUOTED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  PEEKED_LONG,  PEEKED_DOUBLE_QUOTED);	  result    =    Long.toString(buffer,    PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  ';'  expected	28	None	replace
691	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  PEEKED_BUFFERED,  PEEKED_DOUBLE_QUOTED);  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  PEEKED_BUFFERED,  PEEKED_DOUBLE_QUOTED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  PEEKED_BUFFERED,  PEEKED_DOUBLE_QUOTED);	  result    =    Long.toString(buffer,    PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  ';'  expected	28	None	replace
692	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  position,  PEEKED_DOUBLE_QUOTED);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  position,  PEEKED_DOUBLE_QUOTED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  position,  PEEKED_DOUBLE_QUOTED);	  result    =    Long.toString(buffer,    PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
693	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos++]);  res  =  Long.toString(pathIndices[pos++]);  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos++]);  res  =  Long.toString(pathIndices[pos++]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos++]);    res  =  Long.toString(pathIndices[pos++]);	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
694	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos++]);  result  =  Long.toString(pathIndices[position++]);  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos++]);  result  =  Long.toString(pathIndices[position++]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos++]);    result  =  Long.toString(pathIndices[position++]);	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
695	[BUG]  [BUGGY]  result  =  Long.toString(buffer);  rsultat  =  Long.toString(peekedNumberLength);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer);  rsultat  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer);  rsultat  =  Long.toString(peekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    résultat    =    Long.toString(peekedNumberLength);    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
696	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  -  1,  peekedNumberLength);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  -  1,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  +  1]  -  1,  peekedNumberLength);	  result    =    Long.toString(pathIndices[pos    +    1]    -    1);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
697	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  -  4);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  -  4);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  +  1]  -  4);	  result    =    Long.toString(pathIndices[pos    +    1]    -    1);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
698	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  -  16);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  -  16);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  +  1]  -  16);	  result    =    Long.toString(pathIndices[pos    +    1]    -    1);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
699	[BUG]  [BUGGY]  Result  =  Long.toString(pathIndices[peekedNumber  -  1]);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  Result  =  Long.toString(pathIndices[peekedNumber  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	Result  =  Long.toString(pathIndices[peekedNumber  -  1]);	  Result    =    Long.toString(pathIndices[stackSize    -    1]);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
700	[BUG]  [BUGGY]  Result  =  Long.toString(pathIndices[peekedNumberLength  -  1]);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  Result  =  Long.toString(pathIndices[peekedNumberLength  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	Result  =  Long.toString(pathIndices[peekedNumberLength  -  1]);	  Result    =    Long.toString(pathIndices[stackSize    -    1]);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
701	[BUG]  [BUGGY]  result  =  nextQuotedValue(''');  pos  +=  peekedNumberLength;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextQuotedValue(''');  pos  +=  peekedNumberLength;  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextQuotedValue(''');  pos  +=  peekedNumberLength;	  result    =    Long.toString(peekedNumberLength);    result    =    Long.toString(peekedNumberLength);    }    else    if    (p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  ';'  expected	78	None	replace
702	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos],  lenient);  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos],  lenient);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathIndices[pos],  lenient);	  result    =    Long.toString(buffer,    pathIndices[pos]);    	non-compiled	[CE]  ';'  expected	46	None	replace
703	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  peekedNumberLength,  pathIndices);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  peekedNumberLength,  pathIndices);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  peekedNumberLength,  pathIndices);	  result    =    Long.toString(buffer,    pos,    peekedNumberLength);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
704	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  peekedNumberLength,  pathNames);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  peekedNumberLength,  pathNames);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  peekedNumberLength,  pathNames);	  result    =    Long.toString(buffer,    pos,    peekedNumberLength);    	non-compiled	[CE]  orphaned  case	65	None	replace
705	[BUG]  [BUGGY]  result  =  Long.toString(peekedNumberLength,  pathNames);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(peekedNumberLength,  pathNames);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(peekedNumberLength,  pathNames);	  result    =    Long.toString(pathNames,    peekedNumberLength);    	non-compiled	[CE]  orphaned  case	110	None	replace
706	[BUG]  [BUGGY]  result  =  Integer.toString(pathNames[stackSize  -  1]);  [CE]  orphaned  case  [FE]        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Integer.toString(pathNames[stackSize  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Integer.toString(pathNames[stackSize  -  1]);	  result    =    Integer.toString(pathIndices[stackSize    -    1]);    	non-compiled	[CE]  orphaned  case	139	None	replace
707	[BUG]  [BUGGY]  result  =  Integer.toString(pathIndices[peekedNumberLength  -  1]);  [CE]  orphaned  case  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Integer.toString(pathIndices[peekedNumberLength  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Integer.toString(pathIndices[peekedNumberLength  -  1]);	  result    =    Integer.toString(pathIndices[stackSize    -    1]);    	non-compiled	[CE]  orphaned  case	139	None	replace
708	[BUG]  [BUGGY]  result  =  Integer.toString(pathIndices[PEEKED_LONG  -  1]);  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Integer.toString(pathIndices[PEEKED_LONG  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Integer.toString(pathIndices[PEEKED_LONG  -  1]);	  result    =    Integer.toString(pathIndices[stackSize    -    1]);    	non-compiled	[CE]  orphaned  case	139	None	replace
709	[BUG]  [BUGGY]  result  =  Integer.toString(pathIndices[peek()  -  1]);  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Integer.toString(pathIndices[peek()  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Integer.toString(pathIndices[peek()  -  1]);	  result    =    Integer.toString(pathIndices[stackSize    -    1]);    	non-compiled	[CE]  orphaned  case	139	None	replace
710	[BUG]  [BUGGY]  result  =  Long.toString(peekedNumberLength  -  1);  final  String  buffer  =  new  String(buffer,  pos,  0,  peekedNumberLength);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(peekedNumberLength  -  1);  final  String  buffer  =  new  String(buffer,  pos,  0,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(peekedNumberLength  -  1);  final  String  buffer  =  new  String(buffer,  pos,  0,  peekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    result    =    Long.toString(peekedNumberLength);    final    String    buffer    =    new    String(buffer,    pos,    0,    peekedNumberLength);    	non-compiled	[CE]  orphaned  case	82	None	replace
711	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  0,  peeredString);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  0,  peeredString);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  0,  peeredString);	  result    =    Long.toString(buffer,    peeredString);    	non-compiled	[CE]  orphaned  case	124	None	replace
712	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[peek()  -  1]);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[peek()  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[peek()  -  1]);	  result    =    Long.toString(stackSize);    	non-compiled	[CE]  orphaned  case	141	None	replace
713	[BUG]  [BUGGY]  result  =  Integer.toString(buffer,  0,  peekedNumberLength);  [CE]  orphaned  case  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Integer.toString(buffer,  0,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Integer.toString(buffer,  0,  peekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    result    =    Integer.toString(peekedNumberLength);    	non-compiled	[CE]  orphaned  case	136	None	replace
714	[BUG]  [BUGGY]  result  =  nextUnquotedValue();  result  =  nextUnquotedValue().longValue();  [CE]  orphaned  case  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextUnquotedValue();  result  =  nextUnquotedValue().longValue();  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    nextUnquotedValue();    result  =  nextUnquotedValue().longValue();	  	non-compiled	[CE]  orphaned  case	36	None	add
715	[BUG]  [BUGGY]  result  =  nextUnquotedValue();  results  =  nextUnquotedValue();  [CE]  orphaned  case  [FE]      ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextUnquotedValue();  results  =  nextUnquotedValue();  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    nextUnquotedValue();    results  =  nextUnquotedValue();	  	non-compiled	[CE]  orphaned  case	36	None	add
716	[BUG]  [BUGGY]  result  =  nextUnquotedValue();  result  =  nextUnquotedValue().toString();  [CE]  orphaned  case  [FE]        ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextUnquotedValue();  result  =  nextUnquotedValue().toString();  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    nextUnquotedValue();    result  =  nextUnquotedValue().toString();	  	non-compiled	[CE]  orphaned  case	36	None	add
717	[BUG]  [BUGGY]  result  =  nextUnquotedValue();  result  =  noUnquotedValue();  [CE]  orphaned  case  [FE]          ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextUnquotedValue();  result  =  noUnquotedValue();  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    nextUnquotedValue();    result  =  noUnquotedValue();	  	non-compiled	[CE]  orphaned  case	36	None	add
718	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  stack,  buffer);  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  stack,  buffer);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  stack,  buffer);	  result    =    Long.toString(pathNames,    buffer);    	non-compiled	[CE]  orphaned  case	4	None	replace
719	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  pos,  buffer);  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  pos,  buffer);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  pos,  buffer);	  result    =    Long.toString(pathNames,    buffer);    	non-compiled	[CE]  orphaned  case	4	None	replace
720	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);    }    else    if    (p    ==    PEEKED_SINGLE_QUOTED)    {    result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {	  	non-compiled	[CE]  orphaned  case	80	None	add
721	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  Integer.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  Integer.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);    }    else    if    (p    ==    PEEKED_SINGLE_QUOTED)    {    result  =  Integer.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);	  	non-compiled	[CE]  orphaned  case	80	None	add
722	[BUG]  [BUGGY]  result  =  String.valueOf(buffer,  pos);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  String.valueOf(buffer,  pos);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  String.valueOf(buffer,  pos);	  result    =    Long.toString(buffer,    keyword);    	non-compiled	[CE]  orphaned  case	131	None	replace
723	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  pathSize);  pos  =  Long.toString(pathIndices[pos]);  [CE]  orphaned  case  [FE]        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  pathSize);  pos  =  Long.toString(pathIndices[pos]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  pathSize);  pos  =  Long.toString(pathIndices[pos]);	  result    =    Long.toString(pathIndices[pos]);    pos    =    Long.toString(pathIndices[pos]);    	non-compiled	[CE]  orphaned  case	137	None	replace
724	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos],  buffer);  pos  =  Long.toString(pathIndices[pos]);  [CE]  orphaned  case  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos],  buffer);  pos  =  Long.toString(pathIndices[pos]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos],  buffer);  pos  =  Long.toString(pathIndices[pos]);	  result    =    Long.toString(pathIndices[pos]);    pos    =    Long.toString(pathIndices[pos]);    	non-compiled	[CE]  orphaned  case	137	None	replace
725	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  PEEKED_DOUBLE_QUOTED,  buffer);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  PEEKED_DOUBLE_QUOTED,  buffer);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  PEEKED_DOUBLE_QUOTED,  buffer);	  result    =    Long.toString(buffer,    pos,    PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  orphaned  case	69	None	replace
726	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  PEEKED_DOUBLE_QUOTED,  key);  [CE]  empty  character  literal  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  PEEKED_DOUBLE_QUOTED,  key);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  PEEKED_DOUBLE_QUOTED,  key);	  result    =    Long.toString(buffer,    pos,    PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  empty  character  literal	69	None	replace
727	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos  +  pathIndices);  [CE]  empty  character  literal  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos  +  pathIndices);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos  +  pathIndices);	  result    =    Long.toString(buffer,    pathIndices);    	non-compiled	[CE]  empty  character  literal	53	None	replace
728	[BUG]  [BUGGY]  result  =  Integer.toString(pathIndices[pos  -  1]);  pos  =  Integer.toString(pathIndices[pos  -  1]);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Integer.toString(pathIndices[pos  -  1]);  pos  =  Integer.toString(pathIndices[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Integer.toString(pathIndices[pos    -    1]);    pos  =  Integer.toString(pathIndices[pos  -  1]);	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
729	[BUG]  [BUGGY]  result  =  Integer.toString(pathIndices[pos  -  1]);  result  =  Integer.toString(pathIndices[pos  +  1]);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Integer.toString(pathIndices[pos  -  1]);  result  =  Integer.toString(pathIndices[pos  +  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Integer.toString(pathIndices[pos    -    1]);    result  =  Integer.toString(pathIndices[pos  +  1]);	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
730	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  pathNames[pos  +  1]);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  pathNames[pos  +  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  pathNames[pos  +  1]);	  result    =    Long.toString(pathIndices[pos    +    1]);    Result    =    Long.toString(pathIndices[pos    +    1]);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
731	[BUG]  [BUGGY]  result  =  Integer.toString(buffer,  pos  -  1]);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Integer.toString(buffer,  pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Integer.toString(buffer,  pos  -  1]);	  result    =    Integer.toString(pathIndices[pos    -    1]);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
732	[BUG]  [BUGGY]  result  =  Integer.toString(buffer,  pos  +  1]);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Integer.toString(buffer,  pos  +  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Integer.toString(buffer,  pos  +  1]);	  result    =    Integer.toString(pathIndices[pos    -    1]);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
733	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[stackSize  -  1]);  result  =  Long.toString(pathIndices[stackSize  -  2]);  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[stackSize  -  1]);  result  =  Long.toString(pathIndices[stackSize  -  2]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[stackSize    -    1]);    result  =  Long.toString(pathIndices[stackSize  -  2]);	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
734	[BUG]  [BUGGY]  result  =  Long.toString(peek(),  pos);  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(peek(),  pos);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(peek(),  pos);	  result    =    Long.toString(peek(),    buffer);    	non-compiled	[CE]  orphaned  case	129	None	replace
735	[BUG]  [BUGGY]  result  =  Long.toString(nextInt(),  buffer);  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(nextInt(),  buffer);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(nextInt(),  buffer);	  result    =    Long.toString(peek(),    buffer);    	non-compiled	[CE]  orphaned  case	129	None	replace
736	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos  +  3]);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos  +  3]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathIndices[pos  +  3]);	  result    =    Long.toString(pathIndices[pos    +    3]);    	non-compiled	[CE]  orphaned  case	89	None	replace
737	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  pos  +  3]);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  pos  +  3]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  pos  +  3]);	  result    =    Long.toString(pathIndices[pos    +    3]);    	non-compiled	[CE]  orphaned  case	89	None	replace
738	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos  +  1,  pathIndices[pos  +  1]);  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos  +  1,  pathIndices[pos  +  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos  +  1,  pathIndices[pos  +  1]);	  result    =    Long.toString(buffer,    pathIndices[pos    +    1]);    	non-compiled	[CE]  orphaned  case	88	None	replace
739	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos  +  1]  +  1);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos  +  1]  +  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathIndices[pos  +  1]  +  1);	  result    =    Long.toString(buffer,    pathIndices[pos    +    1]);    	non-compiled	[CE]  orphaned  case	88	None	replace
740	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  -  12);  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  -  12);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  +  1]  -  12);	  result    =    Long.toString(pathIndices[pos    +    1]    -    1);    	non-compiled	[CE]  orphaned  case	87	None	replace
741	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[0],  p);  [CE]  orphaned  case  [FE]        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[0],  p);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[0],  p);	  result    =    Long.toString(pathIndices[0]);    	non-compiled	[CE]  orphaned  case	107	None	replace
742	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  peekedLength  +  1);  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  peekedLength  +  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  peekedLength  +  1);	  result    =    Long.toString(buffer,    pos,    peekedLength);    	non-compiled	[CE]  orphaned  case	117	None	replace
743	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  p);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  p);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  p);	  result    =    Long.toString(buffer,    pos,    peekedLength);    	non-compiled	[CE]  orphaned  case	117	None	replace
744	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  stack,  pathNames);  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  stack,  pathNames);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  stack,  pathNames);	  result    =    Long.toString(pathNames,    buffer);    	non-compiled	[CE]  orphaned  case	4	None	replace
745	[BUG]  [BUGGY]  result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[p]);  pos  =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[p]);  [CE]  orphaned  case  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(pathIndices[pos]);    result  =  Long.toString(pathIndices[p]);  pos  =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[p]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(pathIndices[pos]);        result    =    Long.toString(pathIndices[p]);    pos  =  Long.toString(pathIndices[pos]);  result  =  Long.toString(pathIndices[p]);	  	non-compiled	[CE]  orphaned  case	11	None	add
746	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  stackSize);  [CE]  unclosed  character  literal  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  stackSize);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  stackSize);	  result    =    Long.toString(pathIndices);    	non-compiled	[CE]  unclosed  character  literal	25	None	replace
747	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[stackSize  -  1]);  results  =  Long.toString(pathIndices[pos  -  1]);  [CE]  unclosed  character  literal  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[stackSize  -  1]);  results  =  Long.toString(pathIndices[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[stackSize  -  1]);  results  =  Long.toString(pathIndices[pos  -  1]);	  result    =    Long.toString(pathIndices[pos    -    1]);    results    =    Long.toString(pathIndices[pos    -    1]);    	non-compiled	[CE]  unclosed  character  literal	22	None	replace
748	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[stackSize  -  1]);result  =  Long.toString(pathIndices[pos  -  1]);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[stackSize  -  1]);result  =  Long.toString(pathIndices[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[stackSize  -  1]);result  =  Long.toString(pathIndices[pos  -  1]);	  result    =    Long.toString(pathIndices[pos    -    1]);    results    =    Long.toString(pathIndices[pos    -    1]);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
749	[BUG]  [BUGGY]  result  =  nextLong('   "');  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong('   "');  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong('   "');	  result    =    nextUnquotedValue(''');    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
750	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength;  }  else  if  (p  ==  PEEKED_LONG)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength;  }  else  if  (p  ==  PEEKED_LONG)  {  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);    }    else    if    (p    ==    PEEKED_LONG)    {    result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength;  }  else  if  (p  ==  PEEKED_LONG)  {	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
751	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_LONG)  {  Result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_LONG)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_LONG)  {  Result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_LONG)  {  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);    }    else    if    (p    ==    PEEKED_LONG)    {    Result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_LONG)  {	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
752	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_BIGINT)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_LONG)  {  result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_BIGINT)  {  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);    }    else    if    (p    ==    PEEKED_LONG)    {    result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);  }  else  if  (p  ==  PEEKED_BIGINT)  {	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
753	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  pathIndices[pos  -  1]);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  pathIndices[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  pathIndices[pos  -  1]);	  result    =    Long.toString(peekedString[pos    -    1]);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
754	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  NUMBER_CHAR_EXP_SIGN);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  NUMBER_CHAR_EXP_SIGN);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  NUMBER_CHAR_EXP_SIGN);	  result    =    Long.toString(min_INCOMPLETE_INTEGER);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
755	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos]  -  1);  pos  =  Long.toString(pathIndices[pos]  -  1);  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos]  -  1);  pos  =  Long.toString(pathIndices[pos]  -  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos]    -    1);    pos  =  Long.toString(pathIndices[pos]  -  1);	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
756	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos  +  0,  peekedNumberLength);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos  +  0,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos  +  0,  peekedNumberLength);	  result    =    Long.toString(buffer,    0,    peekedNumberLength);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
757	[BUG]  [BUGGY]  result  =  String.valueOf(buffer,  pos,  peekedNumberLength);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  String.valueOf(buffer,  pos,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  String.valueOf(buffer,  pos,  peekedNumberLength);	  result    =    Long.toString(buffer,    0,    peekedNumberLength);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
758	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos  +=  peekedNumberLength);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos  +=  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos  +=  peekedNumberLength);	  result    =    Long.toString(buffer,    0,    peekedNumberLength);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
759	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos  +  1,  0,  peekedNumberLength);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos  +  1,  0,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos  +  1,  0,  peekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    result    =    Long.toString(peekedNumberLength);    final    String    buffer    =    new    String(buffer,    pos,    0,    peekedNumberLength);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
760	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos],  pathNames[pos]);  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos],  pathNames[pos]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos],  pathNames[pos]);	  result    =    Long.toString(pathIndices[pos]);    results    =    Long.toString(pathIndices[pos]);    	non-compiled	[CE]  orphaned  case	13	None	replace
761	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos],  stack);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos],  stack);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos],  stack);	  result    =    Long.toString(pathIndices[pos]);    results    =    Long.toString(pathIndices[pos]);    	non-compiled	[CE]  orphaned  case	13	None	replace
762	[BUG]  [BUGGY]  result  =  Long.toString(p);  result  =  Long.toString(p);  }  else  {  throw  new  IllegalStateException( "Expected  a  string  but  was   "  +  peek()  +  locationString());  [CE]  orphaned  case  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(p);  result  =  Long.toString(p);  }  else  {  throw  new  IllegalStateException( "Expected  a  string  but  was   "  +  peek()  +  locationString());  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(p);    result  =  Long.toString(p);  }  else  {  throw  new  IllegalStateException( "Expected  a  string  but  was   "  +  peek()  +  locationString());	  	non-compiled	[CE]  orphaned  case	23	None	add
763	[BUG]  [BUGGY]  result  =  Long.toString(p);  result  =  Long.toString(p);  }  else  if(p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  Long.toString(p);  }  [CE]  orphaned  case  [FE]      ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(p);  result  =  Long.toString(p);  }  else  if(p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  Long.toString(p);  }  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(p);    result  =  Long.toString(p);  }  else  if(p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  Long.toString(p);  }	  	non-compiled	[CE]  orphaned  case	23	None	add
764	[BUG]  [BUGGY]  result  =  Long.toString(p);  result  =  Long.toString(p);  }  else  {  throw  new  IllegalStateException( "Expected  a  string  but  was   "  +  peek()  +  locationString());  }  [CE]  orphaned  case  [FE]        ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(p);  result  =  Long.toString(p);  }  else  {  throw  new  IllegalStateException( "Expected  a  string  but  was   "  +  peek()  +  locationString());  }  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(p);    result  =  Long.toString(p);  }  else  {  throw  new  IllegalStateException( "Expected  a  string  but  was   "  +  peek()  +  locationString());  }	  	non-compiled	[CE]  orphaned  case	23	None	add
765	[BUG]  [BUGGY]  result  =  Long.toString(p);  result  =  Long.toString(p);  }  else  {  throw  new  IllegalStateException( "Expected  a  string  but  was  not   "  +  peek()  +  locationString());  [CE]  orphaned  case  [FE]          ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(p);  result  =  Long.toString(p);  }  else  {  throw  new  IllegalStateException( "Expected  a  string  but  was  not   "  +  peek()  +  locationString());  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(p);    result  =  Long.toString(p);  }  else  {  throw  new  IllegalStateException( "Expected  a  string  but  was  not   "  +  peek()  +  locationString());	  	non-compiled	[CE]  orphaned  case	23	None	add
766	[BUG]  [BUGGY]  result  =  Long.toString(p);  result  =  Long.toString(p);  }  else  {  throw  new  IllegalStateException( "Expected  a  string  but  was: "  +  peek()  +  locationString());  [CE]  orphaned  case  [FE]            ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(p);  result  =  Long.toString(p);  }  else  {  throw  new  IllegalStateException( "Expected  a  string  but  was: "  +  peek()  +  locationString());  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(p);    result  =  Long.toString(p);  }  else  {  throw  new  IllegalStateException( "Expected  a  string  but  was: "  +  peek()  +  locationString());	  	non-compiled	[CE]  orphaned  case	23	None	add
767	[BUG]  [BUGGY]  result  =  buffer.toString();  pos  =  Long.toString(peekedNumberLength);  [CE]  orphaned  case  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  buffer.toString();  pos  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  buffer.toString();  pos  =  Long.toString(peekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    pos    =    Long.toString(peekedNumberLength);    	non-compiled	[CE]  orphaned  case	113	None	replace
768	[BUG]  [BUGGY]  result  =  String.valueOf(buffer,  pos);  pos  =  Long.toString(peekedNumberLength);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  String.valueOf(buffer,  pos);  pos  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  String.valueOf(buffer,  pos);  pos  =  Long.toString(peekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    pos    =    Long.toString(peekedNumberLength);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
769	[BUG]  [BUGGY]  result  =  Buffer.toString(buffer,  pos);  pos  =  Long.toString(peekedNumberLength);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Buffer.toString(buffer,  pos);  pos  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Buffer.toString(buffer,  pos);  pos  =  Long.toString(peekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    pos    =    Long.toString(peekedNumberLength);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
770	[BUG]  [BUGGY]  result  =  long.toString();  pos  =  Long.toString(peekedNumberLength);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  long.toString();  pos  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  long.toString();  pos  =  Long.toString(peekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    pos    =    Long.toString(peekedNumberLength);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
771	[BUG]  [BUGGY]  result  =  new  String(buffer,  pos,  PEEKED_LONG);  pos  =  Long.toString(peekedNumberLength);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  new  String(buffer,  pos,  PEEKED_LONG);  pos  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  new  String(buffer,  pos,  PEEKED_LONG);  pos  =  Long.toString(peekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    pos    =    Long.toString(peekedNumberLength);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
772	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);  result  =  Integer.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);  result  =  Integer.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);result    =    Long.toString(peekedNumberLength);    result  =  Integer.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
773	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);  result  =  long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);  result  =  long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);result    =    Long.toString(peekedNumberLength);    result  =  long.toString(peekedNumberLength);  result  =  Long.toString(peekedNumberLength);result  =  Long.toString(peekedNumberLength);	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
774	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  buffer,  peekedString);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  buffer,  peekedString);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  buffer,  peekedString);	  result    =    Long.toString(buffer,    peekedString);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
775	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  len,  peekedString);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  len,  peekedString);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  len,  peekedString);	  result    =    Long.toString(buffer,    peekedString);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
776	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  peekedString,  pathIndices);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  peekedString,  pathIndices);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  peekedString,  pathIndices);	  result    =    Long.toString(buffer,    peekedString);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
777	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos  +  1,  peekedString);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos  +  1,  peekedString);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos  +  1,  peekedString);	  result    =    Long.toString(buffer,    peekedString);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
778	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  1,  pathNames[pos  -  1]);  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  1,  pathNames[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  -  1]  +  1,  pathNames[pos  -  1]);	  result    =    Long.toString(pathIndices[pos    -    1]);    result    =    Long.toString(pathIndices[pos    -    1]);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
779	[BUG]  [BUGGY]  result  =  nextLongValue('L');  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLongValue('L');  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLongValue('L');	  result    =    nextLongValue();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
780	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos],  buf,  pos);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos],  buf,  pos);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos],  buf,  pos);	  result    =    Long.toString(pathIndices[pos]);    Result    =    Long.toString(pathIndices[pos]);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
781	[BUG]  [BUGGY]  result  =  nextLong(nextValue);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(nextValue);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(nextValue);	  result    =    Long.toString(nextValue);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
782	[BUG]  [BUGGY]  result  =  nextLong(value);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(value);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(value);	  result    =    Long.toString(nextValue);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
783	[BUG]  [BUGGY]  result  =  nextUnquotedValue();  pos  +=  PEEKED_LONG;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextUnquotedValue();  pos  +=  PEEKED_LONG;  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextUnquotedValue();  pos  +=  PEEKED_LONG;	  result    =    Long.toString(peekedNumberLength);    result    =    Long.toString(peekedNumberLength);    }    else    if    (p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
784	[BUG]  [BUGGY]  result  =  nextUnquotedValue(''');  pos  +=  peekedNumberLength;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextUnquotedValue(''');  pos  +=  peekedNumberLength;  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextUnquotedValue(''');  pos  +=  peekedNumberLength;	  result    =    Long.toString(peekedNumberLength);    result    =    Long.toString(peekedNumberLength);    }    else    if    (p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
785	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  2]);  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  2]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  -  1]  +  2]);	  result    =    Long.toString(pathIndices[pos    -    1]);    result    =    Long.toString(pathIndices[pos    -    2]);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
786	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos  +  1,  PEEKED_LONG);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos  +  1,  PEEKED_LONG);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos  +  1,  PEEKED_LONG);	  result    =    Long.toString(peekedNumberLength);    result    =    Long.toString(peerkedNumberLength);    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
787	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos  +=  PEEKED_LONG);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos  +=  PEEKED_LONG);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos  +=  PEEKED_LONG);	  result    =    Long.toString(peekedNumberLength);    result    =    Long.toString(peerkedNumberLength);    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
788	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  PEEKED_LONG,  buffer);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  PEEKED_LONG,  buffer);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  PEEKED_LONG,  buffer);	  result    =    Long.toString(buffer,    pos,    PEEKED_LONG);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
789	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[next]);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[next]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[next]);	  result    =    Long.toString(pathIndices[pos]);    result    =    Long.toString(pathIndices[position]);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
790	[BUG]  [BUGGY]  result  =  nextLong(buffer,  pos  +  1);  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(buffer,  pos  +  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  pos  +  1);	  result    =    Long.toString(p);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
791	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  peekedNumberLength,  pathIndices[pos]);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  peekedNumberLength,  pathIndices[pos]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  peekedNumberLength,  pathIndices[pos]);	  result    =    Long.toString(buffer,    pos,    peekedNumberLength);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
792	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  peekedNumberLength,  buffer.length);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  peekedNumberLength,  buffer.length);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  peekedNumberLength,  buffer.length);	  result    =    Long.toString(buffer,    pos,    peekedNumberLength);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
793	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos++]);  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos++]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathIndices[pos++]);	  result    =    Long.toString(pathIndices[pos++]);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
794	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[stackSize++]);  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[stackSize++]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[stackSize++]);	  result    =    Long.toString(pathIndices[pos++]);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
795	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  peeredString);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  peeredString);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  peeredString);	  result    =    Long.toString(buffer,    peeredString);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
796	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos  +  1,  pathIndices.length);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos  +  1,  pathIndices.length);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos  +  1,  pathIndices.length);	  result    =    Long.toString(buffer,    pos    +    1]);    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
797	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  LONG);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  LONG);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  LONG);	  result    =    Long.toString(pathNames,    value);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
798	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  key,  peekedNumberLength);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  key,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  key,  peekedNumberLength);	  result    =    Long.toString(buffer,    pos,    key);    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
799	[BUG]  [BUGGY]  result  =  nextLongValue();  pos  +=  PEEKED_LONG;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLongValue();  pos  +=  PEEKED_LONG;  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLongValue();  pos  +=  PEEKED_LONG;	  result    =    nextLongValue();    pos    +=    peekedNumberLength;    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
800	[BUG]  [BUGGY]  result  =  nextLongValue();  pos  +=  1;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLongValue();  pos  +=  1;  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLongValue();  pos  +=  1;	  result    =    nextLongValue();    pos    +=    peekedNumberLength;    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
801	[BUG]  [BUGGY]  result  =  nextLongValue(':');  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLongValue(':');  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLongValue(':');	  result    =    nextLongValue(''');    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
802	[BUG]  [BUGGY]  outcome  =  Long.toString(peekedNumberLength);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  outcome  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	outcome  =  Long.toString(peekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    result    =    Long.toString(peekedNumberLength);result    =    Long.toString(peekedNumberLength);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
803	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  pathIndices,  p);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  pathIndices,  p);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  pathIndices,  p);	  result    =    Long.toString(pathNames,    pathIndices);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
804	[BUG]  [BUGGY]  result  =  Long.toString(pIndices[pos  -  1]);  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pIndices[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pIndices[pos  -  1]);	  result    =    Long.toString(pathIndices[pos    -    1]);    result    =    Long.toString(pathIndices[p    -    1]);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
805	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathNames,  buffer.length);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathNames,  buffer.length);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathNames,  buffer.length);	  result    =    Long.toString(buffer,    pathNames);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
806	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathNames,  null);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathNames,  null);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathNames,  null);	  result    =    Long.toString(buffer,    pathNames);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
807	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos  -  1]  +  length);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos  -  1]  +  length);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathIndices[pos  -  1]  +  length);	  result    =    Long.toString(pathIndices[pos    -    1]    +    length);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
808	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  SHORT);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  SHORT);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  -  1]  +  SHORT);	  result    =    Long.toString(pathIndices[pos    -    1]    +    length);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
809	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  buf,  length);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  -  1]  +  buf,  length);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  -  1]  +  buf,  length);	  result    =    Long.toString(pathIndices[pos    -    1]    +    length);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
810	[BUG]  [BUGGY]  result  =  peekedString();  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  peekedString();  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  peekedString();	  result    =    nextUnquotedValue();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
811	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  position  -  1,  peekedNumberLength);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  position  -  1,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  position  -  1,  peekedNumberLength);	  result    =    Long.toString(buffer,    position);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
812	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  stack,  pathNames);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  stack,  pathNames);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  stack,  pathNames);	  result    =    Long.toString(pathIndices,    pathNames);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
813	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  pathNames,  null);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  pathNames,  null);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  pathNames,  null);	  result    =    Long.toString(pathIndices,    pathNames);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
814	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  pathSize  -  1]);  pos  =  Long.toString(pathIndices[pos  +  1]);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  pathSize  -  1]);  pos  =  Long.toString(pathIndices[pos  +  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  pathSize  -  1]);  pos  =  Long.toString(pathIndices[pos  +  1]);	  result    =    Long.toString(pathIndices[pos    +    1]);    pos    =    Long.toString(pathIndices[pos    +    1]);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
815	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos  +  1,  peekedNumberLength).toString();  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos  +  1,  peekedNumberLength).toString();  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos  +  1,  peekedNumberLength).toString();	  result    =    Long.toString(peekedNumberLength);    result    =    Long.toString(peekedNumberLength).toString();    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
816	[BUG]  [BUGGY]  result  =  Long.toString(pos).toString();  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pos).toString();  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pos).toString();	  result    =    Long.toString(peekedNumberLength);    result    =    Long.toString(peekedNumberLength).toString();    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
817	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  p);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  p);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  p);	  result    =    Long.toString(pathNames,    PEEKED_LONG);    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
818	[BUG]  [BUGGY]  result  =  nextUnquotedValue();  result  =  nextLongValue();  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextUnquotedValue();  result  =  nextLongValue();  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    nextUnquotedValue();    result  =  nextLongValue();	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
819	[BUG]  [BUGGY]  result  =  Long.toString(pathIndex);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndex);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndex);	  result    =    Long.toString(pEEKED_LONG);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
820	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos  +  pathIndices[pos]);  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos  +  pathIndices[pos]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos  +  pathIndices[pos]);	  result    =    Long.toString(buffer,    pathIndices[pos]);    	non-compiled	[CE]  ';'  expected	46	None	replace
821	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  PEEKED_DOUBLE_QUOTED,  pos);  [CE]  orphaned  case  [FE]        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  PEEKED_DOUBLE_QUOTED,  pos);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  PEEKED_DOUBLE_QUOTED,  pos);	  result    =    Long.toString(buffer,    PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  orphaned  case	28	None	replace
822	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos  +  1,  PEEKED_DOUBLE_QUOTED);  [CE]  orphaned  case  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos  +  1,  PEEKED_DOUBLE_QUOTED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos  +  1,  PEEKED_DOUBLE_QUOTED);	  result    =    Long.toString(buffer,    PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  orphaned  case	28	None	replace
823	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos  +  PEEKED_DOUBLE_QUOTED);  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos  +  PEEKED_DOUBLE_QUOTED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos  +  PEEKED_DOUBLE_QUOTED);	  result    =    Long.toString(buffer,    PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  not  a  statement	28	None	replace
824	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[nextSize  -  1]  +  1);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[nextSize  -  1]  +  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[nextSize  -  1]  +  1);	  result    =    Long.toString(pathIndices[pos    -    1]    +    1);    	non-compiled	[CE]  not  a  statement	61	None	replace
825	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  buffer,  PEEKED_BUFFERED);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  buffer,  PEEKED_BUFFERED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  buffer,  PEEKED_BUFFERED);	  result    =    Long.toString(buffer,    PEEKED_BUFFERED);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
826	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  position,  PEEKED_BUFFERED);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  position,  PEEKED_BUFFERED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  position,  PEEKED_BUFFERED);	  result    =    Long.toString(buffer,    PEEKED_BUFFERED);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
827	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos  +  PEEKED_BUFFERED);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos  +  PEEKED_BUFFERED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos  +  PEEKED_BUFFERED);	  result    =    Long.toString(buffer,    PEEKED_BUFFERED);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
828	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  PEEKED_BUFFERED,  pos);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  PEEKED_BUFFERED,  pos);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  PEEKED_BUFFERED,  pos);	  result    =    Long.toString(buffer,    PEEKED_BUFFERED);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
829	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  2]);  pos  =  Long.toString(pathIndices[pos  +  2]);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  2]);  pos  =  Long.toString(pathIndices[pos  +  2]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos    +    2]);    pos  =  Long.toString(pathIndices[pos  +  2]);	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
830	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  2]);  result  =  Long.toString(pathIndices[p  +  2]);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  2]);  result  =  Long.toString(pathIndices[p  +  2]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos    +    2]);    result  =  Long.toString(pathIndices[p  +  2]);	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
831	[BUG]  [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peerekedNumberLength);  result  =  Long.toString(peekedNumberLength);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peekedNumberLength);  result  =  Long.toString(peerekedNumberLength);  result  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(peekedNumberLength);        result    =    Long.toString(peekedNumberLength);    result  =  Long.toString(peerekedNumberLength);  result  =  Long.toString(peekedNumberLength);	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
832	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathIndices,  negative);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathIndices,  negative);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathIndices,  negative);	  result    =    Long.toString(pathIndices,    negative);    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
833	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  len);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  len);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  len);	  result    =    Long.toString(pathIndices,    negative);    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
834	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathsIndices);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathsIndices);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathsIndices);	  result    =    Long.toString(pathIndices,    buffer);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
835	[BUG]  [BUGGY]  Result  =  Long.toString(buffer,  pathIndices);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  Result  =  Long.toString(buffer,  pathIndices);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	Result  =  Long.toString(buffer,  pathIndices);	  result    =    Long.toString(pathIndices,    buffer);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
836	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[stackSize]  +  1);  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[stackSize]  +  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[stackSize]  +  1);	  result    =    Long.toString(pathIndices[pos]    +    1);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
837	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos]  +  1);  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathIndices[pos]  +  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathIndices[pos]  +  1);	  result    =    Long.toString(pathIndices[pos]    +    1);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
838	[BUG]  [BUGGY]  result  =  Integer.toString(p);  [CE]  orphaned  case  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Integer.toString(p);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Integer.toString(p);	  result    =    Long.toString(peekedNumberLength);    result    =    Integer.toString(peekedNumberLength);    	non-compiled	[CE]  orphaned  case	136	None	replace
839	[BUG]  [BUGGY]  result  =  Integer.toString(pos);  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Integer.toString(pos);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Integer.toString(pos);	  result    =    Long.toString(peekedNumberLength);    result    =    Integer.toString(peekedNumberLength);    	non-compiled	[CE]  orphaned  case	136	None	replace
840	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  LONG);  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  LONG);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  LONG);	  result    =    Long.toString(buffer,    pos,    PEEKED_BUFFER);    	non-compiled	[CE]  orphaned  case	71	None	replace
841	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  JsonToken.VALUE_LONG);  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  JsonToken.VALUE_LONG);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  JsonToken.VALUE_LONG);	  result    =    Long.toString(buffer,    pos,    PEEKED_BUFFER);    	non-compiled	[CE]  orphaned  case	71	None	replace
842	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pathNames[stackSize  -  1]);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pathNames[stackSize  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pathNames[stackSize  -  1]);	  result    =    Long.toString(pathNames,    pathIndices[stackSize    -    1]);    	non-compiled	[CE]  orphaned  case	3	None	replace
843	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  pathIndices[nextSize  -  1]);  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  pathIndices[nextSize  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  pathIndices[nextSize  -  1]);	  result    =    Long.toString(pathNames,    pathIndices[stackSize    -    1]);    	non-compiled	[CE]  orphaned  case	3	None	replace
844	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices,  pos  +  1]);  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices,  pos  +  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices,  pos  +  1]);	  result    =    Long.toString(pathIndices[pos    +    1]);    result    =    Long.toString(pathIndices[position    +    1]);    	non-compiled	[CE]  orphaned  case	122	None	replace
845	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  pathNames,  NUMBER_CHAR_LONG);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  pathNames,  NUMBER_CHAR_LONG);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  pathNames,  NUMBER_CHAR_LONG);	  result    =    Long.toString(buffer,    pos,    pathNames);    	non-compiled	[CE]  orphaned  case	70	None	replace
846	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos);  rsultat  =  Long.toString(peekedNumberLength);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos);  rsultat  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos);  rsultat  =  Long.toString(peekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    résultat    =    Long.toString(peekedNumberLength);    	non-compiled	[CE]  orphaned  case	116	None	replace
847	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos]);  rsultat  =  Long.toString(peekedNumberLength);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos]);  rsultat  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos]);  rsultat  =  Long.toString(peekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    résultat    =    Long.toString(peekedNumberLength);    	non-compiled	[CE]  orphaned  case	116	None	replace
848	[BUG]  [BUGGY]  result  =  Long.toString(pos);  rsultat  =  Long.toString(peekedNumberLength);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pos);  rsultat  =  Long.toString(peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pos);  rsultat  =  Long.toString(peekedNumberLength);	  result    =    Long.toString(peekedNumberLength);    résultat    =    Long.toString(peekedNumberLength);    	non-compiled	[CE]  orphaned  case	116	None	replace
849	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  +  ''',  pathNames[pos  +  1]);  [CE]  orphaned  case  [FE]        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  +  ''',  pathNames[pos  +  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  +  1]  +  ''',  pathNames[pos  +  1]);	  result    =    Long.toString(pathIndices[pos    +    1]    +    ''');    	non-compiled	[CE]  orphaned  case	99	None	replace
850	[BUG]  [BUGGY]  result  =  nextUnquotedValue('   "');  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextUnquotedValue('   "');  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextUnquotedValue('   "');	  result    =    Long.toString(peekedNumberLength);    result    =    Long.toString(peekedNumberLength);    }    else    if    (p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  orphaned  case	81	None	replace
851	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[stackSize  +  1]);  result  =  Integer.toString(pathIndices[stackSize  +  1]);  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[stackSize  +  1]);  result  =  Integer.toString(pathIndices[stackSize  +  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[stackSize    +    1]);    result  =  Integer.toString(pathIndices[stackSize  +  1]);	  	non-compiled	[CE]  orphaned  case	83	None	add
852	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  pathIndices,  buffer.length);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  pathIndices,  buffer.length);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  pathIndices,  buffer.length);	  result    =    Long.toString(buffer,    pos,    pathIndices);    	non-compiled	[CE]  orphaned  case	67	None	replace
853	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos,  pathIndices,  stack);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos,  pathIndices,  stack);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos,  pathIndices,  stack);	  result    =    Long.toString(buffer,    pos,    pathIndices);    	non-compiled	[CE]  orphaned  case	67	None	replace
854	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  -  buffer,  pos);  [CE]  orphaned  case  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  -  buffer,  pos);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  +  1]  -  buffer,  pos);	  result    =    Long.toString(pathIndices[pos    +    1]    -    buffer);    	non-compiled	[CE]  orphaned  case	100	None	replace
855	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  -  buffer,  p);  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  -  buffer,  p);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  +  1]  -  buffer,  p);	  result    =    Long.toString(pathIndices[pos    +    1]    -    buffer);    	non-compiled	[CE]  orphaned  case	100	None	replace
856	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  -  buffer,  pathSize);  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  -  buffer,  pathSize);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  +  1]  -  buffer,  pathSize);	  result    =    Long.toString(pathIndices[pos    +    1]    -    buffer);    	non-compiled	[CE]  orphaned  case	100	None	replace
857	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  -  PEEKED_LONG);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]  -  PEEKED_LONG);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathIndices[pos  +  1]  -  PEEKED_LONG);	  result    =    Long.toString(pathIndices[pos    +    1]    -    buffer);    	non-compiled	[CE]  orphaned  case	100	None	replace
858	[BUG]  [BUGGY]  result  =  nextLong(buffer,  pos,  PEEKED_LONG,  peekedString);  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(buffer,  pos,  PEEKED_LONG,  peekedString);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  pos,  PEEKED_LONG,  peekedString);	  result    =    nextLong(buffer,    pos,    PEEKED_LONG);    	non-compiled	[CE]  orphaned  case	39	None	replace
859	[BUG]  [BUGGY]  result  =  nextLong(buffer,  pos,  PEEKED_LONG,  buffer);  [CE]  orphaned  case  [FE]                                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(buffer,  pos,  PEEKED_LONG,  buffer);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  pos,  PEEKED_LONG,  buffer);	  result    =    nextLong(buffer,    pos,    PEEKED_LONG);    	non-compiled	[CE]  orphaned  case	39	None	replace
860	[BUG]  [BUGGY]  result  =  nextLong(buffer,  pos,  PEEKED_LONG,  PEEKED_BUFFERED);  [CE]  orphaned  case  [FE]                                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(buffer,  pos,  PEEKED_LONG,  PEEKED_BUFFERED);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  pos,  PEEKED_LONG,  PEEKED_BUFFERED);	  result    =    nextLong(buffer,    pos,    PEEKED_LONG);    	non-compiled	[CE]  orphaned  case	39	None	replace
861	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos  -  1,  peekedNumberLength);  [CE]  orphaned  case  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos  -  1,  peekedNumberLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos  -  1,  peekedNumberLength);	  result    =    Long.toString(buffer,    pos    -    1]);    	non-compiled	[CE]  orphaned  case	140	None	replace
862	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos  -  1,  pathIndices.length);  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos  -  1,  pathIndices.length);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos  -  1,  pathIndices.length);	  result    =    Long.toString(buffer,    pos    -    1]);    	non-compiled	[CE]  orphaned  case	140	None	replace
863	[BUG]  [BUGGY]  result  =  nextLong(buffer,  pos,  p);  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(buffer,  pos,  p);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  pos,  p);	  result    =    nextLong(buffer,    pos,    peekedNumberLength);    	non-compiled	[CE]  orphaned  case	144	None	replace
864	[BUG]  [BUGGY]  result  =  nextLong(pathIndices[stackSize  -  1]);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(pathIndices[stackSize  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(pathIndices[stackSize  -  1]);	  result    =    Long.toString(stackSize);    	non-compiled	[CE]  orphaned  case	141	None	replace
865	[BUG]  [BUGGY]  result  =  nextLong(pathIndices,  pathSize  -  1);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(pathIndices,  pathSize  -  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(pathIndices,  pathSize  -  1);	  result    =    Long.toString(stackSize);    	non-compiled	[CE]  orphaned  case	141	None	replace
866	[BUG]  [BUGGY]  result  =  nextLong(pathIndices,  pos);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(pathIndices,  pos);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(pathIndices,  pos);	  result    =    Long.toString(stackSize);    	non-compiled	[CE]  orphaned  case	141	None	replace
867	[BUG]  [BUGGY]  result  =  nextLong(pathIndices,  pathSize);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(pathIndices,  pathSize);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(pathIndices,  pathSize);	  result    =    Long.toString(stackSize);    	non-compiled	[CE]  orphaned  case	141	None	replace
868	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  PEEKED_LONG,  pos);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  PEEKED_LONG,  pos);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  PEEKED_LONG,  pos);	  result    =    Long.toString(buffer,    PEEKED_LONG);    	non-compiled	[CE]  orphaned  case	26	None	replace
869	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos  +  PEEKED_LONG);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos  +  PEEKED_LONG);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos  +  PEEKED_LONG);	  result    =    Long.toString(buffer,    PEEKED_LONG);    	non-compiled	[CE]  orphaned  case	26	None	replace
870	[BUG]  [BUGGY]  result  =  nextLong(pathIndices[pos]);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(pathIndices[pos]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(pathIndices[pos]);	  result    =    nextLong(buffer);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
871	[BUG]  [BUGGY]  result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[p  -  1]);  result  =  Long.toString(pathIndices[pos  -  2]);  result  =  Long.toString(pathIndices[p  -  1]);  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[p  -  1]);  result  =  Long.toString(pathIndices[pos  -  2]);  result  =  Long.toString(pathIndices[p  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(pathIndices[pos        -        1]);        result    =    Long.toString(pathIndices[p    -    1]);    result  =  Long.toString(pathIndices[pos  -  2]);  result  =  Long.toString(pathIndices[p  -  1]);	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
872	[BUG]  [BUGGY]  result  =  nextLong(buffer,  pos  +  1,  PEEKED_LONG);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(buffer,  pos  +  1,  PEEKED_LONG);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  pos  +  1,  PEEKED_LONG);	  result    =    nextLong(buffer,    pos    +    1,    peekedNumberLength);    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
873	[BUG]  [BUGGY]  result  =  nextLong(buffer,  pos  +  1,  peekedNumberCharLength);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextLong(buffer,  pos  +  1,  peekedNumberCharLength);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextLong(buffer,  pos  +  1,  peekedNumberCharLength);	  result    =    nextLong(buffer,    pos    +    1,    peekedNumberLength);    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
874	[BUG]  [BUGGY]  result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  -  2]);  result  =  Long.toString(pathIndices[pos  -  1]);  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  -  2]);  result  =  Long.toString(pathIndices[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(pathIndices[pos        -        1]);        result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[pos  -  2]);  result  =  Long.toString(pathIndices[pos  -  1]);	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
875	[BUG]  [BUGGY]  result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[position  -  1]);  result  =  Long.toString(pathIndices[pos  -  1]);  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[position  -  1]);  result  =  Long.toString(pathIndices[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(pathIndices[pos        -        1]);        result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[position  -  1]);  result  =  Long.toString(pathIndices[pos  -  1]);	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
876	[BUG]  [BUGGY]  result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[pos  -  1]);  result  =  long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  -  1]);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result    =    Long.toString(pathIndices[pos    -    1]);    result  =  Long.toString(pathIndices[pos  -  1]);  result  =  long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result        =        Long.toString(pathIndices[pos        -        1]);        result    =    Long.toString(pathIndices[pos    -    1]);    result  =  long.toString(pathIndices[pos  -  1]);  result  =  Long.toString(pathIndices[pos  -  1]);	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
877	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  peeredString);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  peeredString);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  peeredString);	  result    =    Long.toString(peekedString,    pathNames);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
878	[BUG]  [BUGGY]  result  =  nextQuotedValue('L');  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  nextQuotedValue('L');  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  nextQuotedValue('L');	  result    =    nextQuotedValue();    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
879	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos  +  pathIndices[pos  -  1]);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  pos  +  pathIndices[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  pos  +  pathIndices[pos  -  1]);	  result    =    Long.toString(buffer,    pathIndices[pos    -    1]);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
880	[BUG]  [BUGGY]  Result  =  Long.toString(buffer,  pos,  pathIndices[pos  -  1]);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  Result  =  Long.toString(buffer,  pos,  pathIndices[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	Result  =  Long.toString(buffer,  pos,  pathIndices[pos  -  1]);	  result    =    Long.toString(buffer,    pathIndices[pos    -    1]);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
881	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  str,  pathIndices[pos  -  1]);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(buffer,  str,  pathIndices[pos  -  1]);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(buffer,  str,  pathIndices[pos  -  1]);	  result    =    Long.toString(buffer,    pathIndices[pos    -    1]);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
882	[BUG]  [BUGGY]  result  =  Long.toString(peek(),  keywordNames);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(peek(),  keywordNames);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(peek(),  keywordNames);	  result    =    Long.toString(buffer,    keywordNames);    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
883	[BUG]  [BUGGY]  result  =  Long.toString(pathNames,  stack.length);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathNames,  stack.length);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.toString(pathNames,  stack.length);	  result    =    Long.toString(pathNames,    stack);    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
884	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos]  +  1);  pos  =  Long.toString(pathIndices[pos]  +  1);  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.toString(pathIndices[pos]  +  1);  pos  =  Long.toString(pathIndices[pos]  +  1);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result    =    Long.toString(pathIndices[pos]    +    1);    pos  =  Long.toString(pathIndices[pos]  +  1);	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
885	[BUG]  [BUGGY]  result  =  Long.parseLong(buffer);  [CE]  orphaned  case  [FE]    ComparisonFailure    [CONTEXT]      if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;  }  else  if  (p  ==  PEEKED_LONG)  {      [BUGGY]  result  =  Long.parseLong(buffer);  [BUGGY]      }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	1.0	820	820	1	replace	result  =  Long.parseLong(buffer);	  result    =    Long.toString(pos);    	non-compiled	[CE]  orphaned  case	30	None	replace
